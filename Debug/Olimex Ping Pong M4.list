
Olimex Ping Pong M4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c22c  08000138  08000138  00010138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000054c  0800c364  0800c364  0001c364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c8b0  0800c8b0  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  0800c8b0  0800c8b0  0001c8b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c8b8  0800c8b8  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c8b8  0800c8b8  0001c8b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c8bc  0800c8bc  0001c8bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  0800c8c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000888  2000001c  0800c8dc  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000a04  200008a4  0800c8dc  000208a4  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020046  2**0
                  CONTENTS, READONLY
 13 .debug_info   00021c57  00000000  00000000  00020089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005c4b  00000000  00000000  00041ce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001f28  00000000  00000000  00047930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001761  00000000  00000000  00049858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000231ae  00000000  00000000  0004afb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00025a3a  00000000  00000000  0006e167  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c3d0d  00000000  00000000  00093ba1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007e3c  00000000  00000000  001578b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  0015f6ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	2000001c 	.word	0x2000001c
 8000154:	00000000 	.word	0x00000000
 8000158:	0800c34c 	.word	0x0800c34c

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	20000020 	.word	0x20000020
 8000174:	0800c34c 	.word	0x0800c34c

08000178 <strlen>:
 8000178:	4603      	mov	r3, r0
 800017a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800017e:	2a00      	cmp	r2, #0
 8000180:	d1fb      	bne.n	800017a <strlen+0x2>
 8000182:	1a18      	subs	r0, r3, r0
 8000184:	3801      	subs	r0, #1
 8000186:	4770      	bx	lr

08000188 <__aeabi_uldivmod>:
 8000188:	b953      	cbnz	r3, 80001a0 <__aeabi_uldivmod+0x18>
 800018a:	b94a      	cbnz	r2, 80001a0 <__aeabi_uldivmod+0x18>
 800018c:	2900      	cmp	r1, #0
 800018e:	bf08      	it	eq
 8000190:	2800      	cmpeq	r0, #0
 8000192:	bf1c      	itt	ne
 8000194:	f04f 31ff 	movne.w	r1, #4294967295
 8000198:	f04f 30ff 	movne.w	r0, #4294967295
 800019c:	f000 b970 	b.w	8000480 <__aeabi_idiv0>
 80001a0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001a4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001a8:	f000 f806 	bl	80001b8 <__udivmoddi4>
 80001ac:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001b4:	b004      	add	sp, #16
 80001b6:	4770      	bx	lr

080001b8 <__udivmoddi4>:
 80001b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001bc:	9e08      	ldr	r6, [sp, #32]
 80001be:	460d      	mov	r5, r1
 80001c0:	4604      	mov	r4, r0
 80001c2:	460f      	mov	r7, r1
 80001c4:	2b00      	cmp	r3, #0
 80001c6:	d14a      	bne.n	800025e <__udivmoddi4+0xa6>
 80001c8:	428a      	cmp	r2, r1
 80001ca:	4694      	mov	ip, r2
 80001cc:	d965      	bls.n	800029a <__udivmoddi4+0xe2>
 80001ce:	fab2 f382 	clz	r3, r2
 80001d2:	b143      	cbz	r3, 80001e6 <__udivmoddi4+0x2e>
 80001d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80001d8:	f1c3 0220 	rsb	r2, r3, #32
 80001dc:	409f      	lsls	r7, r3
 80001de:	fa20 f202 	lsr.w	r2, r0, r2
 80001e2:	4317      	orrs	r7, r2
 80001e4:	409c      	lsls	r4, r3
 80001e6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80001ea:	fa1f f58c 	uxth.w	r5, ip
 80001ee:	fbb7 f1fe 	udiv	r1, r7, lr
 80001f2:	0c22      	lsrs	r2, r4, #16
 80001f4:	fb0e 7711 	mls	r7, lr, r1, r7
 80001f8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80001fc:	fb01 f005 	mul.w	r0, r1, r5
 8000200:	4290      	cmp	r0, r2
 8000202:	d90a      	bls.n	800021a <__udivmoddi4+0x62>
 8000204:	eb1c 0202 	adds.w	r2, ip, r2
 8000208:	f101 37ff 	add.w	r7, r1, #4294967295
 800020c:	f080 811b 	bcs.w	8000446 <__udivmoddi4+0x28e>
 8000210:	4290      	cmp	r0, r2
 8000212:	f240 8118 	bls.w	8000446 <__udivmoddi4+0x28e>
 8000216:	3902      	subs	r1, #2
 8000218:	4462      	add	r2, ip
 800021a:	1a12      	subs	r2, r2, r0
 800021c:	b2a4      	uxth	r4, r4
 800021e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000222:	fb0e 2210 	mls	r2, lr, r0, r2
 8000226:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800022a:	fb00 f505 	mul.w	r5, r0, r5
 800022e:	42a5      	cmp	r5, r4
 8000230:	d90a      	bls.n	8000248 <__udivmoddi4+0x90>
 8000232:	eb1c 0404 	adds.w	r4, ip, r4
 8000236:	f100 32ff 	add.w	r2, r0, #4294967295
 800023a:	f080 8106 	bcs.w	800044a <__udivmoddi4+0x292>
 800023e:	42a5      	cmp	r5, r4
 8000240:	f240 8103 	bls.w	800044a <__udivmoddi4+0x292>
 8000244:	4464      	add	r4, ip
 8000246:	3802      	subs	r0, #2
 8000248:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800024c:	1b64      	subs	r4, r4, r5
 800024e:	2100      	movs	r1, #0
 8000250:	b11e      	cbz	r6, 800025a <__udivmoddi4+0xa2>
 8000252:	40dc      	lsrs	r4, r3
 8000254:	2300      	movs	r3, #0
 8000256:	e9c6 4300 	strd	r4, r3, [r6]
 800025a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800025e:	428b      	cmp	r3, r1
 8000260:	d908      	bls.n	8000274 <__udivmoddi4+0xbc>
 8000262:	2e00      	cmp	r6, #0
 8000264:	f000 80ec 	beq.w	8000440 <__udivmoddi4+0x288>
 8000268:	2100      	movs	r1, #0
 800026a:	e9c6 0500 	strd	r0, r5, [r6]
 800026e:	4608      	mov	r0, r1
 8000270:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000274:	fab3 f183 	clz	r1, r3
 8000278:	2900      	cmp	r1, #0
 800027a:	d149      	bne.n	8000310 <__udivmoddi4+0x158>
 800027c:	42ab      	cmp	r3, r5
 800027e:	d302      	bcc.n	8000286 <__udivmoddi4+0xce>
 8000280:	4282      	cmp	r2, r0
 8000282:	f200 80f7 	bhi.w	8000474 <__udivmoddi4+0x2bc>
 8000286:	1a84      	subs	r4, r0, r2
 8000288:	eb65 0203 	sbc.w	r2, r5, r3
 800028c:	2001      	movs	r0, #1
 800028e:	4617      	mov	r7, r2
 8000290:	2e00      	cmp	r6, #0
 8000292:	d0e2      	beq.n	800025a <__udivmoddi4+0xa2>
 8000294:	e9c6 4700 	strd	r4, r7, [r6]
 8000298:	e7df      	b.n	800025a <__udivmoddi4+0xa2>
 800029a:	b902      	cbnz	r2, 800029e <__udivmoddi4+0xe6>
 800029c:	deff      	udf	#255	; 0xff
 800029e:	fab2 f382 	clz	r3, r2
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	f040 808f 	bne.w	80003c6 <__udivmoddi4+0x20e>
 80002a8:	1a8a      	subs	r2, r1, r2
 80002aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ae:	fa1f fe8c 	uxth.w	lr, ip
 80002b2:	2101      	movs	r1, #1
 80002b4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002b8:	fb07 2015 	mls	r0, r7, r5, r2
 80002bc:	0c22      	lsrs	r2, r4, #16
 80002be:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80002c2:	fb0e f005 	mul.w	r0, lr, r5
 80002c6:	4290      	cmp	r0, r2
 80002c8:	d908      	bls.n	80002dc <__udivmoddi4+0x124>
 80002ca:	eb1c 0202 	adds.w	r2, ip, r2
 80002ce:	f105 38ff 	add.w	r8, r5, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0x122>
 80002d4:	4290      	cmp	r0, r2
 80002d6:	f200 80ca 	bhi.w	800046e <__udivmoddi4+0x2b6>
 80002da:	4645      	mov	r5, r8
 80002dc:	1a12      	subs	r2, r2, r0
 80002de:	b2a4      	uxth	r4, r4
 80002e0:	fbb2 f0f7 	udiv	r0, r2, r7
 80002e4:	fb07 2210 	mls	r2, r7, r0, r2
 80002e8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ec:	fb0e fe00 	mul.w	lr, lr, r0
 80002f0:	45a6      	cmp	lr, r4
 80002f2:	d908      	bls.n	8000306 <__udivmoddi4+0x14e>
 80002f4:	eb1c 0404 	adds.w	r4, ip, r4
 80002f8:	f100 32ff 	add.w	r2, r0, #4294967295
 80002fc:	d202      	bcs.n	8000304 <__udivmoddi4+0x14c>
 80002fe:	45a6      	cmp	lr, r4
 8000300:	f200 80ba 	bhi.w	8000478 <__udivmoddi4+0x2c0>
 8000304:	4610      	mov	r0, r2
 8000306:	eba4 040e 	sub.w	r4, r4, lr
 800030a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800030e:	e79f      	b.n	8000250 <__udivmoddi4+0x98>
 8000310:	f1c1 0720 	rsb	r7, r1, #32
 8000314:	408b      	lsls	r3, r1
 8000316:	fa22 fc07 	lsr.w	ip, r2, r7
 800031a:	ea4c 0c03 	orr.w	ip, ip, r3
 800031e:	fa05 f401 	lsl.w	r4, r5, r1
 8000322:	fa20 f307 	lsr.w	r3, r0, r7
 8000326:	40fd      	lsrs	r5, r7
 8000328:	4323      	orrs	r3, r4
 800032a:	fa00 f901 	lsl.w	r9, r0, r1
 800032e:	ea4f 401c 	mov.w	r0, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	fbb5 f8f0 	udiv	r8, r5, r0
 800033a:	0c1c      	lsrs	r4, r3, #16
 800033c:	fb00 5518 	mls	r5, r0, r8, r5
 8000340:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000344:	fb08 f50e 	mul.w	r5, r8, lr
 8000348:	42a5      	cmp	r5, r4
 800034a:	fa02 f201 	lsl.w	r2, r2, r1
 800034e:	d90b      	bls.n	8000368 <__udivmoddi4+0x1b0>
 8000350:	eb1c 0404 	adds.w	r4, ip, r4
 8000354:	f108 3aff 	add.w	sl, r8, #4294967295
 8000358:	f080 8087 	bcs.w	800046a <__udivmoddi4+0x2b2>
 800035c:	42a5      	cmp	r5, r4
 800035e:	f240 8084 	bls.w	800046a <__udivmoddi4+0x2b2>
 8000362:	f1a8 0802 	sub.w	r8, r8, #2
 8000366:	4464      	add	r4, ip
 8000368:	1b64      	subs	r4, r4, r5
 800036a:	b29d      	uxth	r5, r3
 800036c:	fbb4 f3f0 	udiv	r3, r4, r0
 8000370:	fb00 4413 	mls	r4, r0, r3, r4
 8000374:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000378:	fb03 fe0e 	mul.w	lr, r3, lr
 800037c:	45a6      	cmp	lr, r4
 800037e:	d908      	bls.n	8000392 <__udivmoddi4+0x1da>
 8000380:	eb1c 0404 	adds.w	r4, ip, r4
 8000384:	f103 30ff 	add.w	r0, r3, #4294967295
 8000388:	d26b      	bcs.n	8000462 <__udivmoddi4+0x2aa>
 800038a:	45a6      	cmp	lr, r4
 800038c:	d969      	bls.n	8000462 <__udivmoddi4+0x2aa>
 800038e:	3b02      	subs	r3, #2
 8000390:	4464      	add	r4, ip
 8000392:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000396:	fba0 8302 	umull	r8, r3, r0, r2
 800039a:	eba4 040e 	sub.w	r4, r4, lr
 800039e:	429c      	cmp	r4, r3
 80003a0:	46c6      	mov	lr, r8
 80003a2:	461d      	mov	r5, r3
 80003a4:	d355      	bcc.n	8000452 <__udivmoddi4+0x29a>
 80003a6:	d052      	beq.n	800044e <__udivmoddi4+0x296>
 80003a8:	b156      	cbz	r6, 80003c0 <__udivmoddi4+0x208>
 80003aa:	ebb9 030e 	subs.w	r3, r9, lr
 80003ae:	eb64 0405 	sbc.w	r4, r4, r5
 80003b2:	fa04 f707 	lsl.w	r7, r4, r7
 80003b6:	40cb      	lsrs	r3, r1
 80003b8:	40cc      	lsrs	r4, r1
 80003ba:	431f      	orrs	r7, r3
 80003bc:	e9c6 7400 	strd	r7, r4, [r6]
 80003c0:	2100      	movs	r1, #0
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	f1c3 0120 	rsb	r1, r3, #32
 80003ca:	fa02 fc03 	lsl.w	ip, r2, r3
 80003ce:	fa20 f201 	lsr.w	r2, r0, r1
 80003d2:	fa25 f101 	lsr.w	r1, r5, r1
 80003d6:	409d      	lsls	r5, r3
 80003d8:	432a      	orrs	r2, r5
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e6:	fb07 1510 	mls	r5, r7, r0, r1
 80003ea:	0c11      	lsrs	r1, r2, #16
 80003ec:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80003f0:	fb00 f50e 	mul.w	r5, r0, lr
 80003f4:	428d      	cmp	r5, r1
 80003f6:	fa04 f403 	lsl.w	r4, r4, r3
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x256>
 80003fc:	eb1c 0101 	adds.w	r1, ip, r1
 8000400:	f100 38ff 	add.w	r8, r0, #4294967295
 8000404:	d22f      	bcs.n	8000466 <__udivmoddi4+0x2ae>
 8000406:	428d      	cmp	r5, r1
 8000408:	d92d      	bls.n	8000466 <__udivmoddi4+0x2ae>
 800040a:	3802      	subs	r0, #2
 800040c:	4461      	add	r1, ip
 800040e:	1b49      	subs	r1, r1, r5
 8000410:	b292      	uxth	r2, r2
 8000412:	fbb1 f5f7 	udiv	r5, r1, r7
 8000416:	fb07 1115 	mls	r1, r7, r5, r1
 800041a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800041e:	fb05 f10e 	mul.w	r1, r5, lr
 8000422:	4291      	cmp	r1, r2
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x280>
 8000426:	eb1c 0202 	adds.w	r2, ip, r2
 800042a:	f105 38ff 	add.w	r8, r5, #4294967295
 800042e:	d216      	bcs.n	800045e <__udivmoddi4+0x2a6>
 8000430:	4291      	cmp	r1, r2
 8000432:	d914      	bls.n	800045e <__udivmoddi4+0x2a6>
 8000434:	3d02      	subs	r5, #2
 8000436:	4462      	add	r2, ip
 8000438:	1a52      	subs	r2, r2, r1
 800043a:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800043e:	e739      	b.n	80002b4 <__udivmoddi4+0xfc>
 8000440:	4631      	mov	r1, r6
 8000442:	4630      	mov	r0, r6
 8000444:	e709      	b.n	800025a <__udivmoddi4+0xa2>
 8000446:	4639      	mov	r1, r7
 8000448:	e6e7      	b.n	800021a <__udivmoddi4+0x62>
 800044a:	4610      	mov	r0, r2
 800044c:	e6fc      	b.n	8000248 <__udivmoddi4+0x90>
 800044e:	45c1      	cmp	r9, r8
 8000450:	d2aa      	bcs.n	80003a8 <__udivmoddi4+0x1f0>
 8000452:	ebb8 0e02 	subs.w	lr, r8, r2
 8000456:	eb63 050c 	sbc.w	r5, r3, ip
 800045a:	3801      	subs	r0, #1
 800045c:	e7a4      	b.n	80003a8 <__udivmoddi4+0x1f0>
 800045e:	4645      	mov	r5, r8
 8000460:	e7ea      	b.n	8000438 <__udivmoddi4+0x280>
 8000462:	4603      	mov	r3, r0
 8000464:	e795      	b.n	8000392 <__udivmoddi4+0x1da>
 8000466:	4640      	mov	r0, r8
 8000468:	e7d1      	b.n	800040e <__udivmoddi4+0x256>
 800046a:	46d0      	mov	r8, sl
 800046c:	e77c      	b.n	8000368 <__udivmoddi4+0x1b0>
 800046e:	3d02      	subs	r5, #2
 8000470:	4462      	add	r2, ip
 8000472:	e733      	b.n	80002dc <__udivmoddi4+0x124>
 8000474:	4608      	mov	r0, r1
 8000476:	e70b      	b.n	8000290 <__udivmoddi4+0xd8>
 8000478:	4464      	add	r4, ip
 800047a:	3802      	subs	r0, #2
 800047c:	e743      	b.n	8000306 <__udivmoddi4+0x14e>
 800047e:	bf00      	nop

08000480 <__aeabi_idiv0>:
 8000480:	4770      	bx	lr
 8000482:	bf00      	nop

08000484 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_DMAMUX1
  *         @arg @ref LL_AHB1_GRP1_PERIPH_CRC
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000484:	b480      	push	{r7}
 8000486:	b085      	sub	sp, #20
 8000488:	af00      	add	r7, sp, #0
 800048a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 800048c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000490:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000492:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	4313      	orrs	r3, r2
 800049a:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800049c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004a0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	4013      	ands	r3, r2
 80004a6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004a8:	68fb      	ldr	r3, [r7, #12]
}
 80004aa:	bf00      	nop
 80004ac:	3714      	adds	r7, #20
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bc80      	pop	{r7}
 80004b2:	4770      	bx	lr

080004b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80004b8:	2004      	movs	r0, #4
 80004ba:	f7ff ffe3 	bl	8000484 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004be:	2001      	movs	r0, #1
 80004c0:	f7ff ffe0 	bl	8000484 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 2, 0);
 80004c4:	2200      	movs	r2, #0
 80004c6:	2102      	movs	r1, #2
 80004c8:	200f      	movs	r0, #15
 80004ca:	f001 f9c0 	bl	800184e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80004ce:	200f      	movs	r0, #15
 80004d0:	f001 f9d7 	bl	8001882 <HAL_NVIC_EnableIRQ>

}
 80004d4:	bf00      	nop
 80004d6:	bd80      	pop	{r7, pc}

080004d8 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80004d8:	b480      	push	{r7}
 80004da:	b085      	sub	sp, #20
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80004e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004e4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	4313      	orrs	r3, r2
 80004ee:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80004f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	4013      	ands	r3, r2
 80004fa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004fc:	68fb      	ldr	r3, [r7, #12]
}
 80004fe:	bf00      	nop
 8000500:	3714      	adds	r7, #20
 8000502:	46bd      	mov	sp, r7
 8000504:	bc80      	pop	{r7}
 8000506:	4770      	bx	lr

08000508 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b086      	sub	sp, #24
 800050c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800050e:	1d3b      	adds	r3, r7, #4
 8000510:	2200      	movs	r2, #0
 8000512:	601a      	str	r2, [r3, #0]
 8000514:	605a      	str	r2, [r3, #4]
 8000516:	609a      	str	r2, [r3, #8]
 8000518:	60da      	str	r2, [r3, #12]
 800051a:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800051c:	2001      	movs	r0, #1
 800051e:	f7ff ffdb 	bl	80004d8 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000522:	2004      	movs	r0, #4
 8000524:	f7ff ffd8 	bl	80004d8 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000528:	2002      	movs	r0, #2
 800052a:	f7ff ffd5 	bl	80004d8 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800052e:	2200      	movs	r2, #0
 8000530:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000534:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000538:	f002 f806 	bl	8002548 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FE_CTRL1_GPIO_Port, FE_CTRL1_Pin, GPIO_PIN_RESET);
 800053c:	2200      	movs	r2, #0
 800053e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000542:	4823      	ldr	r0, [pc, #140]	; (80005d0 <MX_GPIO_Init+0xc8>)
 8000544:	f002 f800 	bl	8002548 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, FE_CTRL2_Pin|PROB2_Pin|PROB1_Pin, GPIO_PIN_RESET);
 8000548:	2200      	movs	r2, #0
 800054a:	f44f 5144 	mov.w	r1, #12544	; 0x3100
 800054e:	4821      	ldr	r0, [pc, #132]	; (80005d4 <MX_GPIO_Init+0xcc>)
 8000550:	f001 fffa 	bl	8002548 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000554:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000558:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800055a:	2301      	movs	r3, #1
 800055c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800055e:	2300      	movs	r3, #0
 8000560:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000562:	2300      	movs	r3, #0
 8000564:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000566:	1d3b      	adds	r3, r7, #4
 8000568:	4619      	mov	r1, r3
 800056a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800056e:	f001 fdbd 	bl	80020ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FE_CTRL1_Pin;
 8000572:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000576:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000578:	2301      	movs	r3, #1
 800057a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800057c:	2300      	movs	r3, #0
 800057e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000580:	2300      	movs	r3, #0
 8000582:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(FE_CTRL1_GPIO_Port, &GPIO_InitStruct);
 8000584:	1d3b      	adds	r3, r7, #4
 8000586:	4619      	mov	r1, r3
 8000588:	4811      	ldr	r0, [pc, #68]	; (80005d0 <MX_GPIO_Init+0xc8>)
 800058a:	f001 fdaf 	bl	80020ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FE_CTRL2_Pin;
 800058e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000592:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000594:	2301      	movs	r3, #1
 8000596:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000598:	2300      	movs	r3, #0
 800059a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800059c:	2300      	movs	r3, #0
 800059e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(FE_CTRL2_GPIO_Port, &GPIO_InitStruct);
 80005a0:	1d3b      	adds	r3, r7, #4
 80005a2:	4619      	mov	r1, r3
 80005a4:	480b      	ldr	r0, [pc, #44]	; (80005d4 <MX_GPIO_Init+0xcc>)
 80005a6:	f001 fda1 	bl	80020ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = PROB2_Pin|PROB1_Pin;
 80005aa:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80005ae:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005b0:	2301      	movs	r3, #1
 80005b2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b4:	2300      	movs	r3, #0
 80005b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005b8:	2303      	movs	r3, #3
 80005ba:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005bc:	1d3b      	adds	r3, r7, #4
 80005be:	4619      	mov	r1, r3
 80005c0:	4804      	ldr	r0, [pc, #16]	; (80005d4 <MX_GPIO_Init+0xcc>)
 80005c2:	f001 fd93 	bl	80020ec <HAL_GPIO_Init>

}
 80005c6:	bf00      	nop
 80005c8:	3718      	adds	r7, #24
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	48000800 	.word	0x48000800
 80005d4:	48000400 	.word	0x48000400

080005d8 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 80005d8:	b480      	push	{r7}
 80005da:	b083      	sub	sp, #12
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80005e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80005e8:	f023 0218 	bic.w	r2, r3, #24
 80005ec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	4313      	orrs	r3, r2
 80005f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80005f8:	bf00      	nop
 80005fa:	370c      	adds	r7, #12
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bc80      	pop	{r7}
 8000600:	4770      	bx	lr

08000602 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000602:	b580      	push	{r7, lr}
 8000604:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000606:	f000 fffb 	bl	8001600 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800060a:	f000 f807 	bl	800061c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800060e:	f7ff ff7b 	bl	8000508 <MX_GPIO_Init>
  MX_SubGHz_Phy_Init();
 8000612:	f00a f886 	bl	800a722 <MX_SubGHz_Phy_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_SubGHz_Phy_Process();
 8000616:	f00a f88c 	bl	800a732 <MX_SubGHz_Phy_Process>
 800061a:	e7fc      	b.n	8000616 <main+0x14>

0800061c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b09a      	sub	sp, #104	; 0x68
 8000620:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000622:	f107 0320 	add.w	r3, r7, #32
 8000626:	2248      	movs	r2, #72	; 0x48
 8000628:	2100      	movs	r1, #0
 800062a:	4618      	mov	r0, r3
 800062c:	f00b fe42 	bl	800c2b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000630:	1d3b      	adds	r3, r7, #4
 8000632:	2200      	movs	r2, #0
 8000634:	601a      	str	r2, [r3, #0]
 8000636:	605a      	str	r2, [r3, #4]
 8000638:	609a      	str	r2, [r3, #8]
 800063a:	60da      	str	r2, [r3, #12]
 800063c:	611a      	str	r2, [r3, #16]
 800063e:	615a      	str	r2, [r3, #20]
 8000640:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000642:	f001 ffb1 	bl	80025a8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000646:	2000      	movs	r0, #0
 8000648:	f7ff ffc6 	bl	80005d8 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800064c:	4b1e      	ldr	r3, [pc, #120]	; (80006c8 <SystemClock_Config+0xac>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000654:	4a1c      	ldr	r2, [pc, #112]	; (80006c8 <SystemClock_Config+0xac>)
 8000656:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800065a:	6013      	str	r3, [r2, #0]
 800065c:	4b1a      	ldr	r3, [pc, #104]	; (80006c8 <SystemClock_Config+0xac>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000664:	603b      	str	r3, [r7, #0]
 8000666:	683b      	ldr	r3, [r7, #0]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000668:	2324      	movs	r3, #36	; 0x24
 800066a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800066c:	2381      	movs	r3, #129	; 0x81
 800066e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000670:	2301      	movs	r3, #1
 8000672:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000674:	2300      	movs	r3, #0
 8000676:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8000678:	23b0      	movs	r3, #176	; 0xb0
 800067a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800067c:	2300      	movs	r3, #0
 800067e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000680:	f107 0320 	add.w	r3, r7, #32
 8000684:	4618      	mov	r0, r3
 8000686:	f002 fb03 	bl	8002c90 <HAL_RCC_OscConfig>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000690:	f000 f81c 	bl	80006cc <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8000694:	234f      	movs	r3, #79	; 0x4f
 8000696:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000698:	2300      	movs	r3, #0
 800069a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800069c:	2300      	movs	r3, #0
 800069e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006a0:	2300      	movs	r3, #0
 80006a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006a4:	2300      	movs	r3, #0
 80006a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 80006a8:	2300      	movs	r3, #0
 80006aa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006ac:	1d3b      	adds	r3, r7, #4
 80006ae:	2102      	movs	r1, #2
 80006b0:	4618      	mov	r0, r3
 80006b2:	f002 fe6f 	bl	8003394 <HAL_RCC_ClockConfig>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80006bc:	f000 f806 	bl	80006cc <Error_Handler>
  }
}
 80006c0:	bf00      	nop
 80006c2:	3768      	adds	r7, #104	; 0x68
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	58000400 	.word	0x58000400

080006cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006d0:	b672      	cpsid	i
}
 80006d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006d4:	e7fe      	b.n	80006d4 <Error_Handler+0x8>

080006d6 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 80006d6:	b480      	push	{r7}
 80006d8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80006da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80006de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80006e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80006e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80006ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80006ee:	bf00      	nop
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bc80      	pop	{r7}
 80006f4:	4770      	bx	lr

080006f6 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80006f6:	b480      	push	{r7}
 80006f8:	b085      	sub	sp, #20
 80006fa:	af00      	add	r7, sp, #0
 80006fc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80006fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000702:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000704:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	4313      	orrs	r3, r2
 800070c:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800070e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000712:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	4013      	ands	r3, r2
 8000718:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800071a:	68fb      	ldr	r3, [r7, #12]
}
 800071c:	bf00      	nop
 800071e:	3714      	adds	r7, #20
 8000720:	46bd      	mov	sp, r7
 8000722:	bc80      	pop	{r7}
 8000724:	4770      	bx	lr
	...

08000728 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b08c      	sub	sp, #48	; 0x30
 800072c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 800072e:	1d3b      	adds	r3, r7, #4
 8000730:	222c      	movs	r2, #44	; 0x2c
 8000732:	2100      	movs	r1, #0
 8000734:	4618      	mov	r0, r3
 8000736:	f00b fdbd 	bl	800c2b4 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800073a:	4b22      	ldr	r3, [pc, #136]	; (80007c4 <MX_RTC_Init+0x9c>)
 800073c:	4a22      	ldr	r2, [pc, #136]	; (80007c8 <MX_RTC_Init+0xa0>)
 800073e:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 8000740:	4b20      	ldr	r3, [pc, #128]	; (80007c4 <MX_RTC_Init+0x9c>)
 8000742:	221f      	movs	r2, #31
 8000744:	609a      	str	r2, [r3, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000746:	4b1f      	ldr	r3, [pc, #124]	; (80007c4 <MX_RTC_Init+0x9c>)
 8000748:	2200      	movs	r2, #0
 800074a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800074c:	4b1d      	ldr	r3, [pc, #116]	; (80007c4 <MX_RTC_Init+0x9c>)
 800074e:	2200      	movs	r2, #0
 8000750:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000752:	4b1c      	ldr	r3, [pc, #112]	; (80007c4 <MX_RTC_Init+0x9c>)
 8000754:	2200      	movs	r2, #0
 8000756:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000758:	4b1a      	ldr	r3, [pc, #104]	; (80007c4 <MX_RTC_Init+0x9c>)
 800075a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800075e:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000760:	4b18      	ldr	r3, [pc, #96]	; (80007c4 <MX_RTC_Init+0x9c>)
 8000762:	2200      	movs	r2, #0
 8000764:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 8000766:	4b17      	ldr	r3, [pc, #92]	; (80007c4 <MX_RTC_Init+0x9c>)
 8000768:	f44f 7280 	mov.w	r2, #256	; 0x100
 800076c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800076e:	4815      	ldr	r0, [pc, #84]	; (80007c4 <MX_RTC_Init+0x9c>)
 8000770:	f003 faea 	bl	8003d48 <HAL_RTC_Init>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <MX_RTC_Init+0x56>
  {
    Error_Handler();
 800077a:	f7ff ffa7 	bl	80006cc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 800077e:	4811      	ldr	r0, [pc, #68]	; (80007c4 <MX_RTC_Init+0x9c>)
 8000780:	f003 fde0 	bl	8004344 <HAL_RTCEx_SetSSRU_IT>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_RTC_Init+0x66>
  {
    Error_Handler();
 800078a:	f7ff ff9f 	bl	80006cc <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 800078e:	2300      	movs	r3, #0
 8000790:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000792:	2300      	movs	r3, #0
 8000794:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000796:	2300      	movs	r3, #0
 8000798:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 800079a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800079e:	61fb      	str	r3, [r7, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 80007a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 80007a6:	1d3b      	adds	r3, r7, #4
 80007a8:	2200      	movs	r2, #0
 80007aa:	4619      	mov	r1, r3
 80007ac:	4805      	ldr	r0, [pc, #20]	; (80007c4 <MX_RTC_Init+0x9c>)
 80007ae:	f003 fb4d 	bl	8003e4c <HAL_RTC_SetAlarm_IT>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <MX_RTC_Init+0x94>
  {
    Error_Handler();
 80007b8:	f7ff ff88 	bl	80006cc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80007bc:	bf00      	nop
 80007be:	3730      	adds	r7, #48	; 0x30
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	20000038 	.word	0x20000038
 80007c8:	40002800 	.word	0x40002800

080007cc <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b090      	sub	sp, #64	; 0x40
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007d4:	f107 0308 	add.w	r3, r7, #8
 80007d8:	2238      	movs	r2, #56	; 0x38
 80007da:	2100      	movs	r1, #0
 80007dc:	4618      	mov	r0, r3
 80007de:	f00b fd69 	bl	800c2b4 <memset>
  if(rtcHandle->Instance==RTC)
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	4a16      	ldr	r2, [pc, #88]	; (8000840 <HAL_RTC_MspInit+0x74>)
 80007e8:	4293      	cmp	r3, r2
 80007ea:	d125      	bne.n	8000838 <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80007ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007f0:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80007f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007f6:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007f8:	f107 0308 	add.w	r3, r7, #8
 80007fc:	4618      	mov	r0, r3
 80007fe:	f003 f989 	bl	8003b14 <HAL_RCCEx_PeriphCLKConfig>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8000808:	f7ff ff60 	bl	80006cc <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800080c:	f7ff ff63 	bl	80006d6 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000810:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000814:	f7ff ff6f 	bl	80006f6 <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 8000818:	2200      	movs	r2, #0
 800081a:	2100      	movs	r1, #0
 800081c:	2002      	movs	r0, #2
 800081e:	f001 f816 	bl	800184e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 8000822:	2002      	movs	r0, #2
 8000824:	f001 f82d 	bl	8001882 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8000828:	2200      	movs	r2, #0
 800082a:	2100      	movs	r1, #0
 800082c:	202a      	movs	r0, #42	; 0x2a
 800082e:	f001 f80e 	bl	800184e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8000832:	202a      	movs	r0, #42	; 0x2a
 8000834:	f001 f825 	bl	8001882 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000838:	bf00      	nop
 800083a:	3740      	adds	r7, #64	; 0x40
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	40002800 	.word	0x40002800

08000844 <LL_PWR_ClearFlag_C1STOP_C1STB>:
  * @brief  Clear standby and stop flags for CPU1
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 8000848:	4b03      	ldr	r3, [pc, #12]	; (8000858 <LL_PWR_ClearFlag_C1STOP_C1STB+0x14>)
 800084a:	2201      	movs	r2, #1
 800084c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8000850:	bf00      	nop
 8000852:	46bd      	mov	sp, r7
 8000854:	bc80      	pop	{r7}
 8000856:	4770      	bx	lr
 8000858:	58000400 	.word	0x58000400

0800085c <PWR_EnterOffMode>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void PWR_EnterOffMode(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 8000860:	bf00      	nop
 8000862:	46bd      	mov	sp, r7
 8000864:	bc80      	pop	{r7}
 8000866:	4770      	bx	lr

08000868 <PWR_ExitOffMode>:

void PWR_ExitOffMode(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 800086c:	bf00      	nop
 800086e:	46bd      	mov	sp, r7
 8000870:	bc80      	pop	{r7}
 8000872:	4770      	bx	lr

08000874 <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 8000878:	f000 fee2 	bl	8001640 <HAL_SuspendTick>
  /* Clear Status Flag before entering STOP/STANDBY Mode */
  LL_PWR_ClearFlag_C1STOP_C1STB();
 800087c:	f7ff ffe2 	bl	8000844 <LL_PWR_ClearFlag_C1STOP_C1STB>

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 8000880:	2001      	movs	r0, #1
 8000882:	f001 ff23 	bl	80026cc <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 8000886:	bf00      	nop
 8000888:	bd80      	pop	{r7, pc}

0800088a <PWR_ExitStopMode>:

void PWR_ExitStopMode(void)
{
 800088a:	b580      	push	{r7, lr}
 800088c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitStopMode_1 */

  /* USER CODE END ExitStopMode_1 */
  /* Resume sysTick : work around for debugger problem in dual core */
  HAL_ResumeTick();
 800088e:	f000 fee5 	bl	800165c <HAL_ResumeTick>
    ADC interface
    DAC interface USARTx, TIMx, i2Cx, SPIx
    SRAM ctrls, DMAx, DMAMux, AES, RNG, HSEM  */

  /* Resume not retained USARTx and DMA */
  vcom_Resume();
 8000892:	f000 fdd9 	bl	8001448 <vcom_Resume>
  /* USER CODE BEGIN ExitStopMode_2 */

  /* USER CODE END ExitStopMode_2 */
}
 8000896:	bf00      	nop
 8000898:	bd80      	pop	{r7, pc}

0800089a <PWR_EnterSleepMode>:

void PWR_EnterSleepMode(void)
{
 800089a:	b580      	push	{r7, lr}
 800089c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterSleepMode_1 */

  /* USER CODE END EnterSleepMode_1 */
  /* Suspend sysTick */
  HAL_SuspendTick();
 800089e:	f000 fecf 	bl	8001640 <HAL_SuspendTick>
  /* USER CODE BEGIN EnterSleepMode_2 */

  /* USER CODE END EnterSleepMode_2 */
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 80008a2:	2101      	movs	r1, #1
 80008a4:	2000      	movs	r0, #0
 80008a6:	f001 fe8d 	bl	80025c4 <HAL_PWR_EnterSLEEPMode>
  /* USER CODE BEGIN EnterSleepMode_3 */

  /* USER CODE END EnterSleepMode_3 */
}
 80008aa:	bf00      	nop
 80008ac:	bd80      	pop	{r7, pc}

080008ae <PWR_ExitSleepMode>:

void PWR_ExitSleepMode(void)
{
 80008ae:	b580      	push	{r7, lr}
 80008b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Resume sysTick */
  HAL_ResumeTick();
 80008b2:	f000 fed3 	bl	800165c <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 80008b6:	bf00      	nop
 80008b8:	bd80      	pop	{r7, pc}

080008ba <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008ba:	b480      	push	{r7}
 80008bc:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008be:	bf00      	nop
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bc80      	pop	{r7}
 80008c4:	4770      	bx	lr

080008c6 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008c6:	b480      	push	{r7}
 80008c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008ca:	e7fe      	b.n	80008ca <NMI_Handler+0x4>

080008cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008d0:	e7fe      	b.n	80008d0 <HardFault_Handler+0x4>

080008d2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008d2:	b480      	push	{r7}
 80008d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008d6:	e7fe      	b.n	80008d6 <MemManage_Handler+0x4>

080008d8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008dc:	e7fe      	b.n	80008dc <BusFault_Handler+0x4>

080008de <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008de:	b480      	push	{r7}
 80008e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008e2:	e7fe      	b.n	80008e2 <UsageFault_Handler+0x4>

080008e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008e8:	bf00      	nop
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bc80      	pop	{r7}
 80008ee:	4770      	bx	lr

080008f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008f4:	bf00      	nop
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bc80      	pop	{r7}
 80008fa:	4770      	bx	lr

080008fc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000900:	bf00      	nop
 8000902:	46bd      	mov	sp, r7
 8000904:	bc80      	pop	{r7}
 8000906:	4770      	bx	lr

08000908 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800090c:	bf00      	nop
 800090e:	46bd      	mov	sp, r7
 8000910:	bc80      	pop	{r7}
 8000912:	4770      	bx	lr

08000914 <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 8000918:	4802      	ldr	r0, [pc, #8]	; (8000924 <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0x10>)
 800091a:	f003 fd4f 	bl	80043bc <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 800091e:	bf00      	nop
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	20000038 	.word	0x20000038

08000928 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 5 Interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800092c:	4802      	ldr	r0, [pc, #8]	; (8000938 <DMA1_Channel5_IRQHandler+0x10>)
 800092e:	f001 fa3f 	bl	8001db0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000932:	bf00      	nop
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	20000118 	.word	0x20000118

0800093c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000940:	4802      	ldr	r0, [pc, #8]	; (800094c <USART2_IRQHandler+0x10>)
 8000942:	f004 fb85 	bl	8005050 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000946:	bf00      	nop
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	20000084 	.word	0x20000084

08000950 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8000954:	4802      	ldr	r0, [pc, #8]	; (8000960 <RTC_Alarm_IRQHandler+0x10>)
 8000956:	f003 fbe1 	bl	800411c <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 800095a:	bf00      	nop
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	20000038 	.word	0x20000038

08000964 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8000968:	4802      	ldr	r0, [pc, #8]	; (8000974 <SUBGHZ_Radio_IRQHandler+0x10>)
 800096a:	f004 f895 	bl	8004a98 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 800096e:	bf00      	nop
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	20000070 	.word	0x20000070

08000978 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8000978:	b480      	push	{r7}
 800097a:	b085      	sub	sp, #20
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8000980:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000984:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8000986:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	4313      	orrs	r3, r2
 800098e:	664b      	str	r3, [r1, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8000990:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000994:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	4013      	ands	r3, r2
 800099a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800099c:	68fb      	ldr	r3, [r7, #12]
}
 800099e:	bf00      	nop
 80009a0:	3714      	adds	r7, #20
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bc80      	pop	{r7}
 80009a6:	4770      	bx	lr

080009a8 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 80009ac:	4b06      	ldr	r3, [pc, #24]	; (80009c8 <MX_SUBGHZ_Init+0x20>)
 80009ae:	2208      	movs	r2, #8
 80009b0:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 80009b2:	4805      	ldr	r0, [pc, #20]	; (80009c8 <MX_SUBGHZ_Init+0x20>)
 80009b4:	f003 fdee 	bl	8004594 <HAL_SUBGHZ_Init>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 80009be:	f7ff fe85 	bl	80006cc <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 80009c2:	bf00      	nop
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	20000070 	.word	0x20000070

080009cc <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 80009d4:	2001      	movs	r0, #1
 80009d6:	f7ff ffcf 	bl	8000978 <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 80009da:	2200      	movs	r2, #0
 80009dc:	2100      	movs	r1, #0
 80009de:	2032      	movs	r0, #50	; 0x32
 80009e0:	f000 ff35 	bl	800184e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 80009e4:	2032      	movs	r0, #50	; 0x32
 80009e6:	f000 ff4c 	bl	8001882 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 80009ea:	bf00      	nop
 80009ec:	3708      	adds	r7, #8
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}

080009f2 <LL_RCC_SetClkAfterWakeFromStop>:
{
 80009f2:	b480      	push	{r7}
 80009f4:	b083      	sub	sp, #12
 80009f6:	af00      	add	r7, sp, #0
 80009f8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 80009fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80009fe:	689b      	ldr	r3, [r3, #8]
 8000a00:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000a04:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	4313      	orrs	r3, r2
 8000a0c:	608b      	str	r3, [r1, #8]
}
 8000a0e:	bf00      	nop
 8000a10:	370c      	adds	r7, #12
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bc80      	pop	{r7}
 8000a16:	4770      	bx	lr

08000a18 <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

  /* Ensure that MSI is wake-up system clock */
  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI);
 8000a1c:	2000      	movs	r0, #0
 8000a1e:	f7ff ffe8 	bl	80009f2 <LL_RCC_SetClkAfterWakeFromStop>

  /*Initialize timer and RTC*/
  UTIL_TIMER_Init();
 8000a22:	f00a ff23 	bl	800b86c <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 8000a26:	4b0a      	ldr	r3, [pc, #40]	; (8000a50 <SystemApp_Init+0x38>)
 8000a28:	2201      	movs	r2, #1
 8000a2a:	701a      	strb	r2, [r3, #0]
  /* Initializes the SW probes pins and the monitor RF pins via Alternate Function */
  DBG_Init();
 8000a2c:	f000 f8a2 	bl	8000b74 <DBG_Init>

  /*Initialize the terminal */
  UTIL_ADV_TRACE_Init();
 8000a30:	f00b f9ac 	bl	800bd8c <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8000a34:	4807      	ldr	r0, [pc, #28]	; (8000a54 <SystemApp_Init+0x3c>)
 8000a36:	f00b fa45 	bl	800bec4 <UTIL_ADV_TRACE_RegisterTimeStampFunction>

  /*Set verbose LEVEL*/
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8000a3a:	2002      	movs	r0, #2
 8000a3c:	f00b fa50 	bl	800bee0 <UTIL_ADV_TRACE_SetVerboseLevel>

  /*Init low power manager*/
  UTIL_LPM_Init();
 8000a40:	f00a f9cc 	bl	800addc <UTIL_LPM_Init>
  /* Disable Stand-by mode */
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8000a44:	2101      	movs	r1, #1
 8000a46:	2001      	movs	r0, #1
 8000a48:	f00a fa08 	bl	800ae5c <UTIL_LPM_SetOffMode>
#endif /* LOW_POWER_DISABLE */

  /* USER CODE BEGIN SystemApp_Init_2 */

  /* USER CODE END SystemApp_Init_2 */
}
 8000a4c:	bf00      	nop
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	2000007c 	.word	0x2000007c
 8000a54:	08000a65 	.word	0x08000a65

08000a58 <UTIL_SEQ_Idle>:

/**
  * @brief redefines __weak function in stm32_seq.c such to enter low power
  */
void UTIL_SEQ_Idle(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_SEQ_Idle_1 */

  /* USER CODE END UTIL_SEQ_Idle_1 */
  UTIL_LPM_EnterLowPower();
 8000a5c:	f00a fa2e 	bl	800aebc <UTIL_LPM_EnterLowPower>
  /* USER CODE BEGIN UTIL_SEQ_Idle_2 */

  /* USER CODE END UTIL_SEQ_Idle_2 */
}
 8000a60:	bf00      	nop
 8000a62:	bd80      	pop	{r7, pc}

08000a64 <TimestampNow>:
/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/

static void TimestampNow(uint8_t *buff, uint16_t *size)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b086      	sub	sp, #24
 8000a68:	af02      	add	r7, sp, #8
 8000a6a:	6078      	str	r0, [r7, #4]
 8000a6c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TimestampNow_1 */

  /* USER CODE END TimestampNow_1 */
  SysTime_t curtime = SysTimeGet();
 8000a6e:	f107 0308 	add.w	r3, r7, #8
 8000a72:	4618      	mov	r0, r3
 8000a74:	f00a facc 	bl	800b010 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8000a78:	68bb      	ldr	r3, [r7, #8]
 8000a7a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000a7e:	9200      	str	r2, [sp, #0]
 8000a80:	4a07      	ldr	r2, [pc, #28]	; (8000aa0 <TimestampNow+0x3c>)
 8000a82:	2110      	movs	r1, #16
 8000a84:	6878      	ldr	r0, [r7, #4]
 8000a86:	f000 f81d 	bl	8000ac4 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 8000a8a:	6878      	ldr	r0, [r7, #4]
 8000a8c:	f7ff fb74 	bl	8000178 <strlen>
 8000a90:	4603      	mov	r3, r0
 8000a92:	b29a      	uxth	r2, r3
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN TimestampNow_2 */

  /* USER CODE END TimestampNow_2 */
}
 8000a98:	bf00      	nop
 8000a9a:	3710      	adds	r7, #16
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	0800c364 	.word	0x0800c364

08000aa4 <UTIL_ADV_TRACE_PreSendHook>:

/* Disable StopMode when traces need to be printed */
void UTIL_ADV_TRACE_PreSendHook(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_1 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8000aa8:	2101      	movs	r1, #1
 8000aaa:	2002      	movs	r0, #2
 8000aac:	f00a f9a6 	bl	800adfc <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_2 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_2 */
}
 8000ab0:	bf00      	nop
 8000ab2:	bd80      	pop	{r7, pc}

08000ab4 <UTIL_ADV_TRACE_PostSendHook>:
/* Re-enable StopMode when traces have been printed */
void UTIL_ADV_TRACE_PostSendHook(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_1 */

  /* USER CODE END UTIL_LPM_SetStopMode_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 8000ab8:	2100      	movs	r1, #0
 8000aba:	2002      	movs	r0, #2
 8000abc:	f00a f99e 	bl	800adfc <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}
 8000ac0:	bf00      	nop
 8000ac2:	bd80      	pop	{r7, pc}

08000ac4 <tiny_snprintf_like>:

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 8000ac4:	b40c      	push	{r2, r3}
 8000ac6:	b580      	push	{r7, lr}
 8000ac8:	b084      	sub	sp, #16
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	6078      	str	r0, [r7, #4]
 8000ace:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 8000ad0:	f107 031c 	add.w	r3, r7, #28
 8000ad4:	60fb      	str	r3, [r7, #12]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8000ad6:	6839      	ldr	r1, [r7, #0]
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	69ba      	ldr	r2, [r7, #24]
 8000adc:	6878      	ldr	r0, [r7, #4]
 8000ade:	f00a fbe3 	bl	800b2a8 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 8000ae2:	bf00      	nop
 8000ae4:	3710      	adds	r7, #16
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000aec:	b002      	add	sp, #8
 8000aee:	4770      	bx	lr

08000af0 <HAL_InitTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b083      	sub	sp, #12
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  /*Don't enable SysTick if TIMER_IF is based on other counters (e.g. RTC) */
  /* USER CODE BEGIN HAL_InitTick_1 */

  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
 8000af8:	2300      	movs	r3, #0
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	370c      	adds	r7, #12
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bc80      	pop	{r7}
 8000b02:	4770      	bx	lr

08000b04 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	607b      	str	r3, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 8000b0e:	4b06      	ldr	r3, [pc, #24]	; (8000b28 <HAL_GetTick+0x24>)
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d002      	beq.n	8000b1c <HAL_GetTick+0x18>

    /* USER CODE END HAL_GetTick_EarlyCall */
  }
  else
  {
    ret = TIMER_IF_GetTimerValue();
 8000b16:	f000 f92d 	bl	8000d74 <TIMER_IF_GetTimerValue>
 8000b1a:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
 8000b1c:	687b      	ldr	r3, [r7, #4]
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	3708      	adds	r7, #8
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	2000007c 	.word	0x2000007c

08000b2c <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	4618      	mov	r0, r3
 8000b38:	f000 f9a3 	bl	8000e82 <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8000b3c:	bf00      	nop
 8000b3e:	3708      	adds	r7, #8
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}

08000b44 <LL_AHB2_GRP1_EnableClock>:
{
 8000b44:	b480      	push	{r7}
 8000b46:	b085      	sub	sp, #20
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000b4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b50:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b52:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	4313      	orrs	r3, r2
 8000b5a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000b5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b60:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	4013      	ands	r3, r2
 8000b66:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b68:	68fb      	ldr	r3, [r7, #12]
}
 8000b6a:	bf00      	nop
 8000b6c:	3714      	adds	r7, #20
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bc80      	pop	{r7}
 8000b72:	4770      	bx	lr

08000b74 <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b086      	sub	sp, #24
 8000b78:	af00      	add	r7, sp, #0

  /* USER CODE END DBG_Init_1 */

  /* SW probes */
#if defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 0 )
  HAL_DBGMCU_DisableDBGSleepMode();
 8000b7a:	f000 fd7d 	bl	8001678 <HAL_DBGMCU_DisableDBGSleepMode>
  HAL_DBGMCU_DisableDBGStopMode();
 8000b7e:	f000 fd81 	bl	8001684 <HAL_DBGMCU_DisableDBGStopMode>
  HAL_DBGMCU_DisableDBGStandbyMode();
 8000b82:	f000 fd85 	bl	8001690 <HAL_DBGMCU_DisableDBGStandbyMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
#elif !defined (DEBUGGER_ENABLED)
#error "DEBUGGER_ENABLED not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */

  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 8000b86:	1d3b      	adds	r3, r7, #4
 8000b88:	2200      	movs	r2, #0
 8000b8a:	601a      	str	r2, [r3, #0]
 8000b8c:	605a      	str	r2, [r3, #4]
 8000b8e:	609a      	str	r2, [r3, #8]
 8000b90:	60da      	str	r2, [r3, #12]
 8000b92:	611a      	str	r2, [r3, #16]

  /* Configure the GPIO pin */
  GPIO_InitStruct.Mode   = GPIO_MODE_OUTPUT_PP;
 8000b94:	2301      	movs	r3, #1
 8000b96:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b9c:	2303      	movs	r3, #3
 8000b9e:	613b      	str	r3, [r7, #16]

  /* Enable the GPIO Clock */
  PROBE_LINE1_CLK_ENABLE();
 8000ba0:	2002      	movs	r0, #2
 8000ba2:	f7ff ffcf 	bl	8000b44 <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE2_CLK_ENABLE();
 8000ba6:	2002      	movs	r0, #2
 8000ba8:	f7ff ffcc 	bl	8000b44 <LL_AHB2_GRP1_EnableClock>

  GPIO_InitStruct.Pin    = PROBE_LINE1_PIN;
 8000bac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bb0:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE1_PORT, &GPIO_InitStruct);
 8000bb2:	1d3b      	adds	r3, r7, #4
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	480d      	ldr	r0, [pc, #52]	; (8000bec <DBG_Init+0x78>)
 8000bb8:	f001 fa98 	bl	80020ec <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE2_PIN;
 8000bbc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bc0:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE2_PORT, &GPIO_InitStruct);
 8000bc2:	1d3b      	adds	r3, r7, #4
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	4809      	ldr	r0, [pc, #36]	; (8000bec <DBG_Init+0x78>)
 8000bc8:	f001 fa90 	bl	80020ec <HAL_GPIO_Init>

  /* Reset probe Pins */
  HAL_GPIO_WritePin(PROBE_LINE1_PORT, PROBE_LINE1_PIN, GPIO_PIN_RESET);
 8000bcc:	2200      	movs	r2, #0
 8000bce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bd2:	4806      	ldr	r0, [pc, #24]	; (8000bec <DBG_Init+0x78>)
 8000bd4:	f001 fcb8 	bl	8002548 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE2_PORT, PROBE_LINE2_PIN, GPIO_PIN_RESET);
 8000bd8:	2200      	movs	r2, #0
 8000bda:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bde:	4803      	ldr	r0, [pc, #12]	; (8000bec <DBG_Init+0x78>)
 8000be0:	f001 fcb2 	bl	8002548 <HAL_GPIO_WritePin>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 8000be4:	bf00      	nop
 8000be6:	3718      	adds	r7, #24
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	48000400 	.word	0x48000400

08000bf0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8000bf4:	bf00      	nop
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bc80      	pop	{r7}
 8000bfa:	4770      	bx	lr

08000bfc <LL_RTC_TIME_GetSubSecond>:
  * @param  RTCx RTC Instance
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	689b      	ldr	r3, [r3, #8]
}
 8000c08:	4618      	mov	r0, r3
 8000c0a:	370c      	adds	r7, #12
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bc80      	pop	{r7}
 8000c10:	4770      	bx	lr
	...

08000c14 <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  if (RTC_Initialized == false)
 8000c1e:	4b14      	ldr	r3, [pc, #80]	; (8000c70 <TIMER_IF_Init+0x5c>)
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	f083 0301 	eor.w	r3, r3, #1
 8000c26:	b2db      	uxtb	r3, r3
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d01b      	beq.n	8000c64 <TIMER_IF_Init+0x50>
  {
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8000c2c:	4b11      	ldr	r3, [pc, #68]	; (8000c74 <TIMER_IF_Init+0x60>)
 8000c2e:	f04f 32ff 	mov.w	r2, #4294967295
 8000c32:	631a      	str	r2, [r3, #48]	; 0x30
    /*Init RTC*/
    MX_RTC_Init();
 8000c34:	f7ff fd78 	bl	8000728 <MX_RTC_Init>
    /*Stop Timer */
    TIMER_IF_StopTimer();
 8000c38:	f000 f856 	bl	8000ce8 <TIMER_IF_StopTimer>
    /** DeActivate the Alarm A enabled by STM32CubeMX during MX_RTC_Init() */
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8000c3c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c40:	480c      	ldr	r0, [pc, #48]	; (8000c74 <TIMER_IF_Init+0x60>)
 8000c42:	f003 fa0f 	bl	8004064 <HAL_RTC_DeactivateAlarm>
    /*overload RTC feature enable*/
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8000c46:	4b0b      	ldr	r3, [pc, #44]	; (8000c74 <TIMER_IF_Init+0x60>)
 8000c48:	f04f 32ff 	mov.w	r2, #4294967295
 8000c4c:	631a      	str	r2, [r3, #48]	; 0x30

    /*Enable Direct Read of the calendar registers (not through Shadow) */
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8000c4e:	4809      	ldr	r0, [pc, #36]	; (8000c74 <TIMER_IF_Init+0x60>)
 8000c50:	f003 fb46 	bl	80042e0 <HAL_RTCEx_EnableBypassShadow>
    /*Initialize MSB ticks*/
    TIMER_IF_BkUp_Write_MSBticks(0);
 8000c54:	2000      	movs	r0, #0
 8000c56:	f000 f9d3 	bl	8001000 <TIMER_IF_BkUp_Write_MSBticks>

    TIMER_IF_SetTimerContext();
 8000c5a:	f000 f85f 	bl	8000d1c <TIMER_IF_SetTimerContext>

    /* Register a task to associate to UTIL_TIMER_Irq() interrupt */
    UTIL_TIMER_IRQ_MAP_INIT();

    RTC_Initialized = true;
 8000c5e:	4b04      	ldr	r3, [pc, #16]	; (8000c70 <TIMER_IF_Init+0x5c>)
 8000c60:	2201      	movs	r2, #1
 8000c62:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN TIMER_IF_Init_Last */

  /* USER CODE END TIMER_IF_Init_Last */
  return ret;
 8000c64:	79fb      	ldrb	r3, [r7, #7]
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	3708      	adds	r7, #8
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	2000007d 	.word	0x2000007d
 8000c74:	20000038 	.word	0x20000038

08000c78 <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b08e      	sub	sp, #56	; 0x38
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8000c80:	2300      	movs	r3, #0
 8000c82:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  RTC_AlarmTypeDef sAlarm = {0};
 8000c86:	f107 0308 	add.w	r3, r7, #8
 8000c8a:	222c      	movs	r2, #44	; 0x2c
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f00b fb10 	bl	800c2b4 <memset>
  /*Stop timer if one is already started*/
  TIMER_IF_StopTimer();
 8000c94:	f000 f828 	bl	8000ce8 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 8000c98:	4b11      	ldr	r3, [pc, #68]	; (8000ce0 <TIMER_IF_StartTimer+0x68>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	687a      	ldr	r2, [r7, #4]
 8000c9e:	4413      	add	r3, r2
 8000ca0:	607b      	str	r3, [r7, #4]

  TIMER_IF_DBG_PRINTF("Start timer: time=%d, alarm=%d\n\r",  GetTimerTicks(), timeout);
  /* starts timer*/
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	43db      	mvns	r3, r3
 8000caa:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000cac:	2300      	movs	r3, #0
 8000cae:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8000cb0:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000cb4:	623b      	str	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8000cb6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cba:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000cbc:	f107 0308 	add.w	r3, r7, #8
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	4807      	ldr	r0, [pc, #28]	; (8000ce4 <TIMER_IF_StartTimer+0x6c>)
 8000cc6:	f003 f8c1 	bl	8003e4c <HAL_RTC_SetAlarm_IT>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <TIMER_IF_StartTimer+0x5c>
  {
    Error_Handler();
 8000cd0:	f7ff fcfc 	bl	80006cc <Error_Handler>
  }
  /* USER CODE BEGIN TIMER_IF_StartTimer_Last */

  /* USER CODE END TIMER_IF_StartTimer_Last */
  return ret;
 8000cd4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	3738      	adds	r7, #56	; 0x38
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	20000080 	.word	0x20000080
 8000ce4:	20000038 	.word	0x20000038

08000ce8 <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8000cf2:	4b08      	ldr	r3, [pc, #32]	; (8000d14 <TIMER_IF_StopTimer+0x2c>)
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8000cf8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cfc:	4806      	ldr	r0, [pc, #24]	; (8000d18 <TIMER_IF_StopTimer+0x30>)
 8000cfe:	f003 f9b1 	bl	8004064 <HAL_RTC_DeactivateAlarm>
  /*overload RTC feature enable*/
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8000d02:	4b05      	ldr	r3, [pc, #20]	; (8000d18 <TIMER_IF_StopTimer+0x30>)
 8000d04:	f04f 32ff 	mov.w	r2, #4294967295
 8000d08:	631a      	str	r2, [r3, #48]	; 0x30
  /* USER CODE BEGIN TIMER_IF_StopTimer_Last */

  /* USER CODE END TIMER_IF_StopTimer_Last */
  return ret;
 8000d0a:	79fb      	ldrb	r3, [r7, #7]
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	3708      	adds	r7, #8
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	40002800 	.word	0x40002800
 8000d18:	20000038 	.word	0x20000038

08000d1c <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  /*store time context*/
  RtcTimerContext = GetTimerTicks();
 8000d20:	f000 f98e 	bl	8001040 <GetTimerTicks>
 8000d24:	4603      	mov	r3, r0
 8000d26:	4a03      	ldr	r2, [pc, #12]	; (8000d34 <TIMER_IF_SetTimerContext+0x18>)
 8000d28:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIMER_IF_SetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_SetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8000d2a:	4b02      	ldr	r3, [pc, #8]	; (8000d34 <TIMER_IF_SetTimerContext+0x18>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	20000080 	.word	0x20000080

08000d38 <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0

  /* USER CODE END TIMER_IF_GetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_GetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8000d3c:	4b02      	ldr	r3, [pc, #8]	; (8000d48 <TIMER_IF_GetTimerContext+0x10>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
}
 8000d40:	4618      	mov	r0, r3
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bc80      	pop	{r7}
 8000d46:	4770      	bx	lr
 8000d48:	20000080 	.word	0x20000080

08000d4c <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8000d52:	2300      	movs	r3, #0
 8000d54:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 8000d56:	f000 f973 	bl	8001040 <GetTimerTicks>
 8000d5a:	4602      	mov	r2, r0
 8000d5c:	4b04      	ldr	r3, [pc, #16]	; (8000d70 <TIMER_IF_GetTimerElapsedTime+0x24>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	1ad3      	subs	r3, r2, r3
 8000d62:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime_Last */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime_Last */
  return ret;
 8000d64:	687b      	ldr	r3, [r7, #4]
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	3708      	adds	r7, #8
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	20000080 	.word	0x20000080

08000d74 <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  if (RTC_Initialized == true)
 8000d7e:	4b06      	ldr	r3, [pc, #24]	; (8000d98 <TIMER_IF_GetTimerValue+0x24>)
 8000d80:	781b      	ldrb	r3, [r3, #0]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d002      	beq.n	8000d8c <TIMER_IF_GetTimerValue+0x18>
  {
    ret = GetTimerTicks();
 8000d86:	f000 f95b 	bl	8001040 <GetTimerTicks>
 8000d8a:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN TIMER_IF_GetTimerValue_Last */

  /* USER CODE END TIMER_IF_GetTimerValue_Last */
  return ret;
 8000d8c:	687b      	ldr	r3, [r7, #4]
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	3708      	adds	r7, #8
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	2000007d 	.word	0x2000007d

08000d9c <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8000da2:	2300      	movs	r3, #0
 8000da4:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  ret = (MIN_ALARM_DELAY);
 8000da6:	2303      	movs	r3, #3
 8000da8:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout_Last */

  /* USER CODE END TIMER_IF_GetMinimumTimeout_Last */
  return ret;
 8000daa:	687b      	ldr	r3, [r7, #4]
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	370c      	adds	r7, #12
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bc80      	pop	{r7}
 8000db4:	4770      	bx	lr

08000db6 <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 8000db6:	b5b0      	push	{r4, r5, r7, lr}
 8000db8:	b084      	sub	sp, #16
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 8000dc2:	6879      	ldr	r1, [r7, #4]
 8000dc4:	2000      	movs	r0, #0
 8000dc6:	460a      	mov	r2, r1
 8000dc8:	4603      	mov	r3, r0
 8000dca:	0d95      	lsrs	r5, r2, #22
 8000dcc:	0294      	lsls	r4, r2, #10
 8000dce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000dd2:	f04f 0300 	mov.w	r3, #0
 8000dd6:	4620      	mov	r0, r4
 8000dd8:	4629      	mov	r1, r5
 8000dda:	f7ff f9d5 	bl	8000188 <__aeabi_uldivmod>
 8000dde:	4602      	mov	r2, r0
 8000de0:	460b      	mov	r3, r1
 8000de2:	4613      	mov	r3, r2
 8000de4:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick_Last */

  /* USER CODE END TIMER_IF_Convert_ms2Tick_Last */
  return ret;
 8000de6:	68fb      	ldr	r3, [r7, #12]
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	3710      	adds	r7, #16
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bdb0      	pop	{r4, r5, r7, pc}

08000df0 <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 8000df0:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8000df4:	b085      	sub	sp, #20
 8000df6:	af00      	add	r7, sp, #0
 8000df8:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 8000dfe:	6879      	ldr	r1, [r7, #4]
 8000e00:	2000      	movs	r0, #0
 8000e02:	460c      	mov	r4, r1
 8000e04:	4605      	mov	r5, r0
 8000e06:	4620      	mov	r0, r4
 8000e08:	4629      	mov	r1, r5
 8000e0a:	f04f 0a00 	mov.w	sl, #0
 8000e0e:	f04f 0b00 	mov.w	fp, #0
 8000e12:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 8000e16:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 8000e1a:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 8000e1e:	4650      	mov	r0, sl
 8000e20:	4659      	mov	r1, fp
 8000e22:	1b02      	subs	r2, r0, r4
 8000e24:	eb61 0305 	sbc.w	r3, r1, r5
 8000e28:	f04f 0000 	mov.w	r0, #0
 8000e2c:	f04f 0100 	mov.w	r1, #0
 8000e30:	0099      	lsls	r1, r3, #2
 8000e32:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8000e36:	0090      	lsls	r0, r2, #2
 8000e38:	4602      	mov	r2, r0
 8000e3a:	460b      	mov	r3, r1
 8000e3c:	eb12 0804 	adds.w	r8, r2, r4
 8000e40:	eb43 0905 	adc.w	r9, r3, r5
 8000e44:	f04f 0200 	mov.w	r2, #0
 8000e48:	f04f 0300 	mov.w	r3, #0
 8000e4c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000e50:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000e54:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000e58:	4690      	mov	r8, r2
 8000e5a:	4699      	mov	r9, r3
 8000e5c:	4640      	mov	r0, r8
 8000e5e:	4649      	mov	r1, r9
 8000e60:	f04f 0200 	mov.w	r2, #0
 8000e64:	f04f 0300 	mov.w	r3, #0
 8000e68:	0a82      	lsrs	r2, r0, #10
 8000e6a:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8000e6e:	0a8b      	lsrs	r3, r1, #10
 8000e70:	4613      	mov	r3, r2
 8000e72:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms_Last */

  /* USER CODE END TIMER_IF_Convert_Tick2ms_Last */
  return ret;
 8000e74:	68fb      	ldr	r3, [r7, #12]
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	3714      	adds	r7, #20
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8000e80:	4770      	bx	lr

08000e82 <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 8000e82:	b580      	push	{r7, lr}
 8000e84:	b084      	sub	sp, #16
 8000e86:	af00      	add	r7, sp, #0
 8000e88:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 8000e8a:	6878      	ldr	r0, [r7, #4]
 8000e8c:	f7ff ff93 	bl	8000db6 <TIMER_IF_Convert_ms2Tick>
 8000e90:	60f8      	str	r0, [r7, #12]
  uint32_t timeout = GetTimerTicks();
 8000e92:	f000 f8d5 	bl	8001040 <GetTimerTicks>
 8000e96:	60b8      	str	r0, [r7, #8]

  /* Wait delay ms */
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8000e98:	e000      	b.n	8000e9c <TIMER_IF_DelayMs+0x1a>
  {
    __NOP();
 8000e9a:	bf00      	nop
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8000e9c:	f000 f8d0 	bl	8001040 <GetTimerTicks>
 8000ea0:	4602      	mov	r2, r0
 8000ea2:	68bb      	ldr	r3, [r7, #8]
 8000ea4:	1ad3      	subs	r3, r2, r3
 8000ea6:	68fa      	ldr	r2, [r7, #12]
 8000ea8:	429a      	cmp	r2, r3
 8000eaa:	d8f6      	bhi.n	8000e9a <TIMER_IF_DelayMs+0x18>
  }
  /* USER CODE BEGIN TIMER_IF_DelayMs_Last */

  /* USER CODE END TIMER_IF_DelayMs_Last */
}
 8000eac:	bf00      	nop
 8000eae:	bf00      	nop
 8000eb0:	3710      	adds	r7, #16
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}

08000eb6 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8000eb6:	b580      	push	{r7, lr}
 8000eb8:	b082      	sub	sp, #8
 8000eba:	af00      	add	r7, sp, #0
 8000ebc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback */

  /* USER CODE END HAL_RTC_AlarmAEventCallback */
  UTIL_TIMER_IRQ_MAP_PROCESS();
 8000ebe:	f00a fe23 	bl	800bb08 <UTIL_TIMER_IRQ_Handler>
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback_Last */

  /* USER CODE END HAL_RTC_AlarmAEventCallback_Last */
}
 8000ec2:	bf00      	nop
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}

08000eca <HAL_RTCEx_SSRUEventCallback>:

void HAL_RTCEx_SSRUEventCallback(RTC_HandleTypeDef *hrtc)
{
 8000eca:	b580      	push	{r7, lr}
 8000ecc:	b084      	sub	sp, #16
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_RTCEx_SSRUEventCallback */
  /*called every 48 days with 1024 ticks per seconds*/
  TIMER_IF_DBG_PRINTF(">>Handler SSRUnderflow at %d\n\r", GetTimerTicks());
  /*Increment MSBticks*/
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 8000ed2:	f000 f8a5 	bl	8001020 <TIMER_IF_BkUp_Read_MSBticks>
 8000ed6:	60f8      	str	r0, [r7, #12]
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	3301      	adds	r3, #1
 8000edc:	4618      	mov	r0, r3
 8000ede:	f000 f88f 	bl	8001000 <TIMER_IF_BkUp_Write_MSBticks>
  /* USER CODE BEGIN HAL_RTCEx_SSRUEventCallback_Last */

  /* USER CODE END HAL_RTCEx_SSRUEventCallback_Last */
}
 8000ee2:	bf00      	nop
 8000ee4:	3710      	adds	r7, #16
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}

08000eea <TIMER_IF_GetTime>:

uint32_t TIMER_IF_GetTime(uint16_t *mSeconds)
{
 8000eea:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000eee:	b08c      	sub	sp, #48	; 0x30
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6178      	str	r0, [r7, #20]
  uint32_t seconds = 0;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* USER CODE BEGIN TIMER_IF_GetTime */

  /* USER CODE END TIMER_IF_GetTime */
  uint64_t ticks;
  uint32_t timerValueLsb = GetTimerTicks();
 8000ef8:	f000 f8a2 	bl	8001040 <GetTimerTicks>
 8000efc:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 8000efe:	f000 f88f 	bl	8001020 <TIMER_IF_BkUp_Read_MSBticks>
 8000f02:	6278      	str	r0, [r7, #36]	; 0x24

  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 8000f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f06:	2200      	movs	r2, #0
 8000f08:	60bb      	str	r3, [r7, #8]
 8000f0a:	60fa      	str	r2, [r7, #12]
 8000f0c:	f04f 0200 	mov.w	r2, #0
 8000f10:	f04f 0300 	mov.w	r3, #0
 8000f14:	68b9      	ldr	r1, [r7, #8]
 8000f16:	000b      	movs	r3, r1
 8000f18:	2200      	movs	r2, #0
 8000f1a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000f1c:	2000      	movs	r0, #0
 8000f1e:	460c      	mov	r4, r1
 8000f20:	4605      	mov	r5, r0
 8000f22:	eb12 0804 	adds.w	r8, r2, r4
 8000f26:	eb43 0905 	adc.w	r9, r3, r5
 8000f2a:	e9c7 8906 	strd	r8, r9, [r7, #24]

  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 8000f2e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000f32:	f04f 0200 	mov.w	r2, #0
 8000f36:	f04f 0300 	mov.w	r3, #0
 8000f3a:	0a82      	lsrs	r2, r0, #10
 8000f3c:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8000f40:	0a8b      	lsrs	r3, r1, #10
 8000f42:	4613      	mov	r3, r2
 8000f44:	62fb      	str	r3, [r7, #44]	; 0x2c

  ticks = (uint32_t) ticks & RTC_PREDIV_S;
 8000f46:	69bb      	ldr	r3, [r7, #24]
 8000f48:	2200      	movs	r2, #0
 8000f4a:	603b      	str	r3, [r7, #0]
 8000f4c:	607a      	str	r2, [r7, #4]
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 8000f54:	f04f 0b00 	mov.w	fp, #0
 8000f58:	e9c7 ab06 	strd	sl, fp, [r7, #24]

  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 8000f5c:	69bb      	ldr	r3, [r7, #24]
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f7ff ff46 	bl	8000df0 <TIMER_IF_Convert_Tick2ms>
 8000f64:	4603      	mov	r3, r0
 8000f66:	b29a      	uxth	r2, r3
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	801a      	strh	r2, [r3, #0]

  /* USER CODE BEGIN TIMER_IF_GetTime_Last */

  /* USER CODE END TIMER_IF_GetTime_Last */
  return seconds;
 8000f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3730      	adds	r7, #48	; 0x30
 8000f72:	46bd      	mov	sp, r7
 8000f74:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08000f78 <TIMER_IF_BkUp_Write_Seconds>:

void TIMER_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8000f80:	687a      	ldr	r2, [r7, #4]
 8000f82:	2100      	movs	r1, #0
 8000f84:	4803      	ldr	r0, [pc, #12]	; (8000f94 <TIMER_IF_BkUp_Write_Seconds+0x1c>)
 8000f86:	f003 fa3d 	bl	8004404 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds_Last */
}
 8000f8a:	bf00      	nop
 8000f8c:	3708      	adds	r7, #8
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	20000038 	.word	0x20000038

08000f98 <TIMER_IF_BkUp_Write_SubSeconds>:

void TIMER_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8000fa0:	687a      	ldr	r2, [r7, #4]
 8000fa2:	2101      	movs	r1, #1
 8000fa4:	4803      	ldr	r0, [pc, #12]	; (8000fb4 <TIMER_IF_BkUp_Write_SubSeconds+0x1c>)
 8000fa6:	f003 fa2d 	bl	8004404 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds_Last */
}
 8000faa:	bf00      	nop
 8000fac:	3708      	adds	r7, #8
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	20000038 	.word	0x20000038

08000fb8 <TIMER_IF_BkUp_Read_Seconds>:

uint32_t TIMER_IF_BkUp_Read_Seconds(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	4804      	ldr	r0, [pc, #16]	; (8000fd8 <TIMER_IF_BkUp_Read_Seconds+0x20>)
 8000fc6:	f003 fa35 	bl	8004434 <HAL_RTCEx_BKUPRead>
 8000fca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds_Last */
  return ret;
 8000fcc:	687b      	ldr	r3, [r7, #4]
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	20000038 	.word	0x20000038

08000fdc <TIMER_IF_BkUp_Read_SubSeconds>:

uint32_t TIMER_IF_BkUp_Read_SubSeconds(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 8000fe6:	2101      	movs	r1, #1
 8000fe8:	4804      	ldr	r0, [pc, #16]	; (8000ffc <TIMER_IF_BkUp_Read_SubSeconds+0x20>)
 8000fea:	f003 fa23 	bl	8004434 <HAL_RTCEx_BKUPRead>
 8000fee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds_Last */
  return ret;
 8000ff0:	687b      	ldr	r3, [r7, #4]
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	20000038 	.word	0x20000038

08001000 <TIMER_IF_BkUp_Write_MSBticks>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void TIMER_IF_BkUp_Write_MSBticks(uint32_t MSBticks)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 8001008:	687a      	ldr	r2, [r7, #4]
 800100a:	2102      	movs	r1, #2
 800100c:	4803      	ldr	r0, [pc, #12]	; (800101c <TIMER_IF_BkUp_Write_MSBticks+0x1c>)
 800100e:	f003 f9f9 	bl	8004404 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks_Last */
}
 8001012:	bf00      	nop
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	20000038 	.word	0x20000038

08001020 <TIMER_IF_BkUp_Read_MSBticks>:

static uint32_t TIMER_IF_BkUp_Read_MSBticks(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks */
  uint32_t MSBticks;
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 8001026:	2102      	movs	r1, #2
 8001028:	4804      	ldr	r0, [pc, #16]	; (800103c <TIMER_IF_BkUp_Read_MSBticks+0x1c>)
 800102a:	f003 fa03 	bl	8004434 <HAL_RTCEx_BKUPRead>
 800102e:	6078      	str	r0, [r7, #4]
  return MSBticks;
 8001030:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks_Last */
}
 8001032:	4618      	mov	r0, r3
 8001034:	3708      	adds	r7, #8
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	20000038 	.word	0x20000038

08001040 <GetTimerTicks>:

static inline uint32_t GetTimerTicks(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
 8001046:	480b      	ldr	r0, [pc, #44]	; (8001074 <GetTimerTicks+0x34>)
 8001048:	f7ff fdd8 	bl	8000bfc <LL_RTC_TIME_GetSubSecond>
 800104c:	6078      	str	r0, [r7, #4]
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 800104e:	e003      	b.n	8001058 <GetTimerTicks+0x18>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
 8001050:	4808      	ldr	r0, [pc, #32]	; (8001074 <GetTimerTicks+0x34>)
 8001052:	f7ff fdd3 	bl	8000bfc <LL_RTC_TIME_GetSubSecond>
 8001056:	6078      	str	r0, [r7, #4]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001058:	4806      	ldr	r0, [pc, #24]	; (8001074 <GetTimerTicks+0x34>)
 800105a:	f7ff fdcf 	bl	8000bfc <LL_RTC_TIME_GetSubSecond>
 800105e:	4602      	mov	r2, r0
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	4293      	cmp	r3, r2
 8001064:	d1f4      	bne.n	8001050 <GetTimerTicks+0x10>
  }
  return UINT32_MAX - ssr;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	43db      	mvns	r3, r3
  /* USER CODE BEGIN GetTimerTicks_Last */

  /* USER CODE END GetTimerTicks_Last */
}
 800106a:	4618      	mov	r0, r3
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	40002800 	.word	0x40002800

08001078 <LL_AHB2_GRP1_EnableClock>:
{
 8001078:	b480      	push	{r7}
 800107a:	b085      	sub	sp, #20
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001080:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001084:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001086:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4313      	orrs	r3, r2
 800108e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001090:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001094:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4013      	ands	r3, r2
 800109a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800109c:	68fb      	ldr	r3, [r7, #12]
}
 800109e:	bf00      	nop
 80010a0:	3714      	adds	r7, #20
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bc80      	pop	{r7}
 80010a6:	4770      	bx	lr

080010a8 <LL_APB1_GRP1_EnableClock>:
{
 80010a8:	b480      	push	{r7}
 80010aa:	b085      	sub	sp, #20
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80010b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010b4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80010b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4313      	orrs	r3, r2
 80010be:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80010c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010c4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4013      	ands	r3, r2
 80010ca:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80010cc:	68fb      	ldr	r3, [r7, #12]
}
 80010ce:	bf00      	nop
 80010d0:	3714      	adds	r7, #20
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bc80      	pop	{r7}
 80010d6:	4770      	bx	lr

080010d8 <LL_APB1_GRP1_DisableClock>:
{
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 80010e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010e4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	43db      	mvns	r3, r3
 80010ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80010ee:	4013      	ands	r3, r2
 80010f0:	658b      	str	r3, [r1, #88]	; 0x58
}
 80010f2:	bf00      	nop
 80010f4:	370c      	adds	r7, #12
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bc80      	pop	{r7}
 80010fa:	4770      	bx	lr

080010fc <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001100:	4b22      	ldr	r3, [pc, #136]	; (800118c <MX_USART2_UART_Init+0x90>)
 8001102:	4a23      	ldr	r2, [pc, #140]	; (8001190 <MX_USART2_UART_Init+0x94>)
 8001104:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001106:	4b21      	ldr	r3, [pc, #132]	; (800118c <MX_USART2_UART_Init+0x90>)
 8001108:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800110c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800110e:	4b1f      	ldr	r3, [pc, #124]	; (800118c <MX_USART2_UART_Init+0x90>)
 8001110:	2200      	movs	r2, #0
 8001112:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001114:	4b1d      	ldr	r3, [pc, #116]	; (800118c <MX_USART2_UART_Init+0x90>)
 8001116:	2200      	movs	r2, #0
 8001118:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800111a:	4b1c      	ldr	r3, [pc, #112]	; (800118c <MX_USART2_UART_Init+0x90>)
 800111c:	2200      	movs	r2, #0
 800111e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001120:	4b1a      	ldr	r3, [pc, #104]	; (800118c <MX_USART2_UART_Init+0x90>)
 8001122:	220c      	movs	r2, #12
 8001124:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001126:	4b19      	ldr	r3, [pc, #100]	; (800118c <MX_USART2_UART_Init+0x90>)
 8001128:	2200      	movs	r2, #0
 800112a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800112c:	4b17      	ldr	r3, [pc, #92]	; (800118c <MX_USART2_UART_Init+0x90>)
 800112e:	2200      	movs	r2, #0
 8001130:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001132:	4b16      	ldr	r3, [pc, #88]	; (800118c <MX_USART2_UART_Init+0x90>)
 8001134:	2200      	movs	r2, #0
 8001136:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001138:	4b14      	ldr	r3, [pc, #80]	; (800118c <MX_USART2_UART_Init+0x90>)
 800113a:	2200      	movs	r2, #0
 800113c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800113e:	4b13      	ldr	r3, [pc, #76]	; (800118c <MX_USART2_UART_Init+0x90>)
 8001140:	2200      	movs	r2, #0
 8001142:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001144:	4811      	ldr	r0, [pc, #68]	; (800118c <MX_USART2_UART_Init+0x90>)
 8001146:	f003 fe66 	bl	8004e16 <HAL_UART_Init>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001150:	f7ff fabc 	bl	80006cc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001154:	2100      	movs	r1, #0
 8001156:	480d      	ldr	r0, [pc, #52]	; (800118c <MX_USART2_UART_Init+0x90>)
 8001158:	f005 ff89 	bl	800706e <HAL_UARTEx_SetTxFifoThreshold>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001162:	f7ff fab3 	bl	80006cc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001166:	2100      	movs	r1, #0
 8001168:	4808      	ldr	r0, [pc, #32]	; (800118c <MX_USART2_UART_Init+0x90>)
 800116a:	f005 ffbe 	bl	80070ea <HAL_UARTEx_SetRxFifoThreshold>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001174:	f7ff faaa 	bl	80006cc <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart2) != HAL_OK)
 8001178:	4804      	ldr	r0, [pc, #16]	; (800118c <MX_USART2_UART_Init+0x90>)
 800117a:	f005 ff3d 	bl	8006ff8 <HAL_UARTEx_EnableFifoMode>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001184:	f7ff faa2 	bl	80006cc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001188:	bf00      	nop
 800118a:	bd80      	pop	{r7, pc}
 800118c:	20000084 	.word	0x20000084
 8001190:	40004400 	.word	0x40004400

08001194 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b096      	sub	sp, #88	; 0x58
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800119c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80011a0:	2200      	movs	r2, #0
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	605a      	str	r2, [r3, #4]
 80011a6:	609a      	str	r2, [r3, #8]
 80011a8:	60da      	str	r2, [r3, #12]
 80011aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011ac:	f107 030c 	add.w	r3, r7, #12
 80011b0:	2238      	movs	r2, #56	; 0x38
 80011b2:	2100      	movs	r1, #0
 80011b4:	4618      	mov	r0, r3
 80011b6:	f00b f87d 	bl	800c2b4 <memset>
  if(uartHandle->Instance==USART2)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4a33      	ldr	r2, [pc, #204]	; (800128c <HAL_UART_MspInit+0xf8>)
 80011c0:	4293      	cmp	r3, r2
 80011c2:	d15f      	bne.n	8001284 <HAL_UART_MspInit+0xf0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80011c4:	2302      	movs	r3, #2
 80011c6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 80011c8:	4b31      	ldr	r3, [pc, #196]	; (8001290 <HAL_UART_MspInit+0xfc>)
 80011ca:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011cc:	f107 030c 	add.w	r3, r7, #12
 80011d0:	4618      	mov	r0, r3
 80011d2:	f002 fc9f 	bl	8003b14 <HAL_RCCEx_PeriphCLKConfig>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80011dc:	f7ff fa76 	bl	80006cc <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80011e0:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80011e4:	f7ff ff60 	bl	80010a8 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e8:	2001      	movs	r0, #1
 80011ea:	f7ff ff45 	bl	8001078 <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 80011ee:	230c      	movs	r3, #12
 80011f0:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f2:	2302      	movs	r3, #2
 80011f4:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f6:	2300      	movs	r3, #0
 80011f8:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011fa:	2303      	movs	r3, #3
 80011fc:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011fe:	2307      	movs	r3, #7
 8001200:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001202:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001206:	4619      	mov	r1, r3
 8001208:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800120c:	f000 ff6e 	bl	80020ec <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel5;
 8001210:	4b20      	ldr	r3, [pc, #128]	; (8001294 <HAL_UART_MspInit+0x100>)
 8001212:	4a21      	ldr	r2, [pc, #132]	; (8001298 <HAL_UART_MspInit+0x104>)
 8001214:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8001216:	4b1f      	ldr	r3, [pc, #124]	; (8001294 <HAL_UART_MspInit+0x100>)
 8001218:	2214      	movs	r2, #20
 800121a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800121c:	4b1d      	ldr	r3, [pc, #116]	; (8001294 <HAL_UART_MspInit+0x100>)
 800121e:	2210      	movs	r2, #16
 8001220:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001222:	4b1c      	ldr	r3, [pc, #112]	; (8001294 <HAL_UART_MspInit+0x100>)
 8001224:	2200      	movs	r2, #0
 8001226:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001228:	4b1a      	ldr	r3, [pc, #104]	; (8001294 <HAL_UART_MspInit+0x100>)
 800122a:	2280      	movs	r2, #128	; 0x80
 800122c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800122e:	4b19      	ldr	r3, [pc, #100]	; (8001294 <HAL_UART_MspInit+0x100>)
 8001230:	2200      	movs	r2, #0
 8001232:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001234:	4b17      	ldr	r3, [pc, #92]	; (8001294 <HAL_UART_MspInit+0x100>)
 8001236:	2200      	movs	r2, #0
 8001238:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800123a:	4b16      	ldr	r3, [pc, #88]	; (8001294 <HAL_UART_MspInit+0x100>)
 800123c:	2200      	movs	r2, #0
 800123e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001240:	4b14      	ldr	r3, [pc, #80]	; (8001294 <HAL_UART_MspInit+0x100>)
 8001242:	2200      	movs	r2, #0
 8001244:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001246:	4813      	ldr	r0, [pc, #76]	; (8001294 <HAL_UART_MspInit+0x100>)
 8001248:	f000 fb38 	bl	80018bc <HAL_DMA_Init>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 8001252:	f7ff fa3b 	bl	80006cc <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart2_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001256:	2110      	movs	r1, #16
 8001258:	480e      	ldr	r0, [pc, #56]	; (8001294 <HAL_UART_MspInit+0x100>)
 800125a:	f000 fe6f 	bl	8001f3c <HAL_DMA_ConfigChannelAttributes>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <HAL_UART_MspInit+0xd4>
    {
      Error_Handler();
 8001264:	f7ff fa32 	bl	80006cc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	4a0a      	ldr	r2, [pc, #40]	; (8001294 <HAL_UART_MspInit+0x100>)
 800126c:	67da      	str	r2, [r3, #124]	; 0x7c
 800126e:	4a09      	ldr	r2, [pc, #36]	; (8001294 <HAL_UART_MspInit+0x100>)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 8001274:	2200      	movs	r2, #0
 8001276:	2102      	movs	r1, #2
 8001278:	2025      	movs	r0, #37	; 0x25
 800127a:	f000 fae8 	bl	800184e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800127e:	2025      	movs	r0, #37	; 0x25
 8001280:	f000 faff 	bl	8001882 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001284:	bf00      	nop
 8001286:	3758      	adds	r7, #88	; 0x58
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	40004400 	.word	0x40004400
 8001290:	000c0004 	.word	0x000c0004
 8001294:	20000118 	.word	0x20000118
 8001298:	40020058 	.word	0x40020058

0800129c <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART2)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a0b      	ldr	r2, [pc, #44]	; (80012d8 <HAL_UART_MspDeInit+0x3c>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d110      	bne.n	80012d0 <HAL_UART_MspDeInit+0x34>
  {
  /* USER CODE BEGIN USART2_MspDeInit 0 */

  /* USER CODE END USART2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART2_CLK_DISABLE();
 80012ae:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80012b2:	f7ff ff11 	bl	80010d8 <LL_APB1_GRP1_DisableClock>

    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    HAL_GPIO_DeInit(GPIOA, USARTx_RX_Pin|USARTx_TX_Pin);
 80012b6:	210c      	movs	r1, #12
 80012b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012bc:	f001 f876 	bl	80023ac <HAL_GPIO_DeInit>

    /* USART2 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80012c4:	4618      	mov	r0, r3
 80012c6:	f000 fba1 	bl	8001a0c <HAL_DMA_DeInit>

    /* USART2 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 80012ca:	2025      	movs	r0, #37	; 0x25
 80012cc:	f000 fae7 	bl	800189e <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 80012d0:	bf00      	nop
 80012d2:	3708      	adds	r7, #8
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	40004400 	.word	0x40004400

080012dc <LL_APB1_GRP1_ForceReset>:
{
 80012dc:	b480      	push	{r7}
 80012de:	b083      	sub	sp, #12
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR1, Periphs);
 80012e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80012ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4313      	orrs	r3, r2
 80012f2:	638b      	str	r3, [r1, #56]	; 0x38
}
 80012f4:	bf00      	nop
 80012f6:	370c      	adds	r7, #12
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bc80      	pop	{r7}
 80012fc:	4770      	bx	lr

080012fe <LL_APB1_GRP1_ReleaseReset>:
{
 80012fe:	b480      	push	{r7}
 8001300:	b083      	sub	sp, #12
 8001302:	af00      	add	r7, sp, #0
 8001304:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 8001306:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800130a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	43db      	mvns	r3, r3
 8001310:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001314:	4013      	ands	r3, r2
 8001316:	638b      	str	r3, [r1, #56]	; 0x38
}
 8001318:	bf00      	nop
 800131a:	370c      	adds	r7, #12
 800131c:	46bd      	mov	sp, r7
 800131e:	bc80      	pop	{r7}
 8001320:	4770      	bx	lr
	...

08001324 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 800132c:	4b06      	ldr	r3, [pc, #24]	; (8001348 <LL_EXTI_EnableIT_0_31+0x24>)
 800132e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001332:	4905      	ldr	r1, [pc, #20]	; (8001348 <LL_EXTI_EnableIT_0_31+0x24>)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	4313      	orrs	r3, r2
 8001338:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 800133c:	bf00      	nop
 800133e:	370c      	adds	r7, #12
 8001340:	46bd      	mov	sp, r7
 8001342:	bc80      	pop	{r7}
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	58000800 	.word	0x58000800

0800134c <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 8001354:	4a07      	ldr	r2, [pc, #28]	; (8001374 <vcom_Init+0x28>)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6013      	str	r3, [r2, #0]
  MX_DMA_Init();
 800135a:	f7ff f8ab 	bl	80004b4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800135e:	f7ff fecd 	bl	80010fc <MX_USART2_UART_Init>
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_27);
 8001362:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8001366:	f7ff ffdd 	bl	8001324 <LL_EXTI_EnableIT_0_31>
  return UTIL_ADV_TRACE_OK;
 800136a:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 800136c:	4618      	mov	r0, r3
 800136e:	3708      	adds	r7, #8
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	2000017c 	.word	0x2000017c

08001378 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART2_FORCE_RESET();
 800137c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001380:	f7ff ffac 	bl	80012dc <LL_APB1_GRP1_ForceReset>
  __HAL_RCC_USART2_RELEASE_RESET();
 8001384:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001388:	f7ff ffb9 	bl	80012fe <LL_APB1_GRP1_ReleaseReset>

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart2);
 800138c:	4804      	ldr	r0, [pc, #16]	; (80013a0 <vcom_DeInit+0x28>)
 800138e:	f7ff ff85 	bl	800129c <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 8001392:	200f      	movs	r0, #15
 8001394:	f000 fa83 	bl	800189e <HAL_NVIC_DisableIRQ>

  return UTIL_ADV_TRACE_OK;
 8001398:	2300      	movs	r3, #0
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 800139a:	4618      	mov	r0, r3
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	20000084 	.word	0x20000084

080013a4 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
 80013ac:	460b      	mov	r3, r1
 80013ae:	807b      	strh	r3, [r7, #2]
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart2, p_data, size);
 80013b0:	887b      	ldrh	r3, [r7, #2]
 80013b2:	461a      	mov	r2, r3
 80013b4:	6879      	ldr	r1, [r7, #4]
 80013b6:	4804      	ldr	r0, [pc, #16]	; (80013c8 <vcom_Trace_DMA+0x24>)
 80013b8:	f003 fdca 	bl	8004f50 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
 80013bc:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	20000084 	.word	0x20000084

080013cc <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 80013d4:	4a19      	ldr	r2, [pc, #100]	; (800143c <vcom_ReceiveInit+0x70>)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6013      	str	r3, [r2, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 80013da:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80013de:	60bb      	str	r3, [r7, #8]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart2, WakeUpSelection);
 80013e0:	f107 0308 	add.w	r3, r7, #8
 80013e4:	e893 0006 	ldmia.w	r3, {r1, r2}
 80013e8:	4815      	ldr	r0, [pc, #84]	; (8001440 <vcom_ReceiveInit+0x74>)
 80013ea:	f005 fd78 	bl	8006ede <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_BUSY) == SET);
 80013ee:	bf00      	nop
 80013f0:	4b13      	ldr	r3, [pc, #76]	; (8001440 <vcom_ReceiveInit+0x74>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	69db      	ldr	r3, [r3, #28]
 80013f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013fe:	d0f7      	beq.n	80013f0 <vcom_ReceiveInit+0x24>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_REACK) == RESET);
 8001400:	bf00      	nop
 8001402:	4b0f      	ldr	r3, [pc, #60]	; (8001440 <vcom_ReceiveInit+0x74>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	69db      	ldr	r3, [r3, #28]
 8001408:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800140c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001410:	d1f7      	bne.n	8001402 <vcom_ReceiveInit+0x36>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_WUF);
 8001412:	4b0b      	ldr	r3, [pc, #44]	; (8001440 <vcom_ReceiveInit+0x74>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	689a      	ldr	r2, [r3, #8]
 8001418:	4b09      	ldr	r3, [pc, #36]	; (8001440 <vcom_ReceiveInit+0x74>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001420:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart2);
 8001422:	4807      	ldr	r0, [pc, #28]	; (8001440 <vcom_ReceiveInit+0x74>)
 8001424:	f005 fdb6 	bl	8006f94 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart2, &charRx, 1);
 8001428:	2201      	movs	r2, #1
 800142a:	4906      	ldr	r1, [pc, #24]	; (8001444 <vcom_ReceiveInit+0x78>)
 800142c:	4804      	ldr	r0, [pc, #16]	; (8001440 <vcom_ReceiveInit+0x74>)
 800142e:	f003 fd43 	bl	8004eb8 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
 8001432:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 8001434:	4618      	mov	r0, r3
 8001436:	3710      	adds	r7, #16
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	20000180 	.word	0x20000180
 8001440:	20000084 	.word	0x20000084
 8001444:	20000178 	.word	0x20000178

08001448 <vcom_Resume>:

void vcom_Resume(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800144c:	4808      	ldr	r0, [pc, #32]	; (8001470 <vcom_Resume+0x28>)
 800144e:	f003 fce2 	bl	8004e16 <HAL_UART_Init>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <vcom_Resume+0x14>
  {
    Error_Handler();
 8001458:	f7ff f938 	bl	80006cc <Error_Handler>
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800145c:	4805      	ldr	r0, [pc, #20]	; (8001474 <vcom_Resume+0x2c>)
 800145e:	f000 fa2d 	bl	80018bc <HAL_DMA_Init>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <vcom_Resume+0x24>
  {
    Error_Handler();
 8001468:	f7ff f930 	bl	80006cc <Error_Handler>
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 800146c:	bf00      	nop
 800146e:	bd80      	pop	{r7, pc}
 8001470:	20000084 	.word	0x20000084
 8001474:	20000118 	.word	0x20000118

08001478 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART2)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a05      	ldr	r2, [pc, #20]	; (800149c <HAL_UART_TxCpltCallback+0x24>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d103      	bne.n	8001492 <HAL_UART_TxCpltCallback+0x1a>
  {
    TxCpltCallback(NULL);
 800148a:	4b05      	ldr	r3, [pc, #20]	; (80014a0 <HAL_UART_TxCpltCallback+0x28>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	2000      	movs	r0, #0
 8001490:	4798      	blx	r3
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 8001492:	bf00      	nop
 8001494:	3708      	adds	r7, #8
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	40004400 	.word	0x40004400
 80014a0:	2000017c 	.word	0x2000017c

080014a4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == USART2)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a0d      	ldr	r2, [pc, #52]	; (80014e8 <HAL_UART_RxCpltCallback+0x44>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d113      	bne.n	80014de <HAL_UART_RxCpltCallback+0x3a>
  {
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 80014b6:	4b0d      	ldr	r3, [pc, #52]	; (80014ec <HAL_UART_RxCpltCallback+0x48>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d00a      	beq.n	80014d4 <HAL_UART_RxCpltCallback+0x30>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d105      	bne.n	80014d4 <HAL_UART_RxCpltCallback+0x30>
    {
      RxCpltCallback(&charRx, 1, 0);
 80014c8:	4b08      	ldr	r3, [pc, #32]	; (80014ec <HAL_UART_RxCpltCallback+0x48>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	2200      	movs	r2, #0
 80014ce:	2101      	movs	r1, #1
 80014d0:	4807      	ldr	r0, [pc, #28]	; (80014f0 <HAL_UART_RxCpltCallback+0x4c>)
 80014d2:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 80014d4:	2201      	movs	r2, #1
 80014d6:	4906      	ldr	r1, [pc, #24]	; (80014f0 <HAL_UART_RxCpltCallback+0x4c>)
 80014d8:	6878      	ldr	r0, [r7, #4]
 80014da:	f003 fced 	bl	8004eb8 <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 80014de:	bf00      	nop
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	40004400 	.word	0x40004400
 80014ec:	20000180 	.word	0x20000180
 80014f0:	20000178 	.word	0x20000178

080014f4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80014f4:	480d      	ldr	r0, [pc, #52]	; (800152c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80014f6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80014f8:	f7ff fb7a 	bl	8000bf0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014fc:	480c      	ldr	r0, [pc, #48]	; (8001530 <LoopForever+0x6>)
  ldr r1, =_edata
 80014fe:	490d      	ldr	r1, [pc, #52]	; (8001534 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001500:	4a0d      	ldr	r2, [pc, #52]	; (8001538 <LoopForever+0xe>)
  movs r3, #0
 8001502:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001504:	e002      	b.n	800150c <LoopCopyDataInit>

08001506 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001506:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001508:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800150a:	3304      	adds	r3, #4

0800150c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800150c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800150e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001510:	d3f9      	bcc.n	8001506 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001512:	4a0a      	ldr	r2, [pc, #40]	; (800153c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001514:	4c0a      	ldr	r4, [pc, #40]	; (8001540 <LoopForever+0x16>)
  movs r3, #0
 8001516:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001518:	e001      	b.n	800151e <LoopFillZerobss>

0800151a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800151a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800151c:	3204      	adds	r2, #4

0800151e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800151e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001520:	d3fb      	bcc.n	800151a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001522:	f00a fee1 	bl	800c2e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001526:	f7ff f86c 	bl	8000602 <main>

0800152a <LoopForever>:

LoopForever:
    b LoopForever
 800152a:	e7fe      	b.n	800152a <LoopForever>
  ldr   r0, =_estack
 800152c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001530:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001534:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8001538:	0800c8c0 	.word	0x0800c8c0
  ldr r2, =_sbss
 800153c:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8001540:	200008a4 	.word	0x200008a4

08001544 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001544:	e7fe      	b.n	8001544 <ADC_IRQHandler>
	...

08001548 <Olimex_ConfigRfSwitch>:
 *      Author: Sagar Dev
 */

#include "olimex_bsp.h"

void Olimex_ConfigRfSwitch(OLIMEX_Switch_TypeDef Config) {
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	4603      	mov	r3, r0
 8001550:	71fb      	strb	r3, [r7, #7]
	switch (Config) {
 8001552:	79fb      	ldrb	r3, [r7, #7]
 8001554:	2b01      	cmp	r3, #1
 8001556:	dc02      	bgt.n	800155e <Olimex_ConfigRfSwitch+0x16>
 8001558:	2b00      	cmp	r3, #0
 800155a:	da04      	bge.n	8001566 <Olimex_ConfigRfSwitch+0x1e>
		HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET);
		break;
	}
	default:
		break;
 800155c:	e01d      	b.n	800159a <Olimex_ConfigRfSwitch+0x52>
 800155e:	3b02      	subs	r3, #2
	switch (Config) {
 8001560:	2b01      	cmp	r3, #1
 8001562:	d81a      	bhi.n	800159a <Olimex_ConfigRfSwitch+0x52>
 8001564:	e00c      	b.n	8001580 <Olimex_ConfigRfSwitch+0x38>
		HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET);
 8001566:	2201      	movs	r2, #1
 8001568:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800156c:	480d      	ldr	r0, [pc, #52]	; (80015a4 <Olimex_ConfigRfSwitch+0x5c>)
 800156e:	f000 ffeb 	bl	8002548 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8001572:	2200      	movs	r2, #0
 8001574:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001578:	480b      	ldr	r0, [pc, #44]	; (80015a8 <Olimex_ConfigRfSwitch+0x60>)
 800157a:	f000 ffe5 	bl	8002548 <HAL_GPIO_WritePin>
		break;
 800157e:	e00d      	b.n	800159c <Olimex_ConfigRfSwitch+0x54>
		HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8001580:	2200      	movs	r2, #0
 8001582:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001586:	4807      	ldr	r0, [pc, #28]	; (80015a4 <Olimex_ConfigRfSwitch+0x5c>)
 8001588:	f000 ffde 	bl	8002548 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET);
 800158c:	2201      	movs	r2, #1
 800158e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001592:	4805      	ldr	r0, [pc, #20]	; (80015a8 <Olimex_ConfigRfSwitch+0x60>)
 8001594:	f000 ffd8 	bl	8002548 <HAL_GPIO_WritePin>
		break;
 8001598:	e000      	b.n	800159c <Olimex_ConfigRfSwitch+0x54>
		break;
 800159a:	bf00      	nop
	}
}
 800159c:	bf00      	nop
 800159e:	3708      	adds	r7, #8
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	48000800 	.word	0x48000800
 80015a8:	48000400 	.word	0x48000400

080015ac <LL_DBGMCU_DisableDBGSleepMode>:
  * @brief  Disable the CPU1 Debug Module during SLEEP mode
  * @rmtoll DBGMCU_CR    DBG_SLEEP     LL_DBGMCU_DisableDBGSleepMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_DisableDBGSleepMode(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 80015b0:	4b04      	ldr	r3, [pc, #16]	; (80015c4 <LL_DBGMCU_DisableDBGSleepMode+0x18>)
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	4a03      	ldr	r2, [pc, #12]	; (80015c4 <LL_DBGMCU_DisableDBGSleepMode+0x18>)
 80015b6:	f023 0301 	bic.w	r3, r3, #1
 80015ba:	6053      	str	r3, [r2, #4]
}
 80015bc:	bf00      	nop
 80015be:	46bd      	mov	sp, r7
 80015c0:	bc80      	pop	{r7}
 80015c2:	4770      	bx	lr
 80015c4:	e0042000 	.word	0xe0042000

080015c8 <LL_DBGMCU_DisableDBGStopMode>:
  * @brief  Disable the Debug Module during STOP mode
  * @rmtoll DBGMCU_CR    DBG_STOP      LL_DBGMCU_DisableDBGStopMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_DisableDBGStopMode(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80015cc:	4b04      	ldr	r3, [pc, #16]	; (80015e0 <LL_DBGMCU_DisableDBGStopMode+0x18>)
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	4a03      	ldr	r2, [pc, #12]	; (80015e0 <LL_DBGMCU_DisableDBGStopMode+0x18>)
 80015d2:	f023 0302 	bic.w	r3, r3, #2
 80015d6:	6053      	str	r3, [r2, #4]
}
 80015d8:	bf00      	nop
 80015da:	46bd      	mov	sp, r7
 80015dc:	bc80      	pop	{r7}
 80015de:	4770      	bx	lr
 80015e0:	e0042000 	.word	0xe0042000

080015e4 <LL_DBGMCU_DisableDBGStandbyMode>:
  * @brief  Disable the Debug Module during STANDBY mode
  * @rmtoll DBGMCU_CR    DBG_STANDBY   LL_DBGMCU_DisableDBGStandbyMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_DisableDBGStandbyMode(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 80015e8:	4b04      	ldr	r3, [pc, #16]	; (80015fc <LL_DBGMCU_DisableDBGStandbyMode+0x18>)
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	4a03      	ldr	r2, [pc, #12]	; (80015fc <LL_DBGMCU_DisableDBGStandbyMode+0x18>)
 80015ee:	f023 0304 	bic.w	r3, r3, #4
 80015f2:	6053      	str	r3, [r2, #4]
}
 80015f4:	bf00      	nop
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bc80      	pop	{r7}
 80015fa:	4770      	bx	lr
 80015fc:	e0042000 	.word	0xe0042000

08001600 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001606:	2300      	movs	r3, #0
 8001608:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800160a:	2003      	movs	r0, #3
 800160c:	f000 f914 	bl	8001838 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001610:	f002 f8a2 	bl	8003758 <HAL_RCC_GetHCLKFreq>
 8001614:	4603      	mov	r3, r0
 8001616:	4a09      	ldr	r2, [pc, #36]	; (800163c <HAL_Init+0x3c>)
 8001618:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800161a:	200f      	movs	r0, #15
 800161c:	f7ff fa68 	bl	8000af0 <HAL_InitTick>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d002      	beq.n	800162c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	71fb      	strb	r3, [r7, #7]
 800162a:	e001      	b.n	8001630 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800162c:	f7ff f945 	bl	80008ba <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001630:	79fb      	ldrb	r3, [r7, #7]
}
 8001632:	4618      	mov	r0, r3
 8001634:	3708      	adds	r7, #8
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	20000000 	.word	0x20000000

08001640 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8001644:	4b04      	ldr	r3, [pc, #16]	; (8001658 <HAL_SuspendTick+0x18>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a03      	ldr	r2, [pc, #12]	; (8001658 <HAL_SuspendTick+0x18>)
 800164a:	f023 0302 	bic.w	r3, r3, #2
 800164e:	6013      	str	r3, [r2, #0]
}
 8001650:	bf00      	nop
 8001652:	46bd      	mov	sp, r7
 8001654:	bc80      	pop	{r7}
 8001656:	4770      	bx	lr
 8001658:	e000e010 	.word	0xe000e010

0800165c <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8001660:	4b04      	ldr	r3, [pc, #16]	; (8001674 <HAL_ResumeTick+0x18>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a03      	ldr	r2, [pc, #12]	; (8001674 <HAL_ResumeTick+0x18>)
 8001666:	f043 0302 	orr.w	r3, r3, #2
 800166a:	6013      	str	r3, [r2, #0]
}
 800166c:	bf00      	nop
 800166e:	46bd      	mov	sp, r7
 8001670:	bc80      	pop	{r7}
 8001672:	4770      	bx	lr
 8001674:	e000e010 	.word	0xe000e010

08001678 <HAL_DBGMCU_DisableDBGSleepMode>:
/**
  * @brief  Disable the CPU1 Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGSleepMode();
 800167c:	f7ff ff96 	bl	80015ac <LL_DBGMCU_DisableDBGSleepMode>
}
 8001680:	bf00      	nop
 8001682:	bd80      	pop	{r7, pc}

08001684 <HAL_DBGMCU_DisableDBGStopMode>:
/**
  * @brief  Disable the CPU1 Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStopMode();
 8001688:	f7ff ff9e 	bl	80015c8 <LL_DBGMCU_DisableDBGStopMode>
}
 800168c:	bf00      	nop
 800168e:	bd80      	pop	{r7, pc}

08001690 <HAL_DBGMCU_DisableDBGStandbyMode>:
/**
  * @brief  Disable the CPU1 Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStandbyMode();
 8001694:	f7ff ffa6 	bl	80015e4 <LL_DBGMCU_DisableDBGStandbyMode>
}
 8001698:	bf00      	nop
 800169a:	bd80      	pop	{r7, pc}

0800169c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800169c:	b480      	push	{r7}
 800169e:	b085      	sub	sp, #20
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	f003 0307 	and.w	r3, r3, #7
 80016aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016ac:	4b0c      	ldr	r3, [pc, #48]	; (80016e0 <__NVIC_SetPriorityGrouping+0x44>)
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016b2:	68ba      	ldr	r2, [r7, #8]
 80016b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016b8:	4013      	ands	r3, r2
 80016ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016ce:	4a04      	ldr	r2, [pc, #16]	; (80016e0 <__NVIC_SetPriorityGrouping+0x44>)
 80016d0:	68bb      	ldr	r3, [r7, #8]
 80016d2:	60d3      	str	r3, [r2, #12]
}
 80016d4:	bf00      	nop
 80016d6:	3714      	adds	r7, #20
 80016d8:	46bd      	mov	sp, r7
 80016da:	bc80      	pop	{r7}
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop
 80016e0:	e000ed00 	.word	0xe000ed00

080016e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016e8:	4b04      	ldr	r3, [pc, #16]	; (80016fc <__NVIC_GetPriorityGrouping+0x18>)
 80016ea:	68db      	ldr	r3, [r3, #12]
 80016ec:	0a1b      	lsrs	r3, r3, #8
 80016ee:	f003 0307 	and.w	r3, r3, #7
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bc80      	pop	{r7}
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	e000ed00 	.word	0xe000ed00

08001700 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	4603      	mov	r3, r0
 8001708:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800170a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800170e:	2b00      	cmp	r3, #0
 8001710:	db0b      	blt.n	800172a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001712:	79fb      	ldrb	r3, [r7, #7]
 8001714:	f003 021f 	and.w	r2, r3, #31
 8001718:	4906      	ldr	r1, [pc, #24]	; (8001734 <__NVIC_EnableIRQ+0x34>)
 800171a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800171e:	095b      	lsrs	r3, r3, #5
 8001720:	2001      	movs	r0, #1
 8001722:	fa00 f202 	lsl.w	r2, r0, r2
 8001726:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800172a:	bf00      	nop
 800172c:	370c      	adds	r7, #12
 800172e:	46bd      	mov	sp, r7
 8001730:	bc80      	pop	{r7}
 8001732:	4770      	bx	lr
 8001734:	e000e100 	.word	0xe000e100

08001738 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	4603      	mov	r3, r0
 8001740:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001746:	2b00      	cmp	r3, #0
 8001748:	db12      	blt.n	8001770 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800174a:	79fb      	ldrb	r3, [r7, #7]
 800174c:	f003 021f 	and.w	r2, r3, #31
 8001750:	490a      	ldr	r1, [pc, #40]	; (800177c <__NVIC_DisableIRQ+0x44>)
 8001752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001756:	095b      	lsrs	r3, r3, #5
 8001758:	2001      	movs	r0, #1
 800175a:	fa00 f202 	lsl.w	r2, r0, r2
 800175e:	3320      	adds	r3, #32
 8001760:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001764:	f3bf 8f4f 	dsb	sy
}
 8001768:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800176a:	f3bf 8f6f 	isb	sy
}
 800176e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001770:	bf00      	nop
 8001772:	370c      	adds	r7, #12
 8001774:	46bd      	mov	sp, r7
 8001776:	bc80      	pop	{r7}
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	e000e100 	.word	0xe000e100

08001780 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001780:	b480      	push	{r7}
 8001782:	b083      	sub	sp, #12
 8001784:	af00      	add	r7, sp, #0
 8001786:	4603      	mov	r3, r0
 8001788:	6039      	str	r1, [r7, #0]
 800178a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800178c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001790:	2b00      	cmp	r3, #0
 8001792:	db0a      	blt.n	80017aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	b2da      	uxtb	r2, r3
 8001798:	490c      	ldr	r1, [pc, #48]	; (80017cc <__NVIC_SetPriority+0x4c>)
 800179a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800179e:	0112      	lsls	r2, r2, #4
 80017a0:	b2d2      	uxtb	r2, r2
 80017a2:	440b      	add	r3, r1
 80017a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017a8:	e00a      	b.n	80017c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	b2da      	uxtb	r2, r3
 80017ae:	4908      	ldr	r1, [pc, #32]	; (80017d0 <__NVIC_SetPriority+0x50>)
 80017b0:	79fb      	ldrb	r3, [r7, #7]
 80017b2:	f003 030f 	and.w	r3, r3, #15
 80017b6:	3b04      	subs	r3, #4
 80017b8:	0112      	lsls	r2, r2, #4
 80017ba:	b2d2      	uxtb	r2, r2
 80017bc:	440b      	add	r3, r1
 80017be:	761a      	strb	r2, [r3, #24]
}
 80017c0:	bf00      	nop
 80017c2:	370c      	adds	r7, #12
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bc80      	pop	{r7}
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop
 80017cc:	e000e100 	.word	0xe000e100
 80017d0:	e000ed00 	.word	0xe000ed00

080017d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b089      	sub	sp, #36	; 0x24
 80017d8:	af00      	add	r7, sp, #0
 80017da:	60f8      	str	r0, [r7, #12]
 80017dc:	60b9      	str	r1, [r7, #8]
 80017de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	f003 0307 	and.w	r3, r3, #7
 80017e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017e8:	69fb      	ldr	r3, [r7, #28]
 80017ea:	f1c3 0307 	rsb	r3, r3, #7
 80017ee:	2b04      	cmp	r3, #4
 80017f0:	bf28      	it	cs
 80017f2:	2304      	movcs	r3, #4
 80017f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	3304      	adds	r3, #4
 80017fa:	2b06      	cmp	r3, #6
 80017fc:	d902      	bls.n	8001804 <NVIC_EncodePriority+0x30>
 80017fe:	69fb      	ldr	r3, [r7, #28]
 8001800:	3b03      	subs	r3, #3
 8001802:	e000      	b.n	8001806 <NVIC_EncodePriority+0x32>
 8001804:	2300      	movs	r3, #0
 8001806:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001808:	f04f 32ff 	mov.w	r2, #4294967295
 800180c:	69bb      	ldr	r3, [r7, #24]
 800180e:	fa02 f303 	lsl.w	r3, r2, r3
 8001812:	43da      	mvns	r2, r3
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	401a      	ands	r2, r3
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800181c:	f04f 31ff 	mov.w	r1, #4294967295
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	fa01 f303 	lsl.w	r3, r1, r3
 8001826:	43d9      	mvns	r1, r3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800182c:	4313      	orrs	r3, r2
         );
}
 800182e:	4618      	mov	r0, r3
 8001830:	3724      	adds	r7, #36	; 0x24
 8001832:	46bd      	mov	sp, r7
 8001834:	bc80      	pop	{r7}
 8001836:	4770      	bx	lr

08001838 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001840:	6878      	ldr	r0, [r7, #4]
 8001842:	f7ff ff2b 	bl	800169c <__NVIC_SetPriorityGrouping>
}
 8001846:	bf00      	nop
 8001848:	3708      	adds	r7, #8
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}

0800184e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800184e:	b580      	push	{r7, lr}
 8001850:	b086      	sub	sp, #24
 8001852:	af00      	add	r7, sp, #0
 8001854:	4603      	mov	r3, r0
 8001856:	60b9      	str	r1, [r7, #8]
 8001858:	607a      	str	r2, [r7, #4]
 800185a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800185c:	f7ff ff42 	bl	80016e4 <__NVIC_GetPriorityGrouping>
 8001860:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001862:	687a      	ldr	r2, [r7, #4]
 8001864:	68b9      	ldr	r1, [r7, #8]
 8001866:	6978      	ldr	r0, [r7, #20]
 8001868:	f7ff ffb4 	bl	80017d4 <NVIC_EncodePriority>
 800186c:	4602      	mov	r2, r0
 800186e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001872:	4611      	mov	r1, r2
 8001874:	4618      	mov	r0, r3
 8001876:	f7ff ff83 	bl	8001780 <__NVIC_SetPriority>
}
 800187a:	bf00      	nop
 800187c:	3718      	adds	r7, #24
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}

08001882 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001882:	b580      	push	{r7, lr}
 8001884:	b082      	sub	sp, #8
 8001886:	af00      	add	r7, sp, #0
 8001888:	4603      	mov	r3, r0
 800188a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800188c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001890:	4618      	mov	r0, r3
 8001892:	f7ff ff35 	bl	8001700 <__NVIC_EnableIRQ>
}
 8001896:	bf00      	nop
 8001898:	3708      	adds	r7, #8
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}

0800189e <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800189e:	b580      	push	{r7, lr}
 80018a0:	b082      	sub	sp, #8
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	4603      	mov	r3, r0
 80018a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80018a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7ff ff43 	bl	8001738 <__NVIC_DisableIRQ>
}
 80018b2:	bf00      	nop
 80018b4:	3708      	adds	r7, #8
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
	...

080018bc <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d101      	bne.n	80018ce <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e08e      	b.n	80019ec <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	461a      	mov	r2, r3
 80018d4:	4b47      	ldr	r3, [pc, #284]	; (80019f4 <HAL_DMA_Init+0x138>)
 80018d6:	429a      	cmp	r2, r3
 80018d8:	d80f      	bhi.n	80018fa <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	461a      	mov	r2, r3
 80018e0:	4b45      	ldr	r3, [pc, #276]	; (80019f8 <HAL_DMA_Init+0x13c>)
 80018e2:	4413      	add	r3, r2
 80018e4:	4a45      	ldr	r2, [pc, #276]	; (80019fc <HAL_DMA_Init+0x140>)
 80018e6:	fba2 2303 	umull	r2, r3, r2, r3
 80018ea:	091b      	lsrs	r3, r3, #4
 80018ec:	009a      	lsls	r2, r3, #2
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4a42      	ldr	r2, [pc, #264]	; (8001a00 <HAL_DMA_Init+0x144>)
 80018f6:	641a      	str	r2, [r3, #64]	; 0x40
 80018f8:	e00e      	b.n	8001918 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	461a      	mov	r2, r3
 8001900:	4b40      	ldr	r3, [pc, #256]	; (8001a04 <HAL_DMA_Init+0x148>)
 8001902:	4413      	add	r3, r2
 8001904:	4a3d      	ldr	r2, [pc, #244]	; (80019fc <HAL_DMA_Init+0x140>)
 8001906:	fba2 2303 	umull	r2, r3, r2, r3
 800190a:	091b      	lsrs	r3, r3, #4
 800190c:	009a      	lsls	r2, r3, #2
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4a3c      	ldr	r2, [pc, #240]	; (8001a08 <HAL_DMA_Init+0x14c>)
 8001916:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2202      	movs	r2, #2
 800191c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	687a      	ldr	r2, [r7, #4]
 8001928:	6812      	ldr	r2, [r2, #0]
 800192a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800192e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001932:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	6819      	ldr	r1, [r3, #0]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	689a      	ldr	r2, [r3, #8]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	68db      	ldr	r3, [r3, #12]
 8001942:	431a      	orrs	r2, r3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	691b      	ldr	r3, [r3, #16]
 8001948:	431a      	orrs	r2, r3
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	695b      	ldr	r3, [r3, #20]
 800194e:	431a      	orrs	r2, r3
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	699b      	ldr	r3, [r3, #24]
 8001954:	431a      	orrs	r2, r3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	69db      	ldr	r3, [r3, #28]
 800195a:	431a      	orrs	r2, r3
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6a1b      	ldr	r3, [r3, #32]
 8001960:	431a      	orrs	r2, r3
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	430a      	orrs	r2, r1
 8001968:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	f000 fb52 	bl	8002014 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001978:	d102      	bne.n	8001980 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2200      	movs	r2, #0
 800197e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	685a      	ldr	r2, [r3, #4]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001988:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800198c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001992:	687a      	ldr	r2, [r7, #4]
 8001994:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001996:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d010      	beq.n	80019c2 <HAL_DMA_Init+0x106>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	2b04      	cmp	r3, #4
 80019a6:	d80c      	bhi.n	80019c2 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80019a8:	6878      	ldr	r0, [r7, #4]
 80019aa:	f000 fb7b 	bl	80020a4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019b2:	2200      	movs	r2, #0
 80019b4:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019ba:	687a      	ldr	r2, [r7, #4]
 80019bc:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80019be:	605a      	str	r2, [r3, #4]
 80019c0:	e008      	b.n	80019d4 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = NULL;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2200      	movs	r2, #0
 80019c6:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = NULL;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2200      	movs	r2, #0
 80019cc:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2200      	movs	r2, #0
 80019d2:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2200      	movs	r2, #0
 80019d8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2201      	movs	r2, #1
 80019de:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2200      	movs	r2, #0
 80019e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80019ea:	2300      	movs	r3, #0
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3708      	adds	r7, #8
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	40020407 	.word	0x40020407
 80019f8:	bffdfff8 	.word	0xbffdfff8
 80019fc:	cccccccd 	.word	0xcccccccd
 8001a00:	40020000 	.word	0x40020000
 8001a04:	bffdfbf8 	.word	0xbffdfbf8
 8001a08:	40020400 	.word	0x40020400

08001a0c <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d101      	bne.n	8001a1e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e07b      	b.n	8001b16 <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f022 0201 	bic.w	r2, r2, #1
 8001a2c:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	461a      	mov	r2, r3
 8001a34:	4b3a      	ldr	r3, [pc, #232]	; (8001b20 <HAL_DMA_DeInit+0x114>)
 8001a36:	429a      	cmp	r2, r3
 8001a38:	d80f      	bhi.n	8001a5a <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	461a      	mov	r2, r3
 8001a40:	4b38      	ldr	r3, [pc, #224]	; (8001b24 <HAL_DMA_DeInit+0x118>)
 8001a42:	4413      	add	r3, r2
 8001a44:	4a38      	ldr	r2, [pc, #224]	; (8001b28 <HAL_DMA_DeInit+0x11c>)
 8001a46:	fba2 2303 	umull	r2, r3, r2, r3
 8001a4a:	091b      	lsrs	r3, r3, #4
 8001a4c:	009a      	lsls	r2, r3, #2
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4a35      	ldr	r2, [pc, #212]	; (8001b2c <HAL_DMA_DeInit+0x120>)
 8001a56:	641a      	str	r2, [r3, #64]	; 0x40
 8001a58:	e00e      	b.n	8001a78 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	461a      	mov	r2, r3
 8001a60:	4b33      	ldr	r3, [pc, #204]	; (8001b30 <HAL_DMA_DeInit+0x124>)
 8001a62:	4413      	add	r3, r2
 8001a64:	4a30      	ldr	r2, [pc, #192]	; (8001b28 <HAL_DMA_DeInit+0x11c>)
 8001a66:	fba2 2303 	umull	r2, r3, r2, r3
 8001a6a:	091b      	lsrs	r3, r3, #4
 8001a6c:	009a      	lsls	r2, r3, #2
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4a2f      	ldr	r2, [pc, #188]	; (8001b34 <HAL_DMA_DeInit+0x128>)
 8001a76:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a84:	f003 021c 	and.w	r2, r3, #28
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8c:	2101      	movs	r1, #1
 8001a8e:	fa01 f202 	lsl.w	r2, r1, r2
 8001a92:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001a94:	6878      	ldr	r0, [r7, #4]
 8001a96:	f000 fabd 	bl	8002014 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aa6:	687a      	ldr	r2, [r7, #4]
 8001aa8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001aaa:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d00f      	beq.n	8001ad4 <HAL_DMA_DeInit+0xc8>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	2b04      	cmp	r3, #4
 8001aba:	d80b      	bhi.n	8001ad4 <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001abc:	6878      	ldr	r0, [r7, #4]
 8001abe:	f000 faf1 	bl	80020a4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ace:	687a      	ldr	r2, [r7, #4]
 8001ad0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001ad2:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = NULL;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = NULL;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2200      	movs	r2, #0
 8001ade:	659a      	str	r2, [r3, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2200      	movs	r2, #0
 8001af0:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2200      	movs	r2, #0
 8001af6:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2200      	movs	r2, #0
 8001afc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2200      	movs	r2, #0
 8001b02:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2200      	movs	r2, #0
 8001b08:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2200      	movs	r2, #0
 8001b10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001b14:	2300      	movs	r3, #0
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3708      	adds	r7, #8
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	40020407 	.word	0x40020407
 8001b24:	bffdfff8 	.word	0xbffdfff8
 8001b28:	cccccccd 	.word	0xcccccccd
 8001b2c:	40020000 	.word	0x40020000
 8001b30:	bffdfbf8 	.word	0xbffdfbf8
 8001b34:	40020400 	.word	0x40020400

08001b38 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b086      	sub	sp, #24
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	60f8      	str	r0, [r7, #12]
 8001b40:	60b9      	str	r1, [r7, #8]
 8001b42:	607a      	str	r2, [r7, #4]
 8001b44:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b46:	2300      	movs	r3, #0
 8001b48:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d101      	bne.n	8001b58 <HAL_DMA_Start_IT+0x20>
 8001b54:	2302      	movs	r3, #2
 8001b56:	e069      	b.n	8001c2c <HAL_DMA_Start_IT+0xf4>
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001b66:	b2db      	uxtb	r3, r3
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	d155      	bne.n	8001c18 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	2202      	movs	r2, #2
 8001b70:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	2200      	movs	r2, #0
 8001b78:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f022 0201 	bic.w	r2, r2, #1
 8001b88:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	687a      	ldr	r2, [r7, #4]
 8001b8e:	68b9      	ldr	r1, [r7, #8]
 8001b90:	68f8      	ldr	r0, [r7, #12]
 8001b92:	f000 fa02 	bl	8001f9a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d008      	beq.n	8001bb0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f042 020e 	orr.w	r2, r2, #14
 8001bac:	601a      	str	r2, [r3, #0]
 8001bae:	e00f      	b.n	8001bd0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f022 0204 	bic.w	r2, r2, #4
 8001bbe:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f042 020a 	orr.w	r2, r2, #10
 8001bce:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d007      	beq.n	8001bee <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001be8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001bec:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != NULL)
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d007      	beq.n	8001c06 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c00:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c04:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f042 0201 	orr.w	r2, r2, #1
 8001c14:	601a      	str	r2, [r3, #0]
 8001c16:	e008      	b.n	8001c2a <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	2280      	movs	r2, #128	; 0x80
 8001c1c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	2200      	movs	r2, #0
 8001c22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Return error status */
    status = HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8001c2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3718      	adds	r7, #24
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}

08001c34 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d101      	bne.n	8001c46 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e04f      	b.n	8001ce6 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	2b02      	cmp	r3, #2
 8001c50:	d008      	beq.n	8001c64 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2204      	movs	r2, #4
 8001c56:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	e040      	b.n	8001ce6 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f022 020e 	bic.w	r2, r2, #14
 8001c72:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c7e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c82:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f022 0201 	bic.w	r2, r2, #1
 8001c92:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c98:	f003 021c 	and.w	r2, r3, #28
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca0:	2101      	movs	r1, #1
 8001ca2:	fa01 f202 	lsl.w	r2, r1, r2
 8001ca6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cac:	687a      	ldr	r2, [r7, #4]
 8001cae:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001cb0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d00c      	beq.n	8001cd4 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cc4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001cc8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cce:	687a      	ldr	r2, [r7, #4]
 8001cd0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001cd2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8001ce4:	2300      	movs	r3, #0
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	370c      	adds	r7, #12
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bc80      	pop	{r7}
 8001cee:	4770      	bx	lr

08001cf0 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b084      	sub	sp, #16
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001d02:	b2db      	uxtb	r3, r3
 8001d04:	2b02      	cmp	r3, #2
 8001d06:	d005      	beq.n	8001d14 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2204      	movs	r2, #4
 8001d0c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	73fb      	strb	r3, [r7, #15]
 8001d12:	e047      	b.n	8001da4 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f022 020e 	bic.w	r2, r2, #14
 8001d22:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f022 0201 	bic.w	r2, r2, #1
 8001d32:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d3e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d42:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d48:	f003 021c 	and.w	r2, r3, #28
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d50:	2101      	movs	r1, #1
 8001d52:	fa01 f202 	lsl.w	r2, r1, r2
 8001d56:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d5c:	687a      	ldr	r2, [r7, #4]
 8001d5e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001d60:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d00c      	beq.n	8001d84 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d74:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d78:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d7e:	687a      	ldr	r2, [r7, #4]
 8001d80:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001d82:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2201      	movs	r2, #1
 8001d88:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d003      	beq.n	8001da4 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	4798      	blx	r3
    }
  }
  return status;
 8001da4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3710      	adds	r7, #16
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
	...

08001db0 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b084      	sub	sp, #16
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dcc:	f003 031c 	and.w	r3, r3, #28
 8001dd0:	2204      	movs	r2, #4
 8001dd2:	409a      	lsls	r2, r3
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d027      	beq.n	8001e2c <HAL_DMA_IRQHandler+0x7c>
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	f003 0304 	and.w	r3, r3, #4
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d022      	beq.n	8001e2c <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 0320 	and.w	r3, r3, #32
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d107      	bne.n	8001e04 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f022 0204 	bic.w	r2, r2, #4
 8001e02:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e08:	f003 021c 	and.w	r2, r3, #28
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e10:	2104      	movs	r1, #4
 8001e12:	fa01 f202 	lsl.w	r2, r1, r2
 8001e16:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	f000 8081 	beq.w	8001f24 <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8001e2a:	e07b      	b.n	8001f24 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e30:	f003 031c 	and.w	r3, r3, #28
 8001e34:	2202      	movs	r2, #2
 8001e36:	409a      	lsls	r2, r3
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d03d      	beq.n	8001ebc <HAL_DMA_IRQHandler+0x10c>
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	f003 0302 	and.w	r3, r3, #2
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d038      	beq.n	8001ebc <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 0320 	and.w	r3, r3, #32
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d10b      	bne.n	8001e70 <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f022 020a 	bic.w	r2, r2, #10
 8001e66:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	461a      	mov	r2, r3
 8001e76:	4b2e      	ldr	r3, [pc, #184]	; (8001f30 <HAL_DMA_IRQHandler+0x180>)
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d909      	bls.n	8001e90 <HAL_DMA_IRQHandler+0xe0>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e80:	f003 031c 	and.w	r3, r3, #28
 8001e84:	4a2b      	ldr	r2, [pc, #172]	; (8001f34 <HAL_DMA_IRQHandler+0x184>)
 8001e86:	2102      	movs	r1, #2
 8001e88:	fa01 f303 	lsl.w	r3, r1, r3
 8001e8c:	6053      	str	r3, [r2, #4]
 8001e8e:	e008      	b.n	8001ea2 <HAL_DMA_IRQHandler+0xf2>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e94:	f003 031c 	and.w	r3, r3, #28
 8001e98:	4a27      	ldr	r2, [pc, #156]	; (8001f38 <HAL_DMA_IRQHandler+0x188>)
 8001e9a:	2102      	movs	r1, #2
 8001e9c:	fa01 f303 	lsl.w	r3, r1, r3
 8001ea0:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if (hdma->XferCpltCallback != NULL)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d038      	beq.n	8001f24 <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8001eba:	e033      	b.n	8001f24 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ec0:	f003 031c 	and.w	r3, r3, #28
 8001ec4:	2208      	movs	r2, #8
 8001ec6:	409a      	lsls	r2, r3
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	4013      	ands	r3, r2
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d02a      	beq.n	8001f26 <HAL_DMA_IRQHandler+0x176>
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	f003 0308 	and.w	r3, r3, #8
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d025      	beq.n	8001f26 <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f022 020e 	bic.w	r2, r2, #14
 8001ee8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eee:	f003 021c 	and.w	r2, r3, #28
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef6:	2101      	movs	r1, #1
 8001ef8:	fa01 f202 	lsl.w	r2, r1, r2
 8001efc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2201      	movs	r2, #1
 8001f02:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2201      	movs	r2, #1
 8001f08:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d004      	beq.n	8001f26 <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001f24:	bf00      	nop
 8001f26:	bf00      	nop
}
 8001f28:	3710      	adds	r7, #16
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	40020080 	.word	0x40020080
 8001f34:	40020400 	.word	0x40020400
 8001f38:	40020000 	.word	0x40020000

08001f3c <HAL_DMA_ConfigChannelAttributes>:
  * @param ChannelAttributes specifies the DMA channel secure/privilege attributes.
  *        This parameter can be a one or a combination of @ref DMA_Channel_Attributes
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *hdma, uint32_t ChannelAttributes)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b085      	sub	sp, #20
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
 8001f44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f46:	2300      	movs	r3, #0
 8001f48:	72fb      	strb	r3, [r7, #11]
#if defined (CORE_CM0PLUS)
  uint32_t ccr_SECM;
#endif /* CORE_CM0PLUS */

  /* Check the DMA peripheral handle */
  if (hdma == NULL)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d103      	bne.n	8001f58 <HAL_DMA_ConfigChannelAttributes+0x1c>
  {
    status = HAL_ERROR;
 8001f50:	2301      	movs	r3, #1
 8001f52:	72fb      	strb	r3, [r7, #11]
    return status;
 8001f54:	7afb      	ldrb	r3, [r7, #11]
 8001f56:	e01b      	b.n	8001f90 <HAL_DMA_ConfigChannelAttributes+0x54>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Read CCR register */
  ccr = READ_REG(hdma->Instance->CCR);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	60fb      	str	r3, [r7, #12]

  /* Apply any requested privilege/non-privilege attributes */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	f003 0310 	and.w	r3, r3, #16
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d00d      	beq.n	8001f86 <HAL_DMA_ConfigChannelAttributes+0x4a>
  {
    if ((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d004      	beq.n	8001f7e <HAL_DMA_ConfigChannelAttributes+0x42>
    {
      SET_BIT(ccr, DMA_CCR_PRIV);
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f7a:	60fb      	str	r3, [r7, #12]
 8001f7c:	e003      	b.n	8001f86 <HAL_DMA_ConfigChannelAttributes+0x4a>
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001f84:	60fb      	str	r3, [r7, #12]
  }

#endif /* CORE_CM0PLUS */

  /* Update CCR Register: PRIV, SECM, SCEC, DSEC bits */
  WRITE_REG(hdma->Instance->CCR, ccr);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	68fa      	ldr	r2, [r7, #12]
 8001f8c:	601a      	str	r2, [r3, #0]

  return status;
 8001f8e:	7afb      	ldrb	r3, [r7, #11]
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	3714      	adds	r7, #20
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bc80      	pop	{r7}
 8001f98:	4770      	bx	lr

08001f9a <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f9a:	b480      	push	{r7}
 8001f9c:	b085      	sub	sp, #20
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	60f8      	str	r0, [r7, #12]
 8001fa2:	60b9      	str	r1, [r7, #8]
 8001fa4:	607a      	str	r2, [r7, #4]
 8001fa6:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fac:	68fa      	ldr	r2, [r7, #12]
 8001fae:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001fb0:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != NULL)
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d004      	beq.n	8001fc4 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fbe:	68fa      	ldr	r2, [r7, #12]
 8001fc0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001fc2:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc8:	f003 021c 	and.w	r2, r3, #28
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd0:	2101      	movs	r1, #1
 8001fd2:	fa01 f202 	lsl.w	r2, r1, r2
 8001fd6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	683a      	ldr	r2, [r7, #0]
 8001fde:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	2b10      	cmp	r3, #16
 8001fe6:	d108      	bne.n	8001ffa <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	687a      	ldr	r2, [r7, #4]
 8001fee:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	68ba      	ldr	r2, [r7, #8]
 8001ff6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001ff8:	e007      	b.n	800200a <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	68ba      	ldr	r2, [r7, #8]
 8002000:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	687a      	ldr	r2, [r7, #4]
 8002008:	60da      	str	r2, [r3, #12]
}
 800200a:	bf00      	nop
 800200c:	3714      	adds	r7, #20
 800200e:	46bd      	mov	sp, r7
 8002010:	bc80      	pop	{r7}
 8002012:	4770      	bx	lr

08002014 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002014:	b480      	push	{r7}
 8002016:	b085      	sub	sp, #20
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	461a      	mov	r2, r3
 8002022:	4b1c      	ldr	r3, [pc, #112]	; (8002094 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 8002024:	429a      	cmp	r2, r3
 8002026:	d813      	bhi.n	8002050 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800202c:	089b      	lsrs	r3, r3, #2
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002034:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8002038:	687a      	ldr	r2, [r7, #4]
 800203a:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	b2db      	uxtb	r3, r3
 8002042:	3b08      	subs	r3, #8
 8002044:	4a14      	ldr	r2, [pc, #80]	; (8002098 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8002046:	fba2 2303 	umull	r2, r3, r2, r3
 800204a:	091b      	lsrs	r3, r3, #4
 800204c:	60fb      	str	r3, [r7, #12]
 800204e:	e011      	b.n	8002074 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002054:	089b      	lsrs	r3, r3, #2
 8002056:	009a      	lsls	r2, r3, #2
 8002058:	4b10      	ldr	r3, [pc, #64]	; (800209c <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 800205a:	4413      	add	r3, r2
 800205c:	687a      	ldr	r2, [r7, #4]
 800205e:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	b2db      	uxtb	r3, r3
 8002066:	3b08      	subs	r3, #8
 8002068:	4a0b      	ldr	r2, [pc, #44]	; (8002098 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 800206a:	fba2 2303 	umull	r2, r3, r2, r3
 800206e:	091b      	lsrs	r3, r3, #4
 8002070:	3307      	adds	r3, #7
 8002072:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	4a0a      	ldr	r2, [pc, #40]	; (80020a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8002078:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	f003 031f 	and.w	r3, r3, #31
 8002080:	2201      	movs	r2, #1
 8002082:	409a      	lsls	r2, r3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002088:	bf00      	nop
 800208a:	3714      	adds	r7, #20
 800208c:	46bd      	mov	sp, r7
 800208e:	bc80      	pop	{r7}
 8002090:	4770      	bx	lr
 8002092:	bf00      	nop
 8002094:	40020407 	.word	0x40020407
 8002098:	cccccccd 	.word	0xcccccccd
 800209c:	4002081c 	.word	0x4002081c
 80020a0:	40020880 	.word	0x40020880

080020a4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b085      	sub	sp, #20
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80020b4:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80020b6:	68fa      	ldr	r2, [r7, #12]
 80020b8:	4b0a      	ldr	r3, [pc, #40]	; (80020e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80020ba:	4413      	add	r3, r2
 80020bc:	009b      	lsls	r3, r3, #2
 80020be:	461a      	mov	r2, r3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	4a08      	ldr	r2, [pc, #32]	; (80020e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80020c8:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	3b01      	subs	r3, #1
 80020ce:	f003 0303 	and.w	r3, r3, #3
 80020d2:	2201      	movs	r2, #1
 80020d4:	409a      	lsls	r2, r3
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80020da:	bf00      	nop
 80020dc:	3714      	adds	r7, #20
 80020de:	46bd      	mov	sp, r7
 80020e0:	bc80      	pop	{r7}
 80020e2:	4770      	bx	lr
 80020e4:	1000823f 	.word	0x1000823f
 80020e8:	40020940 	.word	0x40020940

080020ec <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b087      	sub	sp, #28
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80020f6:	2300      	movs	r3, #0
 80020f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020fa:	e140      	b.n	800237e <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	2101      	movs	r1, #1
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	fa01 f303 	lsl.w	r3, r1, r3
 8002108:	4013      	ands	r3, r2
 800210a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	2b00      	cmp	r3, #0
 8002110:	f000 8132 	beq.w	8002378 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f003 0303 	and.w	r3, r3, #3
 800211c:	2b01      	cmp	r3, #1
 800211e:	d005      	beq.n	800212c <HAL_GPIO_Init+0x40>
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f003 0303 	and.w	r3, r3, #3
 8002128:	2b02      	cmp	r3, #2
 800212a:	d130      	bne.n	800218e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	005b      	lsls	r3, r3, #1
 8002136:	2203      	movs	r2, #3
 8002138:	fa02 f303 	lsl.w	r3, r2, r3
 800213c:	43db      	mvns	r3, r3
 800213e:	693a      	ldr	r2, [r7, #16]
 8002140:	4013      	ands	r3, r2
 8002142:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	68da      	ldr	r2, [r3, #12]
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	005b      	lsls	r3, r3, #1
 800214c:	fa02 f303 	lsl.w	r3, r2, r3
 8002150:	693a      	ldr	r2, [r7, #16]
 8002152:	4313      	orrs	r3, r2
 8002154:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	693a      	ldr	r2, [r7, #16]
 800215a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002162:	2201      	movs	r2, #1
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	fa02 f303 	lsl.w	r3, r2, r3
 800216a:	43db      	mvns	r3, r3
 800216c:	693a      	ldr	r2, [r7, #16]
 800216e:	4013      	ands	r3, r2
 8002170:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	091b      	lsrs	r3, r3, #4
 8002178:	f003 0201 	and.w	r2, r3, #1
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	fa02 f303 	lsl.w	r3, r2, r3
 8002182:	693a      	ldr	r2, [r7, #16]
 8002184:	4313      	orrs	r3, r2
 8002186:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	693a      	ldr	r2, [r7, #16]
 800218c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	f003 0303 	and.w	r3, r3, #3
 8002196:	2b03      	cmp	r3, #3
 8002198:	d017      	beq.n	80021ca <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	68db      	ldr	r3, [r3, #12]
 800219e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	005b      	lsls	r3, r3, #1
 80021a4:	2203      	movs	r2, #3
 80021a6:	fa02 f303 	lsl.w	r3, r2, r3
 80021aa:	43db      	mvns	r3, r3
 80021ac:	693a      	ldr	r2, [r7, #16]
 80021ae:	4013      	ands	r3, r2
 80021b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	689a      	ldr	r2, [r3, #8]
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	005b      	lsls	r3, r3, #1
 80021ba:	fa02 f303 	lsl.w	r3, r2, r3
 80021be:	693a      	ldr	r2, [r7, #16]
 80021c0:	4313      	orrs	r3, r2
 80021c2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	693a      	ldr	r2, [r7, #16]
 80021c8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	f003 0303 	and.w	r3, r3, #3
 80021d2:	2b02      	cmp	r3, #2
 80021d4:	d123      	bne.n	800221e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	08da      	lsrs	r2, r3, #3
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	3208      	adds	r2, #8
 80021de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	f003 0307 	and.w	r3, r3, #7
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	220f      	movs	r2, #15
 80021ee:	fa02 f303 	lsl.w	r3, r2, r3
 80021f2:	43db      	mvns	r3, r3
 80021f4:	693a      	ldr	r2, [r7, #16]
 80021f6:	4013      	ands	r3, r2
 80021f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	691a      	ldr	r2, [r3, #16]
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	f003 0307 	and.w	r3, r3, #7
 8002204:	009b      	lsls	r3, r3, #2
 8002206:	fa02 f303 	lsl.w	r3, r2, r3
 800220a:	693a      	ldr	r2, [r7, #16]
 800220c:	4313      	orrs	r3, r2
 800220e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	08da      	lsrs	r2, r3, #3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	3208      	adds	r2, #8
 8002218:	6939      	ldr	r1, [r7, #16]
 800221a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	005b      	lsls	r3, r3, #1
 8002228:	2203      	movs	r2, #3
 800222a:	fa02 f303 	lsl.w	r3, r2, r3
 800222e:	43db      	mvns	r3, r3
 8002230:	693a      	ldr	r2, [r7, #16]
 8002232:	4013      	ands	r3, r2
 8002234:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	f003 0203 	and.w	r2, r3, #3
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	005b      	lsls	r3, r3, #1
 8002242:	fa02 f303 	lsl.w	r3, r2, r3
 8002246:	693a      	ldr	r2, [r7, #16]
 8002248:	4313      	orrs	r3, r2
 800224a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	693a      	ldr	r2, [r7, #16]
 8002250:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800225a:	2b00      	cmp	r3, #0
 800225c:	f000 808c 	beq.w	8002378 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8002260:	4a4e      	ldr	r2, [pc, #312]	; (800239c <HAL_GPIO_Init+0x2b0>)
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	089b      	lsrs	r3, r3, #2
 8002266:	3302      	adds	r3, #2
 8002268:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800226c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	f003 0303 	and.w	r3, r3, #3
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	2207      	movs	r2, #7
 8002278:	fa02 f303 	lsl.w	r3, r2, r3
 800227c:	43db      	mvns	r3, r3
 800227e:	693a      	ldr	r2, [r7, #16]
 8002280:	4013      	ands	r3, r2
 8002282:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800228a:	d00d      	beq.n	80022a8 <HAL_GPIO_Init+0x1bc>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	4a44      	ldr	r2, [pc, #272]	; (80023a0 <HAL_GPIO_Init+0x2b4>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d007      	beq.n	80022a4 <HAL_GPIO_Init+0x1b8>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	4a43      	ldr	r2, [pc, #268]	; (80023a4 <HAL_GPIO_Init+0x2b8>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d101      	bne.n	80022a0 <HAL_GPIO_Init+0x1b4>
 800229c:	2302      	movs	r3, #2
 800229e:	e004      	b.n	80022aa <HAL_GPIO_Init+0x1be>
 80022a0:	2307      	movs	r3, #7
 80022a2:	e002      	b.n	80022aa <HAL_GPIO_Init+0x1be>
 80022a4:	2301      	movs	r3, #1
 80022a6:	e000      	b.n	80022aa <HAL_GPIO_Init+0x1be>
 80022a8:	2300      	movs	r3, #0
 80022aa:	697a      	ldr	r2, [r7, #20]
 80022ac:	f002 0203 	and.w	r2, r2, #3
 80022b0:	0092      	lsls	r2, r2, #2
 80022b2:	4093      	lsls	r3, r2
 80022b4:	693a      	ldr	r2, [r7, #16]
 80022b6:	4313      	orrs	r3, r2
 80022b8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80022ba:	4938      	ldr	r1, [pc, #224]	; (800239c <HAL_GPIO_Init+0x2b0>)
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	089b      	lsrs	r3, r3, #2
 80022c0:	3302      	adds	r3, #2
 80022c2:	693a      	ldr	r2, [r7, #16]
 80022c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80022c8:	4b37      	ldr	r3, [pc, #220]	; (80023a8 <HAL_GPIO_Init+0x2bc>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	43db      	mvns	r3, r3
 80022d2:	693a      	ldr	r2, [r7, #16]
 80022d4:	4013      	ands	r3, r2
 80022d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d003      	beq.n	80022ec <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 80022e4:	693a      	ldr	r2, [r7, #16]
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	4313      	orrs	r3, r2
 80022ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80022ec:	4a2e      	ldr	r2, [pc, #184]	; (80023a8 <HAL_GPIO_Init+0x2bc>)
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80022f2:	4b2d      	ldr	r3, [pc, #180]	; (80023a8 <HAL_GPIO_Init+0x2bc>)
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	43db      	mvns	r3, r3
 80022fc:	693a      	ldr	r2, [r7, #16]
 80022fe:	4013      	ands	r3, r2
 8002300:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800230a:	2b00      	cmp	r3, #0
 800230c:	d003      	beq.n	8002316 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 800230e:	693a      	ldr	r2, [r7, #16]
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	4313      	orrs	r3, r2
 8002314:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002316:	4a24      	ldr	r2, [pc, #144]	; (80023a8 <HAL_GPIO_Init+0x2bc>)
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 800231c:	4b22      	ldr	r3, [pc, #136]	; (80023a8 <HAL_GPIO_Init+0x2bc>)
 800231e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002322:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	43db      	mvns	r3, r3
 8002328:	693a      	ldr	r2, [r7, #16]
 800232a:	4013      	ands	r3, r2
 800232c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d003      	beq.n	8002342 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 800233a:	693a      	ldr	r2, [r7, #16]
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	4313      	orrs	r3, r2
 8002340:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8002342:	4a19      	ldr	r2, [pc, #100]	; (80023a8 <HAL_GPIO_Init+0x2bc>)
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 800234a:	4b17      	ldr	r3, [pc, #92]	; (80023a8 <HAL_GPIO_Init+0x2bc>)
 800234c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002350:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	43db      	mvns	r3, r3
 8002356:	693a      	ldr	r2, [r7, #16]
 8002358:	4013      	ands	r3, r2
 800235a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002364:	2b00      	cmp	r3, #0
 8002366:	d003      	beq.n	8002370 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002368:	693a      	ldr	r2, [r7, #16]
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	4313      	orrs	r3, r2
 800236e:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8002370:	4a0d      	ldr	r2, [pc, #52]	; (80023a8 <HAL_GPIO_Init+0x2bc>)
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	3301      	adds	r3, #1
 800237c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	fa22 f303 	lsr.w	r3, r2, r3
 8002388:	2b00      	cmp	r3, #0
 800238a:	f47f aeb7 	bne.w	80020fc <HAL_GPIO_Init+0x10>
  }
}
 800238e:	bf00      	nop
 8002390:	bf00      	nop
 8002392:	371c      	adds	r7, #28
 8002394:	46bd      	mov	sp, r7
 8002396:	bc80      	pop	{r7}
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop
 800239c:	40010000 	.word	0x40010000
 80023a0:	48000400 	.word	0x48000400
 80023a4:	48000800 	.word	0x48000800
 80023a8:	58000800 	.word	0x58000800

080023ac <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b087      	sub	sp, #28
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80023b6:	2300      	movs	r3, #0
 80023b8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80023ba:	e0af      	b.n	800251c <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80023bc:	2201      	movs	r2, #1
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	fa02 f303 	lsl.w	r3, r2, r3
 80023c4:	683a      	ldr	r2, [r7, #0]
 80023c6:	4013      	ands	r3, r2
 80023c8:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	f000 80a2 	beq.w	8002516 <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80023d2:	4a59      	ldr	r2, [pc, #356]	; (8002538 <HAL_GPIO_DeInit+0x18c>)
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	089b      	lsrs	r3, r3, #2
 80023d8:	3302      	adds	r3, #2
 80023da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023de:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	f003 0303 	and.w	r3, r3, #3
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	2207      	movs	r2, #7
 80023ea:	fa02 f303 	lsl.w	r3, r2, r3
 80023ee:	68fa      	ldr	r2, [r7, #12]
 80023f0:	4013      	ands	r3, r2
 80023f2:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80023fa:	d00d      	beq.n	8002418 <HAL_GPIO_DeInit+0x6c>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	4a4f      	ldr	r2, [pc, #316]	; (800253c <HAL_GPIO_DeInit+0x190>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d007      	beq.n	8002414 <HAL_GPIO_DeInit+0x68>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	4a4e      	ldr	r2, [pc, #312]	; (8002540 <HAL_GPIO_DeInit+0x194>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d101      	bne.n	8002410 <HAL_GPIO_DeInit+0x64>
 800240c:	2302      	movs	r3, #2
 800240e:	e004      	b.n	800241a <HAL_GPIO_DeInit+0x6e>
 8002410:	2307      	movs	r3, #7
 8002412:	e002      	b.n	800241a <HAL_GPIO_DeInit+0x6e>
 8002414:	2301      	movs	r3, #1
 8002416:	e000      	b.n	800241a <HAL_GPIO_DeInit+0x6e>
 8002418:	2300      	movs	r3, #0
 800241a:	697a      	ldr	r2, [r7, #20]
 800241c:	f002 0203 	and.w	r2, r2, #3
 8002420:	0092      	lsls	r2, r2, #2
 8002422:	4093      	lsls	r3, r2
 8002424:	68fa      	ldr	r2, [r7, #12]
 8002426:	429a      	cmp	r2, r3
 8002428:	d136      	bne.n	8002498 <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 800242a:	4b46      	ldr	r3, [pc, #280]	; (8002544 <HAL_GPIO_DeInit+0x198>)
 800242c:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	43db      	mvns	r3, r3
 8002434:	4943      	ldr	r1, [pc, #268]	; (8002544 <HAL_GPIO_DeInit+0x198>)
 8002436:	4013      	ands	r3, r2
 8002438:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 800243c:	4b41      	ldr	r3, [pc, #260]	; (8002544 <HAL_GPIO_DeInit+0x198>)
 800243e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	43db      	mvns	r3, r3
 8002446:	493f      	ldr	r1, [pc, #252]	; (8002544 <HAL_GPIO_DeInit+0x198>)
 8002448:	4013      	ands	r3, r2
 800244a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800244e:	4b3d      	ldr	r3, [pc, #244]	; (8002544 <HAL_GPIO_DeInit+0x198>)
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	43db      	mvns	r3, r3
 8002456:	493b      	ldr	r1, [pc, #236]	; (8002544 <HAL_GPIO_DeInit+0x198>)
 8002458:	4013      	ands	r3, r2
 800245a:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 800245c:	4b39      	ldr	r3, [pc, #228]	; (8002544 <HAL_GPIO_DeInit+0x198>)
 800245e:	685a      	ldr	r2, [r3, #4]
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	43db      	mvns	r3, r3
 8002464:	4937      	ldr	r1, [pc, #220]	; (8002544 <HAL_GPIO_DeInit+0x198>)
 8002466:	4013      	ands	r3, r2
 8002468:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	f003 0303 	and.w	r3, r3, #3
 8002470:	009b      	lsls	r3, r3, #2
 8002472:	2207      	movs	r2, #7
 8002474:	fa02 f303 	lsl.w	r3, r2, r3
 8002478:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800247a:	4a2f      	ldr	r2, [pc, #188]	; (8002538 <HAL_GPIO_DeInit+0x18c>)
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	089b      	lsrs	r3, r3, #2
 8002480:	3302      	adds	r3, #2
 8002482:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	43da      	mvns	r2, r3
 800248a:	482b      	ldr	r0, [pc, #172]	; (8002538 <HAL_GPIO_DeInit+0x18c>)
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	089b      	lsrs	r3, r3, #2
 8002490:	400a      	ands	r2, r1
 8002492:	3302      	adds	r3, #2
 8002494:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	005b      	lsls	r3, r3, #1
 80024a0:	2103      	movs	r1, #3
 80024a2:	fa01 f303 	lsl.w	r3, r1, r3
 80024a6:	431a      	orrs	r2, r3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	08da      	lsrs	r2, r3, #3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	3208      	adds	r2, #8
 80024b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	f003 0307 	and.w	r3, r3, #7
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	220f      	movs	r2, #15
 80024c2:	fa02 f303 	lsl.w	r3, r2, r3
 80024c6:	43db      	mvns	r3, r3
 80024c8:	697a      	ldr	r2, [r7, #20]
 80024ca:	08d2      	lsrs	r2, r2, #3
 80024cc:	4019      	ands	r1, r3
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	3208      	adds	r2, #8
 80024d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	689a      	ldr	r2, [r3, #8]
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	005b      	lsls	r3, r3, #1
 80024de:	2103      	movs	r1, #3
 80024e0:	fa01 f303 	lsl.w	r3, r1, r3
 80024e4:	43db      	mvns	r3, r3
 80024e6:	401a      	ands	r2, r3
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	685a      	ldr	r2, [r3, #4]
 80024f0:	2101      	movs	r1, #1
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	fa01 f303 	lsl.w	r3, r1, r3
 80024f8:	43db      	mvns	r3, r3
 80024fa:	401a      	ands	r2, r3
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	68da      	ldr	r2, [r3, #12]
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	005b      	lsls	r3, r3, #1
 8002508:	2103      	movs	r1, #3
 800250a:	fa01 f303 	lsl.w	r3, r1, r3
 800250e:	43db      	mvns	r3, r3
 8002510:	401a      	ands	r2, r3
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	60da      	str	r2, [r3, #12]
    }

    position++;
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	3301      	adds	r3, #1
 800251a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800251c:	683a      	ldr	r2, [r7, #0]
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	fa22 f303 	lsr.w	r3, r2, r3
 8002524:	2b00      	cmp	r3, #0
 8002526:	f47f af49 	bne.w	80023bc <HAL_GPIO_DeInit+0x10>
  }
}
 800252a:	bf00      	nop
 800252c:	bf00      	nop
 800252e:	371c      	adds	r7, #28
 8002530:	46bd      	mov	sp, r7
 8002532:	bc80      	pop	{r7}
 8002534:	4770      	bx	lr
 8002536:	bf00      	nop
 8002538:	40010000 	.word	0x40010000
 800253c:	48000400 	.word	0x48000400
 8002540:	48000800 	.word	0x48000800
 8002544:	58000800 	.word	0x58000800

08002548 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002548:	b480      	push	{r7}
 800254a:	b083      	sub	sp, #12
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
 8002550:	460b      	mov	r3, r1
 8002552:	807b      	strh	r3, [r7, #2]
 8002554:	4613      	mov	r3, r2
 8002556:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002558:	787b      	ldrb	r3, [r7, #1]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d003      	beq.n	8002566 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800255e:	887a      	ldrh	r2, [r7, #2]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002564:	e002      	b.n	800256c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002566:	887a      	ldrh	r2, [r7, #2]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800256c:	bf00      	nop
 800256e:	370c      	adds	r7, #12
 8002570:	46bd      	mov	sp, r7
 8002572:	bc80      	pop	{r7}
 8002574:	4770      	bx	lr

08002576 <HAL_GPIO_TogglePin>:
  * @param GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002576:	b480      	push	{r7}
 8002578:	b085      	sub	sp, #20
 800257a:	af00      	add	r7, sp, #0
 800257c:	6078      	str	r0, [r7, #4]
 800257e:	460b      	mov	r3, r1
 8002580:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	695b      	ldr	r3, [r3, #20]
 8002586:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002588:	887a      	ldrh	r2, [r7, #2]
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	4013      	ands	r3, r2
 800258e:	041a      	lsls	r2, r3, #16
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	43d9      	mvns	r1, r3
 8002594:	887b      	ldrh	r3, [r7, #2]
 8002596:	400b      	ands	r3, r1
 8002598:	431a      	orrs	r2, r3
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	619a      	str	r2, [r3, #24]
}
 800259e:	bf00      	nop
 80025a0:	3714      	adds	r7, #20
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bc80      	pop	{r7}
 80025a6:	4770      	bx	lr

080025a8 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80025a8:	b480      	push	{r7}
 80025aa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80025ac:	4b04      	ldr	r3, [pc, #16]	; (80025c0 <HAL_PWR_EnableBkUpAccess+0x18>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a03      	ldr	r2, [pc, #12]	; (80025c0 <HAL_PWR_EnableBkUpAccess+0x18>)
 80025b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025b6:	6013      	str	r3, [r2, #0]
}
 80025b8:	bf00      	nop
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bc80      	pop	{r7}
 80025be:	4770      	bx	lr
 80025c0:	58000400 	.word	0x58000400

080025c4 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b082      	sub	sp, #8
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	460b      	mov	r3, r1
 80025ce:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d10c      	bne.n	80025f0 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 80025d6:	4b13      	ldr	r3, [pc, #76]	; (8002624 <HAL_PWR_EnterSLEEPMode+0x60>)
 80025d8:	695b      	ldr	r3, [r3, #20]
 80025da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025e2:	d10d      	bne.n	8002600 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 80025e4:	f000 f83c 	bl	8002660 <HAL_PWREx_DisableLowPowerRunMode>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d008      	beq.n	8002600 <HAL_PWR_EnterSLEEPMode+0x3c>
      {
        return ;
 80025ee:	e015      	b.n	800261c <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 80025f0:	4b0c      	ldr	r3, [pc, #48]	; (8002624 <HAL_PWR_EnterSLEEPMode+0x60>)
 80025f2:	695b      	ldr	r3, [r3, #20]
 80025f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d101      	bne.n	8002600 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 80025fc:	f000 f822 	bl	8002644 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002600:	4b09      	ldr	r3, [pc, #36]	; (8002628 <HAL_PWR_EnterSLEEPMode+0x64>)
 8002602:	691b      	ldr	r3, [r3, #16]
 8002604:	4a08      	ldr	r2, [pc, #32]	; (8002628 <HAL_PWR_EnterSLEEPMode+0x64>)
 8002606:	f023 0304 	bic.w	r3, r3, #4
 800260a:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 800260c:	78fb      	ldrb	r3, [r7, #3]
 800260e:	2b01      	cmp	r3, #1
 8002610:	d101      	bne.n	8002616 <HAL_PWR_EnterSLEEPMode+0x52>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8002612:	bf30      	wfi
 8002614:	e002      	b.n	800261c <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8002616:	bf40      	sev
    __WFE();
 8002618:	bf20      	wfe
    __WFE();
 800261a:	bf20      	wfe
  }
}
 800261c:	3708      	adds	r7, #8
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	58000400 	.word	0x58000400
 8002628:	e000ed00 	.word	0xe000ed00

0800262c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800262c:	b480      	push	{r7}
 800262e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8002630:	4b03      	ldr	r3, [pc, #12]	; (8002640 <HAL_PWREx_GetVoltageRange+0x14>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8002638:	4618      	mov	r0, r3
 800263a:	46bd      	mov	sp, r7
 800263c:	bc80      	pop	{r7}
 800263e:	4770      	bx	lr
 8002640:	58000400 	.word	0x58000400

08002644 <HAL_PWREx_EnableLowPowerRunMode>:
  * @note  In Low-power Run mode, all I/O pins keep the same state as in Run mode.
  * @note  Clock frequency must be reduced below 2 MHz.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 8002644:	b480      	push	{r7}
 8002646:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8002648:	4b04      	ldr	r3, [pc, #16]	; (800265c <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a03      	ldr	r2, [pc, #12]	; (800265c <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 800264e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002652:	6013      	str	r3, [r2, #0]
}
 8002654:	bf00      	nop
 8002656:	46bd      	mov	sp, r7
 8002658:	bc80      	pop	{r7}
 800265a:	4770      	bx	lr
 800265c:	58000400 	.word	0x58000400

08002660 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 8002660:	b480      	push	{r7}
 8002662:	b083      	sub	sp, #12
 8002664:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8002666:	4b16      	ldr	r3, [pc, #88]	; (80026c0 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a15      	ldr	r2, [pc, #84]	; (80026c0 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 800266c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002670:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 8002672:	4b14      	ldr	r3, [pc, #80]	; (80026c4 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	2232      	movs	r2, #50	; 0x32
 8002678:	fb02 f303 	mul.w	r3, r2, r3
 800267c:	4a12      	ldr	r2, [pc, #72]	; (80026c8 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 800267e:	fba2 2303 	umull	r2, r3, r2, r3
 8002682:	0c9b      	lsrs	r3, r3, #18
 8002684:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8002686:	e002      	b.n	800268e <HAL_PWREx_DisableLowPowerRunMode+0x2e>
  {
    wait_loop_index--;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	3b01      	subs	r3, #1
 800268c:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 800268e:	4b0c      	ldr	r3, [pc, #48]	; (80026c0 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8002690:	695b      	ldr	r3, [r3, #20]
 8002692:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002696:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800269a:	d102      	bne.n	80026a2 <HAL_PWREx_DisableLowPowerRunMode+0x42>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d1f2      	bne.n	8002688 <HAL_PWREx_DisableLowPowerRunMode+0x28>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 80026a2:	4b07      	ldr	r3, [pc, #28]	; (80026c0 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80026a4:	695b      	ldr	r3, [r3, #20]
 80026a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026ae:	d101      	bne.n	80026b4 <HAL_PWREx_DisableLowPowerRunMode+0x54>
  {
    return HAL_TIMEOUT;
 80026b0:	2303      	movs	r3, #3
 80026b2:	e000      	b.n	80026b6 <HAL_PWREx_DisableLowPowerRunMode+0x56>
  }

  return HAL_OK;
 80026b4:	2300      	movs	r3, #0
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	370c      	adds	r7, #12
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bc80      	pop	{r7}
 80026be:	4770      	bx	lr
 80026c0:	58000400 	.word	0x58000400
 80026c4:	20000000 	.word	0x20000000
 80026c8:	431bde83 	.word	0x431bde83

080026cc <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b083      	sub	sp, #12
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	4603      	mov	r3, r0
 80026d4:	71fb      	strb	r3, [r7, #7]
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 80026d6:	4b10      	ldr	r3, [pc, #64]	; (8002718 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f023 0307 	bic.w	r3, r3, #7
 80026de:	4a0e      	ldr	r2, [pc, #56]	; (8002718 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 80026e0:	f043 0302 	orr.w	r3, r3, #2
 80026e4:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80026e6:	4b0d      	ldr	r3, [pc, #52]	; (800271c <HAL_PWREx_EnterSTOP2Mode+0x50>)
 80026e8:	691b      	ldr	r3, [r3, #16]
 80026ea:	4a0c      	ldr	r2, [pc, #48]	; (800271c <HAL_PWREx_EnterSTOP2Mode+0x50>)
 80026ec:	f043 0304 	orr.w	r3, r3, #4
 80026f0:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 80026f2:	79fb      	ldrb	r3, [r7, #7]
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d101      	bne.n	80026fc <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80026f8:	bf30      	wfi
 80026fa:	e002      	b.n	8002702 <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80026fc:	bf40      	sev
    __WFE();
 80026fe:	bf20      	wfe
    __WFE();
 8002700:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002702:	4b06      	ldr	r3, [pc, #24]	; (800271c <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8002704:	691b      	ldr	r3, [r3, #16]
 8002706:	4a05      	ldr	r2, [pc, #20]	; (800271c <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8002708:	f023 0304 	bic.w	r3, r3, #4
 800270c:	6113      	str	r3, [r2, #16]
}
 800270e:	bf00      	nop
 8002710:	370c      	adds	r7, #12
 8002712:	46bd      	mov	sp, r7
 8002714:	bc80      	pop	{r7}
 8002716:	4770      	bx	lr
 8002718:	58000400 	.word	0x58000400
 800271c:	e000ed00 	.word	0xe000ed00

08002720 <LL_PWR_IsEnabledBkUpAccess>:
{
 8002720:	b480      	push	{r7}
 8002722:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8002724:	4b06      	ldr	r3, [pc, #24]	; (8002740 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800272c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002730:	d101      	bne.n	8002736 <LL_PWR_IsEnabledBkUpAccess+0x16>
 8002732:	2301      	movs	r3, #1
 8002734:	e000      	b.n	8002738 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8002736:	2300      	movs	r3, #0
}
 8002738:	4618      	mov	r0, r3
 800273a:	46bd      	mov	sp, r7
 800273c:	bc80      	pop	{r7}
 800273e:	4770      	bx	lr
 8002740:	58000400 	.word	0x58000400

08002744 <LL_RCC_HSE_EnableTcxo>:
{
 8002744:	b480      	push	{r7}
 8002746:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8002748:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002752:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002756:	6013      	str	r3, [r2, #0]
}
 8002758:	bf00      	nop
 800275a:	46bd      	mov	sp, r7
 800275c:	bc80      	pop	{r7}
 800275e:	4770      	bx	lr

08002760 <LL_RCC_HSE_DisableTcxo>:
{
 8002760:	b480      	push	{r7}
 8002762:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8002764:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800276e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002772:	6013      	str	r3, [r2, #0]
}
 8002774:	bf00      	nop
 8002776:	46bd      	mov	sp, r7
 8002778:	bc80      	pop	{r7}
 800277a:	4770      	bx	lr

0800277c <LL_RCC_HSE_IsEnabledDiv2>:
{
 800277c:	b480      	push	{r7}
 800277e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002780:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800278a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800278e:	d101      	bne.n	8002794 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002790:	2301      	movs	r3, #1
 8002792:	e000      	b.n	8002796 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8002794:	2300      	movs	r3, #0
}
 8002796:	4618      	mov	r0, r3
 8002798:	46bd      	mov	sp, r7
 800279a:	bc80      	pop	{r7}
 800279c:	4770      	bx	lr

0800279e <LL_RCC_HSE_Enable>:
{
 800279e:	b480      	push	{r7}
 80027a0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80027a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027b0:	6013      	str	r3, [r2, #0]
}
 80027b2:	bf00      	nop
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bc80      	pop	{r7}
 80027b8:	4770      	bx	lr

080027ba <LL_RCC_HSE_Disable>:
{
 80027ba:	b480      	push	{r7}
 80027bc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80027be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027cc:	6013      	str	r3, [r2, #0]
}
 80027ce:	bf00      	nop
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bc80      	pop	{r7}
 80027d4:	4770      	bx	lr

080027d6 <LL_RCC_HSE_IsReady>:
{
 80027d6:	b480      	push	{r7}
 80027d8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80027da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80027e8:	d101      	bne.n	80027ee <LL_RCC_HSE_IsReady+0x18>
 80027ea:	2301      	movs	r3, #1
 80027ec:	e000      	b.n	80027f0 <LL_RCC_HSE_IsReady+0x1a>
 80027ee:	2300      	movs	r3, #0
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bc80      	pop	{r7}
 80027f6:	4770      	bx	lr

080027f8 <LL_RCC_HSI_Enable>:
{
 80027f8:	b480      	push	{r7}
 80027fa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80027fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002806:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800280a:	6013      	str	r3, [r2, #0]
}
 800280c:	bf00      	nop
 800280e:	46bd      	mov	sp, r7
 8002810:	bc80      	pop	{r7}
 8002812:	4770      	bx	lr

08002814 <LL_RCC_HSI_Disable>:
{
 8002814:	b480      	push	{r7}
 8002816:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8002818:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002822:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002826:	6013      	str	r3, [r2, #0]
}
 8002828:	bf00      	nop
 800282a:	46bd      	mov	sp, r7
 800282c:	bc80      	pop	{r7}
 800282e:	4770      	bx	lr

08002830 <LL_RCC_HSI_IsReady>:
{
 8002830:	b480      	push	{r7}
 8002832:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002834:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800283e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002842:	d101      	bne.n	8002848 <LL_RCC_HSI_IsReady+0x18>
 8002844:	2301      	movs	r3, #1
 8002846:	e000      	b.n	800284a <LL_RCC_HSI_IsReady+0x1a>
 8002848:	2300      	movs	r3, #0
}
 800284a:	4618      	mov	r0, r3
 800284c:	46bd      	mov	sp, r7
 800284e:	bc80      	pop	{r7}
 8002850:	4770      	bx	lr

08002852 <LL_RCC_HSI_SetCalibTrimming>:
{
 8002852:	b480      	push	{r7}
 8002854:	b083      	sub	sp, #12
 8002856:	af00      	add	r7, sp, #0
 8002858:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800285a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	061b      	lsls	r3, r3, #24
 8002868:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800286c:	4313      	orrs	r3, r2
 800286e:	604b      	str	r3, [r1, #4]
}
 8002870:	bf00      	nop
 8002872:	370c      	adds	r7, #12
 8002874:	46bd      	mov	sp, r7
 8002876:	bc80      	pop	{r7}
 8002878:	4770      	bx	lr

0800287a <LL_RCC_LSE_IsReady>:
{
 800287a:	b480      	push	{r7}
 800287c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800287e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002882:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002886:	f003 0302 	and.w	r3, r3, #2
 800288a:	2b02      	cmp	r3, #2
 800288c:	d101      	bne.n	8002892 <LL_RCC_LSE_IsReady+0x18>
 800288e:	2301      	movs	r3, #1
 8002890:	e000      	b.n	8002894 <LL_RCC_LSE_IsReady+0x1a>
 8002892:	2300      	movs	r3, #0
}
 8002894:	4618      	mov	r0, r3
 8002896:	46bd      	mov	sp, r7
 8002898:	bc80      	pop	{r7}
 800289a:	4770      	bx	lr

0800289c <LL_RCC_LSI_Enable>:
{
 800289c:	b480      	push	{r7}
 800289e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 80028a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80028ac:	f043 0301 	orr.w	r3, r3, #1
 80028b0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80028b4:	bf00      	nop
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bc80      	pop	{r7}
 80028ba:	4770      	bx	lr

080028bc <LL_RCC_LSI_Disable>:
{
 80028bc:	b480      	push	{r7}
 80028be:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80028c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80028cc:	f023 0301 	bic.w	r3, r3, #1
 80028d0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80028d4:	bf00      	nop
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bc80      	pop	{r7}
 80028da:	4770      	bx	lr

080028dc <LL_RCC_LSI_IsReady>:
{
 80028dc:	b480      	push	{r7}
 80028de:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 80028e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028e8:	f003 0302 	and.w	r3, r3, #2
 80028ec:	2b02      	cmp	r3, #2
 80028ee:	d101      	bne.n	80028f4 <LL_RCC_LSI_IsReady+0x18>
 80028f0:	2301      	movs	r3, #1
 80028f2:	e000      	b.n	80028f6 <LL_RCC_LSI_IsReady+0x1a>
 80028f4:	2300      	movs	r3, #0
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bc80      	pop	{r7}
 80028fc:	4770      	bx	lr

080028fe <LL_RCC_MSI_Enable>:
{
 80028fe:	b480      	push	{r7}
 8002900:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002902:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800290c:	f043 0301 	orr.w	r3, r3, #1
 8002910:	6013      	str	r3, [r2, #0]
}
 8002912:	bf00      	nop
 8002914:	46bd      	mov	sp, r7
 8002916:	bc80      	pop	{r7}
 8002918:	4770      	bx	lr

0800291a <LL_RCC_MSI_Disable>:
{
 800291a:	b480      	push	{r7}
 800291c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800291e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002928:	f023 0301 	bic.w	r3, r3, #1
 800292c:	6013      	str	r3, [r2, #0]
}
 800292e:	bf00      	nop
 8002930:	46bd      	mov	sp, r7
 8002932:	bc80      	pop	{r7}
 8002934:	4770      	bx	lr

08002936 <LL_RCC_MSI_IsReady>:
{
 8002936:	b480      	push	{r7}
 8002938:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800293a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 0302 	and.w	r3, r3, #2
 8002944:	2b02      	cmp	r3, #2
 8002946:	d101      	bne.n	800294c <LL_RCC_MSI_IsReady+0x16>
 8002948:	2301      	movs	r3, #1
 800294a:	e000      	b.n	800294e <LL_RCC_MSI_IsReady+0x18>
 800294c:	2300      	movs	r3, #0
}
 800294e:	4618      	mov	r0, r3
 8002950:	46bd      	mov	sp, r7
 8002952:	bc80      	pop	{r7}
 8002954:	4770      	bx	lr

08002956 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8002956:	b480      	push	{r7}
 8002958:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 800295a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 0308 	and.w	r3, r3, #8
 8002964:	2b08      	cmp	r3, #8
 8002966:	d101      	bne.n	800296c <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8002968:	2301      	movs	r3, #1
 800296a:	e000      	b.n	800296e <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 800296c:	2300      	movs	r3, #0
}
 800296e:	4618      	mov	r0, r3
 8002970:	46bd      	mov	sp, r7
 8002972:	bc80      	pop	{r7}
 8002974:	4770      	bx	lr

08002976 <LL_RCC_MSI_GetRange>:
{
 8002976:	b480      	push	{r7}
 8002978:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 800297a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002984:	4618      	mov	r0, r3
 8002986:	46bd      	mov	sp, r7
 8002988:	bc80      	pop	{r7}
 800298a:	4770      	bx	lr

0800298c <LL_RCC_MSI_GetRangeAfterStandby>:
{
 800298c:	b480      	push	{r7}
 800298e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8002990:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002994:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002998:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 800299c:	4618      	mov	r0, r3
 800299e:	46bd      	mov	sp, r7
 80029a0:	bc80      	pop	{r7}
 80029a2:	4770      	bx	lr

080029a4 <LL_RCC_MSI_SetCalibTrimming>:
{
 80029a4:	b480      	push	{r7}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80029ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	021b      	lsls	r3, r3, #8
 80029ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80029be:	4313      	orrs	r3, r2
 80029c0:	604b      	str	r3, [r1, #4]
}
 80029c2:	bf00      	nop
 80029c4:	370c      	adds	r7, #12
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bc80      	pop	{r7}
 80029ca:	4770      	bx	lr

080029cc <LL_RCC_SetSysClkSource>:
{
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80029d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	f023 0203 	bic.w	r2, r3, #3
 80029de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	608b      	str	r3, [r1, #8]
}
 80029e8:	bf00      	nop
 80029ea:	370c      	adds	r7, #12
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bc80      	pop	{r7}
 80029f0:	4770      	bx	lr

080029f2 <LL_RCC_GetSysClkSource>:
{
 80029f2:	b480      	push	{r7}
 80029f4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80029f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	f003 030c 	and.w	r3, r3, #12
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bc80      	pop	{r7}
 8002a06:	4770      	bx	lr

08002a08 <LL_RCC_SetAHBPrescaler>:
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002a10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a1a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4313      	orrs	r3, r2
 8002a22:	608b      	str	r3, [r1, #8]
}
 8002a24:	bf00      	nop
 8002a26:	370c      	adds	r7, #12
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bc80      	pop	{r7}
 8002a2c:	4770      	bx	lr

08002a2e <LL_C2_RCC_SetAHBPrescaler>:
{
 8002a2e:	b480      	push	{r7}
 8002a30:	b083      	sub	sp, #12
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8002a36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a3a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002a3e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a42:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002a4e:	bf00      	nop
 8002a50:	370c      	adds	r7, #12
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bc80      	pop	{r7}
 8002a56:	4770      	bx	lr

08002a58 <LL_RCC_SetAHB3Prescaler>:
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b083      	sub	sp, #12
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8002a60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a64:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002a68:	f023 020f 	bic.w	r2, r3, #15
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	091b      	lsrs	r3, r3, #4
 8002a70:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a74:	4313      	orrs	r3, r2
 8002a76:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002a7a:	bf00      	nop
 8002a7c:	370c      	adds	r7, #12
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bc80      	pop	{r7}
 8002a82:	4770      	bx	lr

08002a84 <LL_RCC_SetAPB1Prescaler>:
{
 8002a84:	b480      	push	{r7}
 8002a86:	b083      	sub	sp, #12
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002a8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a96:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	608b      	str	r3, [r1, #8]
}
 8002aa0:	bf00      	nop
 8002aa2:	370c      	adds	r7, #12
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bc80      	pop	{r7}
 8002aa8:	4770      	bx	lr

08002aaa <LL_RCC_SetAPB2Prescaler>:
{
 8002aaa:	b480      	push	{r7}
 8002aac:	b083      	sub	sp, #12
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002ab2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002abc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	608b      	str	r3, [r1, #8]
}
 8002ac6:	bf00      	nop
 8002ac8:	370c      	adds	r7, #12
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bc80      	pop	{r7}
 8002ace:	4770      	bx	lr

08002ad0 <LL_RCC_GetAHBPrescaler>:
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002ad4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bc80      	pop	{r7}
 8002ae4:	4770      	bx	lr

08002ae6 <LL_RCC_GetAHB3Prescaler>:
{
 8002ae6:	b480      	push	{r7}
 8002ae8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002aea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002aee:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002af2:	011b      	lsls	r3, r3, #4
 8002af4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bc80      	pop	{r7}
 8002afe:	4770      	bx	lr

08002b00 <LL_RCC_GetAPB1Prescaler>:
{
 8002b00:	b480      	push	{r7}
 8002b02:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002b04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bc80      	pop	{r7}
 8002b14:	4770      	bx	lr

08002b16 <LL_RCC_GetAPB2Prescaler>:
{
 8002b16:	b480      	push	{r7}
 8002b18:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002b1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bc80      	pop	{r7}
 8002b2a:	4770      	bx	lr

08002b2c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002b30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b3e:	6013      	str	r3, [r2, #0]
}
 8002b40:	bf00      	nop
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bc80      	pop	{r7}
 8002b46:	4770      	bx	lr

08002b48 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002b4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b5a:	6013      	str	r3, [r2, #0]
}
 8002b5c:	bf00      	nop
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bc80      	pop	{r7}
 8002b62:	4770      	bx	lr

08002b64 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002b64:	b480      	push	{r7}
 8002b66:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002b68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b72:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002b76:	d101      	bne.n	8002b7c <LL_RCC_PLL_IsReady+0x18>
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e000      	b.n	8002b7e <LL_RCC_PLL_IsReady+0x1a>
 8002b7c:	2300      	movs	r3, #0
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bc80      	pop	{r7}
 8002b84:	4770      	bx	lr

08002b86 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002b86:	b480      	push	{r7}
 8002b88:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002b8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	0a1b      	lsrs	r3, r3, #8
 8002b92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bc80      	pop	{r7}
 8002b9c:	4770      	bx	lr

08002b9e <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002b9e:	b480      	push	{r7}
 8002ba0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002ba2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bc80      	pop	{r7}
 8002bb2:	4770      	bx	lr

08002bb4 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002bb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bbc:	68db      	ldr	r3, [r3, #12]
 8002bbe:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bc80      	pop	{r7}
 8002bc8:	4770      	bx	lr

08002bca <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002bca:	b480      	push	{r7}
 8002bcc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002bce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	f003 0303 	and.w	r3, r3, #3
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bc80      	pop	{r7}
 8002bde:	4770      	bx	lr

08002be0 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002be0:	b480      	push	{r7}
 8002be2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002be4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bf2:	d101      	bne.n	8002bf8 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e000      	b.n	8002bfa <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8002bf8:	2300      	movs	r3, #0
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bc80      	pop	{r7}
 8002c00:	4770      	bx	lr

08002c02 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8002c02:	b480      	push	{r7}
 8002c04:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8002c06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c0a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c12:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002c16:	d101      	bne.n	8002c1c <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e000      	b.n	8002c1e <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8002c1c:	2300      	movs	r3, #0
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bc80      	pop	{r7}
 8002c24:	4770      	bx	lr

08002c26 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002c26:	b480      	push	{r7}
 8002c28:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002c2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c2e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002c32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c3a:	d101      	bne.n	8002c40 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e000      	b.n	8002c42 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8002c40:	2300      	movs	r3, #0
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bc80      	pop	{r7}
 8002c48:	4770      	bx	lr

08002c4a <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8002c4a:	b480      	push	{r7}
 8002c4c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8002c4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c58:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002c5c:	d101      	bne.n	8002c62 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e000      	b.n	8002c64 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8002c62:	2300      	movs	r3, #0
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bc80      	pop	{r7}
 8002c6a:	4770      	bx	lr

08002c6c <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002c70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c7a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002c7e:	d101      	bne.n	8002c84 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8002c80:	2301      	movs	r3, #1
 8002c82:	e000      	b.n	8002c86 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002c84:	2300      	movs	r3, #0
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bc80      	pop	{r7}
 8002c8c:	4770      	bx	lr
	...

08002c90 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b088      	sub	sp, #32
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d101      	bne.n	8002ca2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e36f      	b.n	8003382 <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ca2:	f7ff fea6 	bl	80029f2 <LL_RCC_GetSysClkSource>
 8002ca6:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ca8:	f7ff ff8f 	bl	8002bca <LL_RCC_PLL_GetMainSource>
 8002cac:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 0320 	and.w	r3, r3, #32
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	f000 80c4 	beq.w	8002e44 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d005      	beq.n	8002cce <HAL_RCC_OscConfig+0x3e>
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	2b0c      	cmp	r3, #12
 8002cc6:	d176      	bne.n	8002db6 <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002cc8:	69bb      	ldr	r3, [r7, #24]
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d173      	bne.n	8002db6 <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6a1b      	ldr	r3, [r3, #32]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d101      	bne.n	8002cda <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e353      	b.n	8003382 <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002cde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 0308 	and.w	r3, r3, #8
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d005      	beq.n	8002cf8 <HAL_RCC_OscConfig+0x68>
 8002cec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002cf6:	e006      	b.n	8002d06 <HAL_RCC_OscConfig+0x76>
 8002cf8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cfc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d00:	091b      	lsrs	r3, r3, #4
 8002d02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d222      	bcs.n	8002d50 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f000 fd5a 	bl	80037c8 <RCC_SetFlashLatencyFromMSIRange>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d001      	beq.n	8002d1e <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e331      	b.n	8003382 <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d28:	f043 0308 	orr.w	r3, r3, #8
 8002d2c:	6013      	str	r3, [r2, #0]
 8002d2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d3c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d40:	4313      	orrs	r3, r2
 8002d42:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f7ff fe2b 	bl	80029a4 <LL_RCC_MSI_SetCalibTrimming>
 8002d4e:	e021      	b.n	8002d94 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d5a:	f043 0308 	orr.w	r3, r3, #8
 8002d5e:	6013      	str	r3, [r2, #0]
 8002d60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d6e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d72:	4313      	orrs	r3, r2
 8002d74:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f7ff fe12 	bl	80029a4 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d84:	4618      	mov	r0, r3
 8002d86:	f000 fd1f 	bl	80037c8 <RCC_SetFlashLatencyFromMSIRange>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d001      	beq.n	8002d94 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	e2f6      	b.n	8003382 <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002d94:	f000 fce0 	bl	8003758 <HAL_RCC_GetHCLKFreq>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	4aa7      	ldr	r2, [pc, #668]	; (8003038 <HAL_RCC_OscConfig+0x3a8>)
 8002d9c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8002d9e:	4ba7      	ldr	r3, [pc, #668]	; (800303c <HAL_RCC_OscConfig+0x3ac>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4618      	mov	r0, r3
 8002da4:	f7fd fea4 	bl	8000af0 <HAL_InitTick>
 8002da8:	4603      	mov	r3, r0
 8002daa:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8002dac:	7cfb      	ldrb	r3, [r7, #19]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d047      	beq.n	8002e42 <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8002db2:	7cfb      	ldrb	r3, [r7, #19]
 8002db4:	e2e5      	b.n	8003382 <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6a1b      	ldr	r3, [r3, #32]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d02c      	beq.n	8002e18 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002dbe:	f7ff fd9e 	bl	80028fe <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002dc2:	f7fd fe9f 	bl	8000b04 <HAL_GetTick>
 8002dc6:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8002dc8:	e008      	b.n	8002ddc <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002dca:	f7fd fe9b 	bl	8000b04 <HAL_GetTick>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	1ad3      	subs	r3, r2, r3
 8002dd4:	2b02      	cmp	r3, #2
 8002dd6:	d901      	bls.n	8002ddc <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8002dd8:	2303      	movs	r3, #3
 8002dda:	e2d2      	b.n	8003382 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002ddc:	f7ff fdab 	bl	8002936 <LL_RCC_MSI_IsReady>
 8002de0:	4603      	mov	r3, r0
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d0f1      	beq.n	8002dca <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002de6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002df0:	f043 0308 	orr.w	r3, r3, #8
 8002df4:	6013      	str	r3, [r2, #0]
 8002df6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e04:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e10:	4618      	mov	r0, r3
 8002e12:	f7ff fdc7 	bl	80029a4 <LL_RCC_MSI_SetCalibTrimming>
 8002e16:	e015      	b.n	8002e44 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002e18:	f7ff fd7f 	bl	800291a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002e1c:	f7fd fe72 	bl	8000b04 <HAL_GetTick>
 8002e20:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002e22:	e008      	b.n	8002e36 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e24:	f7fd fe6e 	bl	8000b04 <HAL_GetTick>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	1ad3      	subs	r3, r2, r3
 8002e2e:	2b02      	cmp	r3, #2
 8002e30:	d901      	bls.n	8002e36 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8002e32:	2303      	movs	r3, #3
 8002e34:	e2a5      	b.n	8003382 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002e36:	f7ff fd7e 	bl	8002936 <LL_RCC_MSI_IsReady>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d1f1      	bne.n	8002e24 <HAL_RCC_OscConfig+0x194>
 8002e40:	e000      	b.n	8002e44 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002e42:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 0301 	and.w	r3, r3, #1
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d058      	beq.n	8002f02 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002e50:	69fb      	ldr	r3, [r7, #28]
 8002e52:	2b08      	cmp	r3, #8
 8002e54:	d005      	beq.n	8002e62 <HAL_RCC_OscConfig+0x1d2>
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	2b0c      	cmp	r3, #12
 8002e5a:	d108      	bne.n	8002e6e <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002e5c:	69bb      	ldr	r3, [r7, #24]
 8002e5e:	2b03      	cmp	r3, #3
 8002e60:	d105      	bne.n	8002e6e <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d14b      	bne.n	8002f02 <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e289      	b.n	8003382 <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8002e6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e80:	4313      	orrs	r3, r2
 8002e82:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e8c:	d102      	bne.n	8002e94 <HAL_RCC_OscConfig+0x204>
 8002e8e:	f7ff fc86 	bl	800279e <LL_RCC_HSE_Enable>
 8002e92:	e00d      	b.n	8002eb0 <HAL_RCC_OscConfig+0x220>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8002e9c:	d104      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x218>
 8002e9e:	f7ff fc51 	bl	8002744 <LL_RCC_HSE_EnableTcxo>
 8002ea2:	f7ff fc7c 	bl	800279e <LL_RCC_HSE_Enable>
 8002ea6:	e003      	b.n	8002eb0 <HAL_RCC_OscConfig+0x220>
 8002ea8:	f7ff fc87 	bl	80027ba <LL_RCC_HSE_Disable>
 8002eac:	f7ff fc58 	bl	8002760 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d012      	beq.n	8002ede <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eb8:	f7fd fe24 	bl	8000b04 <HAL_GetTick>
 8002ebc:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002ebe:	e008      	b.n	8002ed2 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ec0:	f7fd fe20 	bl	8000b04 <HAL_GetTick>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	2b64      	cmp	r3, #100	; 0x64
 8002ecc:	d901      	bls.n	8002ed2 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8002ece:	2303      	movs	r3, #3
 8002ed0:	e257      	b.n	8003382 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 8002ed2:	f7ff fc80 	bl	80027d6 <LL_RCC_HSE_IsReady>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d0f1      	beq.n	8002ec0 <HAL_RCC_OscConfig+0x230>
 8002edc:	e011      	b.n	8002f02 <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ede:	f7fd fe11 	bl	8000b04 <HAL_GetTick>
 8002ee2:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002ee4:	e008      	b.n	8002ef8 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ee6:	f7fd fe0d 	bl	8000b04 <HAL_GetTick>
 8002eea:	4602      	mov	r2, r0
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	1ad3      	subs	r3, r2, r3
 8002ef0:	2b64      	cmp	r3, #100	; 0x64
 8002ef2:	d901      	bls.n	8002ef8 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8002ef4:	2303      	movs	r3, #3
 8002ef6:	e244      	b.n	8003382 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002ef8:	f7ff fc6d 	bl	80027d6 <LL_RCC_HSE_IsReady>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d1f1      	bne.n	8002ee6 <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0302 	and.w	r3, r3, #2
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d046      	beq.n	8002f9c <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002f0e:	69fb      	ldr	r3, [r7, #28]
 8002f10:	2b04      	cmp	r3, #4
 8002f12:	d005      	beq.n	8002f20 <HAL_RCC_OscConfig+0x290>
 8002f14:	69fb      	ldr	r3, [r7, #28]
 8002f16:	2b0c      	cmp	r3, #12
 8002f18:	d10e      	bne.n	8002f38 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002f1a:	69bb      	ldr	r3, [r7, #24]
 8002f1c:	2b02      	cmp	r3, #2
 8002f1e:	d10b      	bne.n	8002f38 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	691b      	ldr	r3, [r3, #16]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d101      	bne.n	8002f2c <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e22a      	b.n	8003382 <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	695b      	ldr	r3, [r3, #20]
 8002f30:	4618      	mov	r0, r3
 8002f32:	f7ff fc8e 	bl	8002852 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002f36:	e031      	b.n	8002f9c <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	691b      	ldr	r3, [r3, #16]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d019      	beq.n	8002f74 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f40:	f7ff fc5a 	bl	80027f8 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f44:	f7fd fdde 	bl	8000b04 <HAL_GetTick>
 8002f48:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8002f4a:	e008      	b.n	8002f5e <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f4c:	f7fd fdda 	bl	8000b04 <HAL_GetTick>
 8002f50:	4602      	mov	r2, r0
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	2b02      	cmp	r3, #2
 8002f58:	d901      	bls.n	8002f5e <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8002f5a:	2303      	movs	r3, #3
 8002f5c:	e211      	b.n	8003382 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8002f5e:	f7ff fc67 	bl	8002830 <LL_RCC_HSI_IsReady>
 8002f62:	4603      	mov	r3, r0
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d0f1      	beq.n	8002f4c <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	695b      	ldr	r3, [r3, #20]
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f7ff fc70 	bl	8002852 <LL_RCC_HSI_SetCalibTrimming>
 8002f72:	e013      	b.n	8002f9c <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f74:	f7ff fc4e 	bl	8002814 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f78:	f7fd fdc4 	bl	8000b04 <HAL_GetTick>
 8002f7c:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8002f7e:	e008      	b.n	8002f92 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f80:	f7fd fdc0 	bl	8000b04 <HAL_GetTick>
 8002f84:	4602      	mov	r2, r0
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	2b02      	cmp	r3, #2
 8002f8c:	d901      	bls.n	8002f92 <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8002f8e:	2303      	movs	r3, #3
 8002f90:	e1f7      	b.n	8003382 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8002f92:	f7ff fc4d 	bl	8002830 <LL_RCC_HSI_IsReady>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d1f1      	bne.n	8002f80 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 0308 	and.w	r3, r3, #8
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d06e      	beq.n	8003086 <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	699b      	ldr	r3, [r3, #24]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d056      	beq.n	800305e <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8002fb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fb8:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	69da      	ldr	r2, [r3, #28]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	f003 0310 	and.w	r3, r3, #16
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d031      	beq.n	800302c <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	f003 0302 	and.w	r3, r3, #2
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d006      	beq.n	8002fe0 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d101      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e1d0      	b.n	8003382 <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	f003 0301 	and.w	r3, r3, #1
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d013      	beq.n	8003012 <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8002fea:	f7ff fc67 	bl	80028bc <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002fee:	f7fd fd89 	bl	8000b04 <HAL_GetTick>
 8002ff2:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8002ff4:	e008      	b.n	8003008 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ff6:	f7fd fd85 	bl	8000b04 <HAL_GetTick>
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	1ad3      	subs	r3, r2, r3
 8003000:	2b11      	cmp	r3, #17
 8003002:	d901      	bls.n	8003008 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8003004:	2303      	movs	r3, #3
 8003006:	e1bc      	b.n	8003382 <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8003008:	f7ff fc68 	bl	80028dc <LL_RCC_LSI_IsReady>
 800300c:	4603      	mov	r3, r0
 800300e:	2b00      	cmp	r3, #0
 8003010:	d1f1      	bne.n	8002ff6 <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8003012:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003016:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800301a:	f023 0210 	bic.w	r2, r3, #16
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	69db      	ldr	r3, [r3, #28]
 8003022:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003026:	4313      	orrs	r3, r2
 8003028:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800302c:	f7ff fc36 	bl	800289c <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003030:	f7fd fd68 	bl	8000b04 <HAL_GetTick>
 8003034:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8003036:	e00c      	b.n	8003052 <HAL_RCC_OscConfig+0x3c2>
 8003038:	20000000 	.word	0x20000000
 800303c:	20000004 	.word	0x20000004
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003040:	f7fd fd60 	bl	8000b04 <HAL_GetTick>
 8003044:	4602      	mov	r2, r0
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	2b11      	cmp	r3, #17
 800304c:	d901      	bls.n	8003052 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 800304e:	2303      	movs	r3, #3
 8003050:	e197      	b.n	8003382 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8003052:	f7ff fc43 	bl	80028dc <LL_RCC_LSI_IsReady>
 8003056:	4603      	mov	r3, r0
 8003058:	2b00      	cmp	r3, #0
 800305a:	d0f1      	beq.n	8003040 <HAL_RCC_OscConfig+0x3b0>
 800305c:	e013      	b.n	8003086 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800305e:	f7ff fc2d 	bl	80028bc <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003062:	f7fd fd4f 	bl	8000b04 <HAL_GetTick>
 8003066:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8003068:	e008      	b.n	800307c <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800306a:	f7fd fd4b 	bl	8000b04 <HAL_GetTick>
 800306e:	4602      	mov	r2, r0
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	1ad3      	subs	r3, r2, r3
 8003074:	2b11      	cmp	r3, #17
 8003076:	d901      	bls.n	800307c <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8003078:	2303      	movs	r3, #3
 800307a:	e182      	b.n	8003382 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 800307c:	f7ff fc2e 	bl	80028dc <LL_RCC_LSI_IsReady>
 8003080:	4603      	mov	r3, r0
 8003082:	2b00      	cmp	r3, #0
 8003084:	d1f1      	bne.n	800306a <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 0304 	and.w	r3, r3, #4
 800308e:	2b00      	cmp	r3, #0
 8003090:	f000 80d8 	beq.w	8003244 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8003094:	f7ff fb44 	bl	8002720 <LL_PWR_IsEnabledBkUpAccess>
 8003098:	4603      	mov	r3, r0
 800309a:	2b00      	cmp	r3, #0
 800309c:	d113      	bne.n	80030c6 <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800309e:	f7ff fa83 	bl	80025a8 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030a2:	f7fd fd2f 	bl	8000b04 <HAL_GetTick>
 80030a6:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80030a8:	e008      	b.n	80030bc <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030aa:	f7fd fd2b 	bl	8000b04 <HAL_GetTick>
 80030ae:	4602      	mov	r2, r0
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	1ad3      	subs	r3, r2, r3
 80030b4:	2b02      	cmp	r3, #2
 80030b6:	d901      	bls.n	80030bc <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 80030b8:	2303      	movs	r3, #3
 80030ba:	e162      	b.n	8003382 <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80030bc:	f7ff fb30 	bl	8002720 <LL_PWR_IsEnabledBkUpAccess>
 80030c0:	4603      	mov	r3, r0
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d0f1      	beq.n	80030aa <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	68db      	ldr	r3, [r3, #12]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d07b      	beq.n	80031c6 <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	68db      	ldr	r3, [r3, #12]
 80030d2:	2b85      	cmp	r3, #133	; 0x85
 80030d4:	d003      	beq.n	80030de <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	68db      	ldr	r3, [r3, #12]
 80030da:	2b05      	cmp	r3, #5
 80030dc:	d109      	bne.n	80030f2 <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80030de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80030ea:	f043 0304 	orr.w	r3, r3, #4
 80030ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030f2:	f7fd fd07 	bl	8000b04 <HAL_GetTick>
 80030f6:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80030f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003100:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003104:	f043 0301 	orr.w	r3, r3, #1
 8003108:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800310c:	e00a      	b.n	8003124 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800310e:	f7fd fcf9 	bl	8000b04 <HAL_GetTick>
 8003112:	4602      	mov	r2, r0
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	1ad3      	subs	r3, r2, r3
 8003118:	f241 3288 	movw	r2, #5000	; 0x1388
 800311c:	4293      	cmp	r3, r2
 800311e:	d901      	bls.n	8003124 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8003120:	2303      	movs	r3, #3
 8003122:	e12e      	b.n	8003382 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8003124:	f7ff fba9 	bl	800287a <LL_RCC_LSE_IsReady>
 8003128:	4603      	mov	r3, r0
 800312a:	2b00      	cmp	r3, #0
 800312c:	d0ef      	beq.n	800310e <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	68db      	ldr	r3, [r3, #12]
 8003132:	2b81      	cmp	r3, #129	; 0x81
 8003134:	d003      	beq.n	800313e <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	68db      	ldr	r3, [r3, #12]
 800313a:	2b85      	cmp	r3, #133	; 0x85
 800313c:	d121      	bne.n	8003182 <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800313e:	f7fd fce1 	bl	8000b04 <HAL_GetTick>
 8003142:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003144:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003148:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800314c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003150:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003154:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003158:	e00a      	b.n	8003170 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800315a:	f7fd fcd3 	bl	8000b04 <HAL_GetTick>
 800315e:	4602      	mov	r2, r0
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	1ad3      	subs	r3, r2, r3
 8003164:	f241 3288 	movw	r2, #5000	; 0x1388
 8003168:	4293      	cmp	r3, r2
 800316a:	d901      	bls.n	8003170 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 800316c:	2303      	movs	r3, #3
 800316e:	e108      	b.n	8003382 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003170:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003174:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003178:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800317c:	2b00      	cmp	r3, #0
 800317e:	d0ec      	beq.n	800315a <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8003180:	e060      	b.n	8003244 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003182:	f7fd fcbf 	bl	8000b04 <HAL_GetTick>
 8003186:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003188:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800318c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003190:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003194:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003198:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800319c:	e00a      	b.n	80031b4 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800319e:	f7fd fcb1 	bl	8000b04 <HAL_GetTick>
 80031a2:	4602      	mov	r2, r0
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	1ad3      	subs	r3, r2, r3
 80031a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d901      	bls.n	80031b4 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 80031b0:	2303      	movs	r3, #3
 80031b2:	e0e6      	b.n	8003382 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80031b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d1ec      	bne.n	800319e <HAL_RCC_OscConfig+0x50e>
 80031c4:	e03e      	b.n	8003244 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031c6:	f7fd fc9d 	bl	8000b04 <HAL_GetTick>
 80031ca:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80031cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80031e0:	e00a      	b.n	80031f8 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031e2:	f7fd fc8f 	bl	8000b04 <HAL_GetTick>
 80031e6:	4602      	mov	r2, r0
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	1ad3      	subs	r3, r2, r3
 80031ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d901      	bls.n	80031f8 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 80031f4:	2303      	movs	r3, #3
 80031f6:	e0c4      	b.n	8003382 <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80031f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003200:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003204:	2b00      	cmp	r3, #0
 8003206:	d1ec      	bne.n	80031e2 <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003208:	f7fd fc7c 	bl	8000b04 <HAL_GetTick>
 800320c:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800320e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003212:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003216:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800321a:	f023 0301 	bic.w	r3, r3, #1
 800321e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8003222:	e00a      	b.n	800323a <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003224:	f7fd fc6e 	bl	8000b04 <HAL_GetTick>
 8003228:	4602      	mov	r2, r0
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003232:	4293      	cmp	r3, r2
 8003234:	d901      	bls.n	800323a <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8003236:	2303      	movs	r3, #3
 8003238:	e0a3      	b.n	8003382 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 800323a:	f7ff fb1e 	bl	800287a <LL_RCC_LSE_IsReady>
 800323e:	4603      	mov	r3, r0
 8003240:	2b00      	cmp	r3, #0
 8003242:	d1ef      	bne.n	8003224 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003248:	2b00      	cmp	r3, #0
 800324a:	f000 8099 	beq.w	8003380 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800324e:	69fb      	ldr	r3, [r7, #28]
 8003250:	2b0c      	cmp	r3, #12
 8003252:	d06c      	beq.n	800332e <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003258:	2b02      	cmp	r3, #2
 800325a:	d14b      	bne.n	80032f4 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800325c:	f7ff fc74 	bl	8002b48 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003260:	f7fd fc50 	bl	8000b04 <HAL_GetTick>
 8003264:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8003266:	e008      	b.n	800327a <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003268:	f7fd fc4c 	bl	8000b04 <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	2b0a      	cmp	r3, #10
 8003274:	d901      	bls.n	800327a <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8003276:	2303      	movs	r3, #3
 8003278:	e083      	b.n	8003382 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 800327a:	f7ff fc73 	bl	8002b64 <LL_RCC_PLL_IsReady>
 800327e:	4603      	mov	r3, r0
 8003280:	2b00      	cmp	r3, #0
 8003282:	d1f1      	bne.n	8003268 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003284:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003288:	68da      	ldr	r2, [r3, #12]
 800328a:	4b40      	ldr	r3, [pc, #256]	; (800338c <HAL_RCC_OscConfig+0x6fc>)
 800328c:	4013      	ands	r3, r2
 800328e:	687a      	ldr	r2, [r7, #4]
 8003290:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003296:	4311      	orrs	r1, r2
 8003298:	687a      	ldr	r2, [r7, #4]
 800329a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800329c:	0212      	lsls	r2, r2, #8
 800329e:	4311      	orrs	r1, r2
 80032a0:	687a      	ldr	r2, [r7, #4]
 80032a2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80032a4:	4311      	orrs	r1, r2
 80032a6:	687a      	ldr	r2, [r7, #4]
 80032a8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80032aa:	4311      	orrs	r1, r2
 80032ac:	687a      	ldr	r2, [r7, #4]
 80032ae:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80032b0:	430a      	orrs	r2, r1
 80032b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80032b6:	4313      	orrs	r3, r2
 80032b8:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032ba:	f7ff fc37 	bl	8002b2c <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80032be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032c2:	68db      	ldr	r3, [r3, #12]
 80032c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80032c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032cc:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032ce:	f7fd fc19 	bl	8000b04 <HAL_GetTick>
 80032d2:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 80032d4:	e008      	b.n	80032e8 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032d6:	f7fd fc15 	bl	8000b04 <HAL_GetTick>
 80032da:	4602      	mov	r2, r0
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	1ad3      	subs	r3, r2, r3
 80032e0:	2b0a      	cmp	r3, #10
 80032e2:	d901      	bls.n	80032e8 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 80032e4:	2303      	movs	r3, #3
 80032e6:	e04c      	b.n	8003382 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 80032e8:	f7ff fc3c 	bl	8002b64 <LL_RCC_PLL_IsReady>
 80032ec:	4603      	mov	r3, r0
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d0f1      	beq.n	80032d6 <HAL_RCC_OscConfig+0x646>
 80032f2:	e045      	b.n	8003380 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032f4:	f7ff fc28 	bl	8002b48 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032f8:	f7fd fc04 	bl	8000b04 <HAL_GetTick>
 80032fc:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 80032fe:	e008      	b.n	8003312 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003300:	f7fd fc00 	bl	8000b04 <HAL_GetTick>
 8003304:	4602      	mov	r2, r0
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	1ad3      	subs	r3, r2, r3
 800330a:	2b0a      	cmp	r3, #10
 800330c:	d901      	bls.n	8003312 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800330e:	2303      	movs	r3, #3
 8003310:	e037      	b.n	8003382 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8003312:	f7ff fc27 	bl	8002b64 <LL_RCC_PLL_IsReady>
 8003316:	4603      	mov	r3, r0
 8003318:	2b00      	cmp	r3, #0
 800331a:	d1f1      	bne.n	8003300 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800331c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003320:	68da      	ldr	r2, [r3, #12]
 8003322:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003326:	4b1a      	ldr	r3, [pc, #104]	; (8003390 <HAL_RCC_OscConfig+0x700>)
 8003328:	4013      	ands	r3, r2
 800332a:	60cb      	str	r3, [r1, #12]
 800332c:	e028      	b.n	8003380 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003332:	2b01      	cmp	r3, #1
 8003334:	d101      	bne.n	800333a <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e023      	b.n	8003382 <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800333a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8003342:	69bb      	ldr	r3, [r7, #24]
 8003344:	f003 0203 	and.w	r2, r3, #3
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800334c:	429a      	cmp	r2, r3
 800334e:	d115      	bne.n	800337c <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8003350:	69bb      	ldr	r3, [r7, #24]
 8003352:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800335a:	429a      	cmp	r2, r3
 800335c:	d10e      	bne.n	800337c <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 800335e:	69bb      	ldr	r3, [r7, #24]
 8003360:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003368:	021b      	lsls	r3, r3, #8
 800336a:	429a      	cmp	r2, r3
 800336c:	d106      	bne.n	800337c <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 800336e:	69bb      	ldr	r3, [r7, #24]
 8003370:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003378:	429a      	cmp	r2, r3
 800337a:	d001      	beq.n	8003380 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	e000      	b.n	8003382 <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8003380:	2300      	movs	r3, #0
}
 8003382:	4618      	mov	r0, r3
 8003384:	3720      	adds	r7, #32
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
 800338a:	bf00      	nop
 800338c:	11c1808c 	.word	0x11c1808c
 8003390:	eefefffc 	.word	0xeefefffc

08003394 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b084      	sub	sp, #16
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
 800339c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d101      	bne.n	80033a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e12c      	b.n	8003602 <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80033a8:	4b98      	ldr	r3, [pc, #608]	; (800360c <HAL_RCC_ClockConfig+0x278>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0307 	and.w	r3, r3, #7
 80033b0:	683a      	ldr	r2, [r7, #0]
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d91b      	bls.n	80033ee <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033b6:	4b95      	ldr	r3, [pc, #596]	; (800360c <HAL_RCC_ClockConfig+0x278>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f023 0207 	bic.w	r2, r3, #7
 80033be:	4993      	ldr	r1, [pc, #588]	; (800360c <HAL_RCC_ClockConfig+0x278>)
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	4313      	orrs	r3, r2
 80033c4:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033c6:	f7fd fb9d 	bl	8000b04 <HAL_GetTick>
 80033ca:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033cc:	e008      	b.n	80033e0 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80033ce:	f7fd fb99 	bl	8000b04 <HAL_GetTick>
 80033d2:	4602      	mov	r2, r0
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	1ad3      	subs	r3, r2, r3
 80033d8:	2b02      	cmp	r3, #2
 80033da:	d901      	bls.n	80033e0 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80033dc:	2303      	movs	r3, #3
 80033de:	e110      	b.n	8003602 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033e0:	4b8a      	ldr	r3, [pc, #552]	; (800360c <HAL_RCC_ClockConfig+0x278>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 0307 	and.w	r3, r3, #7
 80033e8:	683a      	ldr	r2, [r7, #0]
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d1ef      	bne.n	80033ce <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 0302 	and.w	r3, r3, #2
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d016      	beq.n	8003428 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	4618      	mov	r0, r3
 8003400:	f7ff fb02 	bl	8002a08 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003404:	f7fd fb7e 	bl	8000b04 <HAL_GetTick>
 8003408:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800340a:	e008      	b.n	800341e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800340c:	f7fd fb7a 	bl	8000b04 <HAL_GetTick>
 8003410:	4602      	mov	r2, r0
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	2b02      	cmp	r3, #2
 8003418:	d901      	bls.n	800341e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800341a:	2303      	movs	r3, #3
 800341c:	e0f1      	b.n	8003602 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800341e:	f7ff fbdf 	bl	8002be0 <LL_RCC_IsActiveFlag_HPRE>
 8003422:	4603      	mov	r3, r0
 8003424:	2b00      	cmp	r3, #0
 8003426:	d0f1      	beq.n	800340c <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 0320 	and.w	r3, r3, #32
 8003430:	2b00      	cmp	r3, #0
 8003432:	d016      	beq.n	8003462 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	695b      	ldr	r3, [r3, #20]
 8003438:	4618      	mov	r0, r3
 800343a:	f7ff faf8 	bl	8002a2e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800343e:	f7fd fb61 	bl	8000b04 <HAL_GetTick>
 8003442:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003444:	e008      	b.n	8003458 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003446:	f7fd fb5d 	bl	8000b04 <HAL_GetTick>
 800344a:	4602      	mov	r2, r0
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	1ad3      	subs	r3, r2, r3
 8003450:	2b02      	cmp	r3, #2
 8003452:	d901      	bls.n	8003458 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8003454:	2303      	movs	r3, #3
 8003456:	e0d4      	b.n	8003602 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003458:	f7ff fbd3 	bl	8002c02 <LL_RCC_IsActiveFlag_C2HPRE>
 800345c:	4603      	mov	r3, r0
 800345e:	2b00      	cmp	r3, #0
 8003460:	d0f1      	beq.n	8003446 <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800346a:	2b00      	cmp	r3, #0
 800346c:	d016      	beq.n	800349c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	699b      	ldr	r3, [r3, #24]
 8003472:	4618      	mov	r0, r3
 8003474:	f7ff faf0 	bl	8002a58 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003478:	f7fd fb44 	bl	8000b04 <HAL_GetTick>
 800347c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800347e:	e008      	b.n	8003492 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003480:	f7fd fb40 	bl	8000b04 <HAL_GetTick>
 8003484:	4602      	mov	r2, r0
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	1ad3      	subs	r3, r2, r3
 800348a:	2b02      	cmp	r3, #2
 800348c:	d901      	bls.n	8003492 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800348e:	2303      	movs	r3, #3
 8003490:	e0b7      	b.n	8003602 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003492:	f7ff fbc8 	bl	8002c26 <LL_RCC_IsActiveFlag_SHDHPRE>
 8003496:	4603      	mov	r3, r0
 8003498:	2b00      	cmp	r3, #0
 800349a:	d0f1      	beq.n	8003480 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f003 0304 	and.w	r3, r3, #4
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d016      	beq.n	80034d6 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	68db      	ldr	r3, [r3, #12]
 80034ac:	4618      	mov	r0, r3
 80034ae:	f7ff fae9 	bl	8002a84 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80034b2:	f7fd fb27 	bl	8000b04 <HAL_GetTick>
 80034b6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80034b8:	e008      	b.n	80034cc <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80034ba:	f7fd fb23 	bl	8000b04 <HAL_GetTick>
 80034be:	4602      	mov	r2, r0
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	1ad3      	subs	r3, r2, r3
 80034c4:	2b02      	cmp	r3, #2
 80034c6:	d901      	bls.n	80034cc <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80034c8:	2303      	movs	r3, #3
 80034ca:	e09a      	b.n	8003602 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80034cc:	f7ff fbbd 	bl	8002c4a <LL_RCC_IsActiveFlag_PPRE1>
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d0f1      	beq.n	80034ba <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 0308 	and.w	r3, r3, #8
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d017      	beq.n	8003512 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	691b      	ldr	r3, [r3, #16]
 80034e6:	00db      	lsls	r3, r3, #3
 80034e8:	4618      	mov	r0, r3
 80034ea:	f7ff fade 	bl	8002aaa <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80034ee:	f7fd fb09 	bl	8000b04 <HAL_GetTick>
 80034f2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80034f4:	e008      	b.n	8003508 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80034f6:	f7fd fb05 	bl	8000b04 <HAL_GetTick>
 80034fa:	4602      	mov	r2, r0
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	1ad3      	subs	r3, r2, r3
 8003500:	2b02      	cmp	r3, #2
 8003502:	d901      	bls.n	8003508 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8003504:	2303      	movs	r3, #3
 8003506:	e07c      	b.n	8003602 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003508:	f7ff fbb0 	bl	8002c6c <LL_RCC_IsActiveFlag_PPRE2>
 800350c:	4603      	mov	r3, r0
 800350e:	2b00      	cmp	r3, #0
 8003510:	d0f1      	beq.n	80034f6 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 0301 	and.w	r3, r3, #1
 800351a:	2b00      	cmp	r3, #0
 800351c:	d043      	beq.n	80035a6 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	2b02      	cmp	r3, #2
 8003524:	d106      	bne.n	8003534 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8003526:	f7ff f956 	bl	80027d6 <LL_RCC_HSE_IsReady>
 800352a:	4603      	mov	r3, r0
 800352c:	2b00      	cmp	r3, #0
 800352e:	d11e      	bne.n	800356e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	e066      	b.n	8003602 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	2b03      	cmp	r3, #3
 800353a:	d106      	bne.n	800354a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800353c:	f7ff fb12 	bl	8002b64 <LL_RCC_PLL_IsReady>
 8003540:	4603      	mov	r3, r0
 8003542:	2b00      	cmp	r3, #0
 8003544:	d113      	bne.n	800356e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e05b      	b.n	8003602 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d106      	bne.n	8003560 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8003552:	f7ff f9f0 	bl	8002936 <LL_RCC_MSI_IsReady>
 8003556:	4603      	mov	r3, r0
 8003558:	2b00      	cmp	r3, #0
 800355a:	d108      	bne.n	800356e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	e050      	b.n	8003602 <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8003560:	f7ff f966 	bl	8002830 <LL_RCC_HSI_IsReady>
 8003564:	4603      	mov	r3, r0
 8003566:	2b00      	cmp	r3, #0
 8003568:	d101      	bne.n	800356e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e049      	b.n	8003602 <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	4618      	mov	r0, r3
 8003574:	f7ff fa2a 	bl	80029cc <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003578:	f7fd fac4 	bl	8000b04 <HAL_GetTick>
 800357c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800357e:	e00a      	b.n	8003596 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003580:	f7fd fac0 	bl	8000b04 <HAL_GetTick>
 8003584:	4602      	mov	r2, r0
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	f241 3288 	movw	r2, #5000	; 0x1388
 800358e:	4293      	cmp	r3, r2
 8003590:	d901      	bls.n	8003596 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8003592:	2303      	movs	r3, #3
 8003594:	e035      	b.n	8003602 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003596:	f7ff fa2c 	bl	80029f2 <LL_RCC_GetSysClkSource>
 800359a:	4602      	mov	r2, r0
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	429a      	cmp	r2, r3
 80035a4:	d1ec      	bne.n	8003580 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80035a6:	4b19      	ldr	r3, [pc, #100]	; (800360c <HAL_RCC_ClockConfig+0x278>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 0307 	and.w	r3, r3, #7
 80035ae:	683a      	ldr	r2, [r7, #0]
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d21b      	bcs.n	80035ec <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035b4:	4b15      	ldr	r3, [pc, #84]	; (800360c <HAL_RCC_ClockConfig+0x278>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f023 0207 	bic.w	r2, r3, #7
 80035bc:	4913      	ldr	r1, [pc, #76]	; (800360c <HAL_RCC_ClockConfig+0x278>)
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	4313      	orrs	r3, r2
 80035c2:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035c4:	f7fd fa9e 	bl	8000b04 <HAL_GetTick>
 80035c8:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035ca:	e008      	b.n	80035de <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80035cc:	f7fd fa9a 	bl	8000b04 <HAL_GetTick>
 80035d0:	4602      	mov	r2, r0
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	2b02      	cmp	r3, #2
 80035d8:	d901      	bls.n	80035de <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80035da:	2303      	movs	r3, #3
 80035dc:	e011      	b.n	8003602 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035de:	4b0b      	ldr	r3, [pc, #44]	; (800360c <HAL_RCC_ClockConfig+0x278>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 0307 	and.w	r3, r3, #7
 80035e6:	683a      	ldr	r2, [r7, #0]
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d1ef      	bne.n	80035cc <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80035ec:	f000 f8b4 	bl	8003758 <HAL_RCC_GetHCLKFreq>
 80035f0:	4603      	mov	r3, r0
 80035f2:	4a07      	ldr	r2, [pc, #28]	; (8003610 <HAL_RCC_ClockConfig+0x27c>)
 80035f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 80035f6:	4b07      	ldr	r3, [pc, #28]	; (8003614 <HAL_RCC_ClockConfig+0x280>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4618      	mov	r0, r3
 80035fc:	f7fd fa78 	bl	8000af0 <HAL_InitTick>
 8003600:	4603      	mov	r3, r0
}
 8003602:	4618      	mov	r0, r3
 8003604:	3710      	adds	r7, #16
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}
 800360a:	bf00      	nop
 800360c:	58004000 	.word	0x58004000
 8003610:	20000000 	.word	0x20000000
 8003614:	20000004 	.word	0x20000004

08003618 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003618:	b590      	push	{r4, r7, lr}
 800361a:	b087      	sub	sp, #28
 800361c:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 800361e:	2300      	movs	r3, #0
 8003620:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8003622:	2300      	movs	r3, #0
 8003624:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003626:	f7ff f9e4 	bl	80029f2 <LL_RCC_GetSysClkSource>
 800362a:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800362c:	f7ff facd 	bl	8002bca <LL_RCC_PLL_GetMainSource>
 8003630:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d005      	beq.n	8003644 <HAL_RCC_GetSysClockFreq+0x2c>
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	2b0c      	cmp	r3, #12
 800363c:	d139      	bne.n	80036b2 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2b01      	cmp	r3, #1
 8003642:	d136      	bne.n	80036b2 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8003644:	f7ff f987 	bl	8002956 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003648:	4603      	mov	r3, r0
 800364a:	2b00      	cmp	r3, #0
 800364c:	d115      	bne.n	800367a <HAL_RCC_GetSysClockFreq+0x62>
 800364e:	f7ff f982 	bl	8002956 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003652:	4603      	mov	r3, r0
 8003654:	2b01      	cmp	r3, #1
 8003656:	d106      	bne.n	8003666 <HAL_RCC_GetSysClockFreq+0x4e>
 8003658:	f7ff f98d 	bl	8002976 <LL_RCC_MSI_GetRange>
 800365c:	4603      	mov	r3, r0
 800365e:	0a1b      	lsrs	r3, r3, #8
 8003660:	f003 030f 	and.w	r3, r3, #15
 8003664:	e005      	b.n	8003672 <HAL_RCC_GetSysClockFreq+0x5a>
 8003666:	f7ff f991 	bl	800298c <LL_RCC_MSI_GetRangeAfterStandby>
 800366a:	4603      	mov	r3, r0
 800366c:	0a1b      	lsrs	r3, r3, #8
 800366e:	f003 030f 	and.w	r3, r3, #15
 8003672:	4a36      	ldr	r2, [pc, #216]	; (800374c <HAL_RCC_GetSysClockFreq+0x134>)
 8003674:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003678:	e014      	b.n	80036a4 <HAL_RCC_GetSysClockFreq+0x8c>
 800367a:	f7ff f96c 	bl	8002956 <LL_RCC_MSI_IsEnabledRangeSelect>
 800367e:	4603      	mov	r3, r0
 8003680:	2b01      	cmp	r3, #1
 8003682:	d106      	bne.n	8003692 <HAL_RCC_GetSysClockFreq+0x7a>
 8003684:	f7ff f977 	bl	8002976 <LL_RCC_MSI_GetRange>
 8003688:	4603      	mov	r3, r0
 800368a:	091b      	lsrs	r3, r3, #4
 800368c:	f003 030f 	and.w	r3, r3, #15
 8003690:	e005      	b.n	800369e <HAL_RCC_GetSysClockFreq+0x86>
 8003692:	f7ff f97b 	bl	800298c <LL_RCC_MSI_GetRangeAfterStandby>
 8003696:	4603      	mov	r3, r0
 8003698:	091b      	lsrs	r3, r3, #4
 800369a:	f003 030f 	and.w	r3, r3, #15
 800369e:	4a2b      	ldr	r2, [pc, #172]	; (800374c <HAL_RCC_GetSysClockFreq+0x134>)
 80036a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036a4:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d115      	bne.n	80036d8 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80036b0:	e012      	b.n	80036d8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	2b04      	cmp	r3, #4
 80036b6:	d102      	bne.n	80036be <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80036b8:	4b25      	ldr	r3, [pc, #148]	; (8003750 <HAL_RCC_GetSysClockFreq+0x138>)
 80036ba:	617b      	str	r3, [r7, #20]
 80036bc:	e00c      	b.n	80036d8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	2b08      	cmp	r3, #8
 80036c2:	d109      	bne.n	80036d8 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80036c4:	f7ff f85a 	bl	800277c <LL_RCC_HSE_IsEnabledDiv2>
 80036c8:	4603      	mov	r3, r0
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d102      	bne.n	80036d4 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80036ce:	4b20      	ldr	r3, [pc, #128]	; (8003750 <HAL_RCC_GetSysClockFreq+0x138>)
 80036d0:	617b      	str	r3, [r7, #20]
 80036d2:	e001      	b.n	80036d8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80036d4:	4b1f      	ldr	r3, [pc, #124]	; (8003754 <HAL_RCC_GetSysClockFreq+0x13c>)
 80036d6:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036d8:	f7ff f98b 	bl	80029f2 <LL_RCC_GetSysClkSource>
 80036dc:	4603      	mov	r3, r0
 80036de:	2b0c      	cmp	r3, #12
 80036e0:	d12f      	bne.n	8003742 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80036e2:	f7ff fa72 	bl	8002bca <LL_RCC_PLL_GetMainSource>
 80036e6:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2b02      	cmp	r3, #2
 80036ec:	d003      	beq.n	80036f6 <HAL_RCC_GetSysClockFreq+0xde>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2b03      	cmp	r3, #3
 80036f2:	d003      	beq.n	80036fc <HAL_RCC_GetSysClockFreq+0xe4>
 80036f4:	e00d      	b.n	8003712 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80036f6:	4b16      	ldr	r3, [pc, #88]	; (8003750 <HAL_RCC_GetSysClockFreq+0x138>)
 80036f8:	60fb      	str	r3, [r7, #12]
        break;
 80036fa:	e00d      	b.n	8003718 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80036fc:	f7ff f83e 	bl	800277c <LL_RCC_HSE_IsEnabledDiv2>
 8003700:	4603      	mov	r3, r0
 8003702:	2b01      	cmp	r3, #1
 8003704:	d102      	bne.n	800370c <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8003706:	4b12      	ldr	r3, [pc, #72]	; (8003750 <HAL_RCC_GetSysClockFreq+0x138>)
 8003708:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800370a:	e005      	b.n	8003718 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 800370c:	4b11      	ldr	r3, [pc, #68]	; (8003754 <HAL_RCC_GetSysClockFreq+0x13c>)
 800370e:	60fb      	str	r3, [r7, #12]
        break;
 8003710:	e002      	b.n	8003718 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	60fb      	str	r3, [r7, #12]
        break;
 8003716:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003718:	f7ff fa35 	bl	8002b86 <LL_RCC_PLL_GetN>
 800371c:	4602      	mov	r2, r0
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	fb03 f402 	mul.w	r4, r3, r2
 8003724:	f7ff fa46 	bl	8002bb4 <LL_RCC_PLL_GetDivider>
 8003728:	4603      	mov	r3, r0
 800372a:	091b      	lsrs	r3, r3, #4
 800372c:	3301      	adds	r3, #1
 800372e:	fbb4 f4f3 	udiv	r4, r4, r3
 8003732:	f7ff fa34 	bl	8002b9e <LL_RCC_PLL_GetR>
 8003736:	4603      	mov	r3, r0
 8003738:	0f5b      	lsrs	r3, r3, #29
 800373a:	3301      	adds	r3, #1
 800373c:	fbb4 f3f3 	udiv	r3, r4, r3
 8003740:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8003742:	697b      	ldr	r3, [r7, #20]
}
 8003744:	4618      	mov	r0, r3
 8003746:	371c      	adds	r7, #28
 8003748:	46bd      	mov	sp, r7
 800374a:	bd90      	pop	{r4, r7, pc}
 800374c:	0800c6a8 	.word	0x0800c6a8
 8003750:	00f42400 	.word	0x00f42400
 8003754:	01e84800 	.word	0x01e84800

08003758 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003758:	b598      	push	{r3, r4, r7, lr}
 800375a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800375c:	f7ff ff5c 	bl	8003618 <HAL_RCC_GetSysClockFreq>
 8003760:	4604      	mov	r4, r0
 8003762:	f7ff f9b5 	bl	8002ad0 <LL_RCC_GetAHBPrescaler>
 8003766:	4603      	mov	r3, r0
 8003768:	091b      	lsrs	r3, r3, #4
 800376a:	f003 030f 	and.w	r3, r3, #15
 800376e:	4a03      	ldr	r2, [pc, #12]	; (800377c <HAL_RCC_GetHCLKFreq+0x24>)
 8003770:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003774:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003778:	4618      	mov	r0, r3
 800377a:	bd98      	pop	{r3, r4, r7, pc}
 800377c:	0800c648 	.word	0x0800c648

08003780 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003780:	b598      	push	{r3, r4, r7, lr}
 8003782:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003784:	f7ff ffe8 	bl	8003758 <HAL_RCC_GetHCLKFreq>
 8003788:	4604      	mov	r4, r0
 800378a:	f7ff f9b9 	bl	8002b00 <LL_RCC_GetAPB1Prescaler>
 800378e:	4603      	mov	r3, r0
 8003790:	0a1b      	lsrs	r3, r3, #8
 8003792:	4a03      	ldr	r2, [pc, #12]	; (80037a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003794:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003798:	fa24 f303 	lsr.w	r3, r4, r3
}
 800379c:	4618      	mov	r0, r3
 800379e:	bd98      	pop	{r3, r4, r7, pc}
 80037a0:	0800c688 	.word	0x0800c688

080037a4 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037a4:	b598      	push	{r3, r4, r7, lr}
 80037a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80037a8:	f7ff ffd6 	bl	8003758 <HAL_RCC_GetHCLKFreq>
 80037ac:	4604      	mov	r4, r0
 80037ae:	f7ff f9b2 	bl	8002b16 <LL_RCC_GetAPB2Prescaler>
 80037b2:	4603      	mov	r3, r0
 80037b4:	0adb      	lsrs	r3, r3, #11
 80037b6:	4a03      	ldr	r2, [pc, #12]	; (80037c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80037b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037bc:	fa24 f303 	lsr.w	r3, r4, r3
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	bd98      	pop	{r3, r4, r7, pc}
 80037c4:	0800c688 	.word	0x0800c688

080037c8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80037c8:	b590      	push	{r4, r7, lr}
 80037ca:	b085      	sub	sp, #20
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	091b      	lsrs	r3, r3, #4
 80037d4:	f003 030f 	and.w	r3, r3, #15
 80037d8:	4a10      	ldr	r2, [pc, #64]	; (800381c <RCC_SetFlashLatencyFromMSIRange+0x54>)
 80037da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037de:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 80037e0:	f7ff f981 	bl	8002ae6 <LL_RCC_GetAHB3Prescaler>
 80037e4:	4603      	mov	r3, r0
 80037e6:	091b      	lsrs	r3, r3, #4
 80037e8:	f003 030f 	and.w	r3, r3, #15
 80037ec:	4a0c      	ldr	r2, [pc, #48]	; (8003820 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 80037ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037f2:	68fa      	ldr	r2, [r7, #12]
 80037f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80037f8:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	4a09      	ldr	r2, [pc, #36]	; (8003824 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 80037fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003802:	0c9c      	lsrs	r4, r3, #18
 8003804:	f7fe ff12 	bl	800262c <HAL_PWREx_GetVoltageRange>
 8003808:	4603      	mov	r3, r0
 800380a:	4619      	mov	r1, r3
 800380c:	4620      	mov	r0, r4
 800380e:	f000 f80b 	bl	8003828 <RCC_SetFlashLatency>
 8003812:	4603      	mov	r3, r0
}
 8003814:	4618      	mov	r0, r3
 8003816:	3714      	adds	r7, #20
 8003818:	46bd      	mov	sp, r7
 800381a:	bd90      	pop	{r4, r7, pc}
 800381c:	0800c6a8 	.word	0x0800c6a8
 8003820:	0800c648 	.word	0x0800c648
 8003824:	431bde83 	.word	0x431bde83

08003828 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b08e      	sub	sp, #56	; 0x38
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8003832:	4a3a      	ldr	r2, [pc, #232]	; (800391c <RCC_SetFlashLatency+0xf4>)
 8003834:	f107 0320 	add.w	r3, r7, #32
 8003838:	e892 0003 	ldmia.w	r2, {r0, r1}
 800383c:	6018      	str	r0, [r3, #0]
 800383e:	3304      	adds	r3, #4
 8003840:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8003842:	4a37      	ldr	r2, [pc, #220]	; (8003920 <RCC_SetFlashLatency+0xf8>)
 8003844:	f107 0318 	add.w	r3, r7, #24
 8003848:	e892 0003 	ldmia.w	r2, {r0, r1}
 800384c:	6018      	str	r0, [r3, #0]
 800384e:	3304      	adds	r3, #4
 8003850:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8003852:	4a34      	ldr	r2, [pc, #208]	; (8003924 <RCC_SetFlashLatency+0xfc>)
 8003854:	f107 030c 	add.w	r3, r7, #12
 8003858:	ca07      	ldmia	r2, {r0, r1, r2}
 800385a:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800385e:	2300      	movs	r3, #0
 8003860:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003868:	d11b      	bne.n	80038a2 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800386a:	2300      	movs	r3, #0
 800386c:	633b      	str	r3, [r7, #48]	; 0x30
 800386e:	e014      	b.n	800389a <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003872:	005b      	lsls	r3, r3, #1
 8003874:	3338      	adds	r3, #56	; 0x38
 8003876:	443b      	add	r3, r7
 8003878:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800387c:	461a      	mov	r2, r3
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	4293      	cmp	r3, r2
 8003882:	d807      	bhi.n	8003894 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003886:	009b      	lsls	r3, r3, #2
 8003888:	3338      	adds	r3, #56	; 0x38
 800388a:	443b      	add	r3, r7
 800388c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003890:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003892:	e021      	b.n	80038d8 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003896:	3301      	adds	r3, #1
 8003898:	633b      	str	r3, [r7, #48]	; 0x30
 800389a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800389c:	2b02      	cmp	r3, #2
 800389e:	d9e7      	bls.n	8003870 <RCC_SetFlashLatency+0x48>
 80038a0:	e01a      	b.n	80038d8 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80038a2:	2300      	movs	r3, #0
 80038a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038a6:	e014      	b.n	80038d2 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80038a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038aa:	005b      	lsls	r3, r3, #1
 80038ac:	3338      	adds	r3, #56	; 0x38
 80038ae:	443b      	add	r3, r7
 80038b0:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 80038b4:	461a      	mov	r2, r3
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d807      	bhi.n	80038cc <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80038bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	3338      	adds	r3, #56	; 0x38
 80038c2:	443b      	add	r3, r7
 80038c4:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80038c8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80038ca:	e005      	b.n	80038d8 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80038cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038ce:	3301      	adds	r3, #1
 80038d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038d4:	2b02      	cmp	r3, #2
 80038d6:	d9e7      	bls.n	80038a8 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80038d8:	4b13      	ldr	r3, [pc, #76]	; (8003928 <RCC_SetFlashLatency+0x100>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f023 0207 	bic.w	r2, r3, #7
 80038e0:	4911      	ldr	r1, [pc, #68]	; (8003928 <RCC_SetFlashLatency+0x100>)
 80038e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038e4:	4313      	orrs	r3, r2
 80038e6:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80038e8:	f7fd f90c 	bl	8000b04 <HAL_GetTick>
 80038ec:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80038ee:	e008      	b.n	8003902 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80038f0:	f7fd f908 	bl	8000b04 <HAL_GetTick>
 80038f4:	4602      	mov	r2, r0
 80038f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038f8:	1ad3      	subs	r3, r2, r3
 80038fa:	2b02      	cmp	r3, #2
 80038fc:	d901      	bls.n	8003902 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 80038fe:	2303      	movs	r3, #3
 8003900:	e007      	b.n	8003912 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003902:	4b09      	ldr	r3, [pc, #36]	; (8003928 <RCC_SetFlashLatency+0x100>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 0307 	and.w	r3, r3, #7
 800390a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800390c:	429a      	cmp	r2, r3
 800390e:	d1ef      	bne.n	80038f0 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8003910:	2300      	movs	r3, #0
}
 8003912:	4618      	mov	r0, r3
 8003914:	3738      	adds	r7, #56	; 0x38
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}
 800391a:	bf00      	nop
 800391c:	0800c370 	.word	0x0800c370
 8003920:	0800c378 	.word	0x0800c378
 8003924:	0800c380 	.word	0x0800c380
 8003928:	58004000 	.word	0x58004000

0800392c <LL_RCC_LSE_IsReady>:
{
 800392c:	b480      	push	{r7}
 800392e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003930:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003934:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003938:	f003 0302 	and.w	r3, r3, #2
 800393c:	2b02      	cmp	r3, #2
 800393e:	d101      	bne.n	8003944 <LL_RCC_LSE_IsReady+0x18>
 8003940:	2301      	movs	r3, #1
 8003942:	e000      	b.n	8003946 <LL_RCC_LSE_IsReady+0x1a>
 8003944:	2300      	movs	r3, #0
}
 8003946:	4618      	mov	r0, r3
 8003948:	46bd      	mov	sp, r7
 800394a:	bc80      	pop	{r7}
 800394c:	4770      	bx	lr

0800394e <LL_RCC_SetUSARTClockSource>:
{
 800394e:	b480      	push	{r7}
 8003950:	b083      	sub	sp, #12
 8003952:	af00      	add	r7, sp, #0
 8003954:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8003956:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800395a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	0c1b      	lsrs	r3, r3, #16
 8003962:	43db      	mvns	r3, r3
 8003964:	401a      	ands	r2, r3
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	b29b      	uxth	r3, r3
 800396a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800396e:	4313      	orrs	r3, r2
 8003970:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003974:	bf00      	nop
 8003976:	370c      	adds	r7, #12
 8003978:	46bd      	mov	sp, r7
 800397a:	bc80      	pop	{r7}
 800397c:	4770      	bx	lr

0800397e <LL_RCC_SetI2SClockSource>:
{
 800397e:	b480      	push	{r7}
 8003980:	b083      	sub	sp, #12
 8003982:	af00      	add	r7, sp, #0
 8003984:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8003986:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800398a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800398e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003992:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	4313      	orrs	r3, r2
 800399a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800399e:	bf00      	nop
 80039a0:	370c      	adds	r7, #12
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bc80      	pop	{r7}
 80039a6:	4770      	bx	lr

080039a8 <LL_RCC_SetLPUARTClockSource>:
{
 80039a8:	b480      	push	{r7}
 80039aa:	b083      	sub	sp, #12
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80039b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039b8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80039bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	4313      	orrs	r3, r2
 80039c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80039c8:	bf00      	nop
 80039ca:	370c      	adds	r7, #12
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bc80      	pop	{r7}
 80039d0:	4770      	bx	lr

080039d2 <LL_RCC_SetI2CClockSource>:
{
 80039d2:	b480      	push	{r7}
 80039d4:	b083      	sub	sp, #12
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80039da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039de:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	091b      	lsrs	r3, r3, #4
 80039e6:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80039ea:	43db      	mvns	r3, r3
 80039ec:	401a      	ands	r2, r3
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	011b      	lsls	r3, r3, #4
 80039f2:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80039f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80039fa:	4313      	orrs	r3, r2
 80039fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003a00:	bf00      	nop
 8003a02:	370c      	adds	r7, #12
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bc80      	pop	{r7}
 8003a08:	4770      	bx	lr

08003a0a <LL_RCC_SetLPTIMClockSource>:
{
 8003a0a:	b480      	push	{r7}
 8003a0c:	b083      	sub	sp, #12
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003a12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a16:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	0c1b      	lsrs	r3, r3, #16
 8003a1e:	041b      	lsls	r3, r3, #16
 8003a20:	43db      	mvns	r3, r3
 8003a22:	401a      	ands	r2, r3
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	041b      	lsls	r3, r3, #16
 8003a28:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003a32:	bf00      	nop
 8003a34:	370c      	adds	r7, #12
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bc80      	pop	{r7}
 8003a3a:	4770      	bx	lr

08003a3c <LL_RCC_SetRNGClockSource>:
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b083      	sub	sp, #12
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003a44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a4c:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003a50:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	4313      	orrs	r3, r2
 8003a58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003a5c:	bf00      	nop
 8003a5e:	370c      	adds	r7, #12
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bc80      	pop	{r7}
 8003a64:	4770      	bx	lr

08003a66 <LL_RCC_SetADCClockSource>:
{
 8003a66:	b480      	push	{r7}
 8003a68:	b083      	sub	sp, #12
 8003a6a:	af00      	add	r7, sp, #0
 8003a6c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003a6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a76:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003a7a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4313      	orrs	r3, r2
 8003a82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003a86:	bf00      	nop
 8003a88:	370c      	adds	r7, #12
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bc80      	pop	{r7}
 8003a8e:	4770      	bx	lr

08003a90 <LL_RCC_SetRTCClockSource>:
{
 8003a90:	b480      	push	{r7}
 8003a92:	b083      	sub	sp, #12
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003a98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aa0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003aa4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003ab0:	bf00      	nop
 8003ab2:	370c      	adds	r7, #12
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bc80      	pop	{r7}
 8003ab8:	4770      	bx	lr

08003aba <LL_RCC_GetRTCClockSource>:
{
 8003aba:	b480      	push	{r7}
 8003abc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003abe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ac6:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bc80      	pop	{r7}
 8003ad0:	4770      	bx	lr

08003ad2 <LL_RCC_ForceBackupDomainReset>:
{
 8003ad2:	b480      	push	{r7}
 8003ad4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003ad6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ada:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ade:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ae2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ae6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003aea:	bf00      	nop
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bc80      	pop	{r7}
 8003af0:	4770      	bx	lr

08003af2 <LL_RCC_ReleaseBackupDomainReset>:
{
 8003af2:	b480      	push	{r7}
 8003af4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003af6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003afa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003afe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b06:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003b0a:	bf00      	nop
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bc80      	pop	{r7}
 8003b10:	4770      	bx	lr
	...

08003b14 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b086      	sub	sp, #24
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8003b20:	2300      	movs	r3, #0
 8003b22:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003b24:	2300      	movs	r3, #0
 8003b26:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d058      	beq.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8003b34:	f7fe fd38 	bl	80025a8 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b38:	f7fc ffe4 	bl	8000b04 <HAL_GetTick>
 8003b3c:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8003b3e:	e009      	b.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b40:	f7fc ffe0 	bl	8000b04 <HAL_GetTick>
 8003b44:	4602      	mov	r2, r0
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	1ad3      	subs	r3, r2, r3
 8003b4a:	2b02      	cmp	r3, #2
 8003b4c:	d902      	bls.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8003b4e:	2303      	movs	r3, #3
 8003b50:	74fb      	strb	r3, [r7, #19]
        break;
 8003b52:	e006      	b.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8003b54:	4b7b      	ldr	r3, [pc, #492]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b60:	d1ee      	bne.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8003b62:	7cfb      	ldrb	r3, [r7, #19]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d13c      	bne.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8003b68:	f7ff ffa7 	bl	8003aba <LL_RCC_GetRTCClockSource>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d00f      	beq.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003b76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b82:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b84:	f7ff ffa5 	bl	8003ad2 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003b88:	f7ff ffb3 	bl	8003af2 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003b8c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	f003 0302 	and.w	r3, r3, #2
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d014      	beq.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ba0:	f7fc ffb0 	bl	8000b04 <HAL_GetTick>
 8003ba4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8003ba6:	e00b      	b.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ba8:	f7fc ffac 	bl	8000b04 <HAL_GetTick>
 8003bac:	4602      	mov	r2, r0
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	1ad3      	subs	r3, r2, r3
 8003bb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d902      	bls.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8003bba:	2303      	movs	r3, #3
 8003bbc:	74fb      	strb	r3, [r7, #19]
            break;
 8003bbe:	e004      	b.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8003bc0:	f7ff feb4 	bl	800392c <LL_RCC_LSE_IsReady>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	2b01      	cmp	r3, #1
 8003bc8:	d1ee      	bne.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8003bca:	7cfb      	ldrb	r3, [r7, #19]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d105      	bne.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f7ff ff5b 	bl	8003a90 <LL_RCC_SetRTCClockSource>
 8003bda:	e004      	b.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003bdc:	7cfb      	ldrb	r3, [r7, #19]
 8003bde:	74bb      	strb	r3, [r7, #18]
 8003be0:	e001      	b.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003be2:	7cfb      	ldrb	r3, [r7, #19]
 8003be4:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 0301 	and.w	r3, r3, #1
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d004      	beq.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f7ff fea9 	bl	800394e <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f003 0302 	and.w	r3, r3, #2
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d004      	beq.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f7ff fe9e 	bl	800394e <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 0320 	and.w	r3, r3, #32
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d004      	beq.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	691b      	ldr	r3, [r3, #16]
 8003c22:	4618      	mov	r0, r3
 8003c24:	f7ff fec0 	bl	80039a8 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d004      	beq.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6a1b      	ldr	r3, [r3, #32]
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f7ff fee6 	bl	8003a0a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d004      	beq.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f7ff fedb 	bl	8003a0a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d004      	beq.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c64:	4618      	mov	r0, r3
 8003c66:	f7ff fed0 	bl	8003a0a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d004      	beq.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	695b      	ldr	r3, [r3, #20]
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f7ff fea9 	bl	80039d2 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d004      	beq.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	699b      	ldr	r3, [r3, #24]
 8003c90:	4618      	mov	r0, r3
 8003c92:	f7ff fe9e 	bl	80039d2 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d004      	beq.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	69db      	ldr	r3, [r3, #28]
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f7ff fe93 	bl	80039d2 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 0310 	and.w	r3, r3, #16
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d011      	beq.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	68db      	ldr	r3, [r3, #12]
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f7ff fe5e 	bl	800397e <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	68db      	ldr	r3, [r3, #12]
 8003cc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cca:	d107      	bne.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8003ccc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cd0:	68db      	ldr	r3, [r3, #12]
 8003cd2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003cd6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003cda:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d010      	beq.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cec:	4618      	mov	r0, r3
 8003cee:	f7ff fea5 	bl	8003a3c <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d107      	bne.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8003cfa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cfe:	68db      	ldr	r3, [r3, #12]
 8003d00:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d04:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d08:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d011      	beq.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f7ff fea3 	bl	8003a66 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d28:	d107      	bne.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003d2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d2e:	68db      	ldr	r3, [r3, #12]
 8003d30:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d38:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8003d3a:	7cbb      	ldrb	r3, [r7, #18]
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	3718      	adds	r7, #24
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}
 8003d44:	58000400 	.word	0x58000400

08003d48 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b084      	sub	sp, #16
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d071      	beq.n	8003e3e <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d106      	bne.n	8003d74 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f7fc fd2c 	bl	80007cc <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2202      	movs	r2, #2
 8003d78:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8003d7c:	4b32      	ldr	r3, [pc, #200]	; (8003e48 <HAL_RTC_Init+0x100>)
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	f003 0310 	and.w	r3, r3, #16
 8003d84:	2b10      	cmp	r3, #16
 8003d86:	d051      	beq.n	8003e2c <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003d88:	4b2f      	ldr	r3, [pc, #188]	; (8003e48 <HAL_RTC_Init+0x100>)
 8003d8a:	22ca      	movs	r2, #202	; 0xca
 8003d8c:	625a      	str	r2, [r3, #36]	; 0x24
 8003d8e:	4b2e      	ldr	r3, [pc, #184]	; (8003e48 <HAL_RTC_Init+0x100>)
 8003d90:	2253      	movs	r2, #83	; 0x53
 8003d92:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8003d94:	6878      	ldr	r0, [r7, #4]
 8003d96:	f000 fa11 	bl	80041bc <RTC_EnterInitMode>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8003d9e:	7bfb      	ldrb	r3, [r7, #15]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d13f      	bne.n	8003e24 <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8003da4:	4b28      	ldr	r3, [pc, #160]	; (8003e48 <HAL_RTC_Init+0x100>)
 8003da6:	699b      	ldr	r3, [r3, #24]
 8003da8:	4a27      	ldr	r2, [pc, #156]	; (8003e48 <HAL_RTC_Init+0x100>)
 8003daa:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8003dae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003db2:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8003db4:	4b24      	ldr	r3, [pc, #144]	; (8003e48 <HAL_RTC_Init+0x100>)
 8003db6:	699a      	ldr	r2, [r3, #24]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6859      	ldr	r1, [r3, #4]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	691b      	ldr	r3, [r3, #16]
 8003dc0:	4319      	orrs	r1, r3
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	699b      	ldr	r3, [r3, #24]
 8003dc6:	430b      	orrs	r3, r1
 8003dc8:	491f      	ldr	r1, [pc, #124]	; (8003e48 <HAL_RTC_Init+0x100>)
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	68da      	ldr	r2, [r3, #12]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	041b      	lsls	r3, r3, #16
 8003dd8:	491b      	ldr	r1, [pc, #108]	; (8003e48 <HAL_RTC_Init+0x100>)
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8003dde:	4b1a      	ldr	r3, [pc, #104]	; (8003e48 <HAL_RTC_Init+0x100>)
 8003de0:	68db      	ldr	r3, [r3, #12]
 8003de2:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dee:	430b      	orrs	r3, r1
 8003df0:	4915      	ldr	r1, [pc, #84]	; (8003e48 <HAL_RTC_Init+0x100>)
 8003df2:	4313      	orrs	r3, r2
 8003df4:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f000 fa14 	bl	8004224 <RTC_ExitInitMode>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 8003e00:	7bfb      	ldrb	r3, [r7, #15]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d10e      	bne.n	8003e24 <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 8003e06:	4b10      	ldr	r3, [pc, #64]	; (8003e48 <HAL_RTC_Init+0x100>)
 8003e08:	699b      	ldr	r3, [r3, #24]
 8003e0a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6a19      	ldr	r1, [r3, #32]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	69db      	ldr	r3, [r3, #28]
 8003e16:	4319      	orrs	r1, r3
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	695b      	ldr	r3, [r3, #20]
 8003e1c:	430b      	orrs	r3, r1
 8003e1e:	490a      	ldr	r1, [pc, #40]	; (8003e48 <HAL_RTC_Init+0x100>)
 8003e20:	4313      	orrs	r3, r2
 8003e22:	618b      	str	r3, [r1, #24]
                    hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003e24:	4b08      	ldr	r3, [pc, #32]	; (8003e48 <HAL_RTC_Init+0x100>)
 8003e26:	22ff      	movs	r2, #255	; 0xff
 8003e28:	625a      	str	r2, [r3, #36]	; 0x24
 8003e2a:	e001      	b.n	8003e30 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8003e30:	7bfb      	ldrb	r3, [r7, #15]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d103      	bne.n	8003e3e <HAL_RTC_Init+0xf6>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2201      	movs	r2, #1
 8003e3a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 8003e3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	3710      	adds	r7, #16
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}
 8003e48:	40002800 	.word	0x40002800

08003e4c <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8003e4c:	b590      	push	{r4, r7, lr}
 8003e4e:	b087      	sub	sp, #28
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	60f8      	str	r0, [r7, #12]
 8003e54:	60b9      	str	r1, [r7, #8]
 8003e56:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	d101      	bne.n	8003e6a <HAL_RTC_SetAlarm_IT+0x1e>
 8003e66:	2302      	movs	r3, #2
 8003e68:	e0f3      	b.n	8004052 <HAL_RTC_SetAlarm_IT+0x206>
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2202      	movs	r2, #2
 8003e76:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 8003e7a:	4b78      	ldr	r3, [pc, #480]	; (800405c <HAL_RTC_SetAlarm_IT+0x210>)
 8003e7c:	68db      	ldr	r3, [r3, #12]
 8003e7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e82:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e8a:	d06a      	beq.n	8003f62 <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d13a      	bne.n	8003f08 <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8003e92:	4b72      	ldr	r3, [pc, #456]	; (800405c <HAL_RTC_SetAlarm_IT+0x210>)
 8003e94:	699b      	ldr	r3, [r3, #24]
 8003e96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d102      	bne.n	8003ea4 <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	695b      	ldr	r3, [r3, #20]
 8003ea8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	781b      	ldrb	r3, [r3, #0]
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f000 f9f5 	bl	80042a0 <RTC_ByteToBcd2>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	785b      	ldrb	r3, [r3, #1]
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f000 f9ee 	bl	80042a0 <RTC_ByteToBcd2>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003ec8:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	789b      	ldrb	r3, [r3, #2]
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f000 f9e6 	bl	80042a0 <RTC_ByteToBcd2>
 8003ed4:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003ed6:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	78db      	ldrb	r3, [r3, #3]
 8003ede:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003ee0:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003eea:	4618      	mov	r0, r3
 8003eec:	f000 f9d8 	bl	80042a0 <RTC_ByteToBcd2>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003ef4:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003efc:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003f02:	4313      	orrs	r3, r2
 8003f04:	617b      	str	r3, [r7, #20]
 8003f06:	e02c      	b.n	8003f62 <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	695b      	ldr	r3, [r3, #20]
 8003f0c:	f1b3 3f80 	cmp.w	r3, #2155905152	; 0x80808080
 8003f10:	d00d      	beq.n	8003f2e <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	695b      	ldr	r3, [r3, #20]
 8003f16:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003f1a:	d008      	beq.n	8003f2e <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8003f1c:	4b4f      	ldr	r3, [pc, #316]	; (800405c <HAL_RTC_SetAlarm_IT+0x210>)
 8003f1e:	699b      	ldr	r3, [r3, #24]
 8003f20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d102      	bne.n	8003f2e <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	781b      	ldrb	r3, [r3, #0]
 8003f32:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	785b      	ldrb	r3, [r3, #1]
 8003f38:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003f3a:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003f3c:	68ba      	ldr	r2, [r7, #8]
 8003f3e:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003f40:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	78db      	ldrb	r3, [r3, #3]
 8003f46:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003f48:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003f50:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003f52:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003f58:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003f62:	4b3e      	ldr	r3, [pc, #248]	; (800405c <HAL_RTC_SetAlarm_IT+0x210>)
 8003f64:	22ca      	movs	r2, #202	; 0xca
 8003f66:	625a      	str	r2, [r3, #36]	; 0x24
 8003f68:	4b3c      	ldr	r3, [pc, #240]	; (800405c <HAL_RTC_SetAlarm_IT+0x210>)
 8003f6a:	2253      	movs	r2, #83	; 0x53
 8003f6c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f76:	d12c      	bne.n	8003fd2 <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8003f78:	4b38      	ldr	r3, [pc, #224]	; (800405c <HAL_RTC_SetAlarm_IT+0x210>)
 8003f7a:	699b      	ldr	r3, [r3, #24]
 8003f7c:	4a37      	ldr	r2, [pc, #220]	; (800405c <HAL_RTC_SetAlarm_IT+0x210>)
 8003f7e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003f82:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8003f84:	4b35      	ldr	r3, [pc, #212]	; (800405c <HAL_RTC_SetAlarm_IT+0x210>)
 8003f86:	2201      	movs	r2, #1
 8003f88:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f90:	d107      	bne.n	8003fa2 <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	699a      	ldr	r2, [r3, #24]
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	69db      	ldr	r3, [r3, #28]
 8003f9a:	4930      	ldr	r1, [pc, #192]	; (800405c <HAL_RTC_SetAlarm_IT+0x210>)
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	644b      	str	r3, [r1, #68]	; 0x44
 8003fa0:	e006      	b.n	8003fb0 <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 8003fa2:	4a2e      	ldr	r2, [pc, #184]	; (800405c <HAL_RTC_SetAlarm_IT+0x210>)
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	6413      	str	r3, [r2, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8003fa8:	4a2c      	ldr	r2, [pc, #176]	; (800405c <HAL_RTC_SetAlarm_IT+0x210>)
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	699b      	ldr	r3, [r3, #24]
 8003fae:	6453      	str	r3, [r2, #68]	; 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8003fb0:	4a2a      	ldr	r2, [pc, #168]	; (800405c <HAL_RTC_SetAlarm_IT+0x210>)
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	6713      	str	r3, [r2, #112]	; 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fbc:	f043 0201 	orr.w	r2, r3, #1
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8003fc4:	4b25      	ldr	r3, [pc, #148]	; (800405c <HAL_RTC_SetAlarm_IT+0x210>)
 8003fc6:	699b      	ldr	r3, [r3, #24]
 8003fc8:	4a24      	ldr	r2, [pc, #144]	; (800405c <HAL_RTC_SetAlarm_IT+0x210>)
 8003fca:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 8003fce:	6193      	str	r3, [r2, #24]
 8003fd0:	e02b      	b.n	800402a <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8003fd2:	4b22      	ldr	r3, [pc, #136]	; (800405c <HAL_RTC_SetAlarm_IT+0x210>)
 8003fd4:	699b      	ldr	r3, [r3, #24]
 8003fd6:	4a21      	ldr	r2, [pc, #132]	; (800405c <HAL_RTC_SetAlarm_IT+0x210>)
 8003fd8:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 8003fdc:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8003fde:	4b1f      	ldr	r3, [pc, #124]	; (800405c <HAL_RTC_SetAlarm_IT+0x210>)
 8003fe0:	2202      	movs	r2, #2
 8003fe2:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fea:	d107      	bne.n	8003ffc <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	699a      	ldr	r2, [r3, #24]
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	69db      	ldr	r3, [r3, #28]
 8003ff4:	4919      	ldr	r1, [pc, #100]	; (800405c <HAL_RTC_SetAlarm_IT+0x210>)
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003ffa:	e006      	b.n	800400a <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8003ffc:	4a17      	ldr	r2, [pc, #92]	; (800405c <HAL_RTC_SetAlarm_IT+0x210>)
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	6493      	str	r3, [r2, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 8004002:	4a16      	ldr	r2, [pc, #88]	; (800405c <HAL_RTC_SetAlarm_IT+0x210>)
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	699b      	ldr	r3, [r3, #24]
 8004008:	64d3      	str	r3, [r2, #76]	; 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 800400a:	4a14      	ldr	r2, [pc, #80]	; (800405c <HAL_RTC_SetAlarm_IT+0x210>)
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	6753      	str	r3, [r2, #116]	; 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004016:	f043 0202 	orr.w	r2, r3, #2
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 800401e:	4b0f      	ldr	r3, [pc, #60]	; (800405c <HAL_RTC_SetAlarm_IT+0x210>)
 8004020:	699b      	ldr	r3, [r3, #24]
 8004022:	4a0e      	ldr	r2, [pc, #56]	; (800405c <HAL_RTC_SetAlarm_IT+0x210>)
 8004024:	f443 5308 	orr.w	r3, r3, #8704	; 0x2200
 8004028:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800402a:	4b0d      	ldr	r3, [pc, #52]	; (8004060 <HAL_RTC_SetAlarm_IT+0x214>)
 800402c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004030:	4a0b      	ldr	r2, [pc, #44]	; (8004060 <HAL_RTC_SetAlarm_IT+0x214>)
 8004032:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004036:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800403a:	4b08      	ldr	r3, [pc, #32]	; (800405c <HAL_RTC_SetAlarm_IT+0x210>)
 800403c:	22ff      	movs	r2, #255	; 0xff
 800403e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2201      	movs	r2, #1
 8004044:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2200      	movs	r2, #0
 800404c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8004050:	2300      	movs	r3, #0
}
 8004052:	4618      	mov	r0, r3
 8004054:	371c      	adds	r7, #28
 8004056:	46bd      	mov	sp, r7
 8004058:	bd90      	pop	{r4, r7, pc}
 800405a:	bf00      	nop
 800405c:	40002800 	.word	0x40002800
 8004060:	58000800 	.word	0x58000800

08004064 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8004064:	b480      	push	{r7}
 8004066:	b083      	sub	sp, #12
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
 800406c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004074:	2b01      	cmp	r3, #1
 8004076:	d101      	bne.n	800407c <HAL_RTC_DeactivateAlarm+0x18>
 8004078:	2302      	movs	r3, #2
 800407a:	e048      	b.n	800410e <HAL_RTC_DeactivateAlarm+0xaa>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2201      	movs	r2, #1
 8004080:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2202      	movs	r2, #2
 8004088:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800408c:	4b22      	ldr	r3, [pc, #136]	; (8004118 <HAL_RTC_DeactivateAlarm+0xb4>)
 800408e:	22ca      	movs	r2, #202	; 0xca
 8004090:	625a      	str	r2, [r3, #36]	; 0x24
 8004092:	4b21      	ldr	r3, [pc, #132]	; (8004118 <HAL_RTC_DeactivateAlarm+0xb4>)
 8004094:	2253      	movs	r2, #83	; 0x53
 8004096:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800409e:	d115      	bne.n	80040cc <HAL_RTC_DeactivateAlarm+0x68>
  {
    /* AlarmA, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80040a0:	4b1d      	ldr	r3, [pc, #116]	; (8004118 <HAL_RTC_DeactivateAlarm+0xb4>)
 80040a2:	699b      	ldr	r3, [r3, #24]
 80040a4:	4a1c      	ldr	r2, [pc, #112]	; (8004118 <HAL_RTC_DeactivateAlarm+0xb4>)
 80040a6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80040aa:	6193      	str	r3, [r2, #24]

    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 80040ac:	4b1a      	ldr	r3, [pc, #104]	; (8004118 <HAL_RTC_DeactivateAlarm+0xb4>)
 80040ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040b0:	4a19      	ldr	r2, [pc, #100]	; (8004118 <HAL_RTC_DeactivateAlarm+0xb4>)
 80040b2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80040b6:	6453      	str	r3, [r2, #68]	; 0x44

    /* Store in the handle the Alarm A disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040bc:	f023 0201 	bic.w	r2, r3, #1
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmA flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80040c4:	4b14      	ldr	r3, [pc, #80]	; (8004118 <HAL_RTC_DeactivateAlarm+0xb4>)
 80040c6:	2201      	movs	r2, #1
 80040c8:	65da      	str	r2, [r3, #92]	; 0x5c
 80040ca:	e014      	b.n	80040f6 <HAL_RTC_DeactivateAlarm+0x92>
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 80040cc:	4b12      	ldr	r3, [pc, #72]	; (8004118 <HAL_RTC_DeactivateAlarm+0xb4>)
 80040ce:	699b      	ldr	r3, [r3, #24]
 80040d0:	4a11      	ldr	r2, [pc, #68]	; (8004118 <HAL_RTC_DeactivateAlarm+0xb4>)
 80040d2:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 80040d6:	6193      	str	r3, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 80040d8:	4b0f      	ldr	r3, [pc, #60]	; (8004118 <HAL_RTC_DeactivateAlarm+0xb4>)
 80040da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040dc:	4a0e      	ldr	r2, [pc, #56]	; (8004118 <HAL_RTC_DeactivateAlarm+0xb4>)
 80040de:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80040e2:	64d3      	str	r3, [r2, #76]	; 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040e8:	f023 0202 	bic.w	r2, r3, #2
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80040f0:	4b09      	ldr	r3, [pc, #36]	; (8004118 <HAL_RTC_DeactivateAlarm+0xb4>)
 80040f2:	2202      	movs	r2, #2
 80040f4:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80040f6:	4b08      	ldr	r3, [pc, #32]	; (8004118 <HAL_RTC_DeactivateAlarm+0xb4>)
 80040f8:	22ff      	movs	r2, #255	; 0xff
 80040fa:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2201      	movs	r2, #1
 8004100:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2200      	movs	r2, #0
 8004108:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800410c:	2300      	movs	r3, #0
}
 800410e:	4618      	mov	r0, r3
 8004110:	370c      	adds	r7, #12
 8004112:	46bd      	mov	sp, r7
 8004114:	bc80      	pop	{r7}
 8004116:	4770      	bx	lr
 8004118:	40002800 	.word	0x40002800

0800411c <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b084      	sub	sp, #16
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 8004124:	4b11      	ldr	r3, [pc, #68]	; (800416c <HAL_RTC_AlarmIRQHandler+0x50>)
 8004126:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800412c:	4013      	ands	r3, r2
 800412e:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	f003 0301 	and.w	r3, r3, #1
 8004136:	2b00      	cmp	r3, #0
 8004138:	d005      	beq.n	8004146 <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 800413a:	4b0c      	ldr	r3, [pc, #48]	; (800416c <HAL_RTC_AlarmIRQHandler+0x50>)
 800413c:	2201      	movs	r2, #1
 800413e:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 8004140:	6878      	ldr	r0, [r7, #4]
 8004142:	f7fc feb8 	bl	8000eb6 <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	f003 0302 	and.w	r3, r3, #2
 800414c:	2b00      	cmp	r3, #0
 800414e:	d005      	beq.n	800415c <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8004150:	4b06      	ldr	r3, [pc, #24]	; (800416c <HAL_RTC_AlarmIRQHandler+0x50>)
 8004152:	2202      	movs	r2, #2
 8004154:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f000 f94a 	bl	80043f0 <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2201      	movs	r2, #1
 8004160:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8004164:	bf00      	nop
 8004166:	3710      	adds	r7, #16
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}
 800416c:	40002800 	.word	0x40002800

08004170 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b084      	sub	sp, #16
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8004178:	4b0f      	ldr	r3, [pc, #60]	; (80041b8 <HAL_RTC_WaitForSynchro+0x48>)
 800417a:	68db      	ldr	r3, [r3, #12]
 800417c:	4a0e      	ldr	r2, [pc, #56]	; (80041b8 <HAL_RTC_WaitForSynchro+0x48>)
 800417e:	f023 0320 	bic.w	r3, r3, #32
 8004182:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8004184:	f7fc fcbe 	bl	8000b04 <HAL_GetTick>
 8004188:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800418a:	e009      	b.n	80041a0 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800418c:	f7fc fcba 	bl	8000b04 <HAL_GetTick>
 8004190:	4602      	mov	r2, r0
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	1ad3      	subs	r3, r2, r3
 8004196:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800419a:	d901      	bls.n	80041a0 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800419c:	2303      	movs	r3, #3
 800419e:	e006      	b.n	80041ae <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80041a0:	4b05      	ldr	r3, [pc, #20]	; (80041b8 <HAL_RTC_WaitForSynchro+0x48>)
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	f003 0320 	and.w	r3, r3, #32
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d0ef      	beq.n	800418c <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80041ac:	2300      	movs	r3, #0
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3710      	adds	r7, #16
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	bf00      	nop
 80041b8:	40002800 	.word	0x40002800

080041bc <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b084      	sub	sp, #16
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80041c4:	2300      	movs	r3, #0
 80041c6:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 80041c8:	4b15      	ldr	r3, [pc, #84]	; (8004220 <RTC_EnterInitMode+0x64>)
 80041ca:	68db      	ldr	r3, [r3, #12]
 80041cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d120      	bne.n	8004216 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80041d4:	4b12      	ldr	r3, [pc, #72]	; (8004220 <RTC_EnterInitMode+0x64>)
 80041d6:	68db      	ldr	r3, [r3, #12]
 80041d8:	4a11      	ldr	r2, [pc, #68]	; (8004220 <RTC_EnterInitMode+0x64>)
 80041da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041de:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 80041e0:	f7fc fc90 	bl	8000b04 <HAL_GetTick>
 80041e4:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80041e6:	e00d      	b.n	8004204 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80041e8:	f7fc fc8c 	bl	8000b04 <HAL_GetTick>
 80041ec:	4602      	mov	r2, r0
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	1ad3      	subs	r3, r2, r3
 80041f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80041f6:	d905      	bls.n	8004204 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80041f8:	2303      	movs	r3, #3
 80041fa:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2203      	movs	r2, #3
 8004200:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004204:	4b06      	ldr	r3, [pc, #24]	; (8004220 <RTC_EnterInitMode+0x64>)
 8004206:	68db      	ldr	r3, [r3, #12]
 8004208:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800420c:	2b00      	cmp	r3, #0
 800420e:	d102      	bne.n	8004216 <RTC_EnterInitMode+0x5a>
 8004210:	7bfb      	ldrb	r3, [r7, #15]
 8004212:	2b03      	cmp	r3, #3
 8004214:	d1e8      	bne.n	80041e8 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8004216:	7bfb      	ldrb	r3, [r7, #15]
}
 8004218:	4618      	mov	r0, r3
 800421a:	3710      	adds	r7, #16
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}
 8004220:	40002800 	.word	0x40002800

08004224 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b084      	sub	sp, #16
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800422c:	2300      	movs	r3, #0
 800422e:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8004230:	4b1a      	ldr	r3, [pc, #104]	; (800429c <RTC_ExitInitMode+0x78>)
 8004232:	68db      	ldr	r3, [r3, #12]
 8004234:	4a19      	ldr	r2, [pc, #100]	; (800429c <RTC_ExitInitMode+0x78>)
 8004236:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800423a:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800423c:	4b17      	ldr	r3, [pc, #92]	; (800429c <RTC_ExitInitMode+0x78>)
 800423e:	699b      	ldr	r3, [r3, #24]
 8004240:	f003 0320 	and.w	r3, r3, #32
 8004244:	2b00      	cmp	r3, #0
 8004246:	d10c      	bne.n	8004262 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004248:	6878      	ldr	r0, [r7, #4]
 800424a:	f7ff ff91 	bl	8004170 <HAL_RTC_WaitForSynchro>
 800424e:	4603      	mov	r3, r0
 8004250:	2b00      	cmp	r3, #0
 8004252:	d01e      	beq.n	8004292 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2203      	movs	r2, #3
 8004258:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 800425c:	2303      	movs	r3, #3
 800425e:	73fb      	strb	r3, [r7, #15]
 8004260:	e017      	b.n	8004292 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004262:	4b0e      	ldr	r3, [pc, #56]	; (800429c <RTC_ExitInitMode+0x78>)
 8004264:	699b      	ldr	r3, [r3, #24]
 8004266:	4a0d      	ldr	r2, [pc, #52]	; (800429c <RTC_ExitInitMode+0x78>)
 8004268:	f023 0320 	bic.w	r3, r3, #32
 800426c:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f7ff ff7e 	bl	8004170 <HAL_RTC_WaitForSynchro>
 8004274:	4603      	mov	r3, r0
 8004276:	2b00      	cmp	r3, #0
 8004278:	d005      	beq.n	8004286 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2203      	movs	r2, #3
 800427e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8004282:	2303      	movs	r3, #3
 8004284:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004286:	4b05      	ldr	r3, [pc, #20]	; (800429c <RTC_ExitInitMode+0x78>)
 8004288:	699b      	ldr	r3, [r3, #24]
 800428a:	4a04      	ldr	r2, [pc, #16]	; (800429c <RTC_ExitInitMode+0x78>)
 800428c:	f043 0320 	orr.w	r3, r3, #32
 8004290:	6193      	str	r3, [r2, #24]
  }

  return status;
 8004292:	7bfb      	ldrb	r3, [r7, #15]
}
 8004294:	4618      	mov	r0, r3
 8004296:	3710      	adds	r7, #16
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}
 800429c:	40002800 	.word	0x40002800

080042a0 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b085      	sub	sp, #20
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	4603      	mov	r3, r0
 80042a8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80042aa:	2300      	movs	r3, #0
 80042ac:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 80042ae:	79fb      	ldrb	r3, [r7, #7]
 80042b0:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 80042b2:	e005      	b.n	80042c0 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	3301      	adds	r3, #1
 80042b8:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 80042ba:	7afb      	ldrb	r3, [r7, #11]
 80042bc:	3b0a      	subs	r3, #10
 80042be:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 80042c0:	7afb      	ldrb	r3, [r7, #11]
 80042c2:	2b09      	cmp	r3, #9
 80042c4:	d8f6      	bhi.n	80042b4 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	011b      	lsls	r3, r3, #4
 80042cc:	b2da      	uxtb	r2, r3
 80042ce:	7afb      	ldrb	r3, [r7, #11]
 80042d0:	4313      	orrs	r3, r2
 80042d2:	b2db      	uxtb	r3, r3
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	3714      	adds	r7, #20
 80042d8:	46bd      	mov	sp, r7
 80042da:	bc80      	pop	{r7}
 80042dc:	4770      	bx	lr
	...

080042e0 <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b083      	sub	sp, #12
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80042ee:	2b01      	cmp	r3, #1
 80042f0:	d101      	bne.n	80042f6 <HAL_RTCEx_EnableBypassShadow+0x16>
 80042f2:	2302      	movs	r3, #2
 80042f4:	e01f      	b.n	8004336 <HAL_RTCEx_EnableBypassShadow+0x56>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2201      	movs	r2, #1
 80042fa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2202      	movs	r2, #2
 8004302:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004306:	4b0e      	ldr	r3, [pc, #56]	; (8004340 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8004308:	22ca      	movs	r2, #202	; 0xca
 800430a:	625a      	str	r2, [r3, #36]	; 0x24
 800430c:	4b0c      	ldr	r3, [pc, #48]	; (8004340 <HAL_RTCEx_EnableBypassShadow+0x60>)
 800430e:	2253      	movs	r2, #83	; 0x53
 8004310:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004312:	4b0b      	ldr	r3, [pc, #44]	; (8004340 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8004314:	699b      	ldr	r3, [r3, #24]
 8004316:	4a0a      	ldr	r2, [pc, #40]	; (8004340 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8004318:	f043 0320 	orr.w	r3, r3, #32
 800431c:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800431e:	4b08      	ldr	r3, [pc, #32]	; (8004340 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8004320:	22ff      	movs	r2, #255	; 0xff
 8004322:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2201      	movs	r2, #1
 8004328:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2200      	movs	r2, #0
 8004330:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8004334:	2300      	movs	r3, #0
}
 8004336:	4618      	mov	r0, r3
 8004338:	370c      	adds	r7, #12
 800433a:	46bd      	mov	sp, r7
 800433c:	bc80      	pop	{r7}
 800433e:	4770      	bx	lr
 8004340:	40002800 	.word	0x40002800

08004344 <HAL_RTCEx_SetSSRU_IT>:
  * @brief  Set SSR Underflow detection with Interrupt.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
 8004344:	b480      	push	{r7}
 8004346:	b083      	sub	sp, #12
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004352:	2b01      	cmp	r3, #1
 8004354:	d101      	bne.n	800435a <HAL_RTCEx_SetSSRU_IT+0x16>
 8004356:	2302      	movs	r3, #2
 8004358:	e027      	b.n	80043aa <HAL_RTCEx_SetSSRU_IT+0x66>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2201      	movs	r2, #1
 800435e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2202      	movs	r2, #2
 8004366:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800436a:	4b12      	ldr	r3, [pc, #72]	; (80043b4 <HAL_RTCEx_SetSSRU_IT+0x70>)
 800436c:	22ca      	movs	r2, #202	; 0xca
 800436e:	625a      	str	r2, [r3, #36]	; 0x24
 8004370:	4b10      	ldr	r3, [pc, #64]	; (80043b4 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8004372:	2253      	movs	r2, #83	; 0x53
 8004374:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 8004376:	4b0f      	ldr	r3, [pc, #60]	; (80043b4 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8004378:	699b      	ldr	r3, [r3, #24]
 800437a:	4a0e      	ldr	r2, [pc, #56]	; (80043b4 <HAL_RTCEx_SetSSRU_IT+0x70>)
 800437c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004380:	6193      	str	r3, [r2, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 8004382:	4b0d      	ldr	r3, [pc, #52]	; (80043b8 <HAL_RTCEx_SetSSRU_IT+0x74>)
 8004384:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004388:	4a0b      	ldr	r2, [pc, #44]	; (80043b8 <HAL_RTCEx_SetSSRU_IT+0x74>)
 800438a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800438e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004392:	4b08      	ldr	r3, [pc, #32]	; (80043b4 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8004394:	22ff      	movs	r2, #255	; 0xff
 8004396:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2201      	movs	r2, #1
 800439c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2200      	movs	r2, #0
 80043a4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80043a8:	2300      	movs	r3, #0
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	370c      	adds	r7, #12
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bc80      	pop	{r7}
 80043b2:	4770      	bx	lr
 80043b4:	40002800 	.word	0x40002800
 80043b8:	58000800 	.word	0x58000800

080043bc <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b082      	sub	sp, #8
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 80043c4:	4b09      	ldr	r3, [pc, #36]	; (80043ec <HAL_RTCEx_SSRUIRQHandler+0x30>)
 80043c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d005      	beq.n	80043dc <HAL_RTCEx_SSRUIRQHandler+0x20>
  {
    /* Immediately clear flags */
    RTC->SCR = RTC_SCR_CSSRUF;
 80043d0:	4b06      	ldr	r3, [pc, #24]	; (80043ec <HAL_RTCEx_SSRUIRQHandler+0x30>)
 80043d2:	2240      	movs	r2, #64	; 0x40
 80043d4:	65da      	str	r2, [r3, #92]	; 0x5c
    /* SSRU callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call SSRUEvent registered Callback */
    hrtc->SSRUEventCallback(hrtc);
#else
    HAL_RTCEx_SSRUEventCallback(hrtc);
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f7fc fd77 	bl	8000eca <HAL_RTCEx_SSRUEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2201      	movs	r2, #1
 80043e0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 80043e4:	bf00      	nop
 80043e6:	3708      	adds	r7, #8
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}
 80043ec:	40002800 	.word	0x40002800

080043f0 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b083      	sub	sp, #12
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80043f8:	bf00      	nop
 80043fa:	370c      	adds	r7, #12
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bc80      	pop	{r7}
 8004400:	4770      	bx	lr
	...

08004404 <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8004404:	b480      	push	{r7}
 8004406:	b087      	sub	sp, #28
 8004408:	af00      	add	r7, sp, #0
 800440a:	60f8      	str	r0, [r7, #12]
 800440c:	60b9      	str	r1, [r7, #8]
 800440e:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 8004410:	4b07      	ldr	r3, [pc, #28]	; (8004430 <HAL_RTCEx_BKUPWrite+0x2c>)
 8004412:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	009b      	lsls	r3, r3, #2
 8004418:	697a      	ldr	r2, [r7, #20]
 800441a:	4413      	add	r3, r2
 800441c:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	687a      	ldr	r2, [r7, #4]
 8004422:	601a      	str	r2, [r3, #0]
}
 8004424:	bf00      	nop
 8004426:	371c      	adds	r7, #28
 8004428:	46bd      	mov	sp, r7
 800442a:	bc80      	pop	{r7}
 800442c:	4770      	bx	lr
 800442e:	bf00      	nop
 8004430:	4000b100 	.word	0x4000b100

08004434 <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8004434:	b480      	push	{r7}
 8004436:	b085      	sub	sp, #20
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
 800443c:	6039      	str	r1, [r7, #0]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 800443e:	4b07      	ldr	r3, [pc, #28]	; (800445c <HAL_RTCEx_BKUPRead+0x28>)
 8004440:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	009b      	lsls	r3, r3, #2
 8004446:	68fa      	ldr	r2, [r7, #12]
 8004448:	4413      	add	r3, r2
 800444a:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
}
 8004450:	4618      	mov	r0, r3
 8004452:	3714      	adds	r7, #20
 8004454:	46bd      	mov	sp, r7
 8004456:	bc80      	pop	{r7}
 8004458:	4770      	bx	lr
 800445a:	bf00      	nop
 800445c:	4000b100 	.word	0x4000b100

08004460 <LL_PWR_SetRadioBusyTrigger>:
{
 8004460:	b480      	push	{r7}
 8004462:	b083      	sub	sp, #12
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8004468:	4b06      	ldr	r3, [pc, #24]	; (8004484 <LL_PWR_SetRadioBusyTrigger+0x24>)
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004470:	4904      	ldr	r1, [pc, #16]	; (8004484 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	4313      	orrs	r3, r2
 8004476:	608b      	str	r3, [r1, #8]
}
 8004478:	bf00      	nop
 800447a:	370c      	adds	r7, #12
 800447c:	46bd      	mov	sp, r7
 800447e:	bc80      	pop	{r7}
 8004480:	4770      	bx	lr
 8004482:	bf00      	nop
 8004484:	58000400 	.word	0x58000400

08004488 <LL_PWR_UnselectSUBGHZSPI_NSS>:
{
 8004488:	b480      	push	{r7}
 800448a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800448c:	4b05      	ldr	r3, [pc, #20]	; (80044a4 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 800448e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004492:	4a04      	ldr	r2, [pc, #16]	; (80044a4 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8004494:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004498:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800449c:	bf00      	nop
 800449e:	46bd      	mov	sp, r7
 80044a0:	bc80      	pop	{r7}
 80044a2:	4770      	bx	lr
 80044a4:	58000400 	.word	0x58000400

080044a8 <LL_PWR_SelectSUBGHZSPI_NSS>:
{
 80044a8:	b480      	push	{r7}
 80044aa:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80044ac:	4b05      	ldr	r3, [pc, #20]	; (80044c4 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 80044ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044b2:	4a04      	ldr	r2, [pc, #16]	; (80044c4 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 80044b4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80044b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80044bc:	bf00      	nop
 80044be:	46bd      	mov	sp, r7
 80044c0:	bc80      	pop	{r7}
 80044c2:	4770      	bx	lr
 80044c4:	58000400 	.word	0x58000400

080044c8 <LL_PWR_ClearFlag_RFBUSY>:
{
 80044c8:	b480      	push	{r7}
 80044ca:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 80044cc:	4b03      	ldr	r3, [pc, #12]	; (80044dc <LL_PWR_ClearFlag_RFBUSY+0x14>)
 80044ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80044d2:	619a      	str	r2, [r3, #24]
}
 80044d4:	bf00      	nop
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bc80      	pop	{r7}
 80044da:	4770      	bx	lr
 80044dc:	58000400 	.word	0x58000400

080044e0 <LL_PWR_IsActiveFlag_RFBUSYS>:
{
 80044e0:	b480      	push	{r7}
 80044e2:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 80044e4:	4b06      	ldr	r3, [pc, #24]	; (8004500 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 80044e6:	695b      	ldr	r3, [r3, #20]
 80044e8:	f003 0302 	and.w	r3, r3, #2
 80044ec:	2b02      	cmp	r3, #2
 80044ee:	d101      	bne.n	80044f4 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 80044f0:	2301      	movs	r3, #1
 80044f2:	e000      	b.n	80044f6 <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 80044f4:	2300      	movs	r3, #0
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bc80      	pop	{r7}
 80044fc:	4770      	bx	lr
 80044fe:	bf00      	nop
 8004500:	58000400 	.word	0x58000400

08004504 <LL_PWR_IsActiveFlag_RFBUSYMS>:
{
 8004504:	b480      	push	{r7}
 8004506:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8004508:	4b06      	ldr	r3, [pc, #24]	; (8004524 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 800450a:	695b      	ldr	r3, [r3, #20]
 800450c:	f003 0304 	and.w	r3, r3, #4
 8004510:	2b04      	cmp	r3, #4
 8004512:	d101      	bne.n	8004518 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8004514:	2301      	movs	r3, #1
 8004516:	e000      	b.n	800451a <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8004518:	2300      	movs	r3, #0
}
 800451a:	4618      	mov	r0, r3
 800451c:	46bd      	mov	sp, r7
 800451e:	bc80      	pop	{r7}
 8004520:	4770      	bx	lr
 8004522:	bf00      	nop
 8004524:	58000400 	.word	0x58000400

08004528 <LL_RCC_RF_DisableReset>:
{
 8004528:	b480      	push	{r7}
 800452a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 800452c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004530:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004534:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004538:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800453c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004540:	bf00      	nop
 8004542:	46bd      	mov	sp, r7
 8004544:	bc80      	pop	{r7}
 8004546:	4770      	bx	lr

08004548 <LL_RCC_IsRFUnderReset>:
{
 8004548:	b480      	push	{r7}
 800454a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 800454c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004550:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004554:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004558:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800455c:	d101      	bne.n	8004562 <LL_RCC_IsRFUnderReset+0x1a>
 800455e:	2301      	movs	r3, #1
 8004560:	e000      	b.n	8004564 <LL_RCC_IsRFUnderReset+0x1c>
 8004562:	2300      	movs	r3, #0
}
 8004564:	4618      	mov	r0, r3
 8004566:	46bd      	mov	sp, r7
 8004568:	bc80      	pop	{r7}
 800456a:	4770      	bx	lr

0800456c <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 800456c:	b480      	push	{r7}
 800456e:	b083      	sub	sp, #12
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8004574:	4b06      	ldr	r3, [pc, #24]	; (8004590 <LL_EXTI_EnableIT_32_63+0x24>)
 8004576:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800457a:	4905      	ldr	r1, [pc, #20]	; (8004590 <LL_EXTI_EnableIT_32_63+0x24>)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	4313      	orrs	r3, r2
 8004580:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8004584:	bf00      	nop
 8004586:	370c      	adds	r7, #12
 8004588:	46bd      	mov	sp, r7
 800458a:	bc80      	pop	{r7}
 800458c:	4770      	bx	lr
 800458e:	bf00      	nop
 8004590:	58000800 	.word	0x58000800

08004594 <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b084      	sub	sp, #16
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d103      	bne.n	80045aa <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	73fb      	strb	r3, [r7, #15]
    return status;
 80045a6:	7bfb      	ldrb	r3, [r7, #15]
 80045a8:	e052      	b.n	8004650 <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 80045aa:	2300      	movs	r3, #0
 80045ac:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	799b      	ldrb	r3, [r3, #6]
 80045b2:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 80045b4:	7bbb      	ldrb	r3, [r7, #14]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d002      	beq.n	80045c0 <HAL_SUBGHZ_Init+0x2c>
 80045ba:	7bbb      	ldrb	r3, [r7, #14]
 80045bc:	2b03      	cmp	r3, #3
 80045be:	d109      	bne.n	80045d4 <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2200      	movs	r2, #0
 80045c4:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	f7fc fa00 	bl	80009cc <HAL_SUBGHZ_MspInit>
#if defined(CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 80045cc:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80045d0:	f7ff ffcc 	bl	800456c <LL_EXTI_EnableIT_32_63>
#endif /* CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 80045d4:	7bbb      	ldrb	r3, [r7, #14]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d126      	bne.n	8004628 <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2202      	movs	r2, #2
 80045de:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 80045e0:	f7ff ffa2 	bl	8004528 <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80045e4:	4b1c      	ldr	r3, [pc, #112]	; (8004658 <HAL_SUBGHZ_Init+0xc4>)
 80045e6:	681a      	ldr	r2, [r3, #0]
 80045e8:	4613      	mov	r3, r2
 80045ea:	00db      	lsls	r3, r3, #3
 80045ec:	1a9b      	subs	r3, r3, r2
 80045ee:	009b      	lsls	r3, r3, #2
 80045f0:	0cdb      	lsrs	r3, r3, #19
 80045f2:	2264      	movs	r2, #100	; 0x64
 80045f4:	fb02 f303 	mul.w	r3, r2, r3
 80045f8:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d105      	bne.n	800460c <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 8004600:	2301      	movs	r3, #1
 8004602:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2201      	movs	r2, #1
 8004608:	609a      	str	r2, [r3, #8]
        break;
 800460a:	e007      	b.n	800461c <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	3b01      	subs	r3, #1
 8004610:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 8004612:	f7ff ff99 	bl	8004548 <LL_RCC_IsRFUnderReset>
 8004616:	4603      	mov	r3, r0
 8004618:	2b00      	cmp	r3, #0
 800461a:	d1ee      	bne.n	80045fa <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800461c:	f7ff ff34 	bl	8004488 <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 8004620:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004624:	f7ff ff1c 	bl	8004460 <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 8004628:	f7ff ff4e 	bl	80044c8 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 800462c:	7bfb      	ldrb	r3, [r7, #15]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d10a      	bne.n	8004648 <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4618      	mov	r0, r3
 8004638:	f000 faac 	bl	8004b94 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2201      	movs	r2, #1
 8004640:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2200      	movs	r2, #0
 8004646:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2201      	movs	r2, #1
 800464c:	719a      	strb	r2, [r3, #6]

  return status;
 800464e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004650:	4618      	mov	r0, r3
 8004652:	3710      	adds	r7, #16
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}
 8004658:	20000000 	.word	0x20000000

0800465c <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b086      	sub	sp, #24
 8004660:	af00      	add	r7, sp, #0
 8004662:	60f8      	str	r0, [r7, #12]
 8004664:	607a      	str	r2, [r7, #4]
 8004666:	461a      	mov	r2, r3
 8004668:	460b      	mov	r3, r1
 800466a:	817b      	strh	r3, [r7, #10]
 800466c:	4613      	mov	r3, r2
 800466e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	799b      	ldrb	r3, [r3, #6]
 8004674:	b2db      	uxtb	r3, r3
 8004676:	2b01      	cmp	r3, #1
 8004678:	d14a      	bne.n	8004710 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	795b      	ldrb	r3, [r3, #5]
 800467e:	2b01      	cmp	r3, #1
 8004680:	d101      	bne.n	8004686 <HAL_SUBGHZ_WriteRegisters+0x2a>
 8004682:	2302      	movs	r3, #2
 8004684:	e045      	b.n	8004712 <HAL_SUBGHZ_WriteRegisters+0xb6>
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2201      	movs	r2, #1
 800468a:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2202      	movs	r2, #2
 8004690:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8004692:	68f8      	ldr	r0, [r7, #12]
 8004694:	f000 fb4c 	bl	8004d30 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004698:	f7ff ff06 	bl	80044a8 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 800469c:	210d      	movs	r1, #13
 800469e:	68f8      	ldr	r0, [r7, #12]
 80046a0:	f000 fa98 	bl	8004bd4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 80046a4:	897b      	ldrh	r3, [r7, #10]
 80046a6:	0a1b      	lsrs	r3, r3, #8
 80046a8:	b29b      	uxth	r3, r3
 80046aa:	b2db      	uxtb	r3, r3
 80046ac:	4619      	mov	r1, r3
 80046ae:	68f8      	ldr	r0, [r7, #12]
 80046b0:	f000 fa90 	bl	8004bd4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 80046b4:	897b      	ldrh	r3, [r7, #10]
 80046b6:	b2db      	uxtb	r3, r3
 80046b8:	4619      	mov	r1, r3
 80046ba:	68f8      	ldr	r0, [r7, #12]
 80046bc:	f000 fa8a 	bl	8004bd4 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80046c0:	2300      	movs	r3, #0
 80046c2:	82bb      	strh	r3, [r7, #20]
 80046c4:	e00a      	b.n	80046dc <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80046c6:	8abb      	ldrh	r3, [r7, #20]
 80046c8:	687a      	ldr	r2, [r7, #4]
 80046ca:	4413      	add	r3, r2
 80046cc:	781b      	ldrb	r3, [r3, #0]
 80046ce:	4619      	mov	r1, r3
 80046d0:	68f8      	ldr	r0, [r7, #12]
 80046d2:	f000 fa7f 	bl	8004bd4 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80046d6:	8abb      	ldrh	r3, [r7, #20]
 80046d8:	3301      	adds	r3, #1
 80046da:	82bb      	strh	r3, [r7, #20]
 80046dc:	8aba      	ldrh	r2, [r7, #20]
 80046de:	893b      	ldrh	r3, [r7, #8]
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d3f0      	bcc.n	80046c6 <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80046e4:	f7ff fed0 	bl	8004488 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80046e8:	68f8      	ldr	r0, [r7, #12]
 80046ea:	f000 fb45 	bl	8004d78 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d002      	beq.n	80046fc <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	75fb      	strb	r3, [r7, #23]
 80046fa:	e001      	b.n	8004700 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 80046fc:	2300      	movs	r3, #0
 80046fe:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2201      	movs	r2, #1
 8004704:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	2200      	movs	r2, #0
 800470a:	715a      	strb	r2, [r3, #5]

    return status;
 800470c:	7dfb      	ldrb	r3, [r7, #23]
 800470e:	e000      	b.n	8004712 <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8004710:	2302      	movs	r3, #2
  }
}
 8004712:	4618      	mov	r0, r3
 8004714:	3718      	adds	r7, #24
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}

0800471a <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 800471a:	b580      	push	{r7, lr}
 800471c:	b088      	sub	sp, #32
 800471e:	af00      	add	r7, sp, #0
 8004720:	60f8      	str	r0, [r7, #12]
 8004722:	607a      	str	r2, [r7, #4]
 8004724:	461a      	mov	r2, r3
 8004726:	460b      	mov	r3, r1
 8004728:	817b      	strh	r3, [r7, #10]
 800472a:	4613      	mov	r3, r2
 800472c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	799b      	ldrb	r3, [r3, #6]
 8004736:	b2db      	uxtb	r3, r3
 8004738:	2b01      	cmp	r3, #1
 800473a:	d14a      	bne.n	80047d2 <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	795b      	ldrb	r3, [r3, #5]
 8004740:	2b01      	cmp	r3, #1
 8004742:	d101      	bne.n	8004748 <HAL_SUBGHZ_ReadRegisters+0x2e>
 8004744:	2302      	movs	r3, #2
 8004746:	e045      	b.n	80047d4 <HAL_SUBGHZ_ReadRegisters+0xba>
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	2201      	movs	r2, #1
 800474c:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800474e:	68f8      	ldr	r0, [r7, #12]
 8004750:	f000 faee 	bl	8004d30 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004754:	f7ff fea8 	bl	80044a8 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8004758:	211d      	movs	r1, #29
 800475a:	68f8      	ldr	r0, [r7, #12]
 800475c:	f000 fa3a 	bl	8004bd4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8004760:	897b      	ldrh	r3, [r7, #10]
 8004762:	0a1b      	lsrs	r3, r3, #8
 8004764:	b29b      	uxth	r3, r3
 8004766:	b2db      	uxtb	r3, r3
 8004768:	4619      	mov	r1, r3
 800476a:	68f8      	ldr	r0, [r7, #12]
 800476c:	f000 fa32 	bl	8004bd4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8004770:	897b      	ldrh	r3, [r7, #10]
 8004772:	b2db      	uxtb	r3, r3
 8004774:	4619      	mov	r1, r3
 8004776:	68f8      	ldr	r0, [r7, #12]
 8004778:	f000 fa2c 	bl	8004bd4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 800477c:	2100      	movs	r1, #0
 800477e:	68f8      	ldr	r0, [r7, #12]
 8004780:	f000 fa28 	bl	8004bd4 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8004784:	2300      	movs	r3, #0
 8004786:	82fb      	strh	r3, [r7, #22]
 8004788:	e009      	b.n	800479e <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800478a:	69b9      	ldr	r1, [r7, #24]
 800478c:	68f8      	ldr	r0, [r7, #12]
 800478e:	f000 fa77 	bl	8004c80 <SUBGHZSPI_Receive>
      pData++;
 8004792:	69bb      	ldr	r3, [r7, #24]
 8004794:	3301      	adds	r3, #1
 8004796:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8004798:	8afb      	ldrh	r3, [r7, #22]
 800479a:	3301      	adds	r3, #1
 800479c:	82fb      	strh	r3, [r7, #22]
 800479e:	8afa      	ldrh	r2, [r7, #22]
 80047a0:	893b      	ldrh	r3, [r7, #8]
 80047a2:	429a      	cmp	r2, r3
 80047a4:	d3f1      	bcc.n	800478a <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80047a6:	f7ff fe6f 	bl	8004488 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80047aa:	68f8      	ldr	r0, [r7, #12]
 80047ac:	f000 fae4 	bl	8004d78 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d002      	beq.n	80047be <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 80047b8:	2301      	movs	r3, #1
 80047ba:	77fb      	strb	r3, [r7, #31]
 80047bc:	e001      	b.n	80047c2 <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 80047be:	2300      	movs	r3, #0
 80047c0:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2201      	movs	r2, #1
 80047c6:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2200      	movs	r2, #0
 80047cc:	715a      	strb	r2, [r3, #5]

    return status;
 80047ce:	7ffb      	ldrb	r3, [r7, #31]
 80047d0:	e000      	b.n	80047d4 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 80047d2:	2302      	movs	r3, #2
  }
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	3720      	adds	r7, #32
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}

080047dc <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b086      	sub	sp, #24
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	60f8      	str	r0, [r7, #12]
 80047e4:	607a      	str	r2, [r7, #4]
 80047e6:	461a      	mov	r2, r3
 80047e8:	460b      	mov	r3, r1
 80047ea:	72fb      	strb	r3, [r7, #11]
 80047ec:	4613      	mov	r3, r2
 80047ee:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	799b      	ldrb	r3, [r3, #6]
 80047f4:	b2db      	uxtb	r3, r3
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d14a      	bne.n	8004890 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	795b      	ldrb	r3, [r3, #5]
 80047fe:	2b01      	cmp	r3, #1
 8004800:	d101      	bne.n	8004806 <HAL_SUBGHZ_ExecSetCmd+0x2a>
 8004802:	2302      	movs	r3, #2
 8004804:	e045      	b.n	8004892 <HAL_SUBGHZ_ExecSetCmd+0xb6>
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2201      	movs	r2, #1
 800480a:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800480c:	68f8      	ldr	r0, [r7, #12]
 800480e:	f000 fa8f 	bl	8004d30 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8004812:	7afb      	ldrb	r3, [r7, #11]
 8004814:	2b84      	cmp	r3, #132	; 0x84
 8004816:	d002      	beq.n	800481e <HAL_SUBGHZ_ExecSetCmd+0x42>
 8004818:	7afb      	ldrb	r3, [r7, #11]
 800481a:	2b94      	cmp	r3, #148	; 0x94
 800481c:	d103      	bne.n	8004826 <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	2201      	movs	r2, #1
 8004822:	711a      	strb	r2, [r3, #4]
 8004824:	e002      	b.n	800482c <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2200      	movs	r2, #0
 800482a:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800482c:	f7ff fe3c 	bl	80044a8 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8004830:	7afb      	ldrb	r3, [r7, #11]
 8004832:	4619      	mov	r1, r3
 8004834:	68f8      	ldr	r0, [r7, #12]
 8004836:	f000 f9cd 	bl	8004bd4 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800483a:	2300      	movs	r3, #0
 800483c:	82bb      	strh	r3, [r7, #20]
 800483e:	e00a      	b.n	8004856 <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8004840:	8abb      	ldrh	r3, [r7, #20]
 8004842:	687a      	ldr	r2, [r7, #4]
 8004844:	4413      	add	r3, r2
 8004846:	781b      	ldrb	r3, [r3, #0]
 8004848:	4619      	mov	r1, r3
 800484a:	68f8      	ldr	r0, [r7, #12]
 800484c:	f000 f9c2 	bl	8004bd4 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8004850:	8abb      	ldrh	r3, [r7, #20]
 8004852:	3301      	adds	r3, #1
 8004854:	82bb      	strh	r3, [r7, #20]
 8004856:	8aba      	ldrh	r2, [r7, #20]
 8004858:	893b      	ldrh	r3, [r7, #8]
 800485a:	429a      	cmp	r2, r3
 800485c:	d3f0      	bcc.n	8004840 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800485e:	f7ff fe13 	bl	8004488 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 8004862:	7afb      	ldrb	r3, [r7, #11]
 8004864:	2b84      	cmp	r3, #132	; 0x84
 8004866:	d002      	beq.n	800486e <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004868:	68f8      	ldr	r0, [r7, #12]
 800486a:	f000 fa85 	bl	8004d78 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d002      	beq.n	800487c <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	75fb      	strb	r3, [r7, #23]
 800487a:	e001      	b.n	8004880 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 800487c:	2300      	movs	r3, #0
 800487e:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	2201      	movs	r2, #1
 8004884:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2200      	movs	r2, #0
 800488a:	715a      	strb	r2, [r3, #5]

    return status;
 800488c:	7dfb      	ldrb	r3, [r7, #23]
 800488e:	e000      	b.n	8004892 <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8004890:	2302      	movs	r3, #2
  }
}
 8004892:	4618      	mov	r0, r3
 8004894:	3718      	adds	r7, #24
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}

0800489a <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 800489a:	b580      	push	{r7, lr}
 800489c:	b088      	sub	sp, #32
 800489e:	af00      	add	r7, sp, #0
 80048a0:	60f8      	str	r0, [r7, #12]
 80048a2:	607a      	str	r2, [r7, #4]
 80048a4:	461a      	mov	r2, r3
 80048a6:	460b      	mov	r3, r1
 80048a8:	72fb      	strb	r3, [r7, #11]
 80048aa:	4613      	mov	r3, r2
 80048ac:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	799b      	ldrb	r3, [r3, #6]
 80048b6:	b2db      	uxtb	r3, r3
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	d13d      	bne.n	8004938 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	795b      	ldrb	r3, [r3, #5]
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	d101      	bne.n	80048c8 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 80048c4:	2302      	movs	r3, #2
 80048c6:	e038      	b.n	800493a <HAL_SUBGHZ_ExecGetCmd+0xa0>
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	2201      	movs	r2, #1
 80048cc:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80048ce:	68f8      	ldr	r0, [r7, #12]
 80048d0:	f000 fa2e 	bl	8004d30 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80048d4:	f7ff fde8 	bl	80044a8 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 80048d8:	7afb      	ldrb	r3, [r7, #11]
 80048da:	4619      	mov	r1, r3
 80048dc:	68f8      	ldr	r0, [r7, #12]
 80048de:	f000 f979 	bl	8004bd4 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 80048e2:	2100      	movs	r1, #0
 80048e4:	68f8      	ldr	r0, [r7, #12]
 80048e6:	f000 f975 	bl	8004bd4 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80048ea:	2300      	movs	r3, #0
 80048ec:	82fb      	strh	r3, [r7, #22]
 80048ee:	e009      	b.n	8004904 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80048f0:	69b9      	ldr	r1, [r7, #24]
 80048f2:	68f8      	ldr	r0, [r7, #12]
 80048f4:	f000 f9c4 	bl	8004c80 <SUBGHZSPI_Receive>
      pData++;
 80048f8:	69bb      	ldr	r3, [r7, #24]
 80048fa:	3301      	adds	r3, #1
 80048fc:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 80048fe:	8afb      	ldrh	r3, [r7, #22]
 8004900:	3301      	adds	r3, #1
 8004902:	82fb      	strh	r3, [r7, #22]
 8004904:	8afa      	ldrh	r2, [r7, #22]
 8004906:	893b      	ldrh	r3, [r7, #8]
 8004908:	429a      	cmp	r2, r3
 800490a:	d3f1      	bcc.n	80048f0 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800490c:	f7ff fdbc 	bl	8004488 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004910:	68f8      	ldr	r0, [r7, #12]
 8004912:	f000 fa31 	bl	8004d78 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d002      	beq.n	8004924 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	77fb      	strb	r3, [r7, #31]
 8004922:	e001      	b.n	8004928 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8004924:	2300      	movs	r3, #0
 8004926:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2201      	movs	r2, #1
 800492c:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2200      	movs	r2, #0
 8004932:	715a      	strb	r2, [r3, #5]

    return status;
 8004934:	7ffb      	ldrb	r3, [r7, #31]
 8004936:	e000      	b.n	800493a <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004938:	2302      	movs	r3, #2
  }
}
 800493a:	4618      	mov	r0, r3
 800493c:	3720      	adds	r7, #32
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}

08004942 <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 8004942:	b580      	push	{r7, lr}
 8004944:	b086      	sub	sp, #24
 8004946:	af00      	add	r7, sp, #0
 8004948:	60f8      	str	r0, [r7, #12]
 800494a:	607a      	str	r2, [r7, #4]
 800494c:	461a      	mov	r2, r3
 800494e:	460b      	mov	r3, r1
 8004950:	72fb      	strb	r3, [r7, #11]
 8004952:	4613      	mov	r3, r2
 8004954:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	799b      	ldrb	r3, [r3, #6]
 800495a:	b2db      	uxtb	r3, r3
 800495c:	2b01      	cmp	r3, #1
 800495e:	d13e      	bne.n	80049de <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	795b      	ldrb	r3, [r3, #5]
 8004964:	2b01      	cmp	r3, #1
 8004966:	d101      	bne.n	800496c <HAL_SUBGHZ_WriteBuffer+0x2a>
 8004968:	2302      	movs	r3, #2
 800496a:	e039      	b.n	80049e0 <HAL_SUBGHZ_WriteBuffer+0x9e>
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2201      	movs	r2, #1
 8004970:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8004972:	68f8      	ldr	r0, [r7, #12]
 8004974:	f000 f9dc 	bl	8004d30 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004978:	f7ff fd96 	bl	80044a8 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 800497c:	210e      	movs	r1, #14
 800497e:	68f8      	ldr	r0, [r7, #12]
 8004980:	f000 f928 	bl	8004bd4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8004984:	7afb      	ldrb	r3, [r7, #11]
 8004986:	4619      	mov	r1, r3
 8004988:	68f8      	ldr	r0, [r7, #12]
 800498a:	f000 f923 	bl	8004bd4 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800498e:	2300      	movs	r3, #0
 8004990:	82bb      	strh	r3, [r7, #20]
 8004992:	e00a      	b.n	80049aa <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8004994:	8abb      	ldrh	r3, [r7, #20]
 8004996:	687a      	ldr	r2, [r7, #4]
 8004998:	4413      	add	r3, r2
 800499a:	781b      	ldrb	r3, [r3, #0]
 800499c:	4619      	mov	r1, r3
 800499e:	68f8      	ldr	r0, [r7, #12]
 80049a0:	f000 f918 	bl	8004bd4 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80049a4:	8abb      	ldrh	r3, [r7, #20]
 80049a6:	3301      	adds	r3, #1
 80049a8:	82bb      	strh	r3, [r7, #20]
 80049aa:	8aba      	ldrh	r2, [r7, #20]
 80049ac:	893b      	ldrh	r3, [r7, #8]
 80049ae:	429a      	cmp	r2, r3
 80049b0:	d3f0      	bcc.n	8004994 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80049b2:	f7ff fd69 	bl	8004488 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80049b6:	68f8      	ldr	r0, [r7, #12]
 80049b8:	f000 f9de 	bl	8004d78 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d002      	beq.n	80049ca <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	75fb      	strb	r3, [r7, #23]
 80049c8:	e001      	b.n	80049ce <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 80049ca:	2300      	movs	r3, #0
 80049cc:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2201      	movs	r2, #1
 80049d2:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2200      	movs	r2, #0
 80049d8:	715a      	strb	r2, [r3, #5]

    return status;
 80049da:	7dfb      	ldrb	r3, [r7, #23]
 80049dc:	e000      	b.n	80049e0 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80049de:	2302      	movs	r3, #2
  }
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	3718      	adds	r7, #24
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}

080049e8 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b088      	sub	sp, #32
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	60f8      	str	r0, [r7, #12]
 80049f0:	607a      	str	r2, [r7, #4]
 80049f2:	461a      	mov	r2, r3
 80049f4:	460b      	mov	r3, r1
 80049f6:	72fb      	strb	r3, [r7, #11]
 80049f8:	4613      	mov	r3, r2
 80049fa:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	799b      	ldrb	r3, [r3, #6]
 8004a04:	b2db      	uxtb	r3, r3
 8004a06:	2b01      	cmp	r3, #1
 8004a08:	d141      	bne.n	8004a8e <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	795b      	ldrb	r3, [r3, #5]
 8004a0e:	2b01      	cmp	r3, #1
 8004a10:	d101      	bne.n	8004a16 <HAL_SUBGHZ_ReadBuffer+0x2e>
 8004a12:	2302      	movs	r3, #2
 8004a14:	e03c      	b.n	8004a90 <HAL_SUBGHZ_ReadBuffer+0xa8>
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	2201      	movs	r2, #1
 8004a1a:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8004a1c:	68f8      	ldr	r0, [r7, #12]
 8004a1e:	f000 f987 	bl	8004d30 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004a22:	f7ff fd41 	bl	80044a8 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8004a26:	211e      	movs	r1, #30
 8004a28:	68f8      	ldr	r0, [r7, #12]
 8004a2a:	f000 f8d3 	bl	8004bd4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8004a2e:	7afb      	ldrb	r3, [r7, #11]
 8004a30:	4619      	mov	r1, r3
 8004a32:	68f8      	ldr	r0, [r7, #12]
 8004a34:	f000 f8ce 	bl	8004bd4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8004a38:	2100      	movs	r1, #0
 8004a3a:	68f8      	ldr	r0, [r7, #12]
 8004a3c:	f000 f8ca 	bl	8004bd4 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8004a40:	2300      	movs	r3, #0
 8004a42:	82fb      	strh	r3, [r7, #22]
 8004a44:	e009      	b.n	8004a5a <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8004a46:	69b9      	ldr	r1, [r7, #24]
 8004a48:	68f8      	ldr	r0, [r7, #12]
 8004a4a:	f000 f919 	bl	8004c80 <SUBGHZSPI_Receive>
      pData++;
 8004a4e:	69bb      	ldr	r3, [r7, #24]
 8004a50:	3301      	adds	r3, #1
 8004a52:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8004a54:	8afb      	ldrh	r3, [r7, #22]
 8004a56:	3301      	adds	r3, #1
 8004a58:	82fb      	strh	r3, [r7, #22]
 8004a5a:	8afa      	ldrh	r2, [r7, #22]
 8004a5c:	893b      	ldrh	r3, [r7, #8]
 8004a5e:	429a      	cmp	r2, r3
 8004a60:	d3f1      	bcc.n	8004a46 <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004a62:	f7ff fd11 	bl	8004488 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004a66:	68f8      	ldr	r0, [r7, #12]
 8004a68:	f000 f986 	bl	8004d78 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d002      	beq.n	8004a7a <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 8004a74:	2301      	movs	r3, #1
 8004a76:	77fb      	strb	r3, [r7, #31]
 8004a78:	e001      	b.n	8004a7e <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	2201      	movs	r2, #1
 8004a82:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	2200      	movs	r2, #0
 8004a88:	715a      	strb	r2, [r3, #5]

    return status;
 8004a8a:	7ffb      	ldrb	r3, [r7, #31]
 8004a8c:	e000      	b.n	8004a90 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8004a8e:	2302      	movs	r3, #2
  }
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	3720      	adds	r7, #32
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}

08004a98 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b084      	sub	sp, #16
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8004aa4:	f107 020c 	add.w	r2, r7, #12
 8004aa8:	2302      	movs	r3, #2
 8004aaa:	2112      	movs	r1, #18
 8004aac:	6878      	ldr	r0, [r7, #4]
 8004aae:	f7ff fef4 	bl	800489a <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 8004ab2:	7b3b      	ldrb	r3, [r7, #12]
 8004ab4:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 8004ab6:	89fb      	ldrh	r3, [r7, #14]
 8004ab8:	021b      	lsls	r3, r3, #8
 8004aba:	b21a      	sxth	r2, r3
 8004abc:	7b7b      	ldrb	r3, [r7, #13]
 8004abe:	b21b      	sxth	r3, r3
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	b21b      	sxth	r3, r3
 8004ac4:	81fb      	strh	r3, [r7, #14]

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 8004ac6:	f107 020c 	add.w	r2, r7, #12
 8004aca:	2302      	movs	r3, #2
 8004acc:	2102      	movs	r1, #2
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f7ff fe84 	bl	80047dc <HAL_SUBGHZ_ExecSetCmd>

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8004ad4:	89fb      	ldrh	r3, [r7, #14]
 8004ad6:	f003 0301 	and.w	r3, r3, #1
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d002      	beq.n	8004ae4 <HAL_SUBGHZ_IRQHandler+0x4c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f005 fc44 	bl	800a36c <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 8004ae4:	89fb      	ldrh	r3, [r7, #14]
 8004ae6:	f003 0302 	and.w	r3, r3, #2
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d002      	beq.n	8004af4 <HAL_SUBGHZ_IRQHandler+0x5c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f005 fc4a 	bl	800a388 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8004af4:	89fb      	ldrh	r3, [r7, #14]
 8004af6:	f003 0304 	and.w	r3, r3, #4
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d002      	beq.n	8004b04 <HAL_SUBGHZ_IRQHandler+0x6c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f005 fc9a 	bl	800a438 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8004b04:	89fb      	ldrh	r3, [r7, #14]
 8004b06:	f003 0308 	and.w	r3, r3, #8
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d002      	beq.n	8004b14 <HAL_SUBGHZ_IRQHandler+0x7c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f005 fca0 	bl	800a454 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8004b14:	89fb      	ldrh	r3, [r7, #14]
 8004b16:	f003 0310 	and.w	r3, r3, #16
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d002      	beq.n	8004b24 <HAL_SUBGHZ_IRQHandler+0x8c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f005 fca6 	bl	800a470 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8004b24:	89fb      	ldrh	r3, [r7, #14]
 8004b26:	f003 0320 	and.w	r3, r3, #32
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d002      	beq.n	8004b34 <HAL_SUBGHZ_IRQHandler+0x9c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f005 fc74 	bl	800a41c <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8004b34:	89fb      	ldrh	r3, [r7, #14]
 8004b36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d002      	beq.n	8004b44 <HAL_SUBGHZ_IRQHandler+0xac>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f005 fc30 	bl	800a3a4 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8004b44:	89fb      	ldrh	r3, [r7, #14]
 8004b46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d00d      	beq.n	8004b6a <HAL_SUBGHZ_IRQHandler+0xd2>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8004b4e:	89fb      	ldrh	r3, [r7, #14]
 8004b50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d004      	beq.n	8004b62 <HAL_SUBGHZ_IRQHandler+0xca>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8004b58:	2101      	movs	r1, #1
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f005 fc30 	bl	800a3c0 <HAL_SUBGHZ_CADStatusCallback>
 8004b60:	e003      	b.n	8004b6a <HAL_SUBGHZ_IRQHandler+0xd2>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8004b62:	2100      	movs	r1, #0
 8004b64:	6878      	ldr	r0, [r7, #4]
 8004b66:	f005 fc2b 	bl	800a3c0 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8004b6a:	89fb      	ldrh	r3, [r7, #14]
 8004b6c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d002      	beq.n	8004b7a <HAL_SUBGHZ_IRQHandler+0xe2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8004b74:	6878      	ldr	r0, [r7, #4]
 8004b76:	f005 fc41 	bl	800a3fc <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LR_FHSS Hop interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 8004b7a:	89fb      	ldrh	r3, [r7, #14]
 8004b7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d002      	beq.n	8004b8a <HAL_SUBGHZ_IRQHandler+0xf2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->LrFhssHopCallback(hsubghz);
#else
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 8004b84:	6878      	ldr	r0, [r7, #4]
 8004b86:	f005 fc81 	bl	800a48c <HAL_SUBGHZ_LrFhssHopCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }
}
 8004b8a:	bf00      	nop
 8004b8c:	3710      	adds	r7, #16
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}
	...

08004b94 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b083      	sub	sp, #12
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8004b9c:	4b0c      	ldr	r3, [pc, #48]	; (8004bd0 <SUBGHZSPI_Init+0x3c>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a0b      	ldr	r2, [pc, #44]	; (8004bd0 <SUBGHZSPI_Init+0x3c>)
 8004ba2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ba6:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8004ba8:	4a09      	ldr	r2, [pc, #36]	; (8004bd0 <SUBGHZSPI_Init+0x3c>)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 8004bb0:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8004bb2:	4b07      	ldr	r3, [pc, #28]	; (8004bd0 <SUBGHZSPI_Init+0x3c>)
 8004bb4:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 8004bb8:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8004bba:	4b05      	ldr	r3, [pc, #20]	; (8004bd0 <SUBGHZSPI_Init+0x3c>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a04      	ldr	r2, [pc, #16]	; (8004bd0 <SUBGHZSPI_Init+0x3c>)
 8004bc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004bc4:	6013      	str	r3, [r2, #0]
}
 8004bc6:	bf00      	nop
 8004bc8:	370c      	adds	r7, #12
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bc80      	pop	{r7}
 8004bce:	4770      	bx	lr
 8004bd0:	58010000 	.word	0x58010000

08004bd4 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b087      	sub	sp, #28
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
 8004bdc:	460b      	mov	r3, r1
 8004bde:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8004be0:	2300      	movs	r3, #0
 8004be2:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004be4:	4b23      	ldr	r3, [pc, #140]	; (8004c74 <SUBGHZSPI_Transmit+0xa0>)
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	4613      	mov	r3, r2
 8004bea:	00db      	lsls	r3, r3, #3
 8004bec:	1a9b      	subs	r3, r3, r2
 8004bee:	009b      	lsls	r3, r3, #2
 8004bf0:	0cdb      	lsrs	r3, r3, #19
 8004bf2:	2264      	movs	r2, #100	; 0x64
 8004bf4:	fb02 f303 	mul.w	r3, r2, r3
 8004bf8:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d105      	bne.n	8004c0c <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8004c00:	2301      	movs	r3, #1
 8004c02:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2201      	movs	r2, #1
 8004c08:	609a      	str	r2, [r3, #8]
      break;
 8004c0a:	e008      	b.n	8004c1e <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	3b01      	subs	r3, #1
 8004c10:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8004c12:	4b19      	ldr	r3, [pc, #100]	; (8004c78 <SUBGHZSPI_Transmit+0xa4>)
 8004c14:	689b      	ldr	r3, [r3, #8]
 8004c16:	f003 0302 	and.w	r3, r3, #2
 8004c1a:	2b02      	cmp	r3, #2
 8004c1c:	d1ed      	bne.n	8004bfa <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8004c1e:	4b17      	ldr	r3, [pc, #92]	; (8004c7c <SUBGHZSPI_Transmit+0xa8>)
 8004c20:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	78fa      	ldrb	r2, [r7, #3]
 8004c26:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004c28:	4b12      	ldr	r3, [pc, #72]	; (8004c74 <SUBGHZSPI_Transmit+0xa0>)
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	4613      	mov	r3, r2
 8004c2e:	00db      	lsls	r3, r3, #3
 8004c30:	1a9b      	subs	r3, r3, r2
 8004c32:	009b      	lsls	r3, r3, #2
 8004c34:	0cdb      	lsrs	r3, r3, #19
 8004c36:	2264      	movs	r2, #100	; 0x64
 8004c38:	fb02 f303 	mul.w	r3, r2, r3
 8004c3c:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d105      	bne.n	8004c50 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8004c44:	2301      	movs	r3, #1
 8004c46:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	609a      	str	r2, [r3, #8]
      break;
 8004c4e:	e008      	b.n	8004c62 <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	3b01      	subs	r3, #1
 8004c54:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8004c56:	4b08      	ldr	r3, [pc, #32]	; (8004c78 <SUBGHZSPI_Transmit+0xa4>)
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	f003 0301 	and.w	r3, r3, #1
 8004c5e:	2b01      	cmp	r3, #1
 8004c60:	d1ed      	bne.n	8004c3e <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8004c62:	4b05      	ldr	r3, [pc, #20]	; (8004c78 <SUBGHZSPI_Transmit+0xa4>)
 8004c64:	68db      	ldr	r3, [r3, #12]

  return status;
 8004c66:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	371c      	adds	r7, #28
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bc80      	pop	{r7}
 8004c70:	4770      	bx	lr
 8004c72:	bf00      	nop
 8004c74:	20000000 	.word	0x20000000
 8004c78:	58010000 	.word	0x58010000
 8004c7c:	5801000c 	.word	0x5801000c

08004c80 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b087      	sub	sp, #28
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
 8004c88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004c8e:	4b25      	ldr	r3, [pc, #148]	; (8004d24 <SUBGHZSPI_Receive+0xa4>)
 8004c90:	681a      	ldr	r2, [r3, #0]
 8004c92:	4613      	mov	r3, r2
 8004c94:	00db      	lsls	r3, r3, #3
 8004c96:	1a9b      	subs	r3, r3, r2
 8004c98:	009b      	lsls	r3, r3, #2
 8004c9a:	0cdb      	lsrs	r3, r3, #19
 8004c9c:	2264      	movs	r2, #100	; 0x64
 8004c9e:	fb02 f303 	mul.w	r3, r2, r3
 8004ca2:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d105      	bne.n	8004cb6 <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
 8004cac:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2201      	movs	r2, #1
 8004cb2:	609a      	str	r2, [r3, #8]
      break;
 8004cb4:	e008      	b.n	8004cc8 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	3b01      	subs	r3, #1
 8004cba:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8004cbc:	4b1a      	ldr	r3, [pc, #104]	; (8004d28 <SUBGHZSPI_Receive+0xa8>)
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	f003 0302 	and.w	r3, r3, #2
 8004cc4:	2b02      	cmp	r3, #2
 8004cc6:	d1ed      	bne.n	8004ca4 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8004cc8:	4b18      	ldr	r3, [pc, #96]	; (8004d2c <SUBGHZSPI_Receive+0xac>)
 8004cca:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	22ff      	movs	r2, #255	; 0xff
 8004cd0:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004cd2:	4b14      	ldr	r3, [pc, #80]	; (8004d24 <SUBGHZSPI_Receive+0xa4>)
 8004cd4:	681a      	ldr	r2, [r3, #0]
 8004cd6:	4613      	mov	r3, r2
 8004cd8:	00db      	lsls	r3, r3, #3
 8004cda:	1a9b      	subs	r3, r3, r2
 8004cdc:	009b      	lsls	r3, r3, #2
 8004cde:	0cdb      	lsrs	r3, r3, #19
 8004ce0:	2264      	movs	r2, #100	; 0x64
 8004ce2:	fb02 f303 	mul.w	r3, r2, r3
 8004ce6:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d105      	bne.n	8004cfa <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2201      	movs	r2, #1
 8004cf6:	609a      	str	r2, [r3, #8]
      break;
 8004cf8:	e008      	b.n	8004d0c <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	3b01      	subs	r3, #1
 8004cfe:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8004d00:	4b09      	ldr	r3, [pc, #36]	; (8004d28 <SUBGHZSPI_Receive+0xa8>)
 8004d02:	689b      	ldr	r3, [r3, #8]
 8004d04:	f003 0301 	and.w	r3, r3, #1
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	d1ed      	bne.n	8004ce8 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8004d0c:	4b06      	ldr	r3, [pc, #24]	; (8004d28 <SUBGHZSPI_Receive+0xa8>)
 8004d0e:	68db      	ldr	r3, [r3, #12]
 8004d10:	b2da      	uxtb	r2, r3
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	701a      	strb	r2, [r3, #0]

  return status;
 8004d16:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	371c      	adds	r7, #28
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bc80      	pop	{r7}
 8004d20:	4770      	bx	lr
 8004d22:	bf00      	nop
 8004d24:	20000000 	.word	0x20000000
 8004d28:	58010000 	.word	0x58010000
 8004d2c:	5801000c 	.word	0x5801000c

08004d30 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b084      	sub	sp, #16
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	791b      	ldrb	r3, [r3, #4]
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	d111      	bne.n	8004d64 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8004d40:	4b0c      	ldr	r3, [pc, #48]	; (8004d74 <SUBGHZ_CheckDeviceReady+0x44>)
 8004d42:	681a      	ldr	r2, [r3, #0]
 8004d44:	4613      	mov	r3, r2
 8004d46:	005b      	lsls	r3, r3, #1
 8004d48:	4413      	add	r3, r2
 8004d4a:	00db      	lsls	r3, r3, #3
 8004d4c:	0c1b      	lsrs	r3, r3, #16
 8004d4e:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004d50:	f7ff fbaa 	bl	80044a8 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	3b01      	subs	r3, #1
 8004d58:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d1f9      	bne.n	8004d54 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004d60:	f7ff fb92 	bl	8004488 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8004d64:	6878      	ldr	r0, [r7, #4]
 8004d66:	f000 f807 	bl	8004d78 <SUBGHZ_WaitOnBusy>
 8004d6a:	4603      	mov	r3, r0
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	3710      	adds	r7, #16
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bd80      	pop	{r7, pc}
 8004d74:	20000000 	.word	0x20000000

08004d78 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b086      	sub	sp, #24
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8004d80:	2300      	movs	r3, #0
 8004d82:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8004d84:	4b12      	ldr	r3, [pc, #72]	; (8004dd0 <SUBGHZ_WaitOnBusy+0x58>)
 8004d86:	681a      	ldr	r2, [r3, #0]
 8004d88:	4613      	mov	r3, r2
 8004d8a:	005b      	lsls	r3, r3, #1
 8004d8c:	4413      	add	r3, r2
 8004d8e:	00db      	lsls	r3, r3, #3
 8004d90:	0d1b      	lsrs	r3, r3, #20
 8004d92:	2264      	movs	r2, #100	; 0x64
 8004d94:	fb02 f303 	mul.w	r3, r2, r3
 8004d98:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 8004d9a:	f7ff fbb3 	bl	8004504 <LL_PWR_IsActiveFlag_RFBUSYMS>
 8004d9e:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d105      	bne.n	8004db2 <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 8004da6:	2301      	movs	r3, #1
 8004da8:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2202      	movs	r2, #2
 8004dae:	609a      	str	r2, [r3, #8]
      break;
 8004db0:	e009      	b.n	8004dc6 <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	3b01      	subs	r3, #1
 8004db6:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8004db8:	f7ff fb92 	bl	80044e0 <LL_PWR_IsActiveFlag_RFBUSYS>
 8004dbc:	4602      	mov	r2, r0
 8004dbe:	693b      	ldr	r3, [r7, #16]
 8004dc0:	4013      	ands	r3, r2
 8004dc2:	2b01      	cmp	r3, #1
 8004dc4:	d0e9      	beq.n	8004d9a <SUBGHZ_WaitOnBusy+0x22>

  return status;
 8004dc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	3718      	adds	r7, #24
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}
 8004dd0:	20000000 	.word	0x20000000

08004dd4 <LL_RCC_GetUSARTClockSource>:
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b083      	sub	sp, #12
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8004ddc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004de0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	401a      	ands	r2, r3
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	041b      	lsls	r3, r3, #16
 8004dec:	4313      	orrs	r3, r2
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	370c      	adds	r7, #12
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bc80      	pop	{r7}
 8004df6:	4770      	bx	lr

08004df8 <LL_RCC_GetLPUARTClockSource>:
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b083      	sub	sp, #12
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8004e00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e04:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	4013      	ands	r3, r2
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	370c      	adds	r7, #12
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bc80      	pop	{r7}
 8004e14:	4770      	bx	lr

08004e16 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e16:	b580      	push	{r7, lr}
 8004e18:	b082      	sub	sp, #8
 8004e1a:	af00      	add	r7, sp, #0
 8004e1c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d101      	bne.n	8004e28 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e24:	2301      	movs	r3, #1
 8004e26:	e042      	b.n	8004eae <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d106      	bne.n	8004e40 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2200      	movs	r2, #0
 8004e36:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f7fc f9aa 	bl	8001194 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2224      	movs	r2, #36	; 0x24
 8004e44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	681a      	ldr	r2, [r3, #0]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f022 0201 	bic.w	r2, r2, #1
 8004e56:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004e58:	6878      	ldr	r0, [r7, #4]
 8004e5a:	f000 fc3b 	bl	80056d4 <UART_SetConfig>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	d101      	bne.n	8004e68 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004e64:	2301      	movs	r3, #1
 8004e66:	e022      	b.n	8004eae <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d002      	beq.n	8004e76 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004e70:	6878      	ldr	r0, [r7, #4]
 8004e72:	f000 fea3 	bl	8005bbc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	685a      	ldr	r2, [r3, #4]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e84:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	689a      	ldr	r2, [r3, #8]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e94:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f042 0201 	orr.w	r2, r2, #1
 8004ea4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f000 ff29 	bl	8005cfe <UART_CheckIdleState>
 8004eac:	4603      	mov	r3, r0
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	3708      	adds	r7, #8
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}
	...

08004eb8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b08a      	sub	sp, #40	; 0x28
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	60f8      	str	r0, [r7, #12]
 8004ec0:	60b9      	str	r1, [r7, #8]
 8004ec2:	4613      	mov	r3, r2
 8004ec4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ecc:	2b20      	cmp	r3, #32
 8004ece:	d137      	bne.n	8004f40 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d002      	beq.n	8004edc <HAL_UART_Receive_IT+0x24>
 8004ed6:	88fb      	ldrh	r3, [r7, #6]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d101      	bne.n	8004ee0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004edc:	2301      	movs	r3, #1
 8004ede:	e030      	b.n	8004f42 <HAL_UART_Receive_IT+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a18      	ldr	r2, [pc, #96]	; (8004f4c <HAL_UART_Receive_IT+0x94>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d01f      	beq.n	8004f30 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d018      	beq.n	8004f30 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	e853 3f00 	ldrex	r3, [r3]
 8004f0a:	613b      	str	r3, [r7, #16]
   return(result);
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004f12:	627b      	str	r3, [r7, #36]	; 0x24
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	461a      	mov	r2, r3
 8004f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f1c:	623b      	str	r3, [r7, #32]
 8004f1e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f20:	69f9      	ldr	r1, [r7, #28]
 8004f22:	6a3a      	ldr	r2, [r7, #32]
 8004f24:	e841 2300 	strex	r3, r2, [r1]
 8004f28:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f2a:	69bb      	ldr	r3, [r7, #24]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d1e6      	bne.n	8004efe <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004f30:	88fb      	ldrh	r3, [r7, #6]
 8004f32:	461a      	mov	r2, r3
 8004f34:	68b9      	ldr	r1, [r7, #8]
 8004f36:	68f8      	ldr	r0, [r7, #12]
 8004f38:	f000 fff8 	bl	8005f2c <UART_Start_Receive_IT>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	e000      	b.n	8004f42 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004f40:	2302      	movs	r3, #2
  }
}
 8004f42:	4618      	mov	r0, r3
 8004f44:	3728      	adds	r7, #40	; 0x28
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bd80      	pop	{r7, pc}
 8004f4a:	bf00      	nop
 8004f4c:	40008000 	.word	0x40008000

08004f50 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b08a      	sub	sp, #40	; 0x28
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	60f8      	str	r0, [r7, #12]
 8004f58:	60b9      	str	r1, [r7, #8]
 8004f5a:	4613      	mov	r3, r2
 8004f5c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f64:	2b20      	cmp	r3, #32
 8004f66:	d167      	bne.n	8005038 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d002      	beq.n	8004f74 <HAL_UART_Transmit_DMA+0x24>
 8004f6e:	88fb      	ldrh	r3, [r7, #6]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d101      	bne.n	8004f78 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8004f74:	2301      	movs	r3, #1
 8004f76:	e060      	b.n	800503a <HAL_UART_Transmit_DMA+0xea>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->pTxBuffPtr  = pData;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	68ba      	ldr	r2, [r7, #8]
 8004f7c:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	88fa      	ldrh	r2, [r7, #6]
 8004f82:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	88fa      	ldrh	r2, [r7, #6]
 8004f8a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	2200      	movs	r2, #0
 8004f92:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	2221      	movs	r2, #33	; 0x21
 8004f9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d028      	beq.n	8004ff8 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004faa:	4a26      	ldr	r2, [pc, #152]	; (8005044 <HAL_UART_Transmit_DMA+0xf4>)
 8004fac:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004fb2:	4a25      	ldr	r2, [pc, #148]	; (8005048 <HAL_UART_Transmit_DMA+0xf8>)
 8004fb4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004fba:	4a24      	ldr	r2, [pc, #144]	; (800504c <HAL_UART_Transmit_DMA+0xfc>)
 8004fbc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fce:	4619      	mov	r1, r3
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	3328      	adds	r3, #40	; 0x28
 8004fd6:	461a      	mov	r2, r3
 8004fd8:	88fb      	ldrh	r3, [r7, #6]
 8004fda:	f7fc fdad 	bl	8001b38 <HAL_DMA_Start_IT>
 8004fde:	4603      	mov	r3, r0
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d009      	beq.n	8004ff8 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2210      	movs	r2, #16
 8004fe8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	2220      	movs	r2, #32
 8004ff0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	e020      	b.n	800503a <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	2240      	movs	r2, #64	; 0x40
 8004ffe:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	3308      	adds	r3, #8
 8005006:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	e853 3f00 	ldrex	r3, [r3]
 800500e:	613b      	str	r3, [r7, #16]
   return(result);
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005016:	627b      	str	r3, [r7, #36]	; 0x24
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	3308      	adds	r3, #8
 800501e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005020:	623a      	str	r2, [r7, #32]
 8005022:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005024:	69f9      	ldr	r1, [r7, #28]
 8005026:	6a3a      	ldr	r2, [r7, #32]
 8005028:	e841 2300 	strex	r3, r2, [r1]
 800502c:	61bb      	str	r3, [r7, #24]
   return(result);
 800502e:	69bb      	ldr	r3, [r7, #24]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d1e5      	bne.n	8005000 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8005034:	2300      	movs	r3, #0
 8005036:	e000      	b.n	800503a <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8005038:	2302      	movs	r3, #2
  }
}
 800503a:	4618      	mov	r0, r3
 800503c:	3728      	adds	r7, #40	; 0x28
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}
 8005042:	bf00      	nop
 8005044:	080062b7 	.word	0x080062b7
 8005048:	08006351 	.word	0x08006351
 800504c:	0800636d 	.word	0x0800636d

08005050 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b0ba      	sub	sp, #232	; 0xe8
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	69db      	ldr	r3, [r3, #28]
 800505e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	689b      	ldr	r3, [r3, #8]
 8005072:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005076:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800507a:	f640 030f 	movw	r3, #2063	; 0x80f
 800507e:	4013      	ands	r3, r2
 8005080:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005084:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005088:	2b00      	cmp	r3, #0
 800508a:	d11b      	bne.n	80050c4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800508c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005090:	f003 0320 	and.w	r3, r3, #32
 8005094:	2b00      	cmp	r3, #0
 8005096:	d015      	beq.n	80050c4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005098:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800509c:	f003 0320 	and.w	r3, r3, #32
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d105      	bne.n	80050b0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80050a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80050a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d009      	beq.n	80050c4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	f000 82e3 	beq.w	8005680 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	4798      	blx	r3
      }
      return;
 80050c2:	e2dd      	b.n	8005680 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80050c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	f000 8123 	beq.w	8005314 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80050ce:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80050d2:	4b8d      	ldr	r3, [pc, #564]	; (8005308 <HAL_UART_IRQHandler+0x2b8>)
 80050d4:	4013      	ands	r3, r2
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d106      	bne.n	80050e8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80050da:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80050de:	4b8b      	ldr	r3, [pc, #556]	; (800530c <HAL_UART_IRQHandler+0x2bc>)
 80050e0:	4013      	ands	r3, r2
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	f000 8116 	beq.w	8005314 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80050e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050ec:	f003 0301 	and.w	r3, r3, #1
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d011      	beq.n	8005118 <HAL_UART_IRQHandler+0xc8>
 80050f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d00b      	beq.n	8005118 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	2201      	movs	r2, #1
 8005106:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800510e:	f043 0201 	orr.w	r2, r3, #1
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005118:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800511c:	f003 0302 	and.w	r3, r3, #2
 8005120:	2b00      	cmp	r3, #0
 8005122:	d011      	beq.n	8005148 <HAL_UART_IRQHandler+0xf8>
 8005124:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005128:	f003 0301 	and.w	r3, r3, #1
 800512c:	2b00      	cmp	r3, #0
 800512e:	d00b      	beq.n	8005148 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	2202      	movs	r2, #2
 8005136:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800513e:	f043 0204 	orr.w	r2, r3, #4
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005148:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800514c:	f003 0304 	and.w	r3, r3, #4
 8005150:	2b00      	cmp	r3, #0
 8005152:	d011      	beq.n	8005178 <HAL_UART_IRQHandler+0x128>
 8005154:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005158:	f003 0301 	and.w	r3, r3, #1
 800515c:	2b00      	cmp	r3, #0
 800515e:	d00b      	beq.n	8005178 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	2204      	movs	r2, #4
 8005166:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800516e:	f043 0202 	orr.w	r2, r3, #2
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005178:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800517c:	f003 0308 	and.w	r3, r3, #8
 8005180:	2b00      	cmp	r3, #0
 8005182:	d017      	beq.n	80051b4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005184:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005188:	f003 0320 	and.w	r3, r3, #32
 800518c:	2b00      	cmp	r3, #0
 800518e:	d105      	bne.n	800519c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005190:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005194:	4b5c      	ldr	r3, [pc, #368]	; (8005308 <HAL_UART_IRQHandler+0x2b8>)
 8005196:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005198:	2b00      	cmp	r3, #0
 800519a:	d00b      	beq.n	80051b4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	2208      	movs	r2, #8
 80051a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051aa:	f043 0208 	orr.w	r2, r3, #8
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80051b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d012      	beq.n	80051e6 <HAL_UART_IRQHandler+0x196>
 80051c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051c4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d00c      	beq.n	80051e6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80051d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051dc:	f043 0220 	orr.w	r2, r3, #32
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	f000 8249 	beq.w	8005684 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80051f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051f6:	f003 0320 	and.w	r3, r3, #32
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d013      	beq.n	8005226 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80051fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005202:	f003 0320 	and.w	r3, r3, #32
 8005206:	2b00      	cmp	r3, #0
 8005208:	d105      	bne.n	8005216 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800520a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800520e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005212:	2b00      	cmp	r3, #0
 8005214:	d007      	beq.n	8005226 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800521a:	2b00      	cmp	r3, #0
 800521c:	d003      	beq.n	8005226 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800522c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	689b      	ldr	r3, [r3, #8]
 8005236:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800523a:	2b40      	cmp	r3, #64	; 0x40
 800523c:	d005      	beq.n	800524a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800523e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005242:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005246:	2b00      	cmp	r3, #0
 8005248:	d054      	beq.n	80052f4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f000 ffce 	bl	80061ec <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800525a:	2b40      	cmp	r3, #64	; 0x40
 800525c:	d146      	bne.n	80052ec <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	3308      	adds	r3, #8
 8005264:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005268:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800526c:	e853 3f00 	ldrex	r3, [r3]
 8005270:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005274:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005278:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800527c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	3308      	adds	r3, #8
 8005286:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800528a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800528e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005292:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005296:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800529a:	e841 2300 	strex	r3, r2, [r1]
 800529e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80052a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d1d9      	bne.n	800525e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d017      	beq.n	80052e4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80052ba:	4a15      	ldr	r2, [pc, #84]	; (8005310 <HAL_UART_IRQHandler+0x2c0>)
 80052bc:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80052c4:	4618      	mov	r0, r3
 80052c6:	f7fc fd13 	bl	8001cf0 <HAL_DMA_Abort_IT>
 80052ca:	4603      	mov	r3, r0
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d019      	beq.n	8005304 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80052d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052d8:	687a      	ldr	r2, [r7, #4]
 80052da:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80052de:	4610      	mov	r0, r2
 80052e0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052e2:	e00f      	b.n	8005304 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80052e4:	6878      	ldr	r0, [r7, #4]
 80052e6:	f000 f9e0 	bl	80056aa <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052ea:	e00b      	b.n	8005304 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80052ec:	6878      	ldr	r0, [r7, #4]
 80052ee:	f000 f9dc 	bl	80056aa <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052f2:	e007      	b.n	8005304 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80052f4:	6878      	ldr	r0, [r7, #4]
 80052f6:	f000 f9d8 	bl	80056aa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2200      	movs	r2, #0
 80052fe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8005302:	e1bf      	b.n	8005684 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005304:	bf00      	nop
    return;
 8005306:	e1bd      	b.n	8005684 <HAL_UART_IRQHandler+0x634>
 8005308:	10000001 	.word	0x10000001
 800530c:	04000120 	.word	0x04000120
 8005310:	080063ed 	.word	0x080063ed

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005318:	2b01      	cmp	r3, #1
 800531a:	f040 8153 	bne.w	80055c4 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800531e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005322:	f003 0310 	and.w	r3, r3, #16
 8005326:	2b00      	cmp	r3, #0
 8005328:	f000 814c 	beq.w	80055c4 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800532c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005330:	f003 0310 	and.w	r3, r3, #16
 8005334:	2b00      	cmp	r3, #0
 8005336:	f000 8145 	beq.w	80055c4 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	2210      	movs	r2, #16
 8005340:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	689b      	ldr	r3, [r3, #8]
 8005348:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800534c:	2b40      	cmp	r3, #64	; 0x40
 800534e:	f040 80bb 	bne.w	80054c8 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005360:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005364:	2b00      	cmp	r3, #0
 8005366:	f000 818f 	beq.w	8005688 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005370:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005374:	429a      	cmp	r2, r3
 8005376:	f080 8187 	bcs.w	8005688 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005380:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f003 0320 	and.w	r3, r3, #32
 8005392:	2b00      	cmp	r3, #0
 8005394:	f040 8087 	bne.w	80054a6 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80053a4:	e853 3f00 	ldrex	r3, [r3]
 80053a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80053ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80053b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80053b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	461a      	mov	r2, r3
 80053be:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80053c2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80053c6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ca:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80053ce:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80053d2:	e841 2300 	strex	r3, r2, [r1]
 80053d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80053da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d1da      	bne.n	8005398 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	3308      	adds	r3, #8
 80053e8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80053ec:	e853 3f00 	ldrex	r3, [r3]
 80053f0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80053f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80053f4:	f023 0301 	bic.w	r3, r3, #1
 80053f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	3308      	adds	r3, #8
 8005402:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005406:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800540a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800540c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800540e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005412:	e841 2300 	strex	r3, r2, [r1]
 8005416:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005418:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800541a:	2b00      	cmp	r3, #0
 800541c:	d1e1      	bne.n	80053e2 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	3308      	adds	r3, #8
 8005424:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005426:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005428:	e853 3f00 	ldrex	r3, [r3]
 800542c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800542e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005430:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005434:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	3308      	adds	r3, #8
 800543e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005442:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005444:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005446:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005448:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800544a:	e841 2300 	strex	r3, r2, [r1]
 800544e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005450:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005452:	2b00      	cmp	r3, #0
 8005454:	d1e3      	bne.n	800541e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2220      	movs	r2, #32
 800545a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2200      	movs	r2, #0
 8005462:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800546a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800546c:	e853 3f00 	ldrex	r3, [r3]
 8005470:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005472:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005474:	f023 0310 	bic.w	r3, r3, #16
 8005478:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	461a      	mov	r2, r3
 8005482:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005486:	65bb      	str	r3, [r7, #88]	; 0x58
 8005488:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800548a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800548c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800548e:	e841 2300 	strex	r3, r2, [r1]
 8005492:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005494:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005496:	2b00      	cmp	r3, #0
 8005498:	d1e4      	bne.n	8005464 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054a0:	4618      	mov	r0, r3
 80054a2:	f7fc fbc7 	bl	8001c34 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2202      	movs	r2, #2
 80054aa:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80054b8:	b29b      	uxth	r3, r3
 80054ba:	1ad3      	subs	r3, r2, r3
 80054bc:	b29b      	uxth	r3, r3
 80054be:	4619      	mov	r1, r3
 80054c0:	6878      	ldr	r0, [r7, #4]
 80054c2:	f000 f8fb 	bl	80056bc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80054c6:	e0df      	b.n	8005688 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80054d4:	b29b      	uxth	r3, r3
 80054d6:	1ad3      	subs	r3, r2, r3
 80054d8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80054e2:	b29b      	uxth	r3, r3
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	f000 80d1 	beq.w	800568c <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80054ea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	f000 80cc 	beq.w	800568c <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054fc:	e853 3f00 	ldrex	r3, [r3]
 8005500:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005502:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005504:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005508:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	461a      	mov	r2, r3
 8005512:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005516:	647b      	str	r3, [r7, #68]	; 0x44
 8005518:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800551a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800551c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800551e:	e841 2300 	strex	r3, r2, [r1]
 8005522:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005524:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005526:	2b00      	cmp	r3, #0
 8005528:	d1e4      	bne.n	80054f4 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	3308      	adds	r3, #8
 8005530:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005534:	e853 3f00 	ldrex	r3, [r3]
 8005538:	623b      	str	r3, [r7, #32]
   return(result);
 800553a:	6a3b      	ldr	r3, [r7, #32]
 800553c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005540:	f023 0301 	bic.w	r3, r3, #1
 8005544:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	3308      	adds	r3, #8
 800554e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005552:	633a      	str	r2, [r7, #48]	; 0x30
 8005554:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005556:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005558:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800555a:	e841 2300 	strex	r3, r2, [r1]
 800555e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005562:	2b00      	cmp	r3, #0
 8005564:	d1e1      	bne.n	800552a <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2220      	movs	r2, #32
 800556a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2200      	movs	r2, #0
 8005572:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2200      	movs	r2, #0
 8005578:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005580:	693b      	ldr	r3, [r7, #16]
 8005582:	e853 3f00 	ldrex	r3, [r3]
 8005586:	60fb      	str	r3, [r7, #12]
   return(result);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	f023 0310 	bic.w	r3, r3, #16
 800558e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	461a      	mov	r2, r3
 8005598:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800559c:	61fb      	str	r3, [r7, #28]
 800559e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055a0:	69b9      	ldr	r1, [r7, #24]
 80055a2:	69fa      	ldr	r2, [r7, #28]
 80055a4:	e841 2300 	strex	r3, r2, [r1]
 80055a8:	617b      	str	r3, [r7, #20]
   return(result);
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d1e4      	bne.n	800557a <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2202      	movs	r2, #2
 80055b4:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80055b6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80055ba:	4619      	mov	r1, r3
 80055bc:	6878      	ldr	r0, [r7, #4]
 80055be:	f000 f87d 	bl	80056bc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80055c2:	e063      	b.n	800568c <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80055c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d00e      	beq.n	80055ee <HAL_UART_IRQHandler+0x59e>
 80055d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80055d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d008      	beq.n	80055ee <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80055e4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f001 fc5e 	bl	8006ea8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80055ec:	e051      	b.n	8005692 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80055ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d014      	beq.n	8005624 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80055fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005602:	2b00      	cmp	r3, #0
 8005604:	d105      	bne.n	8005612 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005606:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800560a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800560e:	2b00      	cmp	r3, #0
 8005610:	d008      	beq.n	8005624 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005616:	2b00      	cmp	r3, #0
 8005618:	d03a      	beq.n	8005690 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	4798      	blx	r3
    }
    return;
 8005622:	e035      	b.n	8005690 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005624:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005628:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800562c:	2b00      	cmp	r3, #0
 800562e:	d009      	beq.n	8005644 <HAL_UART_IRQHandler+0x5f4>
 8005630:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005634:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005638:	2b00      	cmp	r3, #0
 800563a:	d003      	beq.n	8005644 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 800563c:	6878      	ldr	r0, [r7, #4]
 800563e:	f000 feeb 	bl	8006418 <UART_EndTransmit_IT>
    return;
 8005642:	e026      	b.n	8005692 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005644:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005648:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800564c:	2b00      	cmp	r3, #0
 800564e:	d009      	beq.n	8005664 <HAL_UART_IRQHandler+0x614>
 8005650:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005654:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005658:	2b00      	cmp	r3, #0
 800565a:	d003      	beq.n	8005664 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800565c:	6878      	ldr	r0, [r7, #4]
 800565e:	f001 fc35 	bl	8006ecc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005662:	e016      	b.n	8005692 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005664:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005668:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800566c:	2b00      	cmp	r3, #0
 800566e:	d010      	beq.n	8005692 <HAL_UART_IRQHandler+0x642>
 8005670:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005674:	2b00      	cmp	r3, #0
 8005676:	da0c      	bge.n	8005692 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005678:	6878      	ldr	r0, [r7, #4]
 800567a:	f001 fc1e 	bl	8006eba <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800567e:	e008      	b.n	8005692 <HAL_UART_IRQHandler+0x642>
      return;
 8005680:	bf00      	nop
 8005682:	e006      	b.n	8005692 <HAL_UART_IRQHandler+0x642>
    return;
 8005684:	bf00      	nop
 8005686:	e004      	b.n	8005692 <HAL_UART_IRQHandler+0x642>
      return;
 8005688:	bf00      	nop
 800568a:	e002      	b.n	8005692 <HAL_UART_IRQHandler+0x642>
      return;
 800568c:	bf00      	nop
 800568e:	e000      	b.n	8005692 <HAL_UART_IRQHandler+0x642>
    return;
 8005690:	bf00      	nop
  }
}
 8005692:	37e8      	adds	r7, #232	; 0xe8
 8005694:	46bd      	mov	sp, r7
 8005696:	bd80      	pop	{r7, pc}

08005698 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005698:	b480      	push	{r7}
 800569a:	b083      	sub	sp, #12
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80056a0:	bf00      	nop
 80056a2:	370c      	adds	r7, #12
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bc80      	pop	{r7}
 80056a8:	4770      	bx	lr

080056aa <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80056aa:	b480      	push	{r7}
 80056ac:	b083      	sub	sp, #12
 80056ae:	af00      	add	r7, sp, #0
 80056b0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80056b2:	bf00      	nop
 80056b4:	370c      	adds	r7, #12
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bc80      	pop	{r7}
 80056ba:	4770      	bx	lr

080056bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80056bc:	b480      	push	{r7}
 80056be:	b083      	sub	sp, #12
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
 80056c4:	460b      	mov	r3, r1
 80056c6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80056c8:	bf00      	nop
 80056ca:	370c      	adds	r7, #12
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bc80      	pop	{r7}
 80056d0:	4770      	bx	lr
	...

080056d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80056d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80056d8:	b08c      	sub	sp, #48	; 0x30
 80056da:	af00      	add	r7, sp, #0
 80056dc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80056de:	2300      	movs	r3, #0
 80056e0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	689a      	ldr	r2, [r3, #8]
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	691b      	ldr	r3, [r3, #16]
 80056ec:	431a      	orrs	r2, r3
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	695b      	ldr	r3, [r3, #20]
 80056f2:	431a      	orrs	r2, r3
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	69db      	ldr	r3, [r3, #28]
 80056f8:	4313      	orrs	r3, r2
 80056fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	681a      	ldr	r2, [r3, #0]
 8005702:	4b94      	ldr	r3, [pc, #592]	; (8005954 <UART_SetConfig+0x280>)
 8005704:	4013      	ands	r3, r2
 8005706:	697a      	ldr	r2, [r7, #20]
 8005708:	6812      	ldr	r2, [r2, #0]
 800570a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800570c:	430b      	orrs	r3, r1
 800570e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	68da      	ldr	r2, [r3, #12]
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	430a      	orrs	r2, r1
 8005724:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	699b      	ldr	r3, [r3, #24]
 800572a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4a89      	ldr	r2, [pc, #548]	; (8005958 <UART_SetConfig+0x284>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d004      	beq.n	8005740 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	6a1b      	ldr	r3, [r3, #32]
 800573a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800573c:	4313      	orrs	r3, r2
 800573e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800574a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800574e:	697a      	ldr	r2, [r7, #20]
 8005750:	6812      	ldr	r2, [r2, #0]
 8005752:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005754:	430b      	orrs	r3, r1
 8005756:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800575e:	f023 010f 	bic.w	r1, r3, #15
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	430a      	orrs	r2, r1
 800576c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a7a      	ldr	r2, [pc, #488]	; (800595c <UART_SetConfig+0x288>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d127      	bne.n	80057c8 <UART_SetConfig+0xf4>
 8005778:	2003      	movs	r0, #3
 800577a:	f7ff fb2b 	bl	8004dd4 <LL_RCC_GetUSARTClockSource>
 800577e:	4603      	mov	r3, r0
 8005780:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8005784:	2b03      	cmp	r3, #3
 8005786:	d81b      	bhi.n	80057c0 <UART_SetConfig+0xec>
 8005788:	a201      	add	r2, pc, #4	; (adr r2, 8005790 <UART_SetConfig+0xbc>)
 800578a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800578e:	bf00      	nop
 8005790:	080057a1 	.word	0x080057a1
 8005794:	080057b1 	.word	0x080057b1
 8005798:	080057a9 	.word	0x080057a9
 800579c:	080057b9 	.word	0x080057b9
 80057a0:	2301      	movs	r3, #1
 80057a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057a6:	e080      	b.n	80058aa <UART_SetConfig+0x1d6>
 80057a8:	2302      	movs	r3, #2
 80057aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057ae:	e07c      	b.n	80058aa <UART_SetConfig+0x1d6>
 80057b0:	2304      	movs	r3, #4
 80057b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057b6:	e078      	b.n	80058aa <UART_SetConfig+0x1d6>
 80057b8:	2308      	movs	r3, #8
 80057ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057be:	e074      	b.n	80058aa <UART_SetConfig+0x1d6>
 80057c0:	2310      	movs	r3, #16
 80057c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057c6:	e070      	b.n	80058aa <UART_SetConfig+0x1d6>
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a64      	ldr	r2, [pc, #400]	; (8005960 <UART_SetConfig+0x28c>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d138      	bne.n	8005844 <UART_SetConfig+0x170>
 80057d2:	200c      	movs	r0, #12
 80057d4:	f7ff fafe 	bl	8004dd4 <LL_RCC_GetUSARTClockSource>
 80057d8:	4603      	mov	r3, r0
 80057da:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 80057de:	2b0c      	cmp	r3, #12
 80057e0:	d82c      	bhi.n	800583c <UART_SetConfig+0x168>
 80057e2:	a201      	add	r2, pc, #4	; (adr r2, 80057e8 <UART_SetConfig+0x114>)
 80057e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057e8:	0800581d 	.word	0x0800581d
 80057ec:	0800583d 	.word	0x0800583d
 80057f0:	0800583d 	.word	0x0800583d
 80057f4:	0800583d 	.word	0x0800583d
 80057f8:	0800582d 	.word	0x0800582d
 80057fc:	0800583d 	.word	0x0800583d
 8005800:	0800583d 	.word	0x0800583d
 8005804:	0800583d 	.word	0x0800583d
 8005808:	08005825 	.word	0x08005825
 800580c:	0800583d 	.word	0x0800583d
 8005810:	0800583d 	.word	0x0800583d
 8005814:	0800583d 	.word	0x0800583d
 8005818:	08005835 	.word	0x08005835
 800581c:	2300      	movs	r3, #0
 800581e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005822:	e042      	b.n	80058aa <UART_SetConfig+0x1d6>
 8005824:	2302      	movs	r3, #2
 8005826:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800582a:	e03e      	b.n	80058aa <UART_SetConfig+0x1d6>
 800582c:	2304      	movs	r3, #4
 800582e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005832:	e03a      	b.n	80058aa <UART_SetConfig+0x1d6>
 8005834:	2308      	movs	r3, #8
 8005836:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800583a:	e036      	b.n	80058aa <UART_SetConfig+0x1d6>
 800583c:	2310      	movs	r3, #16
 800583e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005842:	e032      	b.n	80058aa <UART_SetConfig+0x1d6>
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a43      	ldr	r2, [pc, #268]	; (8005958 <UART_SetConfig+0x284>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d12a      	bne.n	80058a4 <UART_SetConfig+0x1d0>
 800584e:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8005852:	f7ff fad1 	bl	8004df8 <LL_RCC_GetLPUARTClockSource>
 8005856:	4603      	mov	r3, r0
 8005858:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800585c:	d01a      	beq.n	8005894 <UART_SetConfig+0x1c0>
 800585e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005862:	d81b      	bhi.n	800589c <UART_SetConfig+0x1c8>
 8005864:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005868:	d00c      	beq.n	8005884 <UART_SetConfig+0x1b0>
 800586a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800586e:	d815      	bhi.n	800589c <UART_SetConfig+0x1c8>
 8005870:	2b00      	cmp	r3, #0
 8005872:	d003      	beq.n	800587c <UART_SetConfig+0x1a8>
 8005874:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005878:	d008      	beq.n	800588c <UART_SetConfig+0x1b8>
 800587a:	e00f      	b.n	800589c <UART_SetConfig+0x1c8>
 800587c:	2300      	movs	r3, #0
 800587e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005882:	e012      	b.n	80058aa <UART_SetConfig+0x1d6>
 8005884:	2302      	movs	r3, #2
 8005886:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800588a:	e00e      	b.n	80058aa <UART_SetConfig+0x1d6>
 800588c:	2304      	movs	r3, #4
 800588e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005892:	e00a      	b.n	80058aa <UART_SetConfig+0x1d6>
 8005894:	2308      	movs	r3, #8
 8005896:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800589a:	e006      	b.n	80058aa <UART_SetConfig+0x1d6>
 800589c:	2310      	movs	r3, #16
 800589e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058a2:	e002      	b.n	80058aa <UART_SetConfig+0x1d6>
 80058a4:	2310      	movs	r3, #16
 80058a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80058aa:	697b      	ldr	r3, [r7, #20]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4a2a      	ldr	r2, [pc, #168]	; (8005958 <UART_SetConfig+0x284>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	f040 80a4 	bne.w	80059fe <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80058b6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80058ba:	2b08      	cmp	r3, #8
 80058bc:	d823      	bhi.n	8005906 <UART_SetConfig+0x232>
 80058be:	a201      	add	r2, pc, #4	; (adr r2, 80058c4 <UART_SetConfig+0x1f0>)
 80058c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058c4:	080058e9 	.word	0x080058e9
 80058c8:	08005907 	.word	0x08005907
 80058cc:	080058f1 	.word	0x080058f1
 80058d0:	08005907 	.word	0x08005907
 80058d4:	080058f7 	.word	0x080058f7
 80058d8:	08005907 	.word	0x08005907
 80058dc:	08005907 	.word	0x08005907
 80058e0:	08005907 	.word	0x08005907
 80058e4:	080058ff 	.word	0x080058ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058e8:	f7fd ff4a 	bl	8003780 <HAL_RCC_GetPCLK1Freq>
 80058ec:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80058ee:	e010      	b.n	8005912 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80058f0:	4b1c      	ldr	r3, [pc, #112]	; (8005964 <UART_SetConfig+0x290>)
 80058f2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80058f4:	e00d      	b.n	8005912 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80058f6:	f7fd fe8f 	bl	8003618 <HAL_RCC_GetSysClockFreq>
 80058fa:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80058fc:	e009      	b.n	8005912 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005902:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005904:	e005      	b.n	8005912 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8005906:	2300      	movs	r3, #0
 8005908:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800590a:	2301      	movs	r3, #1
 800590c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005910:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005914:	2b00      	cmp	r3, #0
 8005916:	f000 8137 	beq.w	8005b88 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800591e:	4a12      	ldr	r2, [pc, #72]	; (8005968 <UART_SetConfig+0x294>)
 8005920:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005924:	461a      	mov	r2, r3
 8005926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005928:	fbb3 f3f2 	udiv	r3, r3, r2
 800592c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	685a      	ldr	r2, [r3, #4]
 8005932:	4613      	mov	r3, r2
 8005934:	005b      	lsls	r3, r3, #1
 8005936:	4413      	add	r3, r2
 8005938:	69ba      	ldr	r2, [r7, #24]
 800593a:	429a      	cmp	r2, r3
 800593c:	d305      	bcc.n	800594a <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005944:	69ba      	ldr	r2, [r7, #24]
 8005946:	429a      	cmp	r2, r3
 8005948:	d910      	bls.n	800596c <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 800594a:	2301      	movs	r3, #1
 800594c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005950:	e11a      	b.n	8005b88 <UART_SetConfig+0x4b4>
 8005952:	bf00      	nop
 8005954:	cfff69f3 	.word	0xcfff69f3
 8005958:	40008000 	.word	0x40008000
 800595c:	40013800 	.word	0x40013800
 8005960:	40004400 	.word	0x40004400
 8005964:	00f42400 	.word	0x00f42400
 8005968:	0800c738 	.word	0x0800c738
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800596c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800596e:	2200      	movs	r2, #0
 8005970:	60bb      	str	r3, [r7, #8]
 8005972:	60fa      	str	r2, [r7, #12]
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005978:	4a8e      	ldr	r2, [pc, #568]	; (8005bb4 <UART_SetConfig+0x4e0>)
 800597a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800597e:	b29b      	uxth	r3, r3
 8005980:	2200      	movs	r2, #0
 8005982:	603b      	str	r3, [r7, #0]
 8005984:	607a      	str	r2, [r7, #4]
 8005986:	e9d7 2300 	ldrd	r2, r3, [r7]
 800598a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800598e:	f7fa fbfb 	bl	8000188 <__aeabi_uldivmod>
 8005992:	4602      	mov	r2, r0
 8005994:	460b      	mov	r3, r1
 8005996:	4610      	mov	r0, r2
 8005998:	4619      	mov	r1, r3
 800599a:	f04f 0200 	mov.w	r2, #0
 800599e:	f04f 0300 	mov.w	r3, #0
 80059a2:	020b      	lsls	r3, r1, #8
 80059a4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80059a8:	0202      	lsls	r2, r0, #8
 80059aa:	6979      	ldr	r1, [r7, #20]
 80059ac:	6849      	ldr	r1, [r1, #4]
 80059ae:	0849      	lsrs	r1, r1, #1
 80059b0:	2000      	movs	r0, #0
 80059b2:	460c      	mov	r4, r1
 80059b4:	4605      	mov	r5, r0
 80059b6:	eb12 0804 	adds.w	r8, r2, r4
 80059ba:	eb43 0905 	adc.w	r9, r3, r5
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	685b      	ldr	r3, [r3, #4]
 80059c2:	2200      	movs	r2, #0
 80059c4:	469a      	mov	sl, r3
 80059c6:	4693      	mov	fp, r2
 80059c8:	4652      	mov	r2, sl
 80059ca:	465b      	mov	r3, fp
 80059cc:	4640      	mov	r0, r8
 80059ce:	4649      	mov	r1, r9
 80059d0:	f7fa fbda 	bl	8000188 <__aeabi_uldivmod>
 80059d4:	4602      	mov	r2, r0
 80059d6:	460b      	mov	r3, r1
 80059d8:	4613      	mov	r3, r2
 80059da:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80059dc:	6a3b      	ldr	r3, [r7, #32]
 80059de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80059e2:	d308      	bcc.n	80059f6 <UART_SetConfig+0x322>
 80059e4:	6a3b      	ldr	r3, [r7, #32]
 80059e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80059ea:	d204      	bcs.n	80059f6 <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	6a3a      	ldr	r2, [r7, #32]
 80059f2:	60da      	str	r2, [r3, #12]
 80059f4:	e0c8      	b.n	8005b88 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 80059f6:	2301      	movs	r3, #1
 80059f8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80059fc:	e0c4      	b.n	8005b88 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	69db      	ldr	r3, [r3, #28]
 8005a02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a06:	d167      	bne.n	8005ad8 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8005a08:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005a0c:	2b08      	cmp	r3, #8
 8005a0e:	d828      	bhi.n	8005a62 <UART_SetConfig+0x38e>
 8005a10:	a201      	add	r2, pc, #4	; (adr r2, 8005a18 <UART_SetConfig+0x344>)
 8005a12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a16:	bf00      	nop
 8005a18:	08005a3d 	.word	0x08005a3d
 8005a1c:	08005a45 	.word	0x08005a45
 8005a20:	08005a4d 	.word	0x08005a4d
 8005a24:	08005a63 	.word	0x08005a63
 8005a28:	08005a53 	.word	0x08005a53
 8005a2c:	08005a63 	.word	0x08005a63
 8005a30:	08005a63 	.word	0x08005a63
 8005a34:	08005a63 	.word	0x08005a63
 8005a38:	08005a5b 	.word	0x08005a5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a3c:	f7fd fea0 	bl	8003780 <HAL_RCC_GetPCLK1Freq>
 8005a40:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005a42:	e014      	b.n	8005a6e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a44:	f7fd feae 	bl	80037a4 <HAL_RCC_GetPCLK2Freq>
 8005a48:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005a4a:	e010      	b.n	8005a6e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a4c:	4b5a      	ldr	r3, [pc, #360]	; (8005bb8 <UART_SetConfig+0x4e4>)
 8005a4e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005a50:	e00d      	b.n	8005a6e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a52:	f7fd fde1 	bl	8003618 <HAL_RCC_GetSysClockFreq>
 8005a56:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005a58:	e009      	b.n	8005a6e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a5e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005a60:	e005      	b.n	8005a6e <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8005a62:	2300      	movs	r3, #0
 8005a64:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005a66:	2301      	movs	r3, #1
 8005a68:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005a6c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	f000 8089 	beq.w	8005b88 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a7a:	4a4e      	ldr	r2, [pc, #312]	; (8005bb4 <UART_SetConfig+0x4e0>)
 8005a7c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a80:	461a      	mov	r2, r3
 8005a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a84:	fbb3 f3f2 	udiv	r3, r3, r2
 8005a88:	005a      	lsls	r2, r3, #1
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	085b      	lsrs	r3, r3, #1
 8005a90:	441a      	add	r2, r3
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a9a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a9c:	6a3b      	ldr	r3, [r7, #32]
 8005a9e:	2b0f      	cmp	r3, #15
 8005aa0:	d916      	bls.n	8005ad0 <UART_SetConfig+0x3fc>
 8005aa2:	6a3b      	ldr	r3, [r7, #32]
 8005aa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005aa8:	d212      	bcs.n	8005ad0 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005aaa:	6a3b      	ldr	r3, [r7, #32]
 8005aac:	b29b      	uxth	r3, r3
 8005aae:	f023 030f 	bic.w	r3, r3, #15
 8005ab2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005ab4:	6a3b      	ldr	r3, [r7, #32]
 8005ab6:	085b      	lsrs	r3, r3, #1
 8005ab8:	b29b      	uxth	r3, r3
 8005aba:	f003 0307 	and.w	r3, r3, #7
 8005abe:	b29a      	uxth	r2, r3
 8005ac0:	8bfb      	ldrh	r3, [r7, #30]
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	8bfa      	ldrh	r2, [r7, #30]
 8005acc:	60da      	str	r2, [r3, #12]
 8005ace:	e05b      	b.n	8005b88 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005ad6:	e057      	b.n	8005b88 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005ad8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005adc:	2b08      	cmp	r3, #8
 8005ade:	d828      	bhi.n	8005b32 <UART_SetConfig+0x45e>
 8005ae0:	a201      	add	r2, pc, #4	; (adr r2, 8005ae8 <UART_SetConfig+0x414>)
 8005ae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ae6:	bf00      	nop
 8005ae8:	08005b0d 	.word	0x08005b0d
 8005aec:	08005b15 	.word	0x08005b15
 8005af0:	08005b1d 	.word	0x08005b1d
 8005af4:	08005b33 	.word	0x08005b33
 8005af8:	08005b23 	.word	0x08005b23
 8005afc:	08005b33 	.word	0x08005b33
 8005b00:	08005b33 	.word	0x08005b33
 8005b04:	08005b33 	.word	0x08005b33
 8005b08:	08005b2b 	.word	0x08005b2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b0c:	f7fd fe38 	bl	8003780 <HAL_RCC_GetPCLK1Freq>
 8005b10:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005b12:	e014      	b.n	8005b3e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b14:	f7fd fe46 	bl	80037a4 <HAL_RCC_GetPCLK2Freq>
 8005b18:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005b1a:	e010      	b.n	8005b3e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b1c:	4b26      	ldr	r3, [pc, #152]	; (8005bb8 <UART_SetConfig+0x4e4>)
 8005b1e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005b20:	e00d      	b.n	8005b3e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b22:	f7fd fd79 	bl	8003618 <HAL_RCC_GetSysClockFreq>
 8005b26:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005b28:	e009      	b.n	8005b3e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b2e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005b30:	e005      	b.n	8005b3e <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8005b32:	2300      	movs	r3, #0
 8005b34:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005b36:	2301      	movs	r3, #1
 8005b38:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005b3c:	bf00      	nop
    }

    if (pclk != 0U)
 8005b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d021      	beq.n	8005b88 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b44:	697b      	ldr	r3, [r7, #20]
 8005b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b48:	4a1a      	ldr	r2, [pc, #104]	; (8005bb4 <UART_SetConfig+0x4e0>)
 8005b4a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b4e:	461a      	mov	r2, r3
 8005b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b52:	fbb3 f2f2 	udiv	r2, r3, r2
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	085b      	lsrs	r3, r3, #1
 8005b5c:	441a      	add	r2, r3
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b66:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b68:	6a3b      	ldr	r3, [r7, #32]
 8005b6a:	2b0f      	cmp	r3, #15
 8005b6c:	d909      	bls.n	8005b82 <UART_SetConfig+0x4ae>
 8005b6e:	6a3b      	ldr	r3, [r7, #32]
 8005b70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b74:	d205      	bcs.n	8005b82 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005b76:	6a3b      	ldr	r3, [r7, #32]
 8005b78:	b29a      	uxth	r2, r3
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	60da      	str	r2, [r3, #12]
 8005b80:	e002      	b.n	8005b88 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8005b82:	2301      	movs	r3, #1
 8005b84:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	2201      	movs	r2, #1
 8005b94:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005ba4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	3730      	adds	r7, #48	; 0x30
 8005bac:	46bd      	mov	sp, r7
 8005bae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005bb2:	bf00      	nop
 8005bb4:	0800c738 	.word	0x0800c738
 8005bb8:	00f42400 	.word	0x00f42400

08005bbc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b083      	sub	sp, #12
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bc8:	f003 0301 	and.w	r3, r3, #1
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d00a      	beq.n	8005be6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	430a      	orrs	r2, r1
 8005be4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bea:	f003 0302 	and.w	r3, r3, #2
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d00a      	beq.n	8005c08 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	685b      	ldr	r3, [r3, #4]
 8005bf8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	430a      	orrs	r2, r1
 8005c06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c0c:	f003 0304 	and.w	r3, r3, #4
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d00a      	beq.n	8005c2a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	430a      	orrs	r2, r1
 8005c28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c2e:	f003 0308 	and.w	r3, r3, #8
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d00a      	beq.n	8005c4c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	430a      	orrs	r2, r1
 8005c4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c50:	f003 0310 	and.w	r3, r3, #16
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d00a      	beq.n	8005c6e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	689b      	ldr	r3, [r3, #8]
 8005c5e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	430a      	orrs	r2, r1
 8005c6c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c72:	f003 0320 	and.w	r3, r3, #32
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d00a      	beq.n	8005c90 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	689b      	ldr	r3, [r3, #8]
 8005c80:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	430a      	orrs	r2, r1
 8005c8e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d01a      	beq.n	8005cd2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	430a      	orrs	r2, r1
 8005cb0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cb6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005cba:	d10a      	bne.n	8005cd2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	685b      	ldr	r3, [r3, #4]
 8005cc2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	430a      	orrs	r2, r1
 8005cd0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d00a      	beq.n	8005cf4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	430a      	orrs	r2, r1
 8005cf2:	605a      	str	r2, [r3, #4]
  }
}
 8005cf4:	bf00      	nop
 8005cf6:	370c      	adds	r7, #12
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bc80      	pop	{r7}
 8005cfc:	4770      	bx	lr

08005cfe <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005cfe:	b580      	push	{r7, lr}
 8005d00:	b086      	sub	sp, #24
 8005d02:	af02      	add	r7, sp, #8
 8005d04:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005d0e:	f7fa fef9 	bl	8000b04 <HAL_GetTick>
 8005d12:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f003 0308 	and.w	r3, r3, #8
 8005d1e:	2b08      	cmp	r3, #8
 8005d20:	d10e      	bne.n	8005d40 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d22:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005d26:	9300      	str	r3, [sp, #0]
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005d30:	6878      	ldr	r0, [r7, #4]
 8005d32:	f000 f832 	bl	8005d9a <UART_WaitOnFlagUntilTimeout>
 8005d36:	4603      	mov	r3, r0
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d001      	beq.n	8005d40 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d3c:	2303      	movs	r3, #3
 8005d3e:	e028      	b.n	8005d92 <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f003 0304 	and.w	r3, r3, #4
 8005d4a:	2b04      	cmp	r3, #4
 8005d4c:	d10e      	bne.n	8005d6c <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d4e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005d52:	9300      	str	r3, [sp, #0]
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	2200      	movs	r2, #0
 8005d58:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005d5c:	6878      	ldr	r0, [r7, #4]
 8005d5e:	f000 f81c 	bl	8005d9a <UART_WaitOnFlagUntilTimeout>
 8005d62:	4603      	mov	r3, r0
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d001      	beq.n	8005d6c <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d68:	2303      	movs	r3, #3
 8005d6a:	e012      	b.n	8005d92 <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2220      	movs	r2, #32
 8005d70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2220      	movs	r2, #32
 8005d78:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2200      	movs	r2, #0
 8005d86:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005d90:	2300      	movs	r3, #0
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	3710      	adds	r7, #16
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd80      	pop	{r7, pc}

08005d9a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005d9a:	b580      	push	{r7, lr}
 8005d9c:	b09c      	sub	sp, #112	; 0x70
 8005d9e:	af00      	add	r7, sp, #0
 8005da0:	60f8      	str	r0, [r7, #12]
 8005da2:	60b9      	str	r1, [r7, #8]
 8005da4:	603b      	str	r3, [r7, #0]
 8005da6:	4613      	mov	r3, r2
 8005da8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005daa:	e0a9      	b.n	8005f00 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005dac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005dae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005db2:	f000 80a5 	beq.w	8005f00 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005db6:	f7fa fea5 	bl	8000b04 <HAL_GetTick>
 8005dba:	4602      	mov	r2, r0
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	1ad3      	subs	r3, r2, r3
 8005dc0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005dc2:	429a      	cmp	r2, r3
 8005dc4:	d302      	bcc.n	8005dcc <UART_WaitOnFlagUntilTimeout+0x32>
 8005dc6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d140      	bne.n	8005e4e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005dd4:	e853 3f00 	ldrex	r3, [r3]
 8005dd8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005dda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ddc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005de0:	667b      	str	r3, [r7, #100]	; 0x64
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	461a      	mov	r2, r3
 8005de8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005dea:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005dec:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dee:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005df0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005df2:	e841 2300 	strex	r3, r2, [r1]
 8005df6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005df8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d1e6      	bne.n	8005dcc <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	3308      	adds	r3, #8
 8005e04:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e08:	e853 3f00 	ldrex	r3, [r3]
 8005e0c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e10:	f023 0301 	bic.w	r3, r3, #1
 8005e14:	663b      	str	r3, [r7, #96]	; 0x60
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	3308      	adds	r3, #8
 8005e1c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005e1e:	64ba      	str	r2, [r7, #72]	; 0x48
 8005e20:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e22:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005e24:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005e26:	e841 2300 	strex	r3, r2, [r1]
 8005e2a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005e2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d1e5      	bne.n	8005dfe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	2220      	movs	r2, #32
 8005e36:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	2220      	movs	r2, #32
 8005e3e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	2200      	movs	r2, #0
 8005e46:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 8005e4a:	2303      	movs	r3, #3
 8005e4c:	e069      	b.n	8005f22 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f003 0304 	and.w	r3, r3, #4
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d051      	beq.n	8005f00 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	69db      	ldr	r3, [r3, #28]
 8005e62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e6a:	d149      	bne.n	8005f00 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e74:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e7e:	e853 3f00 	ldrex	r3, [r3]
 8005e82:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e86:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005e8a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	461a      	mov	r2, r3
 8005e92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e94:	637b      	str	r3, [r7, #52]	; 0x34
 8005e96:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e98:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005e9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e9c:	e841 2300 	strex	r3, r2, [r1]
 8005ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d1e6      	bne.n	8005e76 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	3308      	adds	r3, #8
 8005eae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eb0:	697b      	ldr	r3, [r7, #20]
 8005eb2:	e853 3f00 	ldrex	r3, [r3]
 8005eb6:	613b      	str	r3, [r7, #16]
   return(result);
 8005eb8:	693b      	ldr	r3, [r7, #16]
 8005eba:	f023 0301 	bic.w	r3, r3, #1
 8005ebe:	66bb      	str	r3, [r7, #104]	; 0x68
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	3308      	adds	r3, #8
 8005ec6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005ec8:	623a      	str	r2, [r7, #32]
 8005eca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ecc:	69f9      	ldr	r1, [r7, #28]
 8005ece:	6a3a      	ldr	r2, [r7, #32]
 8005ed0:	e841 2300 	strex	r3, r2, [r1]
 8005ed4:	61bb      	str	r3, [r7, #24]
   return(result);
 8005ed6:	69bb      	ldr	r3, [r7, #24]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d1e5      	bne.n	8005ea8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	2220      	movs	r2, #32
 8005ee0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	2220      	movs	r2, #32
 8005ee8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	2220      	movs	r2, #32
 8005ef0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8005efc:	2303      	movs	r3, #3
 8005efe:	e010      	b.n	8005f22 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	69da      	ldr	r2, [r3, #28]
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	4013      	ands	r3, r2
 8005f0a:	68ba      	ldr	r2, [r7, #8]
 8005f0c:	429a      	cmp	r2, r3
 8005f0e:	bf0c      	ite	eq
 8005f10:	2301      	moveq	r3, #1
 8005f12:	2300      	movne	r3, #0
 8005f14:	b2db      	uxtb	r3, r3
 8005f16:	461a      	mov	r2, r3
 8005f18:	79fb      	ldrb	r3, [r7, #7]
 8005f1a:	429a      	cmp	r2, r3
 8005f1c:	f43f af46 	beq.w	8005dac <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005f20:	2300      	movs	r3, #0
}
 8005f22:	4618      	mov	r0, r3
 8005f24:	3770      	adds	r7, #112	; 0x70
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd80      	pop	{r7, pc}
	...

08005f2c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	b0a3      	sub	sp, #140	; 0x8c
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	60f8      	str	r0, [r7, #12]
 8005f34:	60b9      	str	r1, [r7, #8]
 8005f36:	4613      	mov	r3, r2
 8005f38:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	68ba      	ldr	r2, [r7, #8]
 8005f3e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	88fa      	ldrh	r2, [r7, #6]
 8005f44:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	88fa      	ldrh	r2, [r7, #6]
 8005f4c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	2200      	movs	r2, #0
 8005f54:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	689b      	ldr	r3, [r3, #8]
 8005f5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f5e:	d10e      	bne.n	8005f7e <UART_Start_Receive_IT+0x52>
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	691b      	ldr	r3, [r3, #16]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d105      	bne.n	8005f74 <UART_Start_Receive_IT+0x48>
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005f6e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005f72:	e02d      	b.n	8005fd0 <UART_Start_Receive_IT+0xa4>
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	22ff      	movs	r2, #255	; 0xff
 8005f78:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005f7c:	e028      	b.n	8005fd0 <UART_Start_Receive_IT+0xa4>
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	689b      	ldr	r3, [r3, #8]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d10d      	bne.n	8005fa2 <UART_Start_Receive_IT+0x76>
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	691b      	ldr	r3, [r3, #16]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d104      	bne.n	8005f98 <UART_Start_Receive_IT+0x6c>
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	22ff      	movs	r2, #255	; 0xff
 8005f92:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005f96:	e01b      	b.n	8005fd0 <UART_Start_Receive_IT+0xa4>
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	227f      	movs	r2, #127	; 0x7f
 8005f9c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005fa0:	e016      	b.n	8005fd0 <UART_Start_Receive_IT+0xa4>
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	689b      	ldr	r3, [r3, #8]
 8005fa6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005faa:	d10d      	bne.n	8005fc8 <UART_Start_Receive_IT+0x9c>
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	691b      	ldr	r3, [r3, #16]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d104      	bne.n	8005fbe <UART_Start_Receive_IT+0x92>
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	227f      	movs	r2, #127	; 0x7f
 8005fb8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005fbc:	e008      	b.n	8005fd0 <UART_Start_Receive_IT+0xa4>
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	223f      	movs	r2, #63	; 0x3f
 8005fc2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005fc6:	e003      	b.n	8005fd0 <UART_Start_Receive_IT+0xa4>
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	2222      	movs	r2, #34	; 0x22
 8005fdc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	3308      	adds	r3, #8
 8005fe6:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fe8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005fea:	e853 3f00 	ldrex	r3, [r3]
 8005fee:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8005ff0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ff2:	f043 0301 	orr.w	r3, r3, #1
 8005ff6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	3308      	adds	r3, #8
 8006000:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8006004:	673a      	str	r2, [r7, #112]	; 0x70
 8006006:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006008:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800600a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800600c:	e841 2300 	strex	r3, r2, [r1]
 8006010:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8006012:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006014:	2b00      	cmp	r3, #0
 8006016:	d1e3      	bne.n	8005fe0 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800601c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006020:	d14f      	bne.n	80060c2 <UART_Start_Receive_IT+0x196>
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006028:	88fa      	ldrh	r2, [r7, #6]
 800602a:	429a      	cmp	r2, r3
 800602c:	d349      	bcc.n	80060c2 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	689b      	ldr	r3, [r3, #8]
 8006032:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006036:	d107      	bne.n	8006048 <UART_Start_Receive_IT+0x11c>
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	691b      	ldr	r3, [r3, #16]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d103      	bne.n	8006048 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	4a46      	ldr	r2, [pc, #280]	; (800615c <UART_Start_Receive_IT+0x230>)
 8006044:	675a      	str	r2, [r3, #116]	; 0x74
 8006046:	e002      	b.n	800604e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	4a45      	ldr	r2, [pc, #276]	; (8006160 <UART_Start_Receive_IT+0x234>)
 800604c:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	691b      	ldr	r3, [r3, #16]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d01a      	beq.n	800608c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800605c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800605e:	e853 3f00 	ldrex	r3, [r3]
 8006062:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006064:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006066:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800606a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	461a      	mov	r2, r3
 8006074:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006078:	65fb      	str	r3, [r7, #92]	; 0x5c
 800607a:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800607c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800607e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006080:	e841 2300 	strex	r3, r2, [r1]
 8006084:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006086:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006088:	2b00      	cmp	r3, #0
 800608a:	d1e4      	bne.n	8006056 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	3308      	adds	r3, #8
 8006092:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006094:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006096:	e853 3f00 	ldrex	r3, [r3]
 800609a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800609c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800609e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060a2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	3308      	adds	r3, #8
 80060aa:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80060ac:	64ba      	str	r2, [r7, #72]	; 0x48
 80060ae:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060b0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80060b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80060b4:	e841 2300 	strex	r3, r2, [r1]
 80060b8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80060ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d1e5      	bne.n	800608c <UART_Start_Receive_IT+0x160>
 80060c0:	e046      	b.n	8006150 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	689b      	ldr	r3, [r3, #8]
 80060c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060ca:	d107      	bne.n	80060dc <UART_Start_Receive_IT+0x1b0>
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	691b      	ldr	r3, [r3, #16]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d103      	bne.n	80060dc <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	4a23      	ldr	r2, [pc, #140]	; (8006164 <UART_Start_Receive_IT+0x238>)
 80060d8:	675a      	str	r2, [r3, #116]	; 0x74
 80060da:	e002      	b.n	80060e2 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	4a22      	ldr	r2, [pc, #136]	; (8006168 <UART_Start_Receive_IT+0x23c>)
 80060e0:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	691b      	ldr	r3, [r3, #16]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d019      	beq.n	800611e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060f2:	e853 3f00 	ldrex	r3, [r3]
 80060f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80060f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060fa:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80060fe:	677b      	str	r3, [r7, #116]	; 0x74
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	461a      	mov	r2, r3
 8006106:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006108:	637b      	str	r3, [r7, #52]	; 0x34
 800610a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800610c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800610e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006110:	e841 2300 	strex	r3, r2, [r1]
 8006114:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006118:	2b00      	cmp	r3, #0
 800611a:	d1e6      	bne.n	80060ea <UART_Start_Receive_IT+0x1be>
 800611c:	e018      	b.n	8006150 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	e853 3f00 	ldrex	r3, [r3]
 800612a:	613b      	str	r3, [r7, #16]
   return(result);
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	f043 0320 	orr.w	r3, r3, #32
 8006132:	67bb      	str	r3, [r7, #120]	; 0x78
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	461a      	mov	r2, r3
 800613a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800613c:	623b      	str	r3, [r7, #32]
 800613e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006140:	69f9      	ldr	r1, [r7, #28]
 8006142:	6a3a      	ldr	r2, [r7, #32]
 8006144:	e841 2300 	strex	r3, r2, [r1]
 8006148:	61bb      	str	r3, [r7, #24]
   return(result);
 800614a:	69bb      	ldr	r3, [r7, #24]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d1e6      	bne.n	800611e <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8006150:	2300      	movs	r3, #0
}
 8006152:	4618      	mov	r0, r3
 8006154:	378c      	adds	r7, #140	; 0x8c
 8006156:	46bd      	mov	sp, r7
 8006158:	bc80      	pop	{r7}
 800615a:	4770      	bx	lr
 800615c:	08006b41 	.word	0x08006b41
 8006160:	080067e1 	.word	0x080067e1
 8006164:	08006629 	.word	0x08006629
 8006168:	08006471 	.word	0x08006471

0800616c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800616c:	b480      	push	{r7}
 800616e:	b08f      	sub	sp, #60	; 0x3c
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800617a:	6a3b      	ldr	r3, [r7, #32]
 800617c:	e853 3f00 	ldrex	r3, [r3]
 8006180:	61fb      	str	r3, [r7, #28]
   return(result);
 8006182:	69fb      	ldr	r3, [r7, #28]
 8006184:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006188:	637b      	str	r3, [r7, #52]	; 0x34
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	461a      	mov	r2, r3
 8006190:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006192:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006194:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006196:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006198:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800619a:	e841 2300 	strex	r3, r2, [r1]
 800619e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80061a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d1e6      	bne.n	8006174 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	3308      	adds	r3, #8
 80061ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	e853 3f00 	ldrex	r3, [r3]
 80061b4:	60bb      	str	r3, [r7, #8]
   return(result);
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80061bc:	633b      	str	r3, [r7, #48]	; 0x30
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	3308      	adds	r3, #8
 80061c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061c6:	61ba      	str	r2, [r7, #24]
 80061c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ca:	6979      	ldr	r1, [r7, #20]
 80061cc:	69ba      	ldr	r2, [r7, #24]
 80061ce:	e841 2300 	strex	r3, r2, [r1]
 80061d2:	613b      	str	r3, [r7, #16]
   return(result);
 80061d4:	693b      	ldr	r3, [r7, #16]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d1e5      	bne.n	80061a6 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2220      	movs	r2, #32
 80061de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 80061e2:	bf00      	nop
 80061e4:	373c      	adds	r7, #60	; 0x3c
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bc80      	pop	{r7}
 80061ea:	4770      	bx	lr

080061ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80061ec:	b480      	push	{r7}
 80061ee:	b095      	sub	sp, #84	; 0x54
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061fc:	e853 3f00 	ldrex	r3, [r3]
 8006200:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006204:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006208:	64fb      	str	r3, [r7, #76]	; 0x4c
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	461a      	mov	r2, r3
 8006210:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006212:	643b      	str	r3, [r7, #64]	; 0x40
 8006214:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006216:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006218:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800621a:	e841 2300 	strex	r3, r2, [r1]
 800621e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006222:	2b00      	cmp	r3, #0
 8006224:	d1e6      	bne.n	80061f4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	3308      	adds	r3, #8
 800622c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800622e:	6a3b      	ldr	r3, [r7, #32]
 8006230:	e853 3f00 	ldrex	r3, [r3]
 8006234:	61fb      	str	r3, [r7, #28]
   return(result);
 8006236:	69fb      	ldr	r3, [r7, #28]
 8006238:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800623c:	f023 0301 	bic.w	r3, r3, #1
 8006240:	64bb      	str	r3, [r7, #72]	; 0x48
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	3308      	adds	r3, #8
 8006248:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800624a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800624c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800624e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006250:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006252:	e841 2300 	strex	r3, r2, [r1]
 8006256:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800625a:	2b00      	cmp	r3, #0
 800625c:	d1e3      	bne.n	8006226 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006262:	2b01      	cmp	r3, #1
 8006264:	d118      	bne.n	8006298 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	e853 3f00 	ldrex	r3, [r3]
 8006272:	60bb      	str	r3, [r7, #8]
   return(result);
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	f023 0310 	bic.w	r3, r3, #16
 800627a:	647b      	str	r3, [r7, #68]	; 0x44
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	461a      	mov	r2, r3
 8006282:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006284:	61bb      	str	r3, [r7, #24]
 8006286:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006288:	6979      	ldr	r1, [r7, #20]
 800628a:	69ba      	ldr	r2, [r7, #24]
 800628c:	e841 2300 	strex	r3, r2, [r1]
 8006290:	613b      	str	r3, [r7, #16]
   return(result);
 8006292:	693b      	ldr	r3, [r7, #16]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d1e6      	bne.n	8006266 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2220      	movs	r2, #32
 800629c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2200      	movs	r2, #0
 80062a4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2200      	movs	r2, #0
 80062aa:	675a      	str	r2, [r3, #116]	; 0x74
}
 80062ac:	bf00      	nop
 80062ae:	3754      	adds	r7, #84	; 0x54
 80062b0:	46bd      	mov	sp, r7
 80062b2:	bc80      	pop	{r7}
 80062b4:	4770      	bx	lr

080062b6 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80062b6:	b580      	push	{r7, lr}
 80062b8:	b090      	sub	sp, #64	; 0x40
 80062ba:	af00      	add	r7, sp, #0
 80062bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062c2:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f003 0320 	and.w	r3, r3, #32
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d137      	bne.n	8006342 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 80062d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062d4:	2200      	movs	r2, #0
 80062d6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80062da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	3308      	adds	r3, #8
 80062e0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e4:	e853 3f00 	ldrex	r3, [r3]
 80062e8:	623b      	str	r3, [r7, #32]
   return(result);
 80062ea:	6a3b      	ldr	r3, [r7, #32]
 80062ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80062f0:	63bb      	str	r3, [r7, #56]	; 0x38
 80062f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	3308      	adds	r3, #8
 80062f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80062fa:	633a      	str	r2, [r7, #48]	; 0x30
 80062fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006300:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006302:	e841 2300 	strex	r3, r2, [r1]
 8006306:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800630a:	2b00      	cmp	r3, #0
 800630c:	d1e5      	bne.n	80062da <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800630e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006314:	693b      	ldr	r3, [r7, #16]
 8006316:	e853 3f00 	ldrex	r3, [r3]
 800631a:	60fb      	str	r3, [r7, #12]
   return(result);
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006322:	637b      	str	r3, [r7, #52]	; 0x34
 8006324:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	461a      	mov	r2, r3
 800632a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800632c:	61fb      	str	r3, [r7, #28]
 800632e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006330:	69b9      	ldr	r1, [r7, #24]
 8006332:	69fa      	ldr	r2, [r7, #28]
 8006334:	e841 2300 	strex	r3, r2, [r1]
 8006338:	617b      	str	r3, [r7, #20]
   return(result);
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d1e6      	bne.n	800630e <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006340:	e002      	b.n	8006348 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8006342:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006344:	f7fb f898 	bl	8001478 <HAL_UART_TxCpltCallback>
}
 8006348:	bf00      	nop
 800634a:	3740      	adds	r7, #64	; 0x40
 800634c:	46bd      	mov	sp, r7
 800634e:	bd80      	pop	{r7, pc}

08006350 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b084      	sub	sp, #16
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800635c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800635e:	68f8      	ldr	r0, [r7, #12]
 8006360:	f7ff f99a 	bl	8005698 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006364:	bf00      	nop
 8006366:	3710      	adds	r7, #16
 8006368:	46bd      	mov	sp, r7
 800636a:	bd80      	pop	{r7, pc}

0800636c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b086      	sub	sp, #24
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006378:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006380:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006388:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800638a:	697b      	ldr	r3, [r7, #20]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	689b      	ldr	r3, [r3, #8]
 8006390:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006394:	2b80      	cmp	r3, #128	; 0x80
 8006396:	d109      	bne.n	80063ac <UART_DMAError+0x40>
 8006398:	693b      	ldr	r3, [r7, #16]
 800639a:	2b21      	cmp	r3, #33	; 0x21
 800639c:	d106      	bne.n	80063ac <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800639e:	697b      	ldr	r3, [r7, #20]
 80063a0:	2200      	movs	r2, #0
 80063a2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 80063a6:	6978      	ldr	r0, [r7, #20]
 80063a8:	f7ff fee0 	bl	800616c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80063ac:	697b      	ldr	r3, [r7, #20]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	689b      	ldr	r3, [r3, #8]
 80063b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063b6:	2b40      	cmp	r3, #64	; 0x40
 80063b8:	d109      	bne.n	80063ce <UART_DMAError+0x62>
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	2b22      	cmp	r3, #34	; 0x22
 80063be:	d106      	bne.n	80063ce <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	2200      	movs	r2, #0
 80063c4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 80063c8:	6978      	ldr	r0, [r7, #20]
 80063ca:	f7ff ff0f 	bl	80061ec <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80063ce:	697b      	ldr	r3, [r7, #20]
 80063d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063d4:	f043 0210 	orr.w	r2, r3, #16
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80063de:	6978      	ldr	r0, [r7, #20]
 80063e0:	f7ff f963 	bl	80056aa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80063e4:	bf00      	nop
 80063e6:	3718      	adds	r7, #24
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bd80      	pop	{r7, pc}

080063ec <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b084      	sub	sp, #16
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063f8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	2200      	movs	r2, #0
 80063fe:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	2200      	movs	r2, #0
 8006406:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800640a:	68f8      	ldr	r0, [r7, #12]
 800640c:	f7ff f94d 	bl	80056aa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006410:	bf00      	nop
 8006412:	3710      	adds	r7, #16
 8006414:	46bd      	mov	sp, r7
 8006416:	bd80      	pop	{r7, pc}

08006418 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b088      	sub	sp, #32
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	e853 3f00 	ldrex	r3, [r3]
 800642c:	60bb      	str	r3, [r7, #8]
   return(result);
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006434:	61fb      	str	r3, [r7, #28]
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	461a      	mov	r2, r3
 800643c:	69fb      	ldr	r3, [r7, #28]
 800643e:	61bb      	str	r3, [r7, #24]
 8006440:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006442:	6979      	ldr	r1, [r7, #20]
 8006444:	69ba      	ldr	r2, [r7, #24]
 8006446:	e841 2300 	strex	r3, r2, [r1]
 800644a:	613b      	str	r3, [r7, #16]
   return(result);
 800644c:	693b      	ldr	r3, [r7, #16]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d1e6      	bne.n	8006420 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2220      	movs	r2, #32
 8006456:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2200      	movs	r2, #0
 800645e:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006460:	6878      	ldr	r0, [r7, #4]
 8006462:	f7fb f809 	bl	8001478 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006466:	bf00      	nop
 8006468:	3720      	adds	r7, #32
 800646a:	46bd      	mov	sp, r7
 800646c:	bd80      	pop	{r7, pc}
	...

08006470 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b09c      	sub	sp, #112	; 0x70
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800647e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006488:	2b22      	cmp	r3, #34	; 0x22
 800648a:	f040 80be 	bne.w	800660a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006494:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006498:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800649c:	b2d9      	uxtb	r1, r3
 800649e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80064a2:	b2da      	uxtb	r2, r3
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064a8:	400a      	ands	r2, r1
 80064aa:	b2d2      	uxtb	r2, r2
 80064ac:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064b2:	1c5a      	adds	r2, r3, #1
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80064be:	b29b      	uxth	r3, r3
 80064c0:	3b01      	subs	r3, #1
 80064c2:	b29a      	uxth	r2, r3
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80064d0:	b29b      	uxth	r3, r3
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	f040 80a1 	bne.w	800661a <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064e0:	e853 3f00 	ldrex	r3, [r3]
 80064e4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80064e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80064ec:	66bb      	str	r3, [r7, #104]	; 0x68
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	461a      	mov	r2, r3
 80064f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80064f6:	65bb      	str	r3, [r7, #88]	; 0x58
 80064f8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064fa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80064fc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80064fe:	e841 2300 	strex	r3, r2, [r1]
 8006502:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006504:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006506:	2b00      	cmp	r3, #0
 8006508:	d1e6      	bne.n	80064d8 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	3308      	adds	r3, #8
 8006510:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006514:	e853 3f00 	ldrex	r3, [r3]
 8006518:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800651a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800651c:	f023 0301 	bic.w	r3, r3, #1
 8006520:	667b      	str	r3, [r7, #100]	; 0x64
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	3308      	adds	r3, #8
 8006528:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800652a:	647a      	str	r2, [r7, #68]	; 0x44
 800652c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800652e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006530:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006532:	e841 2300 	strex	r3, r2, [r1]
 8006536:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006538:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800653a:	2b00      	cmp	r3, #0
 800653c:	d1e5      	bne.n	800650a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2220      	movs	r2, #32
 8006542:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2200      	movs	r2, #0
 800654a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2200      	movs	r2, #0
 8006550:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	4a33      	ldr	r2, [pc, #204]	; (8006624 <UART_RxISR_8BIT+0x1b4>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d01f      	beq.n	800659c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	685b      	ldr	r3, [r3, #4]
 8006562:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006566:	2b00      	cmp	r3, #0
 8006568:	d018      	beq.n	800659c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006572:	e853 3f00 	ldrex	r3, [r3]
 8006576:	623b      	str	r3, [r7, #32]
   return(result);
 8006578:	6a3b      	ldr	r3, [r7, #32]
 800657a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800657e:	663b      	str	r3, [r7, #96]	; 0x60
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	461a      	mov	r2, r3
 8006586:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006588:	633b      	str	r3, [r7, #48]	; 0x30
 800658a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800658c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800658e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006590:	e841 2300 	strex	r3, r2, [r1]
 8006594:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006598:	2b00      	cmp	r3, #0
 800659a:	d1e6      	bne.n	800656a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065a0:	2b01      	cmp	r3, #1
 80065a2:	d12e      	bne.n	8006602 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2200      	movs	r2, #0
 80065a8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065b0:	693b      	ldr	r3, [r7, #16]
 80065b2:	e853 3f00 	ldrex	r3, [r3]
 80065b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	f023 0310 	bic.w	r3, r3, #16
 80065be:	65fb      	str	r3, [r7, #92]	; 0x5c
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	461a      	mov	r2, r3
 80065c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80065c8:	61fb      	str	r3, [r7, #28]
 80065ca:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065cc:	69b9      	ldr	r1, [r7, #24]
 80065ce:	69fa      	ldr	r2, [r7, #28]
 80065d0:	e841 2300 	strex	r3, r2, [r1]
 80065d4:	617b      	str	r3, [r7, #20]
   return(result);
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d1e6      	bne.n	80065aa <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	69db      	ldr	r3, [r3, #28]
 80065e2:	f003 0310 	and.w	r3, r3, #16
 80065e6:	2b10      	cmp	r3, #16
 80065e8:	d103      	bne.n	80065f2 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	2210      	movs	r2, #16
 80065f0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80065f8:	4619      	mov	r1, r3
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f7ff f85e 	bl	80056bc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006600:	e00b      	b.n	800661a <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	f7fa ff4e 	bl	80014a4 <HAL_UART_RxCpltCallback>
}
 8006608:	e007      	b.n	800661a <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	699a      	ldr	r2, [r3, #24]
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f042 0208 	orr.w	r2, r2, #8
 8006618:	619a      	str	r2, [r3, #24]
}
 800661a:	bf00      	nop
 800661c:	3770      	adds	r7, #112	; 0x70
 800661e:	46bd      	mov	sp, r7
 8006620:	bd80      	pop	{r7, pc}
 8006622:	bf00      	nop
 8006624:	40008000 	.word	0x40008000

08006628 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b09c      	sub	sp, #112	; 0x70
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006636:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006640:	2b22      	cmp	r3, #34	; 0x22
 8006642:	f040 80be 	bne.w	80067c2 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800664c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006654:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8006656:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800665a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800665e:	4013      	ands	r3, r2
 8006660:	b29a      	uxth	r2, r3
 8006662:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006664:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800666a:	1c9a      	adds	r2, r3, #2
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006676:	b29b      	uxth	r3, r3
 8006678:	3b01      	subs	r3, #1
 800667a:	b29a      	uxth	r2, r3
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006688:	b29b      	uxth	r3, r3
 800668a:	2b00      	cmp	r3, #0
 800668c:	f040 80a1 	bne.w	80067d2 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006696:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006698:	e853 3f00 	ldrex	r3, [r3]
 800669c:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800669e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80066a0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80066a4:	667b      	str	r3, [r7, #100]	; 0x64
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	461a      	mov	r2, r3
 80066ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80066ae:	657b      	str	r3, [r7, #84]	; 0x54
 80066b0:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066b2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80066b4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80066b6:	e841 2300 	strex	r3, r2, [r1]
 80066ba:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80066bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d1e6      	bne.n	8006690 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	3308      	adds	r3, #8
 80066c8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066cc:	e853 3f00 	ldrex	r3, [r3]
 80066d0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80066d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066d4:	f023 0301 	bic.w	r3, r3, #1
 80066d8:	663b      	str	r3, [r7, #96]	; 0x60
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	3308      	adds	r3, #8
 80066e0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80066e2:	643a      	str	r2, [r7, #64]	; 0x40
 80066e4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066e6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80066e8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80066ea:	e841 2300 	strex	r3, r2, [r1]
 80066ee:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80066f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d1e5      	bne.n	80066c2 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2220      	movs	r2, #32
 80066fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2200      	movs	r2, #0
 8006702:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2200      	movs	r2, #0
 8006708:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4a33      	ldr	r2, [pc, #204]	; (80067dc <UART_RxISR_16BIT+0x1b4>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d01f      	beq.n	8006754 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	685b      	ldr	r3, [r3, #4]
 800671a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800671e:	2b00      	cmp	r3, #0
 8006720:	d018      	beq.n	8006754 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006728:	6a3b      	ldr	r3, [r7, #32]
 800672a:	e853 3f00 	ldrex	r3, [r3]
 800672e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006730:	69fb      	ldr	r3, [r7, #28]
 8006732:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006736:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	461a      	mov	r2, r3
 800673e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006740:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006742:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006744:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006746:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006748:	e841 2300 	strex	r3, r2, [r1]
 800674c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800674e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006750:	2b00      	cmp	r3, #0
 8006752:	d1e6      	bne.n	8006722 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006758:	2b01      	cmp	r3, #1
 800675a:	d12e      	bne.n	80067ba <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2200      	movs	r2, #0
 8006760:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	e853 3f00 	ldrex	r3, [r3]
 800676e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	f023 0310 	bic.w	r3, r3, #16
 8006776:	65bb      	str	r3, [r7, #88]	; 0x58
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	461a      	mov	r2, r3
 800677e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006780:	61bb      	str	r3, [r7, #24]
 8006782:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006784:	6979      	ldr	r1, [r7, #20]
 8006786:	69ba      	ldr	r2, [r7, #24]
 8006788:	e841 2300 	strex	r3, r2, [r1]
 800678c:	613b      	str	r3, [r7, #16]
   return(result);
 800678e:	693b      	ldr	r3, [r7, #16]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d1e6      	bne.n	8006762 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	69db      	ldr	r3, [r3, #28]
 800679a:	f003 0310 	and.w	r3, r3, #16
 800679e:	2b10      	cmp	r3, #16
 80067a0:	d103      	bne.n	80067aa <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	2210      	movs	r2, #16
 80067a8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80067b0:	4619      	mov	r1, r3
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f7fe ff82 	bl	80056bc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80067b8:	e00b      	b.n	80067d2 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	f7fa fe72 	bl	80014a4 <HAL_UART_RxCpltCallback>
}
 80067c0:	e007      	b.n	80067d2 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	699a      	ldr	r2, [r3, #24]
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f042 0208 	orr.w	r2, r2, #8
 80067d0:	619a      	str	r2, [r3, #24]
}
 80067d2:	bf00      	nop
 80067d4:	3770      	adds	r7, #112	; 0x70
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bd80      	pop	{r7, pc}
 80067da:	bf00      	nop
 80067dc:	40008000 	.word	0x40008000

080067e0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b0ac      	sub	sp, #176	; 0xb0
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80067ee:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	69db      	ldr	r3, [r3, #28]
 80067f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	689b      	ldr	r3, [r3, #8]
 800680c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006816:	2b22      	cmp	r3, #34	; 0x22
 8006818:	f040 8182 	bne.w	8006b20 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006822:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006826:	e125      	b.n	8006a74 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800682e:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006832:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8006836:	b2d9      	uxtb	r1, r3
 8006838:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800683c:	b2da      	uxtb	r2, r3
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006842:	400a      	ands	r2, r1
 8006844:	b2d2      	uxtb	r2, r2
 8006846:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800684c:	1c5a      	adds	r2, r3, #1
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006858:	b29b      	uxth	r3, r3
 800685a:	3b01      	subs	r3, #1
 800685c:	b29a      	uxth	r2, r3
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	69db      	ldr	r3, [r3, #28]
 800686a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800686e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006872:	f003 0307 	and.w	r3, r3, #7
 8006876:	2b00      	cmp	r3, #0
 8006878:	d053      	beq.n	8006922 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800687a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800687e:	f003 0301 	and.w	r3, r3, #1
 8006882:	2b00      	cmp	r3, #0
 8006884:	d011      	beq.n	80068aa <UART_RxISR_8BIT_FIFOEN+0xca>
 8006886:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800688a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800688e:	2b00      	cmp	r3, #0
 8006890:	d00b      	beq.n	80068aa <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	2201      	movs	r2, #1
 8006898:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068a0:	f043 0201 	orr.w	r2, r3, #1
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80068aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80068ae:	f003 0302 	and.w	r3, r3, #2
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d011      	beq.n	80068da <UART_RxISR_8BIT_FIFOEN+0xfa>
 80068b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80068ba:	f003 0301 	and.w	r3, r3, #1
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d00b      	beq.n	80068da <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	2202      	movs	r2, #2
 80068c8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068d0:	f043 0204 	orr.w	r2, r3, #4
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80068da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80068de:	f003 0304 	and.w	r3, r3, #4
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d011      	beq.n	800690a <UART_RxISR_8BIT_FIFOEN+0x12a>
 80068e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80068ea:	f003 0301 	and.w	r3, r3, #1
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d00b      	beq.n	800690a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	2204      	movs	r2, #4
 80068f8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006900:	f043 0202 	orr.w	r2, r3, #2
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006910:	2b00      	cmp	r3, #0
 8006912:	d006      	beq.n	8006922 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006914:	6878      	ldr	r0, [r7, #4]
 8006916:	f7fe fec8 	bl	80056aa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2200      	movs	r2, #0
 800691e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006928:	b29b      	uxth	r3, r3
 800692a:	2b00      	cmp	r3, #0
 800692c:	f040 80a2 	bne.w	8006a74 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006936:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006938:	e853 3f00 	ldrex	r3, [r3]
 800693c:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 800693e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006940:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006944:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	461a      	mov	r2, r3
 800694e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006952:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006954:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006956:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8006958:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800695a:	e841 2300 	strex	r3, r2, [r1]
 800695e:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8006960:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006962:	2b00      	cmp	r3, #0
 8006964:	d1e4      	bne.n	8006930 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	3308      	adds	r3, #8
 800696c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800696e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006970:	e853 3f00 	ldrex	r3, [r3]
 8006974:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8006976:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006978:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800697c:	f023 0301 	bic.w	r3, r3, #1
 8006980:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	3308      	adds	r3, #8
 800698a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800698e:	66ba      	str	r2, [r7, #104]	; 0x68
 8006990:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006992:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8006994:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006996:	e841 2300 	strex	r3, r2, [r1]
 800699a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800699c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d1e1      	bne.n	8006966 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2220      	movs	r2, #32
 80069a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2200      	movs	r2, #0
 80069ae:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2200      	movs	r2, #0
 80069b4:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4a5f      	ldr	r2, [pc, #380]	; (8006b38 <UART_RxISR_8BIT_FIFOEN+0x358>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d021      	beq.n	8006a04 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	685b      	ldr	r3, [r3, #4]
 80069c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d01a      	beq.n	8006a04 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80069d6:	e853 3f00 	ldrex	r3, [r3]
 80069da:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80069dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069de:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80069e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	461a      	mov	r2, r3
 80069ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80069f0:	657b      	str	r3, [r7, #84]	; 0x54
 80069f2:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069f4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80069f6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80069f8:	e841 2300 	strex	r3, r2, [r1]
 80069fc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80069fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d1e4      	bne.n	80069ce <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a08:	2b01      	cmp	r3, #1
 8006a0a:	d130      	bne.n	8006a6e <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a1a:	e853 3f00 	ldrex	r3, [r3]
 8006a1e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a22:	f023 0310 	bic.w	r3, r3, #16
 8006a26:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	461a      	mov	r2, r3
 8006a30:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006a34:	643b      	str	r3, [r7, #64]	; 0x40
 8006a36:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a38:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006a3a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006a3c:	e841 2300 	strex	r3, r2, [r1]
 8006a40:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006a42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d1e4      	bne.n	8006a12 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	69db      	ldr	r3, [r3, #28]
 8006a4e:	f003 0310 	and.w	r3, r3, #16
 8006a52:	2b10      	cmp	r3, #16
 8006a54:	d103      	bne.n	8006a5e <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	2210      	movs	r2, #16
 8006a5c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006a64:	4619      	mov	r1, r3
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f7fe fe28 	bl	80056bc <HAL_UARTEx_RxEventCallback>
 8006a6c:	e002      	b.n	8006a74 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	f7fa fd18 	bl	80014a4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006a74:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d006      	beq.n	8006a8a <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8006a7c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006a80:	f003 0320 	and.w	r3, r3, #32
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	f47f aecf 	bne.w	8006828 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006a90:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006a94:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d049      	beq.n	8006b30 <UART_RxISR_8BIT_FIFOEN+0x350>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006aa2:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8006aa6:	429a      	cmp	r2, r3
 8006aa8:	d242      	bcs.n	8006b30 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	3308      	adds	r3, #8
 8006ab0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ab2:	6a3b      	ldr	r3, [r7, #32]
 8006ab4:	e853 3f00 	ldrex	r3, [r3]
 8006ab8:	61fb      	str	r3, [r7, #28]
   return(result);
 8006aba:	69fb      	ldr	r3, [r7, #28]
 8006abc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ac0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	3308      	adds	r3, #8
 8006aca:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8006ace:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006ad0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ad2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006ad4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ad6:	e841 2300 	strex	r3, r2, [r1]
 8006ada:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d1e3      	bne.n	8006aaa <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	4a15      	ldr	r2, [pc, #84]	; (8006b3c <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8006ae6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	e853 3f00 	ldrex	r3, [r3]
 8006af4:	60bb      	str	r3, [r7, #8]
   return(result);
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	f043 0320 	orr.w	r3, r3, #32
 8006afc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	461a      	mov	r2, r3
 8006b06:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006b0a:	61bb      	str	r3, [r7, #24]
 8006b0c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b0e:	6979      	ldr	r1, [r7, #20]
 8006b10:	69ba      	ldr	r2, [r7, #24]
 8006b12:	e841 2300 	strex	r3, r2, [r1]
 8006b16:	613b      	str	r3, [r7, #16]
   return(result);
 8006b18:	693b      	ldr	r3, [r7, #16]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d1e4      	bne.n	8006ae8 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006b1e:	e007      	b.n	8006b30 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	699a      	ldr	r2, [r3, #24]
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f042 0208 	orr.w	r2, r2, #8
 8006b2e:	619a      	str	r2, [r3, #24]
}
 8006b30:	bf00      	nop
 8006b32:	37b0      	adds	r7, #176	; 0xb0
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bd80      	pop	{r7, pc}
 8006b38:	40008000 	.word	0x40008000
 8006b3c:	08006471 	.word	0x08006471

08006b40 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b0ae      	sub	sp, #184	; 0xb8
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006b4e:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	69db      	ldr	r3, [r3, #28]
 8006b58:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	689b      	ldr	r3, [r3, #8]
 8006b6c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b76:	2b22      	cmp	r3, #34	; 0x22
 8006b78:	f040 8186 	bne.w	8006e88 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006b82:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006b86:	e129      	b.n	8006ddc <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b8e:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8006b9a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8006b9e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8006ba2:	4013      	ands	r3, r2
 8006ba4:	b29a      	uxth	r2, r3
 8006ba6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006baa:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bb0:	1c9a      	adds	r2, r3, #2
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006bbc:	b29b      	uxth	r3, r3
 8006bbe:	3b01      	subs	r3, #1
 8006bc0:	b29a      	uxth	r2, r3
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	69db      	ldr	r3, [r3, #28]
 8006bce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006bd2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006bd6:	f003 0307 	and.w	r3, r3, #7
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d053      	beq.n	8006c86 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006bde:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006be2:	f003 0301 	and.w	r3, r3, #1
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d011      	beq.n	8006c0e <UART_RxISR_16BIT_FIFOEN+0xce>
 8006bea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006bee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d00b      	beq.n	8006c0e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	2201      	movs	r2, #1
 8006bfc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c04:	f043 0201 	orr.w	r2, r3, #1
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006c0e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006c12:	f003 0302 	and.w	r3, r3, #2
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d011      	beq.n	8006c3e <UART_RxISR_16BIT_FIFOEN+0xfe>
 8006c1a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006c1e:	f003 0301 	and.w	r3, r3, #1
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d00b      	beq.n	8006c3e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	2202      	movs	r2, #2
 8006c2c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c34:	f043 0204 	orr.w	r2, r3, #4
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006c3e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006c42:	f003 0304 	and.w	r3, r3, #4
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d011      	beq.n	8006c6e <UART_RxISR_16BIT_FIFOEN+0x12e>
 8006c4a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006c4e:	f003 0301 	and.w	r3, r3, #1
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d00b      	beq.n	8006c6e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	2204      	movs	r2, #4
 8006c5c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c64:	f043 0202 	orr.w	r2, r3, #2
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d006      	beq.n	8006c86 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006c78:	6878      	ldr	r0, [r7, #4]
 8006c7a:	f7fe fd16 	bl	80056aa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2200      	movs	r2, #0
 8006c82:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006c8c:	b29b      	uxth	r3, r3
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	f040 80a4 	bne.w	8006ddc <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c9c:	e853 3f00 	ldrex	r3, [r3]
 8006ca0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006ca2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006ca4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ca8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	461a      	mov	r2, r3
 8006cb2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006cb6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006cba:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cbc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006cbe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006cc2:	e841 2300 	strex	r3, r2, [r1]
 8006cc6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006cc8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d1e2      	bne.n	8006c94 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	3308      	adds	r3, #8
 8006cd4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cd6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006cd8:	e853 3f00 	ldrex	r3, [r3]
 8006cdc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006cde:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ce0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ce4:	f023 0301 	bic.w	r3, r3, #1
 8006ce8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	3308      	adds	r3, #8
 8006cf2:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8006cf6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006cf8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cfa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006cfc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006cfe:	e841 2300 	strex	r3, r2, [r1]
 8006d02:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006d04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d1e1      	bne.n	8006cce <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2220      	movs	r2, #32
 8006d0e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2200      	movs	r2, #0
 8006d16:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	4a5f      	ldr	r2, [pc, #380]	; (8006ea0 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d021      	beq.n	8006d6c <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	685b      	ldr	r3, [r3, #4]
 8006d2e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d01a      	beq.n	8006d6c <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d3e:	e853 3f00 	ldrex	r3, [r3]
 8006d42:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006d44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d46:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006d4a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	461a      	mov	r2, r3
 8006d54:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006d58:	65bb      	str	r3, [r7, #88]	; 0x58
 8006d5a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d5c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006d5e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006d60:	e841 2300 	strex	r3, r2, [r1]
 8006d64:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006d66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d1e4      	bne.n	8006d36 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d70:	2b01      	cmp	r3, #1
 8006d72:	d130      	bne.n	8006dd6 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2200      	movs	r2, #0
 8006d78:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d82:	e853 3f00 	ldrex	r3, [r3]
 8006d86:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006d88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d8a:	f023 0310 	bic.w	r3, r3, #16
 8006d8e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	461a      	mov	r2, r3
 8006d98:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006d9c:	647b      	str	r3, [r7, #68]	; 0x44
 8006d9e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006da0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006da2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006da4:	e841 2300 	strex	r3, r2, [r1]
 8006da8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006daa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d1e4      	bne.n	8006d7a <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	69db      	ldr	r3, [r3, #28]
 8006db6:	f003 0310 	and.w	r3, r3, #16
 8006dba:	2b10      	cmp	r3, #16
 8006dbc:	d103      	bne.n	8006dc6 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	2210      	movs	r2, #16
 8006dc4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006dcc:	4619      	mov	r1, r3
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f7fe fc74 	bl	80056bc <HAL_UARTEx_RxEventCallback>
 8006dd4:	e002      	b.n	8006ddc <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f7fa fb64 	bl	80014a4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006ddc:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d006      	beq.n	8006df2 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8006de4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006de8:	f003 0320 	and.w	r3, r3, #32
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	f47f aecb 	bne.w	8006b88 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006df8:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006dfc:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d049      	beq.n	8006e98 <UART_RxISR_16BIT_FIFOEN+0x358>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006e0a:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8006e0e:	429a      	cmp	r2, r3
 8006e10:	d242      	bcs.n	8006e98 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	3308      	adds	r3, #8
 8006e18:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e1c:	e853 3f00 	ldrex	r3, [r3]
 8006e20:	623b      	str	r3, [r7, #32]
   return(result);
 8006e22:	6a3b      	ldr	r3, [r7, #32]
 8006e24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e28:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	3308      	adds	r3, #8
 8006e32:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8006e36:	633a      	str	r2, [r7, #48]	; 0x30
 8006e38:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e3a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006e3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e3e:	e841 2300 	strex	r3, r2, [r1]
 8006e42:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d1e3      	bne.n	8006e12 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	4a15      	ldr	r2, [pc, #84]	; (8006ea4 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8006e4e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e56:	693b      	ldr	r3, [r7, #16]
 8006e58:	e853 3f00 	ldrex	r3, [r3]
 8006e5c:	60fb      	str	r3, [r7, #12]
   return(result);
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	f043 0320 	orr.w	r3, r3, #32
 8006e64:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	461a      	mov	r2, r3
 8006e6e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006e72:	61fb      	str	r3, [r7, #28]
 8006e74:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e76:	69b9      	ldr	r1, [r7, #24]
 8006e78:	69fa      	ldr	r2, [r7, #28]
 8006e7a:	e841 2300 	strex	r3, r2, [r1]
 8006e7e:	617b      	str	r3, [r7, #20]
   return(result);
 8006e80:	697b      	ldr	r3, [r7, #20]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d1e4      	bne.n	8006e50 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006e86:	e007      	b.n	8006e98 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	699a      	ldr	r2, [r3, #24]
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f042 0208 	orr.w	r2, r2, #8
 8006e96:	619a      	str	r2, [r3, #24]
}
 8006e98:	bf00      	nop
 8006e9a:	37b8      	adds	r7, #184	; 0xb8
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	bd80      	pop	{r7, pc}
 8006ea0:	40008000 	.word	0x40008000
 8006ea4:	08006629 	.word	0x08006629

08006ea8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	b083      	sub	sp, #12
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006eb0:	bf00      	nop
 8006eb2:	370c      	adds	r7, #12
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	bc80      	pop	{r7}
 8006eb8:	4770      	bx	lr

08006eba <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006eba:	b480      	push	{r7}
 8006ebc:	b083      	sub	sp, #12
 8006ebe:	af00      	add	r7, sp, #0
 8006ec0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006ec2:	bf00      	nop
 8006ec4:	370c      	adds	r7, #12
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bc80      	pop	{r7}
 8006eca:	4770      	bx	lr

08006ecc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006ecc:	b480      	push	{r7}
 8006ece:	b083      	sub	sp, #12
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006ed4:	bf00      	nop
 8006ed6:	370c      	adds	r7, #12
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	bc80      	pop	{r7}
 8006edc:	4770      	bx	lr

08006ede <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8006ede:	b580      	push	{r7, lr}
 8006ee0:	b088      	sub	sp, #32
 8006ee2:	af02      	add	r7, sp, #8
 8006ee4:	60f8      	str	r0, [r7, #12]
 8006ee6:	1d3b      	adds	r3, r7, #4
 8006ee8:	e883 0006 	stmia.w	r3, {r1, r2}
  HAL_StatusTypeDef status = HAL_OK;
 8006eec:	2300      	movs	r3, #0
 8006eee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006ef6:	2b01      	cmp	r3, #1
 8006ef8:	d101      	bne.n	8006efe <HAL_UARTEx_StopModeWakeUpSourceConfig+0x20>
 8006efa:	2302      	movs	r3, #2
 8006efc:	e046      	b.n	8006f8c <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	2201      	movs	r2, #1
 8006f02:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	2224      	movs	r2, #36	; 0x24
 8006f0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	681a      	ldr	r2, [r3, #0]
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f022 0201 	bic.w	r2, r2, #1
 8006f1c:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	689b      	ldr	r3, [r3, #8]
 8006f24:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8006f28:	687a      	ldr	r2, [r7, #4]
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	430a      	orrs	r2, r1
 8006f30:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d105      	bne.n	8006f44 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 8006f38:	1d3b      	adds	r3, r7, #4
 8006f3a:	e893 0006 	ldmia.w	r3, {r1, r2}
 8006f3e:	68f8      	ldr	r0, [r7, #12]
 8006f40:	f000 f911 	bl	8007166 <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	681a      	ldr	r2, [r3, #0]
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f042 0201 	orr.w	r2, r2, #1
 8006f52:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006f54:	f7f9 fdd6 	bl	8000b04 <HAL_GetTick>
 8006f58:	6138      	str	r0, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f5a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006f5e:	9300      	str	r3, [sp, #0]
 8006f60:	693b      	ldr	r3, [r7, #16]
 8006f62:	2200      	movs	r2, #0
 8006f64:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006f68:	68f8      	ldr	r0, [r7, #12]
 8006f6a:	f7fe ff16 	bl	8005d9a <UART_WaitOnFlagUntilTimeout>
 8006f6e:	4603      	mov	r3, r0
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d002      	beq.n	8006f7a <HAL_UARTEx_StopModeWakeUpSourceConfig+0x9c>
  {
    status = HAL_TIMEOUT;
 8006f74:	2303      	movs	r3, #3
 8006f76:	75fb      	strb	r3, [r7, #23]
 8006f78:	e003      	b.n	8006f82 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa4>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	2220      	movs	r2, #32
 8006f7e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	2200      	movs	r2, #0
 8006f86:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return status;
 8006f8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	3718      	adds	r7, #24
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bd80      	pop	{r7, pc}

08006f94 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 8006f94:	b480      	push	{r7}
 8006f96:	b089      	sub	sp, #36	; 0x24
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006fa2:	2b01      	cmp	r3, #1
 8006fa4:	d101      	bne.n	8006faa <HAL_UARTEx_EnableStopMode+0x16>
 8006fa6:	2302      	movs	r3, #2
 8006fa8:	e021      	b.n	8006fee <HAL_UARTEx_EnableStopMode+0x5a>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2201      	movs	r2, #1
 8006fae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	e853 3f00 	ldrex	r3, [r3]
 8006fbe:	60bb      	str	r3, [r7, #8]
   return(result);
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	f043 0302 	orr.w	r3, r3, #2
 8006fc6:	61fb      	str	r3, [r7, #28]
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	461a      	mov	r2, r3
 8006fce:	69fb      	ldr	r3, [r7, #28]
 8006fd0:	61bb      	str	r3, [r7, #24]
 8006fd2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fd4:	6979      	ldr	r1, [r7, #20]
 8006fd6:	69ba      	ldr	r2, [r7, #24]
 8006fd8:	e841 2300 	strex	r3, r2, [r1]
 8006fdc:	613b      	str	r3, [r7, #16]
   return(result);
 8006fde:	693b      	ldr	r3, [r7, #16]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d1e6      	bne.n	8006fb2 <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006fec:	2300      	movs	r3, #0
}
 8006fee:	4618      	mov	r0, r3
 8006ff0:	3724      	adds	r7, #36	; 0x24
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bc80      	pop	{r7}
 8006ff6:	4770      	bx	lr

08006ff8 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b084      	sub	sp, #16
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007006:	2b01      	cmp	r3, #1
 8007008:	d101      	bne.n	800700e <HAL_UARTEx_EnableFifoMode+0x16>
 800700a:	2302      	movs	r3, #2
 800700c:	e02b      	b.n	8007066 <HAL_UARTEx_EnableFifoMode+0x6e>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2201      	movs	r2, #1
 8007012:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2224      	movs	r2, #36	; 0x24
 800701a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	681a      	ldr	r2, [r3, #0]
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f022 0201 	bic.w	r2, r2, #1
 8007034:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800703c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8007044:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	68fa      	ldr	r2, [r7, #12]
 800704c:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	f000 f8ac 	bl	80071ac <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2220      	movs	r2, #32
 8007058:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2200      	movs	r2, #0
 8007060:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007064:	2300      	movs	r3, #0
}
 8007066:	4618      	mov	r0, r3
 8007068:	3710      	adds	r7, #16
 800706a:	46bd      	mov	sp, r7
 800706c:	bd80      	pop	{r7, pc}

0800706e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800706e:	b580      	push	{r7, lr}
 8007070:	b084      	sub	sp, #16
 8007072:	af00      	add	r7, sp, #0
 8007074:	6078      	str	r0, [r7, #4]
 8007076:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800707e:	2b01      	cmp	r3, #1
 8007080:	d101      	bne.n	8007086 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007082:	2302      	movs	r3, #2
 8007084:	e02d      	b.n	80070e2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2201      	movs	r2, #1
 800708a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2224      	movs	r2, #36	; 0x24
 8007092:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	681a      	ldr	r2, [r3, #0]
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f022 0201 	bic.w	r2, r2, #1
 80070ac:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	689b      	ldr	r3, [r3, #8]
 80070b4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	683a      	ldr	r2, [r7, #0]
 80070be:	430a      	orrs	r2, r1
 80070c0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	f000 f872 	bl	80071ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	68fa      	ldr	r2, [r7, #12]
 80070ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2220      	movs	r2, #32
 80070d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2200      	movs	r2, #0
 80070dc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80070e0:	2300      	movs	r3, #0
}
 80070e2:	4618      	mov	r0, r3
 80070e4:	3710      	adds	r7, #16
 80070e6:	46bd      	mov	sp, r7
 80070e8:	bd80      	pop	{r7, pc}

080070ea <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80070ea:	b580      	push	{r7, lr}
 80070ec:	b084      	sub	sp, #16
 80070ee:	af00      	add	r7, sp, #0
 80070f0:	6078      	str	r0, [r7, #4]
 80070f2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80070fa:	2b01      	cmp	r3, #1
 80070fc:	d101      	bne.n	8007102 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80070fe:	2302      	movs	r3, #2
 8007100:	e02d      	b.n	800715e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2201      	movs	r2, #1
 8007106:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2224      	movs	r2, #36	; 0x24
 800710e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	681a      	ldr	r2, [r3, #0]
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f022 0201 	bic.w	r2, r2, #1
 8007128:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	689b      	ldr	r3, [r3, #8]
 8007130:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	683a      	ldr	r2, [r7, #0]
 800713a:	430a      	orrs	r2, r1
 800713c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800713e:	6878      	ldr	r0, [r7, #4]
 8007140:	f000 f834 	bl	80071ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	68fa      	ldr	r2, [r7, #12]
 800714a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2220      	movs	r2, #32
 8007150:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2200      	movs	r2, #0
 8007158:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800715c:	2300      	movs	r3, #0
}
 800715e:	4618      	mov	r0, r3
 8007160:	3710      	adds	r7, #16
 8007162:	46bd      	mov	sp, r7
 8007164:	bd80      	pop	{r7, pc}

08007166 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8007166:	b480      	push	{r7}
 8007168:	b085      	sub	sp, #20
 800716a:	af00      	add	r7, sp, #0
 800716c:	60f8      	str	r0, [r7, #12]
 800716e:	1d3b      	adds	r3, r7, #4
 8007170:	e883 0006 	stmia.w	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	685b      	ldr	r3, [r3, #4]
 800717a:	f023 0210 	bic.w	r2, r3, #16
 800717e:	893b      	ldrh	r3, [r7, #8]
 8007180:	4619      	mov	r1, r3
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	430a      	orrs	r2, r1
 8007188:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	685b      	ldr	r3, [r3, #4]
 8007190:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
 8007194:	7abb      	ldrb	r3, [r7, #10]
 8007196:	061a      	lsls	r2, r3, #24
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	430a      	orrs	r2, r1
 800719e:	605a      	str	r2, [r3, #4]
}
 80071a0:	bf00      	nop
 80071a2:	3714      	adds	r7, #20
 80071a4:	46bd      	mov	sp, r7
 80071a6:	bc80      	pop	{r7}
 80071a8:	4770      	bx	lr
	...

080071ac <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80071ac:	b480      	push	{r7}
 80071ae:	b085      	sub	sp, #20
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d108      	bne.n	80071ce <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2201      	movs	r2, #1
 80071c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2201      	movs	r2, #1
 80071c8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80071cc:	e031      	b.n	8007232 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80071ce:	2308      	movs	r3, #8
 80071d0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80071d2:	2308      	movs	r3, #8
 80071d4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	689b      	ldr	r3, [r3, #8]
 80071dc:	0e5b      	lsrs	r3, r3, #25
 80071de:	b2db      	uxtb	r3, r3
 80071e0:	f003 0307 	and.w	r3, r3, #7
 80071e4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	689b      	ldr	r3, [r3, #8]
 80071ec:	0f5b      	lsrs	r3, r3, #29
 80071ee:	b2db      	uxtb	r3, r3
 80071f0:	f003 0307 	and.w	r3, r3, #7
 80071f4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80071f6:	7bbb      	ldrb	r3, [r7, #14]
 80071f8:	7b3a      	ldrb	r2, [r7, #12]
 80071fa:	4910      	ldr	r1, [pc, #64]	; (800723c <UARTEx_SetNbDataToProcess+0x90>)
 80071fc:	5c8a      	ldrb	r2, [r1, r2]
 80071fe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007202:	7b3a      	ldrb	r2, [r7, #12]
 8007204:	490e      	ldr	r1, [pc, #56]	; (8007240 <UARTEx_SetNbDataToProcess+0x94>)
 8007206:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007208:	fb93 f3f2 	sdiv	r3, r3, r2
 800720c:	b29a      	uxth	r2, r3
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007214:	7bfb      	ldrb	r3, [r7, #15]
 8007216:	7b7a      	ldrb	r2, [r7, #13]
 8007218:	4908      	ldr	r1, [pc, #32]	; (800723c <UARTEx_SetNbDataToProcess+0x90>)
 800721a:	5c8a      	ldrb	r2, [r1, r2]
 800721c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007220:	7b7a      	ldrb	r2, [r7, #13]
 8007222:	4907      	ldr	r1, [pc, #28]	; (8007240 <UARTEx_SetNbDataToProcess+0x94>)
 8007224:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007226:	fb93 f3f2 	sdiv	r3, r3, r2
 800722a:	b29a      	uxth	r2, r3
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007232:	bf00      	nop
 8007234:	3714      	adds	r7, #20
 8007236:	46bd      	mov	sp, r7
 8007238:	bc80      	pop	{r7}
 800723a:	4770      	bx	lr
 800723c:	0800c750 	.word	0x0800c750
 8007240:	0800c758 	.word	0x0800c758

08007244 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8007244:	b480      	push	{r7}
 8007246:	b083      	sub	sp, #12
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
 800724c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	683a      	ldr	r2, [r7, #0]
 8007252:	619a      	str	r2, [r3, #24]
}
 8007254:	bf00      	nop
 8007256:	370c      	adds	r7, #12
 8007258:	46bd      	mov	sp, r7
 800725a:	bc80      	pop	{r7}
 800725c:	4770      	bx	lr

0800725e <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800725e:	b480      	push	{r7}
 8007260:	b083      	sub	sp, #12
 8007262:	af00      	add	r7, sp, #0
 8007264:	6078      	str	r0, [r7, #4]
 8007266:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	683a      	ldr	r2, [r7, #0]
 800726c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800726e:	bf00      	nop
 8007270:	370c      	adds	r7, #12
 8007272:	46bd      	mov	sp, r7
 8007274:	bc80      	pop	{r7}
 8007276:	4770      	bx	lr

08007278 <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b084      	sub	sp, #16
 800727c:	af02      	add	r7, sp, #8
 800727e:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 8007280:	4a24      	ldr	r2, [pc, #144]	; (8007314 <RadioInit+0x9c>)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 8007286:	4b24      	ldr	r3, [pc, #144]	; (8007318 <RadioInit+0xa0>)
 8007288:	2200      	movs	r2, #0
 800728a:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 800728c:	4b22      	ldr	r3, [pc, #136]	; (8007318 <RadioInit+0xa0>)
 800728e:	2200      	movs	r2, #0
 8007290:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 8007292:	4b21      	ldr	r3, [pc, #132]	; (8007318 <RadioInit+0xa0>)
 8007294:	2200      	movs	r2, #0
 8007296:	609a      	str	r2, [r3, #8]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8007298:	4b1f      	ldr	r3, [pc, #124]	; (8007318 <RadioInit+0xa0>)
 800729a:	2200      	movs	r2, #0
 800729c:	659a      	str	r2, [r3, #88]	; 0x58
#if( RADIO_LR_FHSS_IS_ON == 1 )
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    SUBGRF_Init( RadioOnDioIrq );
 800729e:	481f      	ldr	r0, [pc, #124]	; (800731c <RadioInit+0xa4>)
 80072a0:	f001 fff6 	bl	8009290 <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    SubgRf.PublicNetwork.Current = false;
 80072a4:	4b1c      	ldr	r3, [pc, #112]	; (8007318 <RadioInit+0xa0>)
 80072a6:	2200      	movs	r2, #0
 80072a8:	735a      	strb	r2, [r3, #13]
    SubgRf.PublicNetwork.Previous = false;
 80072aa:	4b1b      	ldr	r3, [pc, #108]	; (8007318 <RadioInit+0xa0>)
 80072ac:	2200      	movs	r2, #0
 80072ae:	731a      	strb	r2, [r3, #12]

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode( );
 80072b0:	f002 fa8a 	bl	80097c8 <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 80072b4:	2100      	movs	r1, #0
 80072b6:	2000      	movs	r0, #0
 80072b8:	f002 fe56 	bl	8009f68 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 80072bc:	2204      	movs	r2, #4
 80072be:	2100      	movs	r1, #0
 80072c0:	2001      	movs	r0, #1
 80072c2:	f002 fc13 	bl	8009aec <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 80072c6:	2300      	movs	r3, #0
 80072c8:	2200      	movs	r2, #0
 80072ca:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80072ce:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80072d2:	f002 fb43 	bl	800995c <SUBGRF_SetDioIrqParams>

    RadioSleep();
 80072d6:	f000 fe9f 	bl	8008018 <RadioSleep>
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 80072da:	2300      	movs	r3, #0
 80072dc:	9300      	str	r3, [sp, #0]
 80072de:	4b10      	ldr	r3, [pc, #64]	; (8007320 <RadioInit+0xa8>)
 80072e0:	2200      	movs	r2, #0
 80072e2:	f04f 31ff 	mov.w	r1, #4294967295
 80072e6:	480f      	ldr	r0, [pc, #60]	; (8007324 <RadioInit+0xac>)
 80072e8:	f004 fad0 	bl	800b88c <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 80072ec:	2300      	movs	r3, #0
 80072ee:	9300      	str	r3, [sp, #0]
 80072f0:	4b0d      	ldr	r3, [pc, #52]	; (8007328 <RadioInit+0xb0>)
 80072f2:	2200      	movs	r2, #0
 80072f4:	f04f 31ff 	mov.w	r1, #4294967295
 80072f8:	480c      	ldr	r0, [pc, #48]	; (800732c <RadioInit+0xb4>)
 80072fa:	f004 fac7 	bl	800b88c <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 80072fe:	4809      	ldr	r0, [pc, #36]	; (8007324 <RadioInit+0xac>)
 8007300:	f004 fb68 	bl	800b9d4 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 8007304:	4809      	ldr	r0, [pc, #36]	; (800732c <RadioInit+0xb4>)
 8007306:	f004 fb65 	bl	800b9d4 <UTIL_TIMER_Stop>
}
 800730a:	bf00      	nop
 800730c:	3708      	adds	r7, #8
 800730e:	46bd      	mov	sp, r7
 8007310:	bd80      	pop	{r7, pc}
 8007312:	bf00      	nop
 8007314:	20000284 	.word	0x20000284
 8007318:	20000288 	.word	0x20000288
 800731c:	08008441 	.word	0x08008441
 8007320:	080083b1 	.word	0x080083b1
 8007324:	200002e4 	.word	0x200002e4
 8007328:	080083c5 	.word	0x080083c5
 800732c:	200002fc 	.word	0x200002fc

08007330 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 8007330:	b580      	push	{r7, lr}
 8007332:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 8007334:	f001 fff4 	bl	8009320 <SUBGRF_GetOperatingMode>
 8007338:	4603      	mov	r3, r0
 800733a:	2b07      	cmp	r3, #7
 800733c:	d00a      	beq.n	8007354 <RadioGetStatus+0x24>
 800733e:	2b07      	cmp	r3, #7
 8007340:	dc0a      	bgt.n	8007358 <RadioGetStatus+0x28>
 8007342:	2b04      	cmp	r3, #4
 8007344:	d002      	beq.n	800734c <RadioGetStatus+0x1c>
 8007346:	2b05      	cmp	r3, #5
 8007348:	d002      	beq.n	8007350 <RadioGetStatus+0x20>
 800734a:	e005      	b.n	8007358 <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 800734c:	2302      	movs	r3, #2
 800734e:	e004      	b.n	800735a <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 8007350:	2301      	movs	r3, #1
 8007352:	e002      	b.n	800735a <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 8007354:	2303      	movs	r3, #3
 8007356:	e000      	b.n	800735a <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 8007358:	2300      	movs	r3, #0
    }
}
 800735a:	4618      	mov	r0, r3
 800735c:	bd80      	pop	{r7, pc}
	...

08007360 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b082      	sub	sp, #8
 8007364:	af00      	add	r7, sp, #0
 8007366:	4603      	mov	r3, r0
 8007368:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 800736a:	4a2a      	ldr	r2, [pc, #168]	; (8007414 <RadioSetModem+0xb4>)
 800736c:	79fb      	ldrb	r3, [r7, #7]
 800736e:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem( modem );
 8007370:	79fb      	ldrb	r3, [r7, #7]
 8007372:	4618      	mov	r0, r3
 8007374:	f003 f9cb 	bl	800a70e <RFW_SetRadioModem>
    switch( modem )
 8007378:	79fb      	ldrb	r3, [r7, #7]
 800737a:	2b05      	cmp	r3, #5
 800737c:	d80e      	bhi.n	800739c <RadioSetModem+0x3c>
 800737e:	a201      	add	r2, pc, #4	; (adr r2, 8007384 <RadioSetModem+0x24>)
 8007380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007384:	080073ab 	.word	0x080073ab
 8007388:	080073b9 	.word	0x080073b9
 800738c:	0800739d 	.word	0x0800739d
 8007390:	080073df 	.word	0x080073df
 8007394:	080073ed 	.word	0x080073ed
 8007398:	080073fb 	.word	0x080073fb
    {
    default:
    case MODEM_MSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 800739c:	2003      	movs	r0, #3
 800739e:	f002 fb7f 	bl	8009aa0 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80073a2:	4b1c      	ldr	r3, [pc, #112]	; (8007414 <RadioSetModem+0xb4>)
 80073a4:	2200      	movs	r2, #0
 80073a6:	735a      	strb	r2, [r3, #13]
        break;
 80073a8:	e02f      	b.n	800740a <RadioSetModem+0xaa>
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 80073aa:	2000      	movs	r0, #0
 80073ac:	f002 fb78 	bl	8009aa0 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80073b0:	4b18      	ldr	r3, [pc, #96]	; (8007414 <RadioSetModem+0xb4>)
 80073b2:	2200      	movs	r2, #0
 80073b4:	735a      	strb	r2, [r3, #13]
        break;
 80073b6:	e028      	b.n	800740a <RadioSetModem+0xaa>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 80073b8:	2001      	movs	r0, #1
 80073ba:	f002 fb71 	bl	8009aa0 <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 80073be:	4b15      	ldr	r3, [pc, #84]	; (8007414 <RadioSetModem+0xb4>)
 80073c0:	7b5a      	ldrb	r2, [r3, #13]
 80073c2:	4b14      	ldr	r3, [pc, #80]	; (8007414 <RadioSetModem+0xb4>)
 80073c4:	7b1b      	ldrb	r3, [r3, #12]
 80073c6:	429a      	cmp	r2, r3
 80073c8:	d01e      	beq.n	8007408 <RadioSetModem+0xa8>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 80073ca:	4b12      	ldr	r3, [pc, #72]	; (8007414 <RadioSetModem+0xb4>)
 80073cc:	7b1a      	ldrb	r2, [r3, #12]
 80073ce:	4b11      	ldr	r3, [pc, #68]	; (8007414 <RadioSetModem+0xb4>)
 80073d0:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 80073d2:	4b10      	ldr	r3, [pc, #64]	; (8007414 <RadioSetModem+0xb4>)
 80073d4:	7b5b      	ldrb	r3, [r3, #13]
 80073d6:	4618      	mov	r0, r3
 80073d8:	f000 ffb4 	bl	8008344 <RadioSetPublicNetwork>
        }
        break;
 80073dc:	e014      	b.n	8007408 <RadioSetModem+0xa8>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 80073de:	2002      	movs	r0, #2
 80073e0:	f002 fb5e 	bl	8009aa0 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80073e4:	4b0b      	ldr	r3, [pc, #44]	; (8007414 <RadioSetModem+0xb4>)
 80073e6:	2200      	movs	r2, #0
 80073e8:	735a      	strb	r2, [r3, #13]
        break;
 80073ea:	e00e      	b.n	800740a <RadioSetModem+0xaa>
#if (RADIO_SIGFOX_ENABLE == 1)
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 80073ec:	2002      	movs	r0, #2
 80073ee:	f002 fb57 	bl	8009aa0 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80073f2:	4b08      	ldr	r3, [pc, #32]	; (8007414 <RadioSetModem+0xb4>)
 80073f4:	2200      	movs	r2, #0
 80073f6:	735a      	strb	r2, [r3, #13]
        break;
 80073f8:	e007      	b.n	800740a <RadioSetModem+0xaa>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 80073fa:	2000      	movs	r0, #0
 80073fc:	f002 fb50 	bl	8009aa0 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8007400:	4b04      	ldr	r3, [pc, #16]	; (8007414 <RadioSetModem+0xb4>)
 8007402:	2200      	movs	r2, #0
 8007404:	735a      	strb	r2, [r3, #13]
        break;
 8007406:	e000      	b.n	800740a <RadioSetModem+0xaa>
        break;
 8007408:	bf00      	nop
#endif /*RADIO_SIGFOX_ENABLE == 1*/
    }
}
 800740a:	bf00      	nop
 800740c:	3708      	adds	r7, #8
 800740e:	46bd      	mov	sp, r7
 8007410:	bd80      	pop	{r7, pc}
 8007412:	bf00      	nop
 8007414:	20000288 	.word	0x20000288

08007418 <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b082      	sub	sp, #8
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	f002 faf7 	bl	8009a14 <SUBGRF_SetRfFrequency>
}
 8007426:	bf00      	nop
 8007428:	3708      	adds	r7, #8
 800742a:	46bd      	mov	sp, r7
 800742c:	bd80      	pop	{r7, pc}

0800742e <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 800742e:	b580      	push	{r7, lr}
 8007430:	b090      	sub	sp, #64	; 0x40
 8007432:	af0a      	add	r7, sp, #40	; 0x28
 8007434:	60f8      	str	r0, [r7, #12]
 8007436:	60b9      	str	r1, [r7, #8]
 8007438:	603b      	str	r3, [r7, #0]
 800743a:	4613      	mov	r3, r2
 800743c:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 800743e:	2301      	movs	r3, #1
 8007440:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 8007442:	2300      	movs	r3, #0
 8007444:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 8007446:	2300      	movs	r3, #0
 8007448:	613b      	str	r3, [r7, #16]

    RadioStandby( );
 800744a:	f000 fdf8 	bl	800803e <RadioStandby>

    RadioSetModem( MODEM_FSK );
 800744e:	2000      	movs	r0, #0
 8007450:	f7ff ff86 	bl	8007360 <RadioSetModem>

    RadioSetChannel( freq );
 8007454:	68f8      	ldr	r0, [r7, #12]
 8007456:	f7ff ffdf 	bl	8007418 <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 800745a:	2301      	movs	r3, #1
 800745c:	9309      	str	r3, [sp, #36]	; 0x24
 800745e:	2300      	movs	r3, #0
 8007460:	9308      	str	r3, [sp, #32]
 8007462:	2300      	movs	r3, #0
 8007464:	9307      	str	r3, [sp, #28]
 8007466:	2300      	movs	r3, #0
 8007468:	9306      	str	r3, [sp, #24]
 800746a:	2300      	movs	r3, #0
 800746c:	9305      	str	r3, [sp, #20]
 800746e:	2300      	movs	r3, #0
 8007470:	9304      	str	r3, [sp, #16]
 8007472:	2300      	movs	r3, #0
 8007474:	9303      	str	r3, [sp, #12]
 8007476:	2300      	movs	r3, #0
 8007478:	9302      	str	r3, [sp, #8]
 800747a:	2303      	movs	r3, #3
 800747c:	9301      	str	r3, [sp, #4]
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	9300      	str	r3, [sp, #0]
 8007482:	2300      	movs	r3, #0
 8007484:	f44f 7216 	mov.w	r2, #600	; 0x258
 8007488:	68b9      	ldr	r1, [r7, #8]
 800748a:	2000      	movs	r0, #0
 800748c:	f000 f83c 	bl	8007508 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 8007490:	2000      	movs	r0, #0
 8007492:	f000 fddb 	bl	800804c <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 8007496:	f000 ff83 	bl	80083a0 <RadioGetWakeupTime>
 800749a:	4603      	mov	r3, r0
 800749c:	4618      	mov	r0, r3
 800749e:	f7f9 fb45 	bl	8000b2c <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 80074a2:	f004 fbb1 	bl	800bc08 <UTIL_TIMER_GetCurrentTime>
 80074a6:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 80074a8:	e00d      	b.n	80074c6 <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 80074aa:	2000      	movs	r0, #0
 80074ac:	f000 fec8 	bl	8008240 <RadioRssi>
 80074b0:	4603      	mov	r3, r0
 80074b2:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 80074b4:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80074b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80074bc:	429a      	cmp	r2, r3
 80074be:	dd02      	ble.n	80074c6 <RadioIsChannelFree+0x98>
        {
            status = false;
 80074c0:	2300      	movs	r3, #0
 80074c2:	75fb      	strb	r3, [r7, #23]
            break;
 80074c4:	e006      	b.n	80074d4 <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 80074c6:	6938      	ldr	r0, [r7, #16]
 80074c8:	f004 fbb0 	bl	800bc2c <UTIL_TIMER_GetElapsedTime>
 80074cc:	4602      	mov	r2, r0
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d8ea      	bhi.n	80074aa <RadioIsChannelFree+0x7c>
        }
    }
    RadioStandby( );
 80074d4:	f000 fdb3 	bl	800803e <RadioStandby>

    return status;
 80074d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80074da:	4618      	mov	r0, r3
 80074dc:	3718      	adds	r7, #24
 80074de:	46bd      	mov	sp, r7
 80074e0:	bd80      	pop	{r7, pc}

080074e2 <RadioRandom>:

static uint32_t RadioRandom( void )
{
 80074e2:	b580      	push	{r7, lr}
 80074e4:	b082      	sub	sp, #8
 80074e6:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 80074e8:	2300      	movs	r3, #0
 80074ea:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Disable modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 80074ec:	2300      	movs	r3, #0
 80074ee:	2200      	movs	r2, #0
 80074f0:	2100      	movs	r1, #0
 80074f2:	2000      	movs	r0, #0
 80074f4:	f002 fa32 	bl	800995c <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 80074f8:	f001 ffe3 	bl	80094c2 <SUBGRF_GetRandom>
 80074fc:	6078      	str	r0, [r7, #4]

    return rnd;
 80074fe:	687b      	ldr	r3, [r7, #4]
}
 8007500:	4618      	mov	r0, r3
 8007502:	3708      	adds	r7, #8
 8007504:	46bd      	mov	sp, r7
 8007506:	bd80      	pop	{r7, pc}

08007508 <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b08a      	sub	sp, #40	; 0x28
 800750c:	af00      	add	r7, sp, #0
 800750e:	60b9      	str	r1, [r7, #8]
 8007510:	607a      	str	r2, [r7, #4]
 8007512:	461a      	mov	r2, r3
 8007514:	4603      	mov	r3, r0
 8007516:	73fb      	strb	r3, [r7, #15]
 8007518:	4613      	mov	r3, r2
 800751a:	73bb      	strb	r3, [r7, #14]
#if (RADIO_SIGFOX_ENABLE == 1)
    uint8_t modReg;
#endif
    SubgRf.RxContinuous = rxContinuous;
 800751c:	4ab9      	ldr	r2, [pc, #740]	; (8007804 <RadioSetRxConfig+0x2fc>)
 800751e:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8007522:	7053      	strb	r3, [r2, #1]
    RFW_DeInit();
 8007524:	f003 f8b1 	bl	800a68a <RFW_DeInit>
    if( rxContinuous == true )
 8007528:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800752c:	2b00      	cmp	r3, #0
 800752e:	d001      	beq.n	8007534 <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 8007530:	2300      	movs	r3, #0
 8007532:	873b      	strh	r3, [r7, #56]	; 0x38
    }
    if( fixLen == true )
 8007534:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8007538:	2b00      	cmp	r3, #0
 800753a:	d004      	beq.n	8007546 <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 800753c:	4ab2      	ldr	r2, [pc, #712]	; (8007808 <RadioSetRxConfig+0x300>)
 800753e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8007542:	7013      	strb	r3, [r2, #0]
 8007544:	e002      	b.n	800754c <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 8007546:	4bb0      	ldr	r3, [pc, #704]	; (8007808 <RadioSetRxConfig+0x300>)
 8007548:	22ff      	movs	r2, #255	; 0xff
 800754a:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 800754c:	7bfb      	ldrb	r3, [r7, #15]
 800754e:	2b05      	cmp	r3, #5
 8007550:	d009      	beq.n	8007566 <RadioSetRxConfig+0x5e>
 8007552:	2b05      	cmp	r3, #5
 8007554:	f300 81d7 	bgt.w	8007906 <RadioSetRxConfig+0x3fe>
 8007558:	2b00      	cmp	r3, #0
 800755a:	f000 80bf 	beq.w	80076dc <RadioSetRxConfig+0x1d4>
 800755e:	2b01      	cmp	r3, #1
 8007560:	f000 8124 	beq.w	80077ac <RadioSetRxConfig+0x2a4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 8007564:	e1cf      	b.n	8007906 <RadioSetRxConfig+0x3fe>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 8007566:	2001      	movs	r0, #1
 8007568:	f002 f8f0 	bl	800974c <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800756c:	4ba5      	ldr	r3, [pc, #660]	; (8007804 <RadioSetRxConfig+0x2fc>)
 800756e:	2200      	movs	r2, #0
 8007570:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8007574:	4aa3      	ldr	r2, [pc, #652]	; (8007804 <RadioSetRxConfig+0x2fc>)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 800757a:	4ba2      	ldr	r3, [pc, #648]	; (8007804 <RadioSetRxConfig+0x2fc>)
 800757c:	2209      	movs	r2, #9
 800757e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 8007582:	4ba0      	ldr	r3, [pc, #640]	; (8007804 <RadioSetRxConfig+0x2fc>)
 8007584:	f44f 7248 	mov.w	r2, #800	; 0x320
 8007588:	641a      	str	r2, [r3, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 800758a:	68b8      	ldr	r0, [r7, #8]
 800758c:	f002 ffb0 	bl	800a4f0 <SUBGRF_GetFskBandwidthRegValue>
 8007590:	4603      	mov	r3, r0
 8007592:	461a      	mov	r2, r3
 8007594:	4b9b      	ldr	r3, [pc, #620]	; (8007804 <RadioSetRxConfig+0x2fc>)
 8007596:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800759a:	4b9a      	ldr	r3, [pc, #616]	; (8007804 <RadioSetRxConfig+0x2fc>)
 800759c:	2200      	movs	r2, #0
 800759e:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 80075a0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80075a2:	00db      	lsls	r3, r3, #3
 80075a4:	b29a      	uxth	r2, r3
 80075a6:	4b97      	ldr	r3, [pc, #604]	; (8007804 <RadioSetRxConfig+0x2fc>)
 80075a8:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 80075aa:	4b96      	ldr	r3, [pc, #600]	; (8007804 <RadioSetRxConfig+0x2fc>)
 80075ac:	2200      	movs	r2, #0
 80075ae:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 80075b0:	4b94      	ldr	r3, [pc, #592]	; (8007804 <RadioSetRxConfig+0x2fc>)
 80075b2:	2210      	movs	r2, #16
 80075b4:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80075b6:	4b93      	ldr	r3, [pc, #588]	; (8007804 <RadioSetRxConfig+0x2fc>)
 80075b8:	2200      	movs	r2, #0
 80075ba:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 80075bc:	4b91      	ldr	r3, [pc, #580]	; (8007804 <RadioSetRxConfig+0x2fc>)
 80075be:	2200      	movs	r2, #0
 80075c0:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 80075c2:	4b91      	ldr	r3, [pc, #580]	; (8007808 <RadioSetRxConfig+0x300>)
 80075c4:	781a      	ldrb	r2, [r3, #0]
 80075c6:	4b8f      	ldr	r3, [pc, #572]	; (8007804 <RadioSetRxConfig+0x2fc>)
 80075c8:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80075ca:	4b8e      	ldr	r3, [pc, #568]	; (8007804 <RadioSetRxConfig+0x2fc>)
 80075cc:	2201      	movs	r2, #1
 80075ce:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 80075d0:	4b8c      	ldr	r3, [pc, #560]	; (8007804 <RadioSetRxConfig+0x2fc>)
 80075d2:	2200      	movs	r2, #0
 80075d4:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 80075d6:	2005      	movs	r0, #5
 80075d8:	f7ff fec2 	bl	8007360 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80075dc:	488b      	ldr	r0, [pc, #556]	; (800780c <RadioSetRxConfig+0x304>)
 80075de:	f002 fb53 	bl	8009c88 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80075e2:	488b      	ldr	r0, [pc, #556]	; (8007810 <RadioSetRxConfig+0x308>)
 80075e4:	f002 fc22 	bl	8009e2c <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80075e8:	4a8a      	ldr	r2, [pc, #552]	; (8007814 <RadioSetRxConfig+0x30c>)
 80075ea:	f107 031c 	add.w	r3, r7, #28
 80075ee:	e892 0003 	ldmia.w	r2, {r0, r1}
 80075f2:	e883 0003 	stmia.w	r3, {r0, r1}
 80075f6:	f107 031c 	add.w	r3, r7, #28
 80075fa:	4618      	mov	r0, r3
 80075fc:	f001 fedf 	bl	80093be <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8007600:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007604:	f001 ff2a 	bl	800945c <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 8007608:	f640 00b8 	movw	r0, #2232	; 0x8b8
 800760c:	f000 fe37 	bl	800827e <RadioRead>
 8007610:	4603      	mov	r3, r0
 8007612:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=RADIO_BIT_MASK(4);
 8007616:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800761a:	f023 0310 	bic.w	r3, r3, #16
 800761e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 8007622:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007626:	4619      	mov	r1, r3
 8007628:	f640 00b8 	movw	r0, #2232	; 0x8b8
 800762c:	f000 fe15 	bl	800825a <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 8007630:	2104      	movs	r1, #4
 8007632:	f640 00b9 	movw	r0, #2233	; 0x8b9
 8007636:	f000 fe10 	bl	800825a <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 800763a:	f640 009b 	movw	r0, #2203	; 0x89b
 800763e:	f000 fe1e 	bl	800827e <RadioRead>
 8007642:	4603      	mov	r3, r0
 8007644:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8007648:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800764c:	f023 031c 	bic.w	r3, r3, #28
 8007650:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 8007654:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007658:	f043 0308 	orr.w	r3, r3, #8
 800765c:	b2db      	uxtb	r3, r3
 800765e:	4619      	mov	r1, r3
 8007660:	f640 009b 	movw	r0, #2203	; 0x89b
 8007664:	f000 fdf9 	bl	800825a <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 8007668:	f240 60d1 	movw	r0, #1745	; 0x6d1
 800766c:	f000 fe07 	bl	800827e <RadioRead>
 8007670:	4603      	mov	r3, r0
 8007672:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8007676:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800767a:	f023 0318 	bic.w	r3, r3, #24
 800767e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 8007682:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007686:	f043 0318 	orr.w	r3, r3, #24
 800768a:	b2db      	uxtb	r3, r3
 800768c:	4619      	mov	r1, r3
 800768e:	f240 60d1 	movw	r0, #1745	; 0x6d1
 8007692:	f000 fde2 	bl	800825a <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 8007696:	f240 60ac 	movw	r0, #1708	; 0x6ac
 800769a:	f000 fdf0 	bl	800827e <RadioRead>
 800769e:	4603      	mov	r3, r0
 80076a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 80076a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80076a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 80076b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80076b4:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 80076b8:	b2db      	uxtb	r3, r3
 80076ba:	4619      	mov	r1, r3
 80076bc:	f240 60ac 	movw	r0, #1708	; 0x6ac
 80076c0:	f000 fdcb 	bl	800825a <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 80076c4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80076c6:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80076ca:	fb02 f303 	mul.w	r3, r2, r3
 80076ce:	461a      	mov	r2, r3
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80076d6:	4a4b      	ldr	r2, [pc, #300]	; (8007804 <RadioSetRxConfig+0x2fc>)
 80076d8:	6093      	str	r3, [r2, #8]
            break;
 80076da:	e115      	b.n	8007908 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 80076dc:	2000      	movs	r0, #0
 80076de:	f002 f835 	bl	800974c <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80076e2:	4b48      	ldr	r3, [pc, #288]	; (8007804 <RadioSetRxConfig+0x2fc>)
 80076e4:	2200      	movs	r2, #0
 80076e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 80076ea:	4a46      	ldr	r2, [pc, #280]	; (8007804 <RadioSetRxConfig+0x2fc>)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 80076f0:	4b44      	ldr	r3, [pc, #272]	; (8007804 <RadioSetRxConfig+0x2fc>)
 80076f2:	220b      	movs	r2, #11
 80076f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 80076f8:	68b8      	ldr	r0, [r7, #8]
 80076fa:	f002 fef9 	bl	800a4f0 <SUBGRF_GetFskBandwidthRegValue>
 80076fe:	4603      	mov	r3, r0
 8007700:	461a      	mov	r2, r3
 8007702:	4b40      	ldr	r3, [pc, #256]	; (8007804 <RadioSetRxConfig+0x2fc>)
 8007704:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8007708:	4b3e      	ldr	r3, [pc, #248]	; (8007804 <RadioSetRxConfig+0x2fc>)
 800770a:	2200      	movs	r2, #0
 800770c:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 800770e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007710:	00db      	lsls	r3, r3, #3
 8007712:	b29a      	uxth	r2, r3
 8007714:	4b3b      	ldr	r3, [pc, #236]	; (8007804 <RadioSetRxConfig+0x2fc>)
 8007716:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8007718:	4b3a      	ldr	r3, [pc, #232]	; (8007804 <RadioSetRxConfig+0x2fc>)
 800771a:	2204      	movs	r2, #4
 800771c:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 800771e:	4b39      	ldr	r3, [pc, #228]	; (8007804 <RadioSetRxConfig+0x2fc>)
 8007720:	2218      	movs	r2, #24
 8007722:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8007724:	4b37      	ldr	r3, [pc, #220]	; (8007804 <RadioSetRxConfig+0x2fc>)
 8007726:	2200      	movs	r2, #0
 8007728:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 800772a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800772e:	f083 0301 	eor.w	r3, r3, #1
 8007732:	b2db      	uxtb	r3, r3
 8007734:	461a      	mov	r2, r3
 8007736:	4b33      	ldr	r3, [pc, #204]	; (8007804 <RadioSetRxConfig+0x2fc>)
 8007738:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 800773a:	4b33      	ldr	r3, [pc, #204]	; (8007808 <RadioSetRxConfig+0x300>)
 800773c:	781a      	ldrb	r2, [r3, #0]
 800773e:	4b31      	ldr	r3, [pc, #196]	; (8007804 <RadioSetRxConfig+0x2fc>)
 8007740:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 8007742:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8007746:	2b00      	cmp	r3, #0
 8007748:	d003      	beq.n	8007752 <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 800774a:	4b2e      	ldr	r3, [pc, #184]	; (8007804 <RadioSetRxConfig+0x2fc>)
 800774c:	22f2      	movs	r2, #242	; 0xf2
 800774e:	75da      	strb	r2, [r3, #23]
 8007750:	e002      	b.n	8007758 <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8007752:	4b2c      	ldr	r3, [pc, #176]	; (8007804 <RadioSetRxConfig+0x2fc>)
 8007754:	2201      	movs	r2, #1
 8007756:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8007758:	4b2a      	ldr	r3, [pc, #168]	; (8007804 <RadioSetRxConfig+0x2fc>)
 800775a:	2201      	movs	r2, #1
 800775c:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 800775e:	f000 fc6e 	bl	800803e <RadioStandby>
            RadioSetModem( MODEM_FSK );
 8007762:	2000      	movs	r0, #0
 8007764:	f7ff fdfc 	bl	8007360 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8007768:	4828      	ldr	r0, [pc, #160]	; (800780c <RadioSetRxConfig+0x304>)
 800776a:	f002 fa8d 	bl	8009c88 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800776e:	4828      	ldr	r0, [pc, #160]	; (8007810 <RadioSetRxConfig+0x308>)
 8007770:	f002 fb5c 	bl	8009e2c <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8007774:	4a28      	ldr	r2, [pc, #160]	; (8007818 <RadioSetRxConfig+0x310>)
 8007776:	f107 0314 	add.w	r3, r7, #20
 800777a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800777e:	e883 0003 	stmia.w	r3, {r0, r1}
 8007782:	f107 0314 	add.w	r3, r7, #20
 8007786:	4618      	mov	r0, r3
 8007788:	f001 fe19 	bl	80093be <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 800778c:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007790:	f001 fe64 	bl	800945c <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8007794:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007796:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800779a:	fb02 f303 	mul.w	r3, r2, r3
 800779e:	461a      	mov	r2, r3
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80077a6:	4a17      	ldr	r2, [pc, #92]	; (8007804 <RadioSetRxConfig+0x2fc>)
 80077a8:	6093      	str	r3, [r2, #8]
            break;
 80077aa:	e0ad      	b.n	8007908 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 80077ac:	2000      	movs	r0, #0
 80077ae:	f001 ffcd 	bl	800974c <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80077b2:	4b14      	ldr	r3, [pc, #80]	; (8007804 <RadioSetRxConfig+0x2fc>)
 80077b4:	2201      	movs	r2, #1
 80077b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	b2da      	uxtb	r2, r3
 80077be:	4b11      	ldr	r3, [pc, #68]	; (8007804 <RadioSetRxConfig+0x2fc>)
 80077c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 80077c4:	4a15      	ldr	r2, [pc, #84]	; (800781c <RadioSetRxConfig+0x314>)
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	4413      	add	r3, r2
 80077ca:	781a      	ldrb	r2, [r3, #0]
 80077cc:	4b0d      	ldr	r3, [pc, #52]	; (8007804 <RadioSetRxConfig+0x2fc>)
 80077ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 80077d2:	4a0c      	ldr	r2, [pc, #48]	; (8007804 <RadioSetRxConfig+0x2fc>)
 80077d4:	7bbb      	ldrb	r3, [r7, #14]
 80077d6:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80077da:	68bb      	ldr	r3, [r7, #8]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d105      	bne.n	80077ec <RadioSetRxConfig+0x2e4>
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2b0b      	cmp	r3, #11
 80077e4:	d008      	beq.n	80077f8 <RadioSetRxConfig+0x2f0>
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2b0c      	cmp	r3, #12
 80077ea:	d005      	beq.n	80077f8 <RadioSetRxConfig+0x2f0>
 80077ec:	68bb      	ldr	r3, [r7, #8]
 80077ee:	2b01      	cmp	r3, #1
 80077f0:	d116      	bne.n	8007820 <RadioSetRxConfig+0x318>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2b0c      	cmp	r3, #12
 80077f6:	d113      	bne.n	8007820 <RadioSetRxConfig+0x318>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 80077f8:	4b02      	ldr	r3, [pc, #8]	; (8007804 <RadioSetRxConfig+0x2fc>)
 80077fa:	2201      	movs	r2, #1
 80077fc:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8007800:	e012      	b.n	8007828 <RadioSetRxConfig+0x320>
 8007802:	bf00      	nop
 8007804:	20000288 	.word	0x20000288
 8007808:	20000008 	.word	0x20000008
 800780c:	200002c0 	.word	0x200002c0
 8007810:	20000296 	.word	0x20000296
 8007814:	0800c38c 	.word	0x0800c38c
 8007818:	0800c394 	.word	0x0800c394
 800781c:	0800c7ec 	.word	0x0800c7ec
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8007820:	4b3b      	ldr	r3, [pc, #236]	; (8007910 <RadioSetRxConfig+0x408>)
 8007822:	2200      	movs	r2, #0
 8007824:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8007828:	4b39      	ldr	r3, [pc, #228]	; (8007910 <RadioSetRxConfig+0x408>)
 800782a:	2201      	movs	r2, #1
 800782c:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800782e:	4b38      	ldr	r3, [pc, #224]	; (8007910 <RadioSetRxConfig+0x408>)
 8007830:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007834:	2b05      	cmp	r3, #5
 8007836:	d004      	beq.n	8007842 <RadioSetRxConfig+0x33a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8007838:	4b35      	ldr	r3, [pc, #212]	; (8007910 <RadioSetRxConfig+0x408>)
 800783a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800783e:	2b06      	cmp	r3, #6
 8007840:	d10a      	bne.n	8007858 <RadioSetRxConfig+0x350>
                if( preambleLen < 12 )
 8007842:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007844:	2b0b      	cmp	r3, #11
 8007846:	d803      	bhi.n	8007850 <RadioSetRxConfig+0x348>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8007848:	4b31      	ldr	r3, [pc, #196]	; (8007910 <RadioSetRxConfig+0x408>)
 800784a:	220c      	movs	r2, #12
 800784c:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 800784e:	e006      	b.n	800785e <RadioSetRxConfig+0x356>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8007850:	4a2f      	ldr	r2, [pc, #188]	; (8007910 <RadioSetRxConfig+0x408>)
 8007852:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007854:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8007856:	e002      	b.n	800785e <RadioSetRxConfig+0x356>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8007858:	4a2d      	ldr	r2, [pc, #180]	; (8007910 <RadioSetRxConfig+0x408>)
 800785a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800785c:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 800785e:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8007862:	4b2b      	ldr	r3, [pc, #172]	; (8007910 <RadioSetRxConfig+0x408>)
 8007864:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8007866:	4b2b      	ldr	r3, [pc, #172]	; (8007914 <RadioSetRxConfig+0x40c>)
 8007868:	781a      	ldrb	r2, [r3, #0]
 800786a:	4b29      	ldr	r3, [pc, #164]	; (8007910 <RadioSetRxConfig+0x408>)
 800786c:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 800786e:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8007872:	4b27      	ldr	r3, [pc, #156]	; (8007910 <RadioSetRxConfig+0x408>)
 8007874:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8007878:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800787c:	4b24      	ldr	r3, [pc, #144]	; (8007910 <RadioSetRxConfig+0x408>)
 800787e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 8007882:	f000 fbdc 	bl	800803e <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8007886:	2001      	movs	r0, #1
 8007888:	f7ff fd6a 	bl	8007360 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800788c:	4822      	ldr	r0, [pc, #136]	; (8007918 <RadioSetRxConfig+0x410>)
 800788e:	f002 f9fb 	bl	8009c88 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007892:	4822      	ldr	r0, [pc, #136]	; (800791c <RadioSetRxConfig+0x414>)
 8007894:	f002 faca 	bl	8009e2c <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8007898:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800789a:	b2db      	uxtb	r3, r3
 800789c:	4618      	mov	r0, r3
 800789e:	f001 ff64 	bl	800976a <SUBGRF_SetLoRaSymbNumTimeout>
            SUBGRF_WriteRegister(SUBGHZ_AGCCFG,SUBGRF_ReadRegister(SUBGHZ_AGCCFG)&0x1);
 80078a2:	f640 00a3 	movw	r0, #2211	; 0x8a3
 80078a6:	f002 fc1d 	bl	800a0e4 <SUBGRF_ReadRegister>
 80078aa:	4603      	mov	r3, r0
 80078ac:	f003 0301 	and.w	r3, r3, #1
 80078b0:	b2db      	uxtb	r3, r3
 80078b2:	4619      	mov	r1, r3
 80078b4:	f640 00a3 	movw	r0, #2211	; 0x8a3
 80078b8:	f002 fc00 	bl	800a0bc <SUBGRF_WriteRegister>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 80078bc:	4b14      	ldr	r3, [pc, #80]	; (8007910 <RadioSetRxConfig+0x408>)
 80078be:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80078c2:	2b01      	cmp	r3, #1
 80078c4:	d10d      	bne.n	80078e2 <RadioSetRxConfig+0x3da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 80078c6:	f240 7036 	movw	r0, #1846	; 0x736
 80078ca:	f002 fc0b 	bl	800a0e4 <SUBGRF_ReadRegister>
 80078ce:	4603      	mov	r3, r0
 80078d0:	f023 0304 	bic.w	r3, r3, #4
 80078d4:	b2db      	uxtb	r3, r3
 80078d6:	4619      	mov	r1, r3
 80078d8:	f240 7036 	movw	r0, #1846	; 0x736
 80078dc:	f002 fbee 	bl	800a0bc <SUBGRF_WriteRegister>
 80078e0:	e00c      	b.n	80078fc <RadioSetRxConfig+0x3f4>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 80078e2:	f240 7036 	movw	r0, #1846	; 0x736
 80078e6:	f002 fbfd 	bl	800a0e4 <SUBGRF_ReadRegister>
 80078ea:	4603      	mov	r3, r0
 80078ec:	f043 0304 	orr.w	r3, r3, #4
 80078f0:	b2db      	uxtb	r3, r3
 80078f2:	4619      	mov	r1, r3
 80078f4:	f240 7036 	movw	r0, #1846	; 0x736
 80078f8:	f002 fbe0 	bl	800a0bc <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 80078fc:	4b04      	ldr	r3, [pc, #16]	; (8007910 <RadioSetRxConfig+0x408>)
 80078fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007902:	609a      	str	r2, [r3, #8]
            break;
 8007904:	e000      	b.n	8007908 <RadioSetRxConfig+0x400>
            break;
 8007906:	bf00      	nop
    }
}
 8007908:	bf00      	nop
 800790a:	3728      	adds	r7, #40	; 0x28
 800790c:	46bd      	mov	sp, r7
 800790e:	bd80      	pop	{r7, pc}
 8007910:	20000288 	.word	0x20000288
 8007914:	20000008 	.word	0x20000008
 8007918:	200002c0 	.word	0x200002c0
 800791c:	20000296 	.word	0x20000296

08007920 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b086      	sub	sp, #24
 8007924:	af00      	add	r7, sp, #0
 8007926:	60ba      	str	r2, [r7, #8]
 8007928:	607b      	str	r3, [r7, #4]
 800792a:	4603      	mov	r3, r0
 800792c:	73fb      	strb	r3, [r7, #15]
 800792e:	460b      	mov	r3, r1
 8007930:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    RFW_DeInit();
 8007932:	f002 feaa 	bl	800a68a <RFW_DeInit>
    switch( modem )
 8007936:	7bfb      	ldrb	r3, [r7, #15]
 8007938:	2b04      	cmp	r3, #4
 800793a:	f000 80c7 	beq.w	8007acc <RadioSetTxConfig+0x1ac>
 800793e:	2b04      	cmp	r3, #4
 8007940:	f300 80d6 	bgt.w	8007af0 <RadioSetTxConfig+0x1d0>
 8007944:	2b00      	cmp	r3, #0
 8007946:	d002      	beq.n	800794e <RadioSetTxConfig+0x2e>
 8007948:	2b01      	cmp	r3, #1
 800794a:	d059      	beq.n	8007a00 <RadioSetTxConfig+0xe0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 800794c:	e0d0      	b.n	8007af0 <RadioSetTxConfig+0x1d0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800794e:	4b77      	ldr	r3, [pc, #476]	; (8007b2c <RadioSetTxConfig+0x20c>)
 8007950:	2200      	movs	r2, #0
 8007952:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8007956:	4a75      	ldr	r2, [pc, #468]	; (8007b2c <RadioSetTxConfig+0x20c>)
 8007958:	6a3b      	ldr	r3, [r7, #32]
 800795a:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 800795c:	4b73      	ldr	r3, [pc, #460]	; (8007b2c <RadioSetTxConfig+0x20c>)
 800795e:	220b      	movs	r2, #11
 8007960:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8007964:	6878      	ldr	r0, [r7, #4]
 8007966:	f002 fdc3 	bl	800a4f0 <SUBGRF_GetFskBandwidthRegValue>
 800796a:	4603      	mov	r3, r0
 800796c:	461a      	mov	r2, r3
 800796e:	4b6f      	ldr	r3, [pc, #444]	; (8007b2c <RadioSetTxConfig+0x20c>)
 8007970:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 8007974:	4a6d      	ldr	r2, [pc, #436]	; (8007b2c <RadioSetTxConfig+0x20c>)
 8007976:	68bb      	ldr	r3, [r7, #8]
 8007978:	6413      	str	r3, [r2, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800797a:	4b6c      	ldr	r3, [pc, #432]	; (8007b2c <RadioSetTxConfig+0x20c>)
 800797c:	2200      	movs	r2, #0
 800797e:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8007980:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007982:	00db      	lsls	r3, r3, #3
 8007984:	b29a      	uxth	r2, r3
 8007986:	4b69      	ldr	r3, [pc, #420]	; (8007b2c <RadioSetTxConfig+0x20c>)
 8007988:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 800798a:	4b68      	ldr	r3, [pc, #416]	; (8007b2c <RadioSetTxConfig+0x20c>)
 800798c:	2204      	movs	r2, #4
 800798e:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 8007990:	4b66      	ldr	r3, [pc, #408]	; (8007b2c <RadioSetTxConfig+0x20c>)
 8007992:	2218      	movs	r2, #24
 8007994:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8007996:	4b65      	ldr	r3, [pc, #404]	; (8007b2c <RadioSetTxConfig+0x20c>)
 8007998:	2200      	movs	r2, #0
 800799a:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 800799c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80079a0:	f083 0301 	eor.w	r3, r3, #1
 80079a4:	b2db      	uxtb	r3, r3
 80079a6:	461a      	mov	r2, r3
 80079a8:	4b60      	ldr	r3, [pc, #384]	; (8007b2c <RadioSetTxConfig+0x20c>)
 80079aa:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 80079ac:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d003      	beq.n	80079bc <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 80079b4:	4b5d      	ldr	r3, [pc, #372]	; (8007b2c <RadioSetTxConfig+0x20c>)
 80079b6:	22f2      	movs	r2, #242	; 0xf2
 80079b8:	75da      	strb	r2, [r3, #23]
 80079ba:	e002      	b.n	80079c2 <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80079bc:	4b5b      	ldr	r3, [pc, #364]	; (8007b2c <RadioSetTxConfig+0x20c>)
 80079be:	2201      	movs	r2, #1
 80079c0:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 80079c2:	4b5a      	ldr	r3, [pc, #360]	; (8007b2c <RadioSetTxConfig+0x20c>)
 80079c4:	2201      	movs	r2, #1
 80079c6:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 80079c8:	f000 fb39 	bl	800803e <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 80079cc:	2000      	movs	r0, #0
 80079ce:	f7ff fcc7 	bl	8007360 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80079d2:	4857      	ldr	r0, [pc, #348]	; (8007b30 <RadioSetTxConfig+0x210>)
 80079d4:	f002 f958 	bl	8009c88 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80079d8:	4856      	ldr	r0, [pc, #344]	; (8007b34 <RadioSetTxConfig+0x214>)
 80079da:	f002 fa27 	bl	8009e2c <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80079de:	4a56      	ldr	r2, [pc, #344]	; (8007b38 <RadioSetTxConfig+0x218>)
 80079e0:	f107 0310 	add.w	r3, r7, #16
 80079e4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80079e8:	e883 0003 	stmia.w	r3, {r0, r1}
 80079ec:	f107 0310 	add.w	r3, r7, #16
 80079f0:	4618      	mov	r0, r3
 80079f2:	f001 fce4 	bl	80093be <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 80079f6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80079fa:	f001 fd2f 	bl	800945c <SUBGRF_SetWhiteningSeed>
            break;
 80079fe:	e078      	b.n	8007af2 <RadioSetTxConfig+0x1d2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8007a00:	4b4a      	ldr	r3, [pc, #296]	; (8007b2c <RadioSetTxConfig+0x20c>)
 8007a02:	2201      	movs	r2, #1
 8007a04:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 8007a08:	6a3b      	ldr	r3, [r7, #32]
 8007a0a:	b2da      	uxtb	r2, r3
 8007a0c:	4b47      	ldr	r3, [pc, #284]	; (8007b2c <RadioSetTxConfig+0x20c>)
 8007a0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 8007a12:	4a4a      	ldr	r2, [pc, #296]	; (8007b3c <RadioSetTxConfig+0x21c>)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	4413      	add	r3, r2
 8007a18:	781a      	ldrb	r2, [r3, #0]
 8007a1a:	4b44      	ldr	r3, [pc, #272]	; (8007b2c <RadioSetTxConfig+0x20c>)
 8007a1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 8007a20:	4a42      	ldr	r2, [pc, #264]	; (8007b2c <RadioSetTxConfig+0x20c>)
 8007a22:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007a26:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d105      	bne.n	8007a3c <RadioSetTxConfig+0x11c>
 8007a30:	6a3b      	ldr	r3, [r7, #32]
 8007a32:	2b0b      	cmp	r3, #11
 8007a34:	d008      	beq.n	8007a48 <RadioSetTxConfig+0x128>
 8007a36:	6a3b      	ldr	r3, [r7, #32]
 8007a38:	2b0c      	cmp	r3, #12
 8007a3a:	d005      	beq.n	8007a48 <RadioSetTxConfig+0x128>
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2b01      	cmp	r3, #1
 8007a40:	d107      	bne.n	8007a52 <RadioSetTxConfig+0x132>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8007a42:	6a3b      	ldr	r3, [r7, #32]
 8007a44:	2b0c      	cmp	r3, #12
 8007a46:	d104      	bne.n	8007a52 <RadioSetTxConfig+0x132>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8007a48:	4b38      	ldr	r3, [pc, #224]	; (8007b2c <RadioSetTxConfig+0x20c>)
 8007a4a:	2201      	movs	r2, #1
 8007a4c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8007a50:	e003      	b.n	8007a5a <RadioSetTxConfig+0x13a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8007a52:	4b36      	ldr	r3, [pc, #216]	; (8007b2c <RadioSetTxConfig+0x20c>)
 8007a54:	2200      	movs	r2, #0
 8007a56:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8007a5a:	4b34      	ldr	r3, [pc, #208]	; (8007b2c <RadioSetTxConfig+0x20c>)
 8007a5c:	2201      	movs	r2, #1
 8007a5e:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8007a60:	4b32      	ldr	r3, [pc, #200]	; (8007b2c <RadioSetTxConfig+0x20c>)
 8007a62:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007a66:	2b05      	cmp	r3, #5
 8007a68:	d004      	beq.n	8007a74 <RadioSetTxConfig+0x154>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8007a6a:	4b30      	ldr	r3, [pc, #192]	; (8007b2c <RadioSetTxConfig+0x20c>)
 8007a6c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8007a70:	2b06      	cmp	r3, #6
 8007a72:	d10a      	bne.n	8007a8a <RadioSetTxConfig+0x16a>
                if( preambleLen < 12 )
 8007a74:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007a76:	2b0b      	cmp	r3, #11
 8007a78:	d803      	bhi.n	8007a82 <RadioSetTxConfig+0x162>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8007a7a:	4b2c      	ldr	r3, [pc, #176]	; (8007b2c <RadioSetTxConfig+0x20c>)
 8007a7c:	220c      	movs	r2, #12
 8007a7e:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8007a80:	e006      	b.n	8007a90 <RadioSetTxConfig+0x170>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8007a82:	4a2a      	ldr	r2, [pc, #168]	; (8007b2c <RadioSetTxConfig+0x20c>)
 8007a84:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007a86:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8007a88:	e002      	b.n	8007a90 <RadioSetTxConfig+0x170>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8007a8a:	4a28      	ldr	r2, [pc, #160]	; (8007b2c <RadioSetTxConfig+0x20c>)
 8007a8c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007a8e:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8007a90:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8007a94:	4b25      	ldr	r3, [pc, #148]	; (8007b2c <RadioSetTxConfig+0x20c>)
 8007a96:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8007a98:	4b29      	ldr	r3, [pc, #164]	; (8007b40 <RadioSetTxConfig+0x220>)
 8007a9a:	781a      	ldrb	r2, [r3, #0]
 8007a9c:	4b23      	ldr	r3, [pc, #140]	; (8007b2c <RadioSetTxConfig+0x20c>)
 8007a9e:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8007aa0:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8007aa4:	4b21      	ldr	r3, [pc, #132]	; (8007b2c <RadioSetTxConfig+0x20c>)
 8007aa6:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8007aaa:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8007aae:	4b1f      	ldr	r3, [pc, #124]	; (8007b2c <RadioSetTxConfig+0x20c>)
 8007ab0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 8007ab4:	f000 fac3 	bl	800803e <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8007ab8:	2001      	movs	r0, #1
 8007aba:	f7ff fc51 	bl	8007360 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8007abe:	481c      	ldr	r0, [pc, #112]	; (8007b30 <RadioSetTxConfig+0x210>)
 8007ac0:	f002 f8e2 	bl	8009c88 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007ac4:	481b      	ldr	r0, [pc, #108]	; (8007b34 <RadioSetTxConfig+0x214>)
 8007ac6:	f002 f9b1 	bl	8009e2c <SUBGRF_SetPacketParams>
            break;
 8007aca:	e012      	b.n	8007af2 <RadioSetTxConfig+0x1d2>
            RadioSetModem(MODEM_SIGFOX_TX);
 8007acc:	2004      	movs	r0, #4
 8007ace:	f7ff fc47 	bl	8007360 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8007ad2:	4b16      	ldr	r3, [pc, #88]	; (8007b2c <RadioSetTxConfig+0x20c>)
 8007ad4:	2202      	movs	r2, #2
 8007ad6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 8007ada:	4a14      	ldr	r2, [pc, #80]	; (8007b2c <RadioSetTxConfig+0x20c>)
 8007adc:	6a3b      	ldr	r3, [r7, #32]
 8007ade:	6493      	str	r3, [r2, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8007ae0:	4b12      	ldr	r3, [pc, #72]	; (8007b2c <RadioSetTxConfig+0x20c>)
 8007ae2:	2216      	movs	r2, #22
 8007ae4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8007ae8:	4811      	ldr	r0, [pc, #68]	; (8007b30 <RadioSetTxConfig+0x210>)
 8007aea:	f002 f8cd 	bl	8009c88 <SUBGRF_SetModulationParams>
            break;
 8007aee:	e000      	b.n	8007af2 <RadioSetTxConfig+0x1d2>
            break;
 8007af0:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8007af2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007af6:	4618      	mov	r0, r3
 8007af8:	f002 fbfc 	bl	800a2f4 <SUBGRF_SetRfTxPower>
 8007afc:	4603      	mov	r3, r0
 8007afe:	461a      	mov	r2, r3
 8007b00:	4b0a      	ldr	r3, [pc, #40]	; (8007b2c <RadioSetTxConfig+0x20c>)
 8007b02:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8007b06:	210e      	movs	r1, #14
 8007b08:	f640 101f 	movw	r0, #2335	; 0x91f
 8007b0c:	f002 fad6 	bl	800a0bc <SUBGRF_WriteRegister>
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 8007b10:	4b06      	ldr	r3, [pc, #24]	; (8007b2c <RadioSetTxConfig+0x20c>)
 8007b12:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8007b16:	4618      	mov	r0, r3
 8007b18:	f002 fdcb 	bl	800a6b2 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8007b1c:	4a03      	ldr	r2, [pc, #12]	; (8007b2c <RadioSetTxConfig+0x20c>)
 8007b1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b20:	6053      	str	r3, [r2, #4]
}
 8007b22:	bf00      	nop
 8007b24:	3718      	adds	r7, #24
 8007b26:	46bd      	mov	sp, r7
 8007b28:	bd80      	pop	{r7, pc}
 8007b2a:	bf00      	nop
 8007b2c:	20000288 	.word	0x20000288
 8007b30:	200002c0 	.word	0x200002c0
 8007b34:	20000296 	.word	0x20000296
 8007b38:	0800c394 	.word	0x0800c394
 8007b3c:	0800c7ec 	.word	0x0800c7ec
 8007b40:	20000008 	.word	0x20000008

08007b44 <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 8007b44:	b480      	push	{r7}
 8007b46:	b083      	sub	sp, #12
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
    return true;
 8007b4c:	2301      	movs	r3, #1
}
 8007b4e:	4618      	mov	r0, r3
 8007b50:	370c      	adds	r7, #12
 8007b52:	46bd      	mov	sp, r7
 8007b54:	bc80      	pop	{r7}
 8007b56:	4770      	bx	lr

08007b58 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 8007b58:	b480      	push	{r7}
 8007b5a:	b085      	sub	sp, #20
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	4603      	mov	r3, r0
 8007b60:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 8007b62:	2300      	movs	r3, #0
 8007b64:	60fb      	str	r3, [r7, #12]

    switch( bw )
 8007b66:	79fb      	ldrb	r3, [r7, #7]
 8007b68:	2b0a      	cmp	r3, #10
 8007b6a:	d83e      	bhi.n	8007bea <RadioGetLoRaBandwidthInHz+0x92>
 8007b6c:	a201      	add	r2, pc, #4	; (adr r2, 8007b74 <RadioGetLoRaBandwidthInHz+0x1c>)
 8007b6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b72:	bf00      	nop
 8007b74:	08007ba1 	.word	0x08007ba1
 8007b78:	08007bb1 	.word	0x08007bb1
 8007b7c:	08007bc1 	.word	0x08007bc1
 8007b80:	08007bd1 	.word	0x08007bd1
 8007b84:	08007bd9 	.word	0x08007bd9
 8007b88:	08007bdf 	.word	0x08007bdf
 8007b8c:	08007be5 	.word	0x08007be5
 8007b90:	08007beb 	.word	0x08007beb
 8007b94:	08007ba9 	.word	0x08007ba9
 8007b98:	08007bb9 	.word	0x08007bb9
 8007b9c:	08007bc9 	.word	0x08007bc9
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 8007ba0:	f641 6384 	movw	r3, #7812	; 0x1e84
 8007ba4:	60fb      	str	r3, [r7, #12]
        break;
 8007ba6:	e020      	b.n	8007bea <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 8007ba8:	f642 03b1 	movw	r3, #10417	; 0x28b1
 8007bac:	60fb      	str	r3, [r7, #12]
        break;
 8007bae:	e01c      	b.n	8007bea <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 8007bb0:	f643 5309 	movw	r3, #15625	; 0x3d09
 8007bb4:	60fb      	str	r3, [r7, #12]
        break;
 8007bb6:	e018      	b.n	8007bea <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 8007bb8:	f245 1361 	movw	r3, #20833	; 0x5161
 8007bbc:	60fb      	str	r3, [r7, #12]
        break;
 8007bbe:	e014      	b.n	8007bea <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 8007bc0:	f647 2312 	movw	r3, #31250	; 0x7a12
 8007bc4:	60fb      	str	r3, [r7, #12]
        break;
 8007bc6:	e010      	b.n	8007bea <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 8007bc8:	f24a 23c3 	movw	r3, #41667	; 0xa2c3
 8007bcc:	60fb      	str	r3, [r7, #12]
        break;
 8007bce:	e00c      	b.n	8007bea <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 8007bd0:	f24f 4324 	movw	r3, #62500	; 0xf424
 8007bd4:	60fb      	str	r3, [r7, #12]
        break;
 8007bd6:	e008      	b.n	8007bea <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 8007bd8:	4b07      	ldr	r3, [pc, #28]	; (8007bf8 <RadioGetLoRaBandwidthInHz+0xa0>)
 8007bda:	60fb      	str	r3, [r7, #12]
        break;
 8007bdc:	e005      	b.n	8007bea <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 8007bde:	4b07      	ldr	r3, [pc, #28]	; (8007bfc <RadioGetLoRaBandwidthInHz+0xa4>)
 8007be0:	60fb      	str	r3, [r7, #12]
        break;
 8007be2:	e002      	b.n	8007bea <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 8007be4:	4b06      	ldr	r3, [pc, #24]	; (8007c00 <RadioGetLoRaBandwidthInHz+0xa8>)
 8007be6:	60fb      	str	r3, [r7, #12]
        break;
 8007be8:	bf00      	nop
    }

    return bandwidthInHz;
 8007bea:	68fb      	ldr	r3, [r7, #12]
}
 8007bec:	4618      	mov	r0, r3
 8007bee:	3714      	adds	r7, #20
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	bc80      	pop	{r7}
 8007bf4:	4770      	bx	lr
 8007bf6:	bf00      	nop
 8007bf8:	0001e848 	.word	0x0001e848
 8007bfc:	0003d090 	.word	0x0003d090
 8007c00:	0007a120 	.word	0x0007a120

08007c04 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8007c04:	b480      	push	{r7}
 8007c06:	b083      	sub	sp, #12
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
 8007c0c:	4608      	mov	r0, r1
 8007c0e:	4611      	mov	r1, r2
 8007c10:	461a      	mov	r2, r3
 8007c12:	4603      	mov	r3, r0
 8007c14:	70fb      	strb	r3, [r7, #3]
 8007c16:	460b      	mov	r3, r1
 8007c18:	803b      	strh	r3, [r7, #0]
 8007c1a:	4613      	mov	r3, r2
 8007c1c:	70bb      	strb	r3, [r7, #2]
    return ( preambleLen << 3 ) +
 8007c1e:	883b      	ldrh	r3, [r7, #0]
 8007c20:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8007c22:	78ba      	ldrb	r2, [r7, #2]
 8007c24:	f082 0201 	eor.w	r2, r2, #1
 8007c28:	b2d2      	uxtb	r2, r2
 8007c2a:	2a00      	cmp	r2, #0
 8007c2c:	d001      	beq.n	8007c32 <RadioGetGfskTimeOnAirNumerator+0x2e>
 8007c2e:	2208      	movs	r2, #8
 8007c30:	e000      	b.n	8007c34 <RadioGetGfskTimeOnAirNumerator+0x30>
 8007c32:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 8007c34:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8007c36:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 8007c3a:	7c3b      	ldrb	r3, [r7, #16]
 8007c3c:	7d39      	ldrb	r1, [r7, #20]
 8007c3e:	2900      	cmp	r1, #0
 8007c40:	d001      	beq.n	8007c46 <RadioGetGfskTimeOnAirNumerator+0x42>
 8007c42:	2102      	movs	r1, #2
 8007c44:	e000      	b.n	8007c48 <RadioGetGfskTimeOnAirNumerator+0x44>
 8007c46:	2100      	movs	r1, #0
 8007c48:	440b      	add	r3, r1
 8007c4a:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8007c4c:	4413      	add	r3, r2
}
 8007c4e:	4618      	mov	r0, r3
 8007c50:	370c      	adds	r7, #12
 8007c52:	46bd      	mov	sp, r7
 8007c54:	bc80      	pop	{r7}
 8007c56:	4770      	bx	lr

08007c58 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8007c58:	b480      	push	{r7}
 8007c5a:	b08b      	sub	sp, #44	; 0x2c
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	60f8      	str	r0, [r7, #12]
 8007c60:	60b9      	str	r1, [r7, #8]
 8007c62:	4611      	mov	r1, r2
 8007c64:	461a      	mov	r2, r3
 8007c66:	460b      	mov	r3, r1
 8007c68:	71fb      	strb	r3, [r7, #7]
 8007c6a:	4613      	mov	r3, r2
 8007c6c:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 8007c6e:	79fb      	ldrb	r3, [r7, #7]
 8007c70:	3304      	adds	r3, #4
 8007c72:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 8007c74:	2300      	movs	r3, #0
 8007c76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 8007c7a:	68bb      	ldr	r3, [r7, #8]
 8007c7c:	2b05      	cmp	r3, #5
 8007c7e:	d002      	beq.n	8007c86 <RadioGetLoRaTimeOnAirNumerator+0x2e>
 8007c80:	68bb      	ldr	r3, [r7, #8]
 8007c82:	2b06      	cmp	r3, #6
 8007c84:	d104      	bne.n	8007c90 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 8007c86:	88bb      	ldrh	r3, [r7, #4]
 8007c88:	2b0b      	cmp	r3, #11
 8007c8a:	d801      	bhi.n	8007c90 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 8007c8c:	230c      	movs	r3, #12
 8007c8e:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d105      	bne.n	8007ca2 <RadioGetLoRaTimeOnAirNumerator+0x4a>
 8007c96:	68bb      	ldr	r3, [r7, #8]
 8007c98:	2b0b      	cmp	r3, #11
 8007c9a:	d008      	beq.n	8007cae <RadioGetLoRaTimeOnAirNumerator+0x56>
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	2b0c      	cmp	r3, #12
 8007ca0:	d005      	beq.n	8007cae <RadioGetLoRaTimeOnAirNumerator+0x56>
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	2b01      	cmp	r3, #1
 8007ca6:	d105      	bne.n	8007cb4 <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8007ca8:	68bb      	ldr	r3, [r7, #8]
 8007caa:	2b0c      	cmp	r3, #12
 8007cac:	d102      	bne.n	8007cb4 <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 8007cae:	2301      	movs	r3, #1
 8007cb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8007cb4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8007cb8:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 8007cba:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007cbe:	2a00      	cmp	r2, #0
 8007cc0:	d001      	beq.n	8007cc6 <RadioGetLoRaTimeOnAirNumerator+0x6e>
 8007cc2:	2210      	movs	r2, #16
 8007cc4:	e000      	b.n	8007cc8 <RadioGetLoRaTimeOnAirNumerator+0x70>
 8007cc6:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8007cc8:	4413      	add	r3, r2
 8007cca:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 8007cd0:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 8007cd2:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8007cd6:	2a00      	cmp	r2, #0
 8007cd8:	d001      	beq.n	8007cde <RadioGetLoRaTimeOnAirNumerator+0x86>
 8007cda:	2200      	movs	r2, #0
 8007cdc:	e000      	b.n	8007ce0 <RadioGetLoRaTimeOnAirNumerator+0x88>
 8007cde:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 8007ce0:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8007ce2:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 8007ce4:	68bb      	ldr	r3, [r7, #8]
 8007ce6:	2b06      	cmp	r3, #6
 8007ce8:	d803      	bhi.n	8007cf2 <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 8007cea:	68bb      	ldr	r3, [r7, #8]
 8007cec:	009b      	lsls	r3, r3, #2
 8007cee:	623b      	str	r3, [r7, #32]
 8007cf0:	e00e      	b.n	8007d10 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 8007cf2:	69fb      	ldr	r3, [r7, #28]
 8007cf4:	3308      	adds	r3, #8
 8007cf6:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 8007cf8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d004      	beq.n	8007d0a <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 8007d00:	68bb      	ldr	r3, [r7, #8]
 8007d02:	3b02      	subs	r3, #2
 8007d04:	009b      	lsls	r3, r3, #2
 8007d06:	623b      	str	r3, [r7, #32]
 8007d08:	e002      	b.n	8007d10 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 8007d0a:	68bb      	ldr	r3, [r7, #8]
 8007d0c:	009b      	lsls	r3, r3, #2
 8007d0e:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 8007d10:	69fb      	ldr	r3, [r7, #28]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	da01      	bge.n	8007d1a <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 8007d16:	2300      	movs	r3, #0
 8007d18:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 8007d1a:	69fa      	ldr	r2, [r7, #28]
 8007d1c:	6a3b      	ldr	r3, [r7, #32]
 8007d1e:	4413      	add	r3, r2
 8007d20:	1e5a      	subs	r2, r3, #1
 8007d22:	6a3b      	ldr	r3, [r7, #32]
 8007d24:	fb92 f3f3 	sdiv	r3, r2, r3
 8007d28:	697a      	ldr	r2, [r7, #20]
 8007d2a:	fb03 f202 	mul.w	r2, r3, r2
 8007d2e:	88bb      	ldrh	r3, [r7, #4]
 8007d30:	4413      	add	r3, r2
    int32_t intermediate =
 8007d32:	330c      	adds	r3, #12
 8007d34:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 8007d36:	68bb      	ldr	r3, [r7, #8]
 8007d38:	2b06      	cmp	r3, #6
 8007d3a:	d802      	bhi.n	8007d42 <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 8007d3c:	69bb      	ldr	r3, [r7, #24]
 8007d3e:	3302      	adds	r3, #2
 8007d40:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8007d42:	69bb      	ldr	r3, [r7, #24]
 8007d44:	009b      	lsls	r3, r3, #2
 8007d46:	1c5a      	adds	r2, r3, #1
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	3b02      	subs	r3, #2
 8007d4c:	fa02 f303 	lsl.w	r3, r2, r3
}
 8007d50:	4618      	mov	r0, r3
 8007d52:	372c      	adds	r7, #44	; 0x2c
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bc80      	pop	{r7}
 8007d58:	4770      	bx	lr
	...

08007d5c <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b08a      	sub	sp, #40	; 0x28
 8007d60:	af04      	add	r7, sp, #16
 8007d62:	60b9      	str	r1, [r7, #8]
 8007d64:	607a      	str	r2, [r7, #4]
 8007d66:	461a      	mov	r2, r3
 8007d68:	4603      	mov	r3, r0
 8007d6a:	73fb      	strb	r3, [r7, #15]
 8007d6c:	4613      	mov	r3, r2
 8007d6e:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 8007d70:	2300      	movs	r3, #0
 8007d72:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 8007d74:	2301      	movs	r3, #1
 8007d76:	613b      	str	r3, [r7, #16]

    switch( modem )
 8007d78:	7bfb      	ldrb	r3, [r7, #15]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d002      	beq.n	8007d84 <RadioTimeOnAir+0x28>
 8007d7e:	2b01      	cmp	r3, #1
 8007d80:	d017      	beq.n	8007db2 <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 8007d82:	e035      	b.n	8007df0 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 8007d84:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 8007d88:	8c3a      	ldrh	r2, [r7, #32]
 8007d8a:	7bb9      	ldrb	r1, [r7, #14]
 8007d8c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007d90:	9301      	str	r3, [sp, #4]
 8007d92:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007d96:	9300      	str	r3, [sp, #0]
 8007d98:	4603      	mov	r3, r0
 8007d9a:	6878      	ldr	r0, [r7, #4]
 8007d9c:	f7ff ff32 	bl	8007c04 <RadioGetGfskTimeOnAirNumerator>
 8007da0:	4603      	mov	r3, r0
 8007da2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007da6:	fb02 f303 	mul.w	r3, r2, r3
 8007daa:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	613b      	str	r3, [r7, #16]
        break;
 8007db0:	e01e      	b.n	8007df0 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 8007db2:	8c39      	ldrh	r1, [r7, #32]
 8007db4:	7bba      	ldrb	r2, [r7, #14]
 8007db6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007dba:	9302      	str	r3, [sp, #8]
 8007dbc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007dc0:	9301      	str	r3, [sp, #4]
 8007dc2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007dc6:	9300      	str	r3, [sp, #0]
 8007dc8:	460b      	mov	r3, r1
 8007dca:	6879      	ldr	r1, [r7, #4]
 8007dcc:	68b8      	ldr	r0, [r7, #8]
 8007dce:	f7ff ff43 	bl	8007c58 <RadioGetLoRaTimeOnAirNumerator>
 8007dd2:	4603      	mov	r3, r0
 8007dd4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007dd8:	fb02 f303 	mul.w	r3, r2, r3
 8007ddc:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 8007dde:	4a0a      	ldr	r2, [pc, #40]	; (8007e08 <RadioTimeOnAir+0xac>)
 8007de0:	68bb      	ldr	r3, [r7, #8]
 8007de2:	4413      	add	r3, r2
 8007de4:	781b      	ldrb	r3, [r3, #0]
 8007de6:	4618      	mov	r0, r3
 8007de8:	f7ff feb6 	bl	8007b58 <RadioGetLoRaBandwidthInHz>
 8007dec:	6138      	str	r0, [r7, #16]
        break;
 8007dee:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator );
 8007df0:	697a      	ldr	r2, [r7, #20]
 8007df2:	693b      	ldr	r3, [r7, #16]
 8007df4:	4413      	add	r3, r2
 8007df6:	1e5a      	subs	r2, r3, #1
 8007df8:	693b      	ldr	r3, [r7, #16]
 8007dfa:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8007dfe:	4618      	mov	r0, r3
 8007e00:	3718      	adds	r7, #24
 8007e02:	46bd      	mov	sp, r7
 8007e04:	bd80      	pop	{r7, pc}
 8007e06:	bf00      	nop
 8007e08:	0800c7ec 	.word	0x0800c7ec

08007e0c <RadioSend>:

static radio_status_t RadioSend( uint8_t *buffer, uint8_t size )
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b084      	sub	sp, #16
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
 8007e14:	460b      	mov	r3, r1
 8007e16:	70fb      	strb	r3, [r7, #3]
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 8007e18:	2300      	movs	r3, #0
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	f240 2101 	movw	r1, #513	; 0x201
 8007e20:	f240 2001 	movw	r0, #513	; 0x201
 8007e24:	f001 fd9a 	bl	800995c <SUBGRF_SetDioIrqParams>
                            IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );

    /* Set DBG pin */
    DBG_GPIO_RADIO_TX( SET );
 8007e28:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007e2c:	4874      	ldr	r0, [pc, #464]	; (8008000 <RadioSend+0x1f4>)
 8007e2e:	f7ff fa09 	bl	8007244 <LL_GPIO_SetOutputPin>

    /* Set RF switch */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8007e32:	4b74      	ldr	r3, [pc, #464]	; (8008004 <RadioSend+0x1f8>)
 8007e34:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8007e38:	2101      	movs	r1, #1
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	f002 fa32 	bl	800a2a4 <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 8007e40:	4b70      	ldr	r3, [pc, #448]	; (8008004 <RadioSend+0x1f8>)
 8007e42:	781b      	ldrb	r3, [r3, #0]
 8007e44:	2b01      	cmp	r3, #1
 8007e46:	d112      	bne.n	8007e6e <RadioSend+0x62>
 8007e48:	4b6e      	ldr	r3, [pc, #440]	; (8008004 <RadioSend+0x1f8>)
 8007e4a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007e4e:	2b06      	cmp	r3, #6
 8007e50:	d10d      	bne.n	8007e6e <RadioSend+0x62>
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8007e52:	f640 0089 	movw	r0, #2185	; 0x889
 8007e56:	f002 f945 	bl	800a0e4 <SUBGRF_ReadRegister>
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	f023 0304 	bic.w	r3, r3, #4
 8007e60:	b2db      	uxtb	r3, r3
 8007e62:	4619      	mov	r1, r3
 8007e64:	f640 0089 	movw	r0, #2185	; 0x889
 8007e68:	f002 f928 	bl	800a0bc <SUBGRF_WriteRegister>
 8007e6c:	e00c      	b.n	8007e88 <RadioSend+0x7c>
    }
    else
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8007e6e:	f640 0089 	movw	r0, #2185	; 0x889
 8007e72:	f002 f937 	bl	800a0e4 <SUBGRF_ReadRegister>
 8007e76:	4603      	mov	r3, r0
 8007e78:	f043 0304 	orr.w	r3, r3, #4
 8007e7c:	b2db      	uxtb	r3, r3
 8007e7e:	4619      	mov	r1, r3
 8007e80:	f640 0089 	movw	r0, #2185	; 0x889
 8007e84:	f002 f91a 	bl	800a0bc <SUBGRF_WriteRegister>
    }
    else
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    {
        /* WORKAROUND END */
        switch( SubgRf.Modem )
 8007e88:	4b5e      	ldr	r3, [pc, #376]	; (8008004 <RadioSend+0x1f8>)
 8007e8a:	781b      	ldrb	r3, [r3, #0]
 8007e8c:	2b04      	cmp	r3, #4
 8007e8e:	f200 80a7 	bhi.w	8007fe0 <RadioSend+0x1d4>
 8007e92:	a201      	add	r2, pc, #4	; (adr r2, 8007e98 <RadioSend+0x8c>)
 8007e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e98:	08007ec7 	.word	0x08007ec7
 8007e9c:	08007ead 	.word	0x08007ead
 8007ea0:	08007ec7 	.word	0x08007ec7
 8007ea4:	08007f29 	.word	0x08007f29
 8007ea8:	08007f49 	.word	0x08007f49
        {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 8007eac:	4a55      	ldr	r2, [pc, #340]	; (8008004 <RadioSend+0x1f8>)
 8007eae:	78fb      	ldrb	r3, [r7, #3]
 8007eb0:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007eb2:	4855      	ldr	r0, [pc, #340]	; (8008008 <RadioSend+0x1fc>)
 8007eb4:	f001 ffba 	bl	8009e2c <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8007eb8:	78fb      	ldrb	r3, [r7, #3]
 8007eba:	2200      	movs	r2, #0
 8007ebc:	4619      	mov	r1, r3
 8007ebe:	6878      	ldr	r0, [r7, #4]
 8007ec0:	f001 fa6a 	bl	8009398 <SUBGRF_SendPayload>
            break;
 8007ec4:	e08d      	b.n	8007fe2 <RadioSend+0x1d6>
        }
        case MODEM_MSK:
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 8007ec6:	f002 fbe6 	bl	800a696 <RFW_Is_Init>
 8007eca:	4603      	mov	r3, r0
 8007ecc:	2b01      	cmp	r3, #1
 8007ece:	d11e      	bne.n	8007f0e <RadioSend+0x102>
            {
                uint8_t outsize;
                if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 8007ed0:	f107 020d 	add.w	r2, r7, #13
 8007ed4:	78fb      	ldrb	r3, [r7, #3]
 8007ed6:	4619      	mov	r1, r3
 8007ed8:	6878      	ldr	r0, [r7, #4]
 8007eda:	f002 fbf4 	bl	800a6c6 <RFW_TransmitInit>
 8007ede:	4603      	mov	r3, r0
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d10c      	bne.n	8007efe <RadioSend+0xf2>
                {
                    SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 8007ee4:	7b7a      	ldrb	r2, [r7, #13]
 8007ee6:	4b47      	ldr	r3, [pc, #284]	; (8008004 <RadioSend+0x1f8>)
 8007ee8:	759a      	strb	r2, [r3, #22]
                    SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007eea:	4847      	ldr	r0, [pc, #284]	; (8008008 <RadioSend+0x1fc>)
 8007eec:	f001 ff9e 	bl	8009e2c <SUBGRF_SetPacketParams>
                    SUBGRF_SendPayload( buffer, outsize, 0 );
 8007ef0:	7b7b      	ldrb	r3, [r7, #13]
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	4619      	mov	r1, r3
 8007ef6:	6878      	ldr	r0, [r7, #4]
 8007ef8:	f001 fa4e 	bl	8009398 <SUBGRF_SendPayload>
            {
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
                SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 8007efc:	e071      	b.n	8007fe2 <RadioSend+0x1d6>
                    MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n" );
 8007efe:	4b43      	ldr	r3, [pc, #268]	; (800800c <RadioSend+0x200>)
 8007f00:	2201      	movs	r2, #1
 8007f02:	2100      	movs	r1, #0
 8007f04:	2002      	movs	r0, #2
 8007f06:	f003 ff5d 	bl	800bdc4 <UTIL_ADV_TRACE_COND_FSend>
                    return RADIO_STATUS_ERROR;
 8007f0a:	2303      	movs	r3, #3
 8007f0c:	e073      	b.n	8007ff6 <RadioSend+0x1ea>
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 8007f0e:	4a3d      	ldr	r2, [pc, #244]	; (8008004 <RadioSend+0x1f8>)
 8007f10:	78fb      	ldrb	r3, [r7, #3]
 8007f12:	7593      	strb	r3, [r2, #22]
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007f14:	483c      	ldr	r0, [pc, #240]	; (8008008 <RadioSend+0x1fc>)
 8007f16:	f001 ff89 	bl	8009e2c <SUBGRF_SetPacketParams>
                SUBGRF_SendPayload( buffer, size, 0 );
 8007f1a:	78fb      	ldrb	r3, [r7, #3]
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	4619      	mov	r1, r3
 8007f20:	6878      	ldr	r0, [r7, #4]
 8007f22:	f001 fa39 	bl	8009398 <SUBGRF_SendPayload>
            break;
 8007f26:	e05c      	b.n	8007fe2 <RadioSend+0x1d6>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8007f28:	4b36      	ldr	r3, [pc, #216]	; (8008004 <RadioSend+0x1f8>)
 8007f2a:	2202      	movs	r2, #2
 8007f2c:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 8007f2e:	4a35      	ldr	r2, [pc, #212]	; (8008004 <RadioSend+0x1f8>)
 8007f30:	78fb      	ldrb	r3, [r7, #3]
 8007f32:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007f34:	4834      	ldr	r0, [pc, #208]	; (8008008 <RadioSend+0x1fc>)
 8007f36:	f001 ff79 	bl	8009e2c <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8007f3a:	78fb      	ldrb	r3, [r7, #3]
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	4619      	mov	r1, r3
 8007f40:	6878      	ldr	r0, [r7, #4]
 8007f42:	f001 fa29 	bl	8009398 <SUBGRF_SendPayload>
            break;
 8007f46:	e04c      	b.n	8007fe2 <RadioSend+0x1d6>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 8007f48:	78fb      	ldrb	r3, [r7, #3]
 8007f4a:	461a      	mov	r2, r3
 8007f4c:	6879      	ldr	r1, [r7, #4]
 8007f4e:	4830      	ldr	r0, [pc, #192]	; (8008010 <RadioSend+0x204>)
 8007f50:	f000 fcfc 	bl	800894c <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8007f54:	4b2b      	ldr	r3, [pc, #172]	; (8008004 <RadioSend+0x1f8>)
 8007f56:	2202      	movs	r2, #2
 8007f58:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 8007f5a:	78fb      	ldrb	r3, [r7, #3]
 8007f5c:	3301      	adds	r3, #1
 8007f5e:	b2da      	uxtb	r2, r3
 8007f60:	4b28      	ldr	r3, [pc, #160]	; (8008004 <RadioSend+0x1f8>)
 8007f62:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007f64:	4828      	ldr	r0, [pc, #160]	; (8008008 <RadioSend+0x1fc>)
 8007f66:	f001 ff61 	bl	8009e2c <SUBGRF_SetPacketParams>

            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 8007f6a:	2100      	movs	r1, #0
 8007f6c:	20f1      	movs	r0, #241	; 0xf1
 8007f6e:	f000 f974 	bl	800825a <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 8007f72:	2100      	movs	r1, #0
 8007f74:	20f0      	movs	r0, #240	; 0xf0
 8007f76:	f000 f970 	bl	800825a <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 8007f7a:	4b22      	ldr	r3, [pc, #136]	; (8008004 <RadioSend+0x1f8>)
 8007f7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f7e:	2b64      	cmp	r3, #100	; 0x64
 8007f80:	d108      	bne.n	8007f94 <RadioSend+0x188>
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 8007f82:	2170      	movs	r1, #112	; 0x70
 8007f84:	20f3      	movs	r0, #243	; 0xf3
 8007f86:	f000 f968 	bl	800825a <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 8007f8a:	211d      	movs	r1, #29
 8007f8c:	20f2      	movs	r0, #242	; 0xf2
 8007f8e:	f000 f964 	bl	800825a <RadioWrite>
 8007f92:	e007      	b.n	8007fa4 <RadioSend+0x198>
            }
            else // 600 bps
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 8007f94:	21e1      	movs	r1, #225	; 0xe1
 8007f96:	20f3      	movs	r0, #243	; 0xf3
 8007f98:	f000 f95f 	bl	800825a <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 8007f9c:	2104      	movs	r1, #4
 8007f9e:	20f2      	movs	r0, #242	; 0xf2
 8007fa0:	f000 f95b 	bl	800825a <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 8007fa4:	78fb      	ldrb	r3, [r7, #3]
 8007fa6:	b29b      	uxth	r3, r3
 8007fa8:	00db      	lsls	r3, r3, #3
 8007faa:	b29b      	uxth	r3, r3
 8007fac:	3302      	adds	r3, #2
 8007fae:	81fb      	strh	r3, [r7, #14]
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 8007fb0:	89fb      	ldrh	r3, [r7, #14]
 8007fb2:	0a1b      	lsrs	r3, r3, #8
 8007fb4:	b29b      	uxth	r3, r3
 8007fb6:	b2db      	uxtb	r3, r3
 8007fb8:	4619      	mov	r1, r3
 8007fba:	20f4      	movs	r0, #244	; 0xf4
 8007fbc:	f000 f94d 	bl	800825a <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 8007fc0:	89fb      	ldrh	r3, [r7, #14]
 8007fc2:	b2db      	uxtb	r3, r3
 8007fc4:	4619      	mov	r1, r3
 8007fc6:	20f5      	movs	r0, #245	; 0xf5
 8007fc8:	f000 f947 	bl	800825a <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size + 1, 0xFFFFFF );
 8007fcc:	78fb      	ldrb	r3, [r7, #3]
 8007fce:	3301      	adds	r3, #1
 8007fd0:	b2db      	uxtb	r3, r3
 8007fd2:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8007fd6:	4619      	mov	r1, r3
 8007fd8:	480d      	ldr	r0, [pc, #52]	; (8008010 <RadioSend+0x204>)
 8007fda:	f001 f9dd 	bl	8009398 <SUBGRF_SendPayload>
            break;
 8007fde:	e000      	b.n	8007fe2 <RadioSend+0x1d6>
        }
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 8007fe0:	bf00      	nop
        }

        TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 8007fe2:	4b08      	ldr	r3, [pc, #32]	; (8008004 <RadioSend+0x1f8>)
 8007fe4:	685b      	ldr	r3, [r3, #4]
 8007fe6:	4619      	mov	r1, r3
 8007fe8:	480a      	ldr	r0, [pc, #40]	; (8008014 <RadioSend+0x208>)
 8007fea:	f003 fd63 	bl	800bab4 <UTIL_TIMER_SetPeriod>
        TimerStart( &TxTimeoutTimer );
 8007fee:	4809      	ldr	r0, [pc, #36]	; (8008014 <RadioSend+0x208>)
 8007ff0:	f003 fc82 	bl	800b8f8 <UTIL_TIMER_Start>
    }

    return RADIO_STATUS_OK;
 8007ff4:	2300      	movs	r3, #0
}
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	3710      	adds	r7, #16
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	bd80      	pop	{r7, pc}
 8007ffe:	bf00      	nop
 8008000:	48000400 	.word	0x48000400
 8008004:	20000288 	.word	0x20000288
 8008008:	20000296 	.word	0x20000296
 800800c:	0800c39c 	.word	0x0800c39c
 8008010:	20000184 	.word	0x20000184
 8008014:	200002e4 	.word	0x200002e4

08008018 <RadioSleep>:

static void RadioSleep( void )
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b082      	sub	sp, #8
 800801c:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 800801e:	2300      	movs	r3, #0
 8008020:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 8008022:	793b      	ldrb	r3, [r7, #4]
 8008024:	f043 0304 	orr.w	r3, r3, #4
 8008028:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 800802a:	7938      	ldrb	r0, [r7, #4]
 800802c:	f001 fa90 	bl	8009550 <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 8008030:	2002      	movs	r0, #2
 8008032:	f7f8 fd7b 	bl	8000b2c <HAL_Delay>
}
 8008036:	bf00      	nop
 8008038:	3708      	adds	r7, #8
 800803a:	46bd      	mov	sp, r7
 800803c:	bd80      	pop	{r7, pc}

0800803e <RadioStandby>:

static void RadioStandby( void )
{
 800803e:	b580      	push	{r7, lr}
 8008040:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 8008042:	2000      	movs	r0, #0
 8008044:	f001 fab6 	bl	80095b4 <SUBGRF_SetStandby>
}
 8008048:	bf00      	nop
 800804a:	bd80      	pop	{r7, pc}

0800804c <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b082      	sub	sp, #8
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init( ) )
 8008054:	f002 fb1f 	bl	800a696 <RFW_Is_Init>
 8008058:	4603      	mov	r3, r0
 800805a:	2b01      	cmp	r3, #1
 800805c:	d102      	bne.n	8008064 <RadioRx+0x18>
    {
        RFW_ReceiveInit( );
 800805e:	f002 fb42 	bl	800a6e6 <RFW_ReceiveInit>
 8008062:	e007      	b.n	8008074 <RadioRx+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8008064:	2300      	movs	r3, #0
 8008066:	2200      	movs	r2, #0
 8008068:	f240 2162 	movw	r1, #610	; 0x262
 800806c:	f240 2062 	movw	r0, #610	; 0x262
 8008070:	f001 fc74 	bl	800995c <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d006      	beq.n	8008088 <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 800807a:	6879      	ldr	r1, [r7, #4]
 800807c:	4813      	ldr	r0, [pc, #76]	; (80080cc <RadioRx+0x80>)
 800807e:	f003 fd19 	bl	800bab4 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8008082:	4812      	ldr	r0, [pc, #72]	; (80080cc <RadioRx+0x80>)
 8008084:	f003 fc38 	bl	800b8f8 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8008088:	4b11      	ldr	r3, [pc, #68]	; (80080d0 <RadioRx+0x84>)
 800808a:	2200      	movs	r2, #0
 800808c:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
 800808e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008092:	4810      	ldr	r0, [pc, #64]	; (80080d4 <RadioRx+0x88>)
 8008094:	f7ff f8d6 	bl	8007244 <LL_GPIO_SetOutputPin>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8008098:	4b0d      	ldr	r3, [pc, #52]	; (80080d0 <RadioRx+0x84>)
 800809a:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800809e:	2100      	movs	r1, #0
 80080a0:	4618      	mov	r0, r3
 80080a2:	f002 f8ff 	bl	800a2a4 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 80080a6:	4b0a      	ldr	r3, [pc, #40]	; (80080d0 <RadioRx+0x84>)
 80080a8:	785b      	ldrb	r3, [r3, #1]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d004      	beq.n	80080b8 <RadioRx+0x6c>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 80080ae:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80080b2:	f001 fabb 	bl	800962c <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 80080b6:	e005      	b.n	80080c4 <RadioRx+0x78>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 80080b8:	4b05      	ldr	r3, [pc, #20]	; (80080d0 <RadioRx+0x84>)
 80080ba:	689b      	ldr	r3, [r3, #8]
 80080bc:	019b      	lsls	r3, r3, #6
 80080be:	4618      	mov	r0, r3
 80080c0:	f001 fab4 	bl	800962c <SUBGRF_SetRx>
}
 80080c4:	bf00      	nop
 80080c6:	3708      	adds	r7, #8
 80080c8:	46bd      	mov	sp, r7
 80080ca:	bd80      	pop	{r7, pc}
 80080cc:	200002fc 	.word	0x200002fc
 80080d0:	20000288 	.word	0x20000288
 80080d4:	48000400 	.word	0x48000400

080080d8 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b082      	sub	sp, #8
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init() )
 80080e0:	f002 fad9 	bl	800a696 <RFW_Is_Init>
 80080e4:	4603      	mov	r3, r0
 80080e6:	2b01      	cmp	r3, #1
 80080e8:	d102      	bne.n	80080f0 <RadioRxBoosted+0x18>
    {
        RFW_ReceiveInit();
 80080ea:	f002 fafc 	bl	800a6e6 <RFW_ReceiveInit>
 80080ee:	e007      	b.n	8008100 <RadioRxBoosted+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 80080f0:	2300      	movs	r3, #0
 80080f2:	2200      	movs	r2, #0
 80080f4:	f240 2162 	movw	r1, #610	; 0x262
 80080f8:	f240 2062 	movw	r0, #610	; 0x262
 80080fc:	f001 fc2e 	bl	800995c <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d006      	beq.n	8008114 <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8008106:	6879      	ldr	r1, [r7, #4]
 8008108:	4813      	ldr	r0, [pc, #76]	; (8008158 <RadioRxBoosted+0x80>)
 800810a:	f003 fcd3 	bl	800bab4 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 800810e:	4812      	ldr	r0, [pc, #72]	; (8008158 <RadioRxBoosted+0x80>)
 8008110:	f003 fbf2 	bl	800b8f8 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8008114:	4b11      	ldr	r3, [pc, #68]	; (800815c <RadioRxBoosted+0x84>)
 8008116:	2200      	movs	r2, #0
 8008118:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
 800811a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800811e:	4810      	ldr	r0, [pc, #64]	; (8008160 <RadioRxBoosted+0x88>)
 8008120:	f7ff f890 	bl	8007244 <LL_GPIO_SetOutputPin>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8008124:	4b0d      	ldr	r3, [pc, #52]	; (800815c <RadioRxBoosted+0x84>)
 8008126:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800812a:	2100      	movs	r1, #0
 800812c:	4618      	mov	r0, r3
 800812e:	f002 f8b9 	bl	800a2a4 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 8008132:	4b0a      	ldr	r3, [pc, #40]	; (800815c <RadioRxBoosted+0x84>)
 8008134:	785b      	ldrb	r3, [r3, #1]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d004      	beq.n	8008144 <RadioRxBoosted+0x6c>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 800813a:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800813e:	f001 fa95 	bl	800966c <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 8008142:	e005      	b.n	8008150 <RadioRxBoosted+0x78>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 8008144:	4b05      	ldr	r3, [pc, #20]	; (800815c <RadioRxBoosted+0x84>)
 8008146:	689b      	ldr	r3, [r3, #8]
 8008148:	019b      	lsls	r3, r3, #6
 800814a:	4618      	mov	r0, r3
 800814c:	f001 fa8e 	bl	800966c <SUBGRF_SetRxBoosted>
}
 8008150:	bf00      	nop
 8008152:	3708      	adds	r7, #8
 8008154:	46bd      	mov	sp, r7
 8008156:	bd80      	pop	{r7, pc}
 8008158:	200002fc 	.word	0x200002fc
 800815c:	20000288 	.word	0x20000288
 8008160:	48000400 	.word	0x48000400

08008164 <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b082      	sub	sp, #8
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
 800816c:	6039      	str	r1, [r7, #0]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	005a      	lsls	r2, r3, #1
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	4413      	add	r3, r2
 8008176:	4a0c      	ldr	r2, [pc, #48]	; (80081a8 <RadioSetRxDutyCycle+0x44>)
 8008178:	6593      	str	r3, [r2, #88]	; 0x58
    /*Enable also the IRQ_PREAMBLE_DETECTED*/
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 800817a:	2300      	movs	r3, #0
 800817c:	2200      	movs	r2, #0
 800817e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008182:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8008186:	f001 fbe9 	bl	800995c <SUBGRF_SetDioIrqParams>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 800818a:	4b07      	ldr	r3, [pc, #28]	; (80081a8 <RadioSetRxDutyCycle+0x44>)
 800818c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8008190:	2100      	movs	r1, #0
 8008192:	4618      	mov	r0, r3
 8008194:	f002 f886 	bl	800a2a4 <SUBGRF_SetSwitch>
    /* Start Rx DutyCycle*/
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 8008198:	6839      	ldr	r1, [r7, #0]
 800819a:	6878      	ldr	r0, [r7, #4]
 800819c:	f001 fa8a 	bl	80096b4 <SUBGRF_SetRxDutyCycle>
}
 80081a0:	bf00      	nop
 80081a2:	3708      	adds	r7, #8
 80081a4:	46bd      	mov	sp, r7
 80081a6:	bd80      	pop	{r7, pc}
 80081a8:	20000288 	.word	0x20000288

080081ac <RadioStartCad>:

static void RadioStartCad( void )
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 80081b0:	4b09      	ldr	r3, [pc, #36]	; (80081d8 <RadioStartCad+0x2c>)
 80081b2:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80081b6:	2100      	movs	r1, #0
 80081b8:	4618      	mov	r0, r3
 80081ba:	f002 f873 	bl	800a2a4 <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 80081be:	2300      	movs	r3, #0
 80081c0:	2200      	movs	r2, #0
 80081c2:	f44f 71c0 	mov.w	r1, #384	; 0x180
 80081c6:	f44f 70c0 	mov.w	r0, #384	; 0x180
 80081ca:	f001 fbc7 	bl	800995c <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 80081ce:	f001 fa9d 	bl	800970c <SUBGRF_SetCad>
}
 80081d2:	bf00      	nop
 80081d4:	bd80      	pop	{r7, pc}
 80081d6:	bf00      	nop
 80081d8:	20000288 	.word	0x20000288

080081dc <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	b084      	sub	sp, #16
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
 80081e4:	460b      	mov	r3, r1
 80081e6:	70fb      	strb	r3, [r7, #3]
 80081e8:	4613      	mov	r3, r2
 80081ea:	803b      	strh	r3, [r7, #0]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    uint32_t timeout = ( uint32_t )time * 1000;
 80081ec:	883b      	ldrh	r3, [r7, #0]
 80081ee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80081f2:	fb02 f303 	mul.w	r3, r2, r3
 80081f6:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 80081f8:	6878      	ldr	r0, [r7, #4]
 80081fa:	f001 fc0b 	bl	8009a14 <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 80081fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008202:	4618      	mov	r0, r3
 8008204:	f002 f876 	bl	800a2f4 <SUBGRF_SetRfTxPower>
 8008208:	4603      	mov	r3, r0
 800820a:	72fb      	strb	r3, [r7, #11]

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 800820c:	210e      	movs	r1, #14
 800820e:	f640 101f 	movw	r0, #2335	; 0x91f
 8008212:	f001 ff53 	bl	800a0bc <SUBGRF_WriteRegister>

    /* Set RF switch */
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 8008216:	7afb      	ldrb	r3, [r7, #11]
 8008218:	2101      	movs	r1, #1
 800821a:	4618      	mov	r0, r3
 800821c:	f002 f842 	bl	800a2a4 <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 8008220:	f001 fa82 	bl	8009728 <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 8008224:	68f9      	ldr	r1, [r7, #12]
 8008226:	4805      	ldr	r0, [pc, #20]	; (800823c <RadioSetTxContinuousWave+0x60>)
 8008228:	f003 fc44 	bl	800bab4 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 800822c:	4803      	ldr	r0, [pc, #12]	; (800823c <RadioSetTxContinuousWave+0x60>)
 800822e:	f003 fb63 	bl	800b8f8 <UTIL_TIMER_Start>
}
 8008232:	bf00      	nop
 8008234:	3710      	adds	r7, #16
 8008236:	46bd      	mov	sp, r7
 8008238:	bd80      	pop	{r7, pc}
 800823a:	bf00      	nop
 800823c:	200002e4 	.word	0x200002e4

08008240 <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b082      	sub	sp, #8
 8008244:	af00      	add	r7, sp, #0
 8008246:	4603      	mov	r3, r0
 8008248:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 800824a:	f001 fea4 	bl	8009f96 <SUBGRF_GetRssiInst>
 800824e:	4603      	mov	r3, r0
 8008250:	b21b      	sxth	r3, r3
}
 8008252:	4618      	mov	r0, r3
 8008254:	3708      	adds	r7, #8
 8008256:	46bd      	mov	sp, r7
 8008258:	bd80      	pop	{r7, pc}

0800825a <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 800825a:	b580      	push	{r7, lr}
 800825c:	b082      	sub	sp, #8
 800825e:	af00      	add	r7, sp, #0
 8008260:	4603      	mov	r3, r0
 8008262:	460a      	mov	r2, r1
 8008264:	80fb      	strh	r3, [r7, #6]
 8008266:	4613      	mov	r3, r2
 8008268:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister( addr, data );
 800826a:	797a      	ldrb	r2, [r7, #5]
 800826c:	88fb      	ldrh	r3, [r7, #6]
 800826e:	4611      	mov	r1, r2
 8008270:	4618      	mov	r0, r3
 8008272:	f001 ff23 	bl	800a0bc <SUBGRF_WriteRegister>
}
 8008276:	bf00      	nop
 8008278:	3708      	adds	r7, #8
 800827a:	46bd      	mov	sp, r7
 800827c:	bd80      	pop	{r7, pc}

0800827e <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 800827e:	b580      	push	{r7, lr}
 8008280:	b082      	sub	sp, #8
 8008282:	af00      	add	r7, sp, #0
 8008284:	4603      	mov	r3, r0
 8008286:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister( addr );
 8008288:	88fb      	ldrh	r3, [r7, #6]
 800828a:	4618      	mov	r0, r3
 800828c:	f001 ff2a 	bl	800a0e4 <SUBGRF_ReadRegister>
 8008290:	4603      	mov	r3, r0
}
 8008292:	4618      	mov	r0, r3
 8008294:	3708      	adds	r7, #8
 8008296:	46bd      	mov	sp, r7
 8008298:	bd80      	pop	{r7, pc}

0800829a <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 800829a:	b580      	push	{r7, lr}
 800829c:	b082      	sub	sp, #8
 800829e:	af00      	add	r7, sp, #0
 80082a0:	4603      	mov	r3, r0
 80082a2:	6039      	str	r1, [r7, #0]
 80082a4:	80fb      	strh	r3, [r7, #6]
 80082a6:	4613      	mov	r3, r2
 80082a8:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 80082aa:	797b      	ldrb	r3, [r7, #5]
 80082ac:	b29a      	uxth	r2, r3
 80082ae:	88fb      	ldrh	r3, [r7, #6]
 80082b0:	6839      	ldr	r1, [r7, #0]
 80082b2:	4618      	mov	r0, r3
 80082b4:	f001 ff2a 	bl	800a10c <SUBGRF_WriteRegisters>
}
 80082b8:	bf00      	nop
 80082ba:	3708      	adds	r7, #8
 80082bc:	46bd      	mov	sp, r7
 80082be:	bd80      	pop	{r7, pc}

080082c0 <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b082      	sub	sp, #8
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	4603      	mov	r3, r0
 80082c8:	6039      	str	r1, [r7, #0]
 80082ca:	80fb      	strh	r3, [r7, #6]
 80082cc:	4613      	mov	r3, r2
 80082ce:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 80082d0:	797b      	ldrb	r3, [r7, #5]
 80082d2:	b29a      	uxth	r2, r3
 80082d4:	88fb      	ldrh	r3, [r7, #6]
 80082d6:	6839      	ldr	r1, [r7, #0]
 80082d8:	4618      	mov	r0, r3
 80082da:	f001 ff39 	bl	800a150 <SUBGRF_ReadRegisters>
}
 80082de:	bf00      	nop
 80082e0:	3708      	adds	r7, #8
 80082e2:	46bd      	mov	sp, r7
 80082e4:	bd80      	pop	{r7, pc}
	...

080082e8 <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b082      	sub	sp, #8
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	4603      	mov	r3, r0
 80082f0:	460a      	mov	r2, r1
 80082f2:	71fb      	strb	r3, [r7, #7]
 80082f4:	4613      	mov	r3, r2
 80082f6:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 80082f8:	79fb      	ldrb	r3, [r7, #7]
 80082fa:	2b01      	cmp	r3, #1
 80082fc:	d10a      	bne.n	8008314 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 80082fe:	4a0e      	ldr	r2, [pc, #56]	; (8008338 <RadioSetMaxPayloadLength+0x50>)
 8008300:	79bb      	ldrb	r3, [r7, #6]
 8008302:	7013      	strb	r3, [r2, #0]
 8008304:	4b0c      	ldr	r3, [pc, #48]	; (8008338 <RadioSetMaxPayloadLength+0x50>)
 8008306:	781a      	ldrb	r2, [r3, #0]
 8008308:	4b0c      	ldr	r3, [pc, #48]	; (800833c <RadioSetMaxPayloadLength+0x54>)
 800830a:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800830c:	480c      	ldr	r0, [pc, #48]	; (8008340 <RadioSetMaxPayloadLength+0x58>)
 800830e:	f001 fd8d 	bl	8009e2c <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 8008312:	e00d      	b.n	8008330 <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 8008314:	4b09      	ldr	r3, [pc, #36]	; (800833c <RadioSetMaxPayloadLength+0x54>)
 8008316:	7d5b      	ldrb	r3, [r3, #21]
 8008318:	2b01      	cmp	r3, #1
 800831a:	d109      	bne.n	8008330 <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 800831c:	4a06      	ldr	r2, [pc, #24]	; (8008338 <RadioSetMaxPayloadLength+0x50>)
 800831e:	79bb      	ldrb	r3, [r7, #6]
 8008320:	7013      	strb	r3, [r2, #0]
 8008322:	4b05      	ldr	r3, [pc, #20]	; (8008338 <RadioSetMaxPayloadLength+0x50>)
 8008324:	781a      	ldrb	r2, [r3, #0]
 8008326:	4b05      	ldr	r3, [pc, #20]	; (800833c <RadioSetMaxPayloadLength+0x54>)
 8008328:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800832a:	4805      	ldr	r0, [pc, #20]	; (8008340 <RadioSetMaxPayloadLength+0x58>)
 800832c:	f001 fd7e 	bl	8009e2c <SUBGRF_SetPacketParams>
}
 8008330:	bf00      	nop
 8008332:	3708      	adds	r7, #8
 8008334:	46bd      	mov	sp, r7
 8008336:	bd80      	pop	{r7, pc}
 8008338:	20000008 	.word	0x20000008
 800833c:	20000288 	.word	0x20000288
 8008340:	20000296 	.word	0x20000296

08008344 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b082      	sub	sp, #8
 8008348:	af00      	add	r7, sp, #0
 800834a:	4603      	mov	r3, r0
 800834c:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 800834e:	4a13      	ldr	r2, [pc, #76]	; (800839c <RadioSetPublicNetwork+0x58>)
 8008350:	79fb      	ldrb	r3, [r7, #7]
 8008352:	7313      	strb	r3, [r2, #12]
 8008354:	4b11      	ldr	r3, [pc, #68]	; (800839c <RadioSetPublicNetwork+0x58>)
 8008356:	7b1a      	ldrb	r2, [r3, #12]
 8008358:	4b10      	ldr	r3, [pc, #64]	; (800839c <RadioSetPublicNetwork+0x58>)
 800835a:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 800835c:	2001      	movs	r0, #1
 800835e:	f7fe ffff 	bl	8007360 <RadioSetModem>
    if( enable == true )
 8008362:	79fb      	ldrb	r3, [r7, #7]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d00a      	beq.n	800837e <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 8008368:	2134      	movs	r1, #52	; 0x34
 800836a:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 800836e:	f001 fea5 	bl	800a0bc <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 8008372:	2144      	movs	r1, #68	; 0x44
 8008374:	f240 7041 	movw	r0, #1857	; 0x741
 8008378:	f001 fea0 	bl	800a0bc <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 800837c:	e009      	b.n	8008392 <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 800837e:	2114      	movs	r1, #20
 8008380:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8008384:	f001 fe9a 	bl	800a0bc <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 8008388:	2124      	movs	r1, #36	; 0x24
 800838a:	f240 7041 	movw	r0, #1857	; 0x741
 800838e:	f001 fe95 	bl	800a0bc <SUBGRF_WriteRegister>
}
 8008392:	bf00      	nop
 8008394:	3708      	adds	r7, #8
 8008396:	46bd      	mov	sp, r7
 8008398:	bd80      	pop	{r7, pc}
 800839a:	bf00      	nop
 800839c:	20000288 	.word	0x20000288

080083a0 <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 80083a4:	f001 ffda 	bl	800a35c <SUBGRF_GetRadioWakeUpTime>
 80083a8:	4603      	mov	r3, r0
 80083aa:	3303      	adds	r3, #3
}
 80083ac:	4618      	mov	r0, r3
 80083ae:	bd80      	pop	{r7, pc}

080083b0 <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void *context )
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b082      	sub	sp, #8
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 80083b8:	f000 f80e 	bl	80083d8 <RadioOnTxTimeoutProcess>
}
 80083bc:	bf00      	nop
 80083be:	3708      	adds	r7, #8
 80083c0:	46bd      	mov	sp, r7
 80083c2:	bd80      	pop	{r7, pc}

080083c4 <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void *context )
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b082      	sub	sp, #8
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 80083cc:	f000 f81e 	bl	800840c <RadioOnRxTimeoutProcess>
}
 80083d0:	bf00      	nop
 80083d2:	3708      	adds	r7, #8
 80083d4:	46bd      	mov	sp, r7
 80083d6:	bd80      	pop	{r7, pc}

080083d8 <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_TX( RST );
 80083dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80083e0:	4808      	ldr	r0, [pc, #32]	; (8008404 <RadioOnTxTimeoutProcess+0x2c>)
 80083e2:	f7fe ff3c 	bl	800725e <LL_GPIO_ResetOutputPin>

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 80083e6:	4b08      	ldr	r3, [pc, #32]	; (8008408 <RadioOnTxTimeoutProcess+0x30>)
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d008      	beq.n	8008400 <RadioOnTxTimeoutProcess+0x28>
 80083ee:	4b06      	ldr	r3, [pc, #24]	; (8008408 <RadioOnTxTimeoutProcess+0x30>)
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	685b      	ldr	r3, [r3, #4]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d003      	beq.n	8008400 <RadioOnTxTimeoutProcess+0x28>
    {
        RadioEvents->TxTimeout( );
 80083f8:	4b03      	ldr	r3, [pc, #12]	; (8008408 <RadioOnTxTimeoutProcess+0x30>)
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	685b      	ldr	r3, [r3, #4]
 80083fe:	4798      	blx	r3
    }
}
 8008400:	bf00      	nop
 8008402:	bd80      	pop	{r7, pc}
 8008404:	48000400 	.word	0x48000400
 8008408:	20000284 	.word	0x20000284

0800840c <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 800840c:	b580      	push	{r7, lr}
 800840e:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_RX( RST );
 8008410:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008414:	4808      	ldr	r0, [pc, #32]	; (8008438 <RadioOnRxTimeoutProcess+0x2c>)
 8008416:	f7fe ff22 	bl	800725e <LL_GPIO_ResetOutputPin>

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800841a:	4b08      	ldr	r3, [pc, #32]	; (800843c <RadioOnRxTimeoutProcess+0x30>)
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d008      	beq.n	8008434 <RadioOnRxTimeoutProcess+0x28>
 8008422:	4b06      	ldr	r3, [pc, #24]	; (800843c <RadioOnRxTimeoutProcess+0x30>)
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	68db      	ldr	r3, [r3, #12]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d003      	beq.n	8008434 <RadioOnRxTimeoutProcess+0x28>
    {
        RadioEvents->RxTimeout( );
 800842c:	4b03      	ldr	r3, [pc, #12]	; (800843c <RadioOnRxTimeoutProcess+0x30>)
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	68db      	ldr	r3, [r3, #12]
 8008432:	4798      	blx	r3
    }
}
 8008434:	bf00      	nop
 8008436:	bd80      	pop	{r7, pc}
 8008438:	48000400 	.word	0x48000400
 800843c:	20000284 	.word	0x20000284

08008440 <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b082      	sub	sp, #8
 8008444:	af00      	add	r7, sp, #0
 8008446:	4603      	mov	r3, r0
 8008448:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 800844a:	4a05      	ldr	r2, [pc, #20]	; (8008460 <RadioOnDioIrq+0x20>)
 800844c:	88fb      	ldrh	r3, [r7, #6]
 800844e:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

    RADIO_IRQ_PROCESS();
 8008452:	f000 f807 	bl	8008464 <RadioIrqProcess>
}
 8008456:	bf00      	nop
 8008458:	3708      	adds	r7, #8
 800845a:	46bd      	mov	sp, r7
 800845c:	bd80      	pop	{r7, pc}
 800845e:	bf00      	nop
 8008460:	20000288 	.word	0x20000288

08008464 <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 8008464:	b5b0      	push	{r4, r5, r7, lr}
 8008466:	b082      	sub	sp, #8
 8008468:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 800846a:	2300      	movs	r3, #0
 800846c:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 800846e:	2300      	movs	r3, #0
 8008470:	603b      	str	r3, [r7, #0]

    switch( SubgRf.RadioIrq )
 8008472:	4bb2      	ldr	r3, [pc, #712]	; (800873c <RadioIrqProcess+0x2d8>)
 8008474:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8008478:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800847c:	f000 8117 	beq.w	80086ae <RadioIrqProcess+0x24a>
 8008480:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008484:	f300 81fe 	bgt.w	8008884 <RadioIrqProcess+0x420>
 8008488:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800848c:	f000 80fb 	beq.w	8008686 <RadioIrqProcess+0x222>
 8008490:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008494:	f300 81f6 	bgt.w	8008884 <RadioIrqProcess+0x420>
 8008498:	2b80      	cmp	r3, #128	; 0x80
 800849a:	f000 80e0 	beq.w	800865e <RadioIrqProcess+0x1fa>
 800849e:	2b80      	cmp	r3, #128	; 0x80
 80084a0:	f300 81f0 	bgt.w	8008884 <RadioIrqProcess+0x420>
 80084a4:	2b20      	cmp	r3, #32
 80084a6:	dc49      	bgt.n	800853c <RadioIrqProcess+0xd8>
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	f340 81eb 	ble.w	8008884 <RadioIrqProcess+0x420>
 80084ae:	3b01      	subs	r3, #1
 80084b0:	2b1f      	cmp	r3, #31
 80084b2:	f200 81e7 	bhi.w	8008884 <RadioIrqProcess+0x420>
 80084b6:	a201      	add	r2, pc, #4	; (adr r2, 80084bc <RadioIrqProcess+0x58>)
 80084b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084bc:	08008545 	.word	0x08008545
 80084c0:	08008589 	.word	0x08008589
 80084c4:	08008885 	.word	0x08008885
 80084c8:	08008761 	.word	0x08008761
 80084cc:	08008885 	.word	0x08008885
 80084d0:	08008885 	.word	0x08008885
 80084d4:	08008885 	.word	0x08008885
 80084d8:	080087dd 	.word	0x080087dd
 80084dc:	08008885 	.word	0x08008885
 80084e0:	08008885 	.word	0x08008885
 80084e4:	08008885 	.word	0x08008885
 80084e8:	08008885 	.word	0x08008885
 80084ec:	08008885 	.word	0x08008885
 80084f0:	08008885 	.word	0x08008885
 80084f4:	08008885 	.word	0x08008885
 80084f8:	080087f9 	.word	0x080087f9
 80084fc:	08008885 	.word	0x08008885
 8008500:	08008885 	.word	0x08008885
 8008504:	08008885 	.word	0x08008885
 8008508:	08008885 	.word	0x08008885
 800850c:	08008885 	.word	0x08008885
 8008510:	08008885 	.word	0x08008885
 8008514:	08008885 	.word	0x08008885
 8008518:	08008885 	.word	0x08008885
 800851c:	08008885 	.word	0x08008885
 8008520:	08008885 	.word	0x08008885
 8008524:	08008885 	.word	0x08008885
 8008528:	08008885 	.word	0x08008885
 800852c:	08008885 	.word	0x08008885
 8008530:	08008885 	.word	0x08008885
 8008534:	08008885 	.word	0x08008885
 8008538:	08008807 	.word	0x08008807
 800853c:	2b40      	cmp	r3, #64	; 0x40
 800853e:	f000 8183 	beq.w	8008848 <RadioIrqProcess+0x3e4>
        MW_LOG( TS_ON, VLEVEL_M,  "HOP\r\n" );
        break;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    default:
        break;
 8008542:	e19f      	b.n	8008884 <RadioIrqProcess+0x420>
        DBG_GPIO_RADIO_TX( RST );
 8008544:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008548:	487d      	ldr	r0, [pc, #500]	; (8008740 <RadioIrqProcess+0x2dc>)
 800854a:	f7fe fe88 	bl	800725e <LL_GPIO_ResetOutputPin>
        TimerStop( &TxTimeoutTimer );
 800854e:	487d      	ldr	r0, [pc, #500]	; (8008744 <RadioIrqProcess+0x2e0>)
 8008550:	f003 fa40 	bl	800b9d4 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 8008554:	2000      	movs	r0, #0
 8008556:	f001 f82d 	bl	80095b4 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 800855a:	f002 f8a3 	bl	800a6a4 <RFW_Is_LongPacketModeEnabled>
 800855e:	4603      	mov	r3, r0
 8008560:	2b01      	cmp	r3, #1
 8008562:	d101      	bne.n	8008568 <RadioIrqProcess+0x104>
            RFW_DeInit_TxLongPacket( );
 8008564:	f002 f8c7 	bl	800a6f6 <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8008568:	4b77      	ldr	r3, [pc, #476]	; (8008748 <RadioIrqProcess+0x2e4>)
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	2b00      	cmp	r3, #0
 800856e:	f000 818b 	beq.w	8008888 <RadioIrqProcess+0x424>
 8008572:	4b75      	ldr	r3, [pc, #468]	; (8008748 <RadioIrqProcess+0x2e4>)
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	2b00      	cmp	r3, #0
 800857a:	f000 8185 	beq.w	8008888 <RadioIrqProcess+0x424>
            RadioEvents->TxDone( );
 800857e:	4b72      	ldr	r3, [pc, #456]	; (8008748 <RadioIrqProcess+0x2e4>)
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	4798      	blx	r3
        break;
 8008586:	e17f      	b.n	8008888 <RadioIrqProcess+0x424>
        DBG_GPIO_RADIO_RX( RST );
 8008588:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800858c:	486c      	ldr	r0, [pc, #432]	; (8008740 <RadioIrqProcess+0x2dc>)
 800858e:	f7fe fe66 	bl	800725e <LL_GPIO_ResetOutputPin>
        TimerStop( &RxTimeoutTimer );
 8008592:	486e      	ldr	r0, [pc, #440]	; (800874c <RadioIrqProcess+0x2e8>)
 8008594:	f003 fa1e 	bl	800b9d4 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8008598:	4b68      	ldr	r3, [pc, #416]	; (800873c <RadioIrqProcess+0x2d8>)
 800859a:	785b      	ldrb	r3, [r3, #1]
 800859c:	f083 0301 	eor.w	r3, r3, #1
 80085a0:	b2db      	uxtb	r3, r3
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d014      	beq.n	80085d0 <RadioIrqProcess+0x16c>
            SUBGRF_SetStandby( STDBY_RC );
 80085a6:	2000      	movs	r0, #0
 80085a8:	f001 f804 	bl	80095b4 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 80085ac:	2100      	movs	r1, #0
 80085ae:	f640 1002 	movw	r0, #2306	; 0x902
 80085b2:	f001 fd83 	bl	800a0bc <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 80085b6:	f640 1044 	movw	r0, #2372	; 0x944
 80085ba:	f001 fd93 	bl	800a0e4 <SUBGRF_ReadRegister>
 80085be:	4603      	mov	r3, r0
 80085c0:	f043 0302 	orr.w	r3, r3, #2
 80085c4:	b2db      	uxtb	r3, r3
 80085c6:	4619      	mov	r1, r3
 80085c8:	f640 1044 	movw	r0, #2372	; 0x944
 80085cc:	f001 fd76 	bl	800a0bc <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 80085d0:	1dfb      	adds	r3, r7, #7
 80085d2:	22ff      	movs	r2, #255	; 0xff
 80085d4:	4619      	mov	r1, r3
 80085d6:	485e      	ldr	r0, [pc, #376]	; (8008750 <RadioIrqProcess+0x2ec>)
 80085d8:	f000 febc 	bl	8009354 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 80085dc:	485d      	ldr	r0, [pc, #372]	; (8008754 <RadioIrqProcess+0x2f0>)
 80085de:	f001 fd1b 	bl	800a018 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 80085e2:	4b59      	ldr	r3, [pc, #356]	; (8008748 <RadioIrqProcess+0x2e4>)
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	f000 8150 	beq.w	800888c <RadioIrqProcess+0x428>
 80085ec:	4b56      	ldr	r3, [pc, #344]	; (8008748 <RadioIrqProcess+0x2e4>)
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	689b      	ldr	r3, [r3, #8]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	f000 814a 	beq.w	800888c <RadioIrqProcess+0x428>
            switch( SubgRf.PacketStatus.packetType )
 80085f8:	4b50      	ldr	r3, [pc, #320]	; (800873c <RadioIrqProcess+0x2d8>)
 80085fa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80085fe:	2b01      	cmp	r3, #1
 8008600:	d10e      	bne.n	8008620 <RadioIrqProcess+0x1bc>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt,
 8008602:	4b51      	ldr	r3, [pc, #324]	; (8008748 <RadioIrqProcess+0x2e4>)
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	689c      	ldr	r4, [r3, #8]
 8008608:	79fb      	ldrb	r3, [r7, #7]
 800860a:	b299      	uxth	r1, r3
 800860c:	4b4b      	ldr	r3, [pc, #300]	; (800873c <RadioIrqProcess+0x2d8>)
 800860e:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 8008612:	b21a      	sxth	r2, r3
 8008614:	4b49      	ldr	r3, [pc, #292]	; (800873c <RadioIrqProcess+0x2d8>)
 8008616:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 800861a:	484d      	ldr	r0, [pc, #308]	; (8008750 <RadioIrqProcess+0x2ec>)
 800861c:	47a0      	blx	r4
                break;
 800861e:	e01d      	b.n	800865c <RadioIrqProcess+0x1f8>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 8008620:	4b46      	ldr	r3, [pc, #280]	; (800873c <RadioIrqProcess+0x2d8>)
 8008622:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008624:	463a      	mov	r2, r7
 8008626:	4611      	mov	r1, r2
 8008628:	4618      	mov	r0, r3
 800862a:	f001 ff89 	bl	800a540 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, ( int8_t ) DIVR( cfo, 1000 ) );
 800862e:	4b46      	ldr	r3, [pc, #280]	; (8008748 <RadioIrqProcess+0x2e4>)
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	689c      	ldr	r4, [r3, #8]
 8008634:	79fb      	ldrb	r3, [r7, #7]
 8008636:	b299      	uxth	r1, r3
 8008638:	4b40      	ldr	r3, [pc, #256]	; (800873c <RadioIrqProcess+0x2d8>)
 800863a:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 800863e:	b218      	sxth	r0, r3
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008646:	4a44      	ldr	r2, [pc, #272]	; (8008758 <RadioIrqProcess+0x2f4>)
 8008648:	fb82 5203 	smull	r5, r2, r2, r3
 800864c:	1192      	asrs	r2, r2, #6
 800864e:	17db      	asrs	r3, r3, #31
 8008650:	1ad3      	subs	r3, r2, r3
 8008652:	b25b      	sxtb	r3, r3
 8008654:	4602      	mov	r2, r0
 8008656:	483e      	ldr	r0, [pc, #248]	; (8008750 <RadioIrqProcess+0x2ec>)
 8008658:	47a0      	blx	r4
                break;
 800865a:	bf00      	nop
        break;
 800865c:	e116      	b.n	800888c <RadioIrqProcess+0x428>
        SUBGRF_SetStandby( STDBY_RC );
 800865e:	2000      	movs	r0, #0
 8008660:	f000 ffa8 	bl	80095b4 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8008664:	4b38      	ldr	r3, [pc, #224]	; (8008748 <RadioIrqProcess+0x2e4>)
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	2b00      	cmp	r3, #0
 800866a:	f000 8111 	beq.w	8008890 <RadioIrqProcess+0x42c>
 800866e:	4b36      	ldr	r3, [pc, #216]	; (8008748 <RadioIrqProcess+0x2e4>)
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	699b      	ldr	r3, [r3, #24]
 8008674:	2b00      	cmp	r3, #0
 8008676:	f000 810b 	beq.w	8008890 <RadioIrqProcess+0x42c>
            RadioEvents->CadDone( false );
 800867a:	4b33      	ldr	r3, [pc, #204]	; (8008748 <RadioIrqProcess+0x2e4>)
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	699b      	ldr	r3, [r3, #24]
 8008680:	2000      	movs	r0, #0
 8008682:	4798      	blx	r3
        break;
 8008684:	e104      	b.n	8008890 <RadioIrqProcess+0x42c>
        SUBGRF_SetStandby( STDBY_RC );
 8008686:	2000      	movs	r0, #0
 8008688:	f000 ff94 	bl	80095b4 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800868c:	4b2e      	ldr	r3, [pc, #184]	; (8008748 <RadioIrqProcess+0x2e4>)
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	2b00      	cmp	r3, #0
 8008692:	f000 80ff 	beq.w	8008894 <RadioIrqProcess+0x430>
 8008696:	4b2c      	ldr	r3, [pc, #176]	; (8008748 <RadioIrqProcess+0x2e4>)
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	699b      	ldr	r3, [r3, #24]
 800869c:	2b00      	cmp	r3, #0
 800869e:	f000 80f9 	beq.w	8008894 <RadioIrqProcess+0x430>
            RadioEvents->CadDone( true );
 80086a2:	4b29      	ldr	r3, [pc, #164]	; (8008748 <RadioIrqProcess+0x2e4>)
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	699b      	ldr	r3, [r3, #24]
 80086a8:	2001      	movs	r0, #1
 80086aa:	4798      	blx	r3
        break;
 80086ac:	e0f2      	b.n	8008894 <RadioIrqProcess+0x430>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 80086ae:	4b2b      	ldr	r3, [pc, #172]	; (800875c <RadioIrqProcess+0x2f8>)
 80086b0:	2201      	movs	r2, #1
 80086b2:	2100      	movs	r1, #0
 80086b4:	2002      	movs	r0, #2
 80086b6:	f003 fb85 	bl	800bdc4 <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 80086ba:	f000 fe31 	bl	8009320 <SUBGRF_GetOperatingMode>
 80086be:	4603      	mov	r3, r0
 80086c0:	2b04      	cmp	r3, #4
 80086c2:	d11a      	bne.n	80086fa <RadioIrqProcess+0x296>
            DBG_GPIO_RADIO_TX( RST );
 80086c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80086c8:	481d      	ldr	r0, [pc, #116]	; (8008740 <RadioIrqProcess+0x2dc>)
 80086ca:	f7fe fdc8 	bl	800725e <LL_GPIO_ResetOutputPin>
            TimerStop( &TxTimeoutTimer );
 80086ce:	481d      	ldr	r0, [pc, #116]	; (8008744 <RadioIrqProcess+0x2e0>)
 80086d0:	f003 f980 	bl	800b9d4 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 80086d4:	2000      	movs	r0, #0
 80086d6:	f000 ff6d 	bl	80095b4 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 80086da:	4b1b      	ldr	r3, [pc, #108]	; (8008748 <RadioIrqProcess+0x2e4>)
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	f000 80da 	beq.w	8008898 <RadioIrqProcess+0x434>
 80086e4:	4b18      	ldr	r3, [pc, #96]	; (8008748 <RadioIrqProcess+0x2e4>)
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	685b      	ldr	r3, [r3, #4]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	f000 80d4 	beq.w	8008898 <RadioIrqProcess+0x434>
                RadioEvents->TxTimeout( );
 80086f0:	4b15      	ldr	r3, [pc, #84]	; (8008748 <RadioIrqProcess+0x2e4>)
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	685b      	ldr	r3, [r3, #4]
 80086f6:	4798      	blx	r3
        break;
 80086f8:	e0ce      	b.n	8008898 <RadioIrqProcess+0x434>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 80086fa:	f000 fe11 	bl	8009320 <SUBGRF_GetOperatingMode>
 80086fe:	4603      	mov	r3, r0
 8008700:	2b05      	cmp	r3, #5
 8008702:	f040 80c9 	bne.w	8008898 <RadioIrqProcess+0x434>
            DBG_GPIO_RADIO_RX( RST );
 8008706:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800870a:	480d      	ldr	r0, [pc, #52]	; (8008740 <RadioIrqProcess+0x2dc>)
 800870c:	f7fe fda7 	bl	800725e <LL_GPIO_ResetOutputPin>
            TimerStop( &RxTimeoutTimer );
 8008710:	480e      	ldr	r0, [pc, #56]	; (800874c <RadioIrqProcess+0x2e8>)
 8008712:	f003 f95f 	bl	800b9d4 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8008716:	2000      	movs	r0, #0
 8008718:	f000 ff4c 	bl	80095b4 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800871c:	4b0a      	ldr	r3, [pc, #40]	; (8008748 <RadioIrqProcess+0x2e4>)
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	2b00      	cmp	r3, #0
 8008722:	f000 80b9 	beq.w	8008898 <RadioIrqProcess+0x434>
 8008726:	4b08      	ldr	r3, [pc, #32]	; (8008748 <RadioIrqProcess+0x2e4>)
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	68db      	ldr	r3, [r3, #12]
 800872c:	2b00      	cmp	r3, #0
 800872e:	f000 80b3 	beq.w	8008898 <RadioIrqProcess+0x434>
                RadioEvents->RxTimeout( );
 8008732:	4b05      	ldr	r3, [pc, #20]	; (8008748 <RadioIrqProcess+0x2e4>)
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	68db      	ldr	r3, [r3, #12]
 8008738:	4798      	blx	r3
        break;
 800873a:	e0ad      	b.n	8008898 <RadioIrqProcess+0x434>
 800873c:	20000288 	.word	0x20000288
 8008740:	48000400 	.word	0x48000400
 8008744:	200002e4 	.word	0x200002e4
 8008748:	20000284 	.word	0x20000284
 800874c:	200002fc 	.word	0x200002fc
 8008750:	20000184 	.word	0x20000184
 8008754:	200002ac 	.word	0x200002ac
 8008758:	10624dd3 	.word	0x10624dd3
 800875c:	0800c3b4 	.word	0x0800c3b4
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 8008760:	4b54      	ldr	r3, [pc, #336]	; (80088b4 <RadioIrqProcess+0x450>)
 8008762:	2201      	movs	r2, #1
 8008764:	2100      	movs	r1, #0
 8008766:	2002      	movs	r0, #2
 8008768:	f003 fb2c 	bl	800bdc4 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 800876c:	4b52      	ldr	r3, [pc, #328]	; (80088b8 <RadioIrqProcess+0x454>)
 800876e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008770:	2b00      	cmp	r3, #0
 8008772:	f000 8093 	beq.w	800889c <RadioIrqProcess+0x438>
            Radio.Write( SUBGHZ_RTCPRDR2, ( SubgRf.RxDcPreambleDetectTimeout >> 16 ) & 0xFF ); /*Update Radio RTC Period MSB*/
 8008776:	4a51      	ldr	r2, [pc, #324]	; (80088bc <RadioIrqProcess+0x458>)
 8008778:	4b4f      	ldr	r3, [pc, #316]	; (80088b8 <RadioIrqProcess+0x454>)
 800877a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800877c:	0c1b      	lsrs	r3, r3, #16
 800877e:	b2db      	uxtb	r3, r3
 8008780:	4619      	mov	r1, r3
 8008782:	f640 1003 	movw	r0, #2307	; 0x903
 8008786:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR1, ( SubgRf.RxDcPreambleDetectTimeout >> 8 ) & 0xFF ); /*Update Radio RTC Period MidByte*/
 8008788:	4a4c      	ldr	r2, [pc, #304]	; (80088bc <RadioIrqProcess+0x458>)
 800878a:	4b4b      	ldr	r3, [pc, #300]	; (80088b8 <RadioIrqProcess+0x454>)
 800878c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800878e:	0a1b      	lsrs	r3, r3, #8
 8008790:	b2db      	uxtb	r3, r3
 8008792:	4619      	mov	r1, r3
 8008794:	f640 1004 	movw	r0, #2308	; 0x904
 8008798:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR0, ( SubgRf.RxDcPreambleDetectTimeout ) & 0xFF ); /*Update Radio RTC Period lsb*/
 800879a:	4a48      	ldr	r2, [pc, #288]	; (80088bc <RadioIrqProcess+0x458>)
 800879c:	4b46      	ldr	r3, [pc, #280]	; (80088b8 <RadioIrqProcess+0x454>)
 800879e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087a0:	b2db      	uxtb	r3, r3
 80087a2:	4619      	mov	r1, r3
 80087a4:	f640 1005 	movw	r0, #2309	; 0x905
 80087a8:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCCTLR, Radio.Read( SUBGHZ_RTCCTLR ) | 0x1 ); /*restart Radio RTC*/
 80087aa:	4c44      	ldr	r4, [pc, #272]	; (80088bc <RadioIrqProcess+0x458>)
 80087ac:	4b44      	ldr	r3, [pc, #272]	; (80088c0 <RadioIrqProcess+0x45c>)
 80087ae:	f640 1002 	movw	r0, #2306	; 0x902
 80087b2:	4798      	blx	r3
 80087b4:	4603      	mov	r3, r0
 80087b6:	f043 0301 	orr.w	r3, r3, #1
 80087ba:	b2db      	uxtb	r3, r3
 80087bc:	4619      	mov	r1, r3
 80087be:	f640 1002 	movw	r0, #2306	; 0x902
 80087c2:	47a0      	blx	r4
            SubgRf.RxDcPreambleDetectTimeout = 0;
 80087c4:	4b3c      	ldr	r3, [pc, #240]	; (80088b8 <RadioIrqProcess+0x454>)
 80087c6:	2200      	movs	r2, #0
 80087c8:	659a      	str	r2, [r3, #88]	; 0x58
            SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 80087ca:	2300      	movs	r3, #0
 80087cc:	2200      	movs	r2, #0
 80087ce:	f240 2162 	movw	r1, #610	; 0x262
 80087d2:	f240 2062 	movw	r0, #610	; 0x262
 80087d6:	f001 f8c1 	bl	800995c <SUBGRF_SetDioIrqParams>
        break;
 80087da:	e05f      	b.n	800889c <RadioIrqProcess+0x438>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 80087dc:	4b39      	ldr	r3, [pc, #228]	; (80088c4 <RadioIrqProcess+0x460>)
 80087de:	2201      	movs	r2, #1
 80087e0:	2100      	movs	r1, #0
 80087e2:	2002      	movs	r0, #2
 80087e4:	f003 faee 	bl	800bdc4 <UTIL_ADV_TRACE_COND_FSend>
        if( 1UL == RFW_Is_Init( ) )
 80087e8:	f001 ff55 	bl	800a696 <RFW_Is_Init>
 80087ec:	4603      	mov	r3, r0
 80087ee:	2b01      	cmp	r3, #1
 80087f0:	d156      	bne.n	80088a0 <RadioIrqProcess+0x43c>
            RFW_ReceivePayload( );
 80087f2:	f001 ff86 	bl	800a702 <RFW_ReceivePayload>
        break;
 80087f6:	e053      	b.n	80088a0 <RadioIrqProcess+0x43c>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 80087f8:	4b33      	ldr	r3, [pc, #204]	; (80088c8 <RadioIrqProcess+0x464>)
 80087fa:	2201      	movs	r2, #1
 80087fc:	2100      	movs	r1, #0
 80087fe:	2002      	movs	r0, #2
 8008800:	f003 fae0 	bl	800bdc4 <UTIL_ADV_TRACE_COND_FSend>
        break;
 8008804:	e051      	b.n	80088aa <RadioIrqProcess+0x446>
        TimerStop( &RxTimeoutTimer );
 8008806:	4831      	ldr	r0, [pc, #196]	; (80088cc <RadioIrqProcess+0x468>)
 8008808:	f003 f8e4 	bl	800b9d4 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 800880c:	4b2a      	ldr	r3, [pc, #168]	; (80088b8 <RadioIrqProcess+0x454>)
 800880e:	785b      	ldrb	r3, [r3, #1]
 8008810:	f083 0301 	eor.w	r3, r3, #1
 8008814:	b2db      	uxtb	r3, r3
 8008816:	2b00      	cmp	r3, #0
 8008818:	d002      	beq.n	8008820 <RadioIrqProcess+0x3bc>
            SUBGRF_SetStandby( STDBY_RC );
 800881a:	2000      	movs	r0, #0
 800881c:	f000 feca 	bl	80095b4 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8008820:	4b2b      	ldr	r3, [pc, #172]	; (80088d0 <RadioIrqProcess+0x46c>)
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d03d      	beq.n	80088a4 <RadioIrqProcess+0x440>
 8008828:	4b29      	ldr	r3, [pc, #164]	; (80088d0 <RadioIrqProcess+0x46c>)
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	68db      	ldr	r3, [r3, #12]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d038      	beq.n	80088a4 <RadioIrqProcess+0x440>
            RadioEvents->RxTimeout( );
 8008832:	4b27      	ldr	r3, [pc, #156]	; (80088d0 <RadioIrqProcess+0x46c>)
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	68db      	ldr	r3, [r3, #12]
 8008838:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 800883a:	4b26      	ldr	r3, [pc, #152]	; (80088d4 <RadioIrqProcess+0x470>)
 800883c:	2201      	movs	r2, #1
 800883e:	2100      	movs	r1, #0
 8008840:	2002      	movs	r0, #2
 8008842:	f003 fabf 	bl	800bdc4 <UTIL_ADV_TRACE_COND_FSend>
        break;
 8008846:	e02d      	b.n	80088a4 <RadioIrqProcess+0x440>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 8008848:	4b23      	ldr	r3, [pc, #140]	; (80088d8 <RadioIrqProcess+0x474>)
 800884a:	2201      	movs	r2, #1
 800884c:	2100      	movs	r1, #0
 800884e:	2002      	movs	r0, #2
 8008850:	f003 fab8 	bl	800bdc4 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 8008854:	4b18      	ldr	r3, [pc, #96]	; (80088b8 <RadioIrqProcess+0x454>)
 8008856:	785b      	ldrb	r3, [r3, #1]
 8008858:	f083 0301 	eor.w	r3, r3, #1
 800885c:	b2db      	uxtb	r3, r3
 800885e:	2b00      	cmp	r3, #0
 8008860:	d002      	beq.n	8008868 <RadioIrqProcess+0x404>
            SUBGRF_SetStandby( STDBY_RC );
 8008862:	2000      	movs	r0, #0
 8008864:	f000 fea6 	bl	80095b4 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 8008868:	4b19      	ldr	r3, [pc, #100]	; (80088d0 <RadioIrqProcess+0x46c>)
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d01b      	beq.n	80088a8 <RadioIrqProcess+0x444>
 8008870:	4b17      	ldr	r3, [pc, #92]	; (80088d0 <RadioIrqProcess+0x46c>)
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	691b      	ldr	r3, [r3, #16]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d016      	beq.n	80088a8 <RadioIrqProcess+0x444>
            RadioEvents->RxError( );
 800887a:	4b15      	ldr	r3, [pc, #84]	; (80088d0 <RadioIrqProcess+0x46c>)
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	691b      	ldr	r3, [r3, #16]
 8008880:	4798      	blx	r3
        break;
 8008882:	e011      	b.n	80088a8 <RadioIrqProcess+0x444>
        break;
 8008884:	bf00      	nop
 8008886:	e010      	b.n	80088aa <RadioIrqProcess+0x446>
        break;
 8008888:	bf00      	nop
 800888a:	e00e      	b.n	80088aa <RadioIrqProcess+0x446>
        break;
 800888c:	bf00      	nop
 800888e:	e00c      	b.n	80088aa <RadioIrqProcess+0x446>
        break;
 8008890:	bf00      	nop
 8008892:	e00a      	b.n	80088aa <RadioIrqProcess+0x446>
        break;
 8008894:	bf00      	nop
 8008896:	e008      	b.n	80088aa <RadioIrqProcess+0x446>
        break;
 8008898:	bf00      	nop
 800889a:	e006      	b.n	80088aa <RadioIrqProcess+0x446>
        break;
 800889c:	bf00      	nop
 800889e:	e004      	b.n	80088aa <RadioIrqProcess+0x446>
        break;
 80088a0:	bf00      	nop
 80088a2:	e002      	b.n	80088aa <RadioIrqProcess+0x446>
        break;
 80088a4:	bf00      	nop
 80088a6:	e000      	b.n	80088aa <RadioIrqProcess+0x446>
        break;
 80088a8:	bf00      	nop
    }
}
 80088aa:	bf00      	nop
 80088ac:	3708      	adds	r7, #8
 80088ae:	46bd      	mov	sp, r7
 80088b0:	bdb0      	pop	{r4, r5, r7, pc}
 80088b2:	bf00      	nop
 80088b4:	0800c3c8 	.word	0x0800c3c8
 80088b8:	20000288 	.word	0x20000288
 80088bc:	0800825b 	.word	0x0800825b
 80088c0:	0800827f 	.word	0x0800827f
 80088c4:	0800c3d4 	.word	0x0800c3d4
 80088c8:	0800c3e0 	.word	0x0800c3e0
 80088cc:	200002fc 	.word	0x200002fc
 80088d0:	20000284 	.word	0x20000284
 80088d4:	0800c3ec 	.word	0x0800c3ec
 80088d8:	0800c3f8 	.word	0x0800c3f8

080088dc <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 80088e0:	4b09      	ldr	r3, [pc, #36]	; (8008908 <RadioTxPrbs+0x2c>)
 80088e2:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80088e6:	2101      	movs	r1, #1
 80088e8:	4618      	mov	r0, r3
 80088ea:	f001 fcdb 	bl	800a2a4 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 80088ee:	4b07      	ldr	r3, [pc, #28]	; (800890c <RadioTxPrbs+0x30>)
 80088f0:	212d      	movs	r1, #45	; 0x2d
 80088f2:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 80088f6:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 80088f8:	f000 ff1f 	bl	800973a <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 80088fc:	4804      	ldr	r0, [pc, #16]	; (8008910 <RadioTxPrbs+0x34>)
 80088fe:	f000 fe75 	bl	80095ec <SUBGRF_SetTx>
}
 8008902:	bf00      	nop
 8008904:	bd80      	pop	{r7, pc}
 8008906:	bf00      	nop
 8008908:	20000288 	.word	0x20000288
 800890c:	0800825b 	.word	0x0800825b
 8008910:	000fffff 	.word	0x000fffff

08008914 <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 8008914:	b580      	push	{r7, lr}
 8008916:	b084      	sub	sp, #16
 8008918:	af00      	add	r7, sp, #0
 800891a:	4603      	mov	r3, r0
 800891c:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 800891e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008922:	4618      	mov	r0, r3
 8008924:	f001 fce6 	bl	800a2f4 <SUBGRF_SetRfTxPower>
 8008928:	4603      	mov	r3, r0
 800892a:	73fb      	strb	r3, [r7, #15]
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 800892c:	210e      	movs	r1, #14
 800892e:	f640 101f 	movw	r0, #2335	; 0x91f
 8008932:	f001 fbc3 	bl	800a0bc <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 8008936:	7bfb      	ldrb	r3, [r7, #15]
 8008938:	2101      	movs	r1, #1
 800893a:	4618      	mov	r0, r3
 800893c:	f001 fcb2 	bl	800a2a4 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 8008940:	f000 fef2 	bl	8009728 <SUBGRF_SetTxContinuousWave>
}
 8008944:	bf00      	nop
 8008946:	3710      	adds	r7, #16
 8008948:	46bd      	mov	sp, r7
 800894a:	bd80      	pop	{r7, pc}

0800894c <payload_integration>:

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 800894c:	b480      	push	{r7}
 800894e:	b089      	sub	sp, #36	; 0x24
 8008950:	af00      	add	r7, sp, #0
 8008952:	60f8      	str	r0, [r7, #12]
 8008954:	60b9      	str	r1, [r7, #8]
 8008956:	4613      	mov	r3, r2
 8008958:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 800895a:	2300      	movs	r3, #0
 800895c:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;
 800895e:	2300      	movs	r3, #0
 8008960:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < size; i++ )
 8008962:	2300      	movs	r3, #0
 8008964:	61bb      	str	r3, [r7, #24]
 8008966:	e011      	b.n	800898c <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 8008968:	69bb      	ldr	r3, [r7, #24]
 800896a:	68ba      	ldr	r2, [r7, #8]
 800896c:	4413      	add	r3, r2
 800896e:	781a      	ldrb	r2, [r3, #0]
 8008970:	69bb      	ldr	r3, [r7, #24]
 8008972:	68b9      	ldr	r1, [r7, #8]
 8008974:	440b      	add	r3, r1
 8008976:	43d2      	mvns	r2, r2
 8008978:	b2d2      	uxtb	r2, r2
 800897a:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 800897c:	69bb      	ldr	r3, [r7, #24]
 800897e:	68fa      	ldr	r2, [r7, #12]
 8008980:	4413      	add	r3, r2
 8008982:	2200      	movs	r2, #0
 8008984:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 8008986:	69bb      	ldr	r3, [r7, #24]
 8008988:	3301      	adds	r3, #1
 800898a:	61bb      	str	r3, [r7, #24]
 800898c:	79fb      	ldrb	r3, [r7, #7]
 800898e:	69ba      	ldr	r2, [r7, #24]
 8008990:	429a      	cmp	r2, r3
 8008992:	dbe9      	blt.n	8008968 <payload_integration+0x1c>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 8008994:	2300      	movs	r3, #0
 8008996:	61bb      	str	r3, [r7, #24]
 8008998:	e049      	b.n	8008a2e <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 800899a:	69bb      	ldr	r3, [r7, #24]
 800899c:	425a      	negs	r2, r3
 800899e:	f003 0307 	and.w	r3, r3, #7
 80089a2:	f002 0207 	and.w	r2, r2, #7
 80089a6:	bf58      	it	pl
 80089a8:	4253      	negpl	r3, r2
 80089aa:	b2db      	uxtb	r3, r3
 80089ac:	f1c3 0307 	rsb	r3, r3, #7
 80089b0:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 80089b2:	69bb      	ldr	r3, [r7, #24]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	da00      	bge.n	80089ba <payload_integration+0x6e>
 80089b8:	3307      	adds	r3, #7
 80089ba:	10db      	asrs	r3, r3, #3
 80089bc:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 80089be:	69bb      	ldr	r3, [r7, #24]
 80089c0:	3301      	adds	r3, #1
 80089c2:	425a      	negs	r2, r3
 80089c4:	f003 0307 	and.w	r3, r3, #7
 80089c8:	f002 0207 	and.w	r2, r2, #7
 80089cc:	bf58      	it	pl
 80089ce:	4253      	negpl	r3, r2
 80089d0:	b2db      	uxtb	r3, r3
 80089d2:	f1c3 0307 	rsb	r3, r3, #7
 80089d6:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 80089d8:	69bb      	ldr	r3, [r7, #24]
 80089da:	3301      	adds	r3, #1
 80089dc:	2b00      	cmp	r3, #0
 80089de:	da00      	bge.n	80089e2 <payload_integration+0x96>
 80089e0:	3307      	adds	r3, #7
 80089e2:	10db      	asrs	r3, r3, #3
 80089e4:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 80089e6:	7dbb      	ldrb	r3, [r7, #22]
 80089e8:	68ba      	ldr	r2, [r7, #8]
 80089ea:	4413      	add	r3, r2
 80089ec:	781b      	ldrb	r3, [r3, #0]
 80089ee:	461a      	mov	r2, r3
 80089f0:	7dfb      	ldrb	r3, [r7, #23]
 80089f2:	fa42 f303 	asr.w	r3, r2, r3
 80089f6:	b2db      	uxtb	r3, r3
 80089f8:	f003 0301 	and.w	r3, r3, #1
 80089fc:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 80089fe:	7ffa      	ldrb	r2, [r7, #31]
 8008a00:	7cfb      	ldrb	r3, [r7, #19]
 8008a02:	4053      	eors	r3, r2
 8008a04:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 8008a06:	7d3b      	ldrb	r3, [r7, #20]
 8008a08:	68fa      	ldr	r2, [r7, #12]
 8008a0a:	4413      	add	r3, r2
 8008a0c:	781b      	ldrb	r3, [r3, #0]
 8008a0e:	b25a      	sxtb	r2, r3
 8008a10:	7ff9      	ldrb	r1, [r7, #31]
 8008a12:	7d7b      	ldrb	r3, [r7, #21]
 8008a14:	fa01 f303 	lsl.w	r3, r1, r3
 8008a18:	b25b      	sxtb	r3, r3
 8008a1a:	4313      	orrs	r3, r2
 8008a1c:	b259      	sxtb	r1, r3
 8008a1e:	7d3b      	ldrb	r3, [r7, #20]
 8008a20:	68fa      	ldr	r2, [r7, #12]
 8008a22:	4413      	add	r3, r2
 8008a24:	b2ca      	uxtb	r2, r1
 8008a26:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < ( size * 8 ); i++ )
 8008a28:	69bb      	ldr	r3, [r7, #24]
 8008a2a:	3301      	adds	r3, #1
 8008a2c:	61bb      	str	r3, [r7, #24]
 8008a2e:	79fb      	ldrb	r3, [r7, #7]
 8008a30:	00db      	lsls	r3, r3, #3
 8008a32:	69ba      	ldr	r2, [r7, #24]
 8008a34:	429a      	cmp	r2, r3
 8008a36:	dbb0      	blt.n	800899a <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 8008a38:	7ffb      	ldrb	r3, [r7, #31]
 8008a3a:	01db      	lsls	r3, r3, #7
 8008a3c:	b25a      	sxtb	r2, r3
 8008a3e:	7ffb      	ldrb	r3, [r7, #31]
 8008a40:	019b      	lsls	r3, r3, #6
 8008a42:	b25b      	sxtb	r3, r3
 8008a44:	4313      	orrs	r3, r2
 8008a46:	b25b      	sxtb	r3, r3
 8008a48:	7ffa      	ldrb	r2, [r7, #31]
 8008a4a:	2a00      	cmp	r2, #0
 8008a4c:	d101      	bne.n	8008a52 <payload_integration+0x106>
 8008a4e:	2220      	movs	r2, #32
 8008a50:	e000      	b.n	8008a54 <payload_integration+0x108>
 8008a52:	2200      	movs	r2, #0
 8008a54:	4313      	orrs	r3, r2
 8008a56:	b259      	sxtb	r1, r3
 8008a58:	79fb      	ldrb	r3, [r7, #7]
 8008a5a:	68fa      	ldr	r2, [r7, #12]
 8008a5c:	4413      	add	r3, r2
 8008a5e:	b2ca      	uxtb	r2, r1
 8008a60:	701a      	strb	r2, [r3, #0]
}
 8008a62:	bf00      	nop
 8008a64:	3724      	adds	r7, #36	; 0x24
 8008a66:	46bd      	mov	sp, r7
 8008a68:	bc80      	pop	{r7}
 8008a6a:	4770      	bx	lr

08008a6c <RadioSetRxGenericConfig>:
#endif /*RADIO_SIGFOX_ENABLE == 1*/

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t *config, uint32_t rxContinuous,
                                        uint32_t symbTimeout )
{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b08c      	sub	sp, #48	; 0x30
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	60b9      	str	r1, [r7, #8]
 8008a74:	607a      	str	r2, [r7, #4]
 8008a76:	603b      	str	r3, [r7, #0]
 8008a78:	4603      	mov	r3, r0
 8008a7a:	73fb      	strb	r3, [r7, #15]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    int32_t status = 0;
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	62bb      	str	r3, [r7, #40]	; 0x28
    uint8_t syncword[8] = {0};
 8008a80:	2300      	movs	r3, #0
 8008a82:	623b      	str	r3, [r7, #32]
 8008a84:	2300      	movs	r3, #0
 8008a86:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8008a88:	f001 fdff 	bl	800a68a <RFW_DeInit>

    if( rxContinuous != 0 )
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d001      	beq.n	8008a96 <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 8008a92:	2300      	movs	r3, #0
 8008a94:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	bf14      	ite	ne
 8008a9c:	2301      	movne	r3, #1
 8008a9e:	2300      	moveq	r3, #0
 8008aa0:	b2da      	uxtb	r2, r3
 8008aa2:	4ba3      	ldr	r3, [pc, #652]	; (8008d30 <RadioSetRxGenericConfig+0x2c4>)
 8008aa4:	705a      	strb	r2, [r3, #1]

    switch( modem )
 8008aa6:	7bfb      	ldrb	r3, [r7, #15]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d003      	beq.n	8008ab4 <RadioSetRxGenericConfig+0x48>
 8008aac:	2b01      	cmp	r3, #1
 8008aae:	f000 80dc 	beq.w	8008c6a <RadioSetRxGenericConfig+0x1fe>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 8008ab2:	e194      	b.n	8008dde <RadioSetRxGenericConfig+0x372>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 8008ab4:	68bb      	ldr	r3, [r7, #8]
 8008ab6:	689b      	ldr	r3, [r3, #8]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d003      	beq.n	8008ac4 <RadioSetRxGenericConfig+0x58>
 8008abc:	68bb      	ldr	r3, [r7, #8]
 8008abe:	68db      	ldr	r3, [r3, #12]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d102      	bne.n	8008aca <RadioSetRxGenericConfig+0x5e>
            return -1;
 8008ac4:	f04f 33ff 	mov.w	r3, #4294967295
 8008ac8:	e18a      	b.n	8008de0 <RadioSetRxGenericConfig+0x374>
        if( config->fsk.SyncWordLength > 8 )
 8008aca:	68bb      	ldr	r3, [r7, #8]
 8008acc:	7f9b      	ldrb	r3, [r3, #30]
 8008ace:	2b08      	cmp	r3, #8
 8008ad0:	d902      	bls.n	8008ad8 <RadioSetRxGenericConfig+0x6c>
            return -1;
 8008ad2:	f04f 33ff 	mov.w	r3, #4294967295
 8008ad6:	e183      	b.n	8008de0 <RadioSetRxGenericConfig+0x374>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 8008ad8:	68bb      	ldr	r3, [r7, #8]
 8008ada:	6919      	ldr	r1, [r3, #16]
 8008adc:	68bb      	ldr	r3, [r7, #8]
 8008ade:	7f9b      	ldrb	r3, [r3, #30]
 8008ae0:	b29a      	uxth	r2, r3
 8008ae2:	f107 0320 	add.w	r3, r7, #32
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	f002 fa1e 	bl	800af28 <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8008aec:	68bb      	ldr	r3, [r7, #8]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	bf14      	ite	ne
 8008af4:	2301      	movne	r3, #1
 8008af6:	2300      	moveq	r3, #0
 8008af8:	b2db      	uxtb	r3, r3
 8008afa:	4618      	mov	r0, r3
 8008afc:	f000 fe26 	bl	800974c <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8008b00:	4b8b      	ldr	r3, [pc, #556]	; (8008d30 <RadioSetRxGenericConfig+0x2c4>)
 8008b02:	2200      	movs	r2, #0
 8008b04:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8008b08:	68bb      	ldr	r3, [r7, #8]
 8008b0a:	689b      	ldr	r3, [r3, #8]
 8008b0c:	4a88      	ldr	r2, [pc, #544]	; (8008d30 <RadioSetRxGenericConfig+0x2c4>)
 8008b0e:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 8008b10:	68bb      	ldr	r3, [r7, #8]
 8008b12:	f893 2020 	ldrb.w	r2, [r3, #32]
 8008b16:	4b86      	ldr	r3, [pc, #536]	; (8008d30 <RadioSetRxGenericConfig+0x2c4>)
 8008b18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 8008b1c:	68bb      	ldr	r3, [r7, #8]
 8008b1e:	685b      	ldr	r3, [r3, #4]
 8008b20:	4618      	mov	r0, r3
 8008b22:	f001 fce5 	bl	800a4f0 <SUBGRF_GetFskBandwidthRegValue>
 8008b26:	4603      	mov	r3, r0
 8008b28:	461a      	mov	r2, r3
 8008b2a:	4b81      	ldr	r3, [pc, #516]	; (8008d30 <RadioSetRxGenericConfig+0x2c4>)
 8008b2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8008b30:	4b7f      	ldr	r3, [pc, #508]	; (8008d30 <RadioSetRxGenericConfig+0x2c4>)
 8008b32:	2200      	movs	r2, #0
 8008b34:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 8008b36:	68bb      	ldr	r3, [r7, #8]
 8008b38:	68db      	ldr	r3, [r3, #12]
 8008b3a:	b29b      	uxth	r3, r3
 8008b3c:	00db      	lsls	r3, r3, #3
 8008b3e:	b29a      	uxth	r2, r3
 8008b40:	4b7b      	ldr	r3, [pc, #492]	; (8008d30 <RadioSetRxGenericConfig+0x2c4>)
 8008b42:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 8008b44:	68bb      	ldr	r3, [r7, #8]
 8008b46:	7fda      	ldrb	r2, [r3, #31]
 8008b48:	4b79      	ldr	r3, [pc, #484]	; (8008d30 <RadioSetRxGenericConfig+0x2c4>)
 8008b4a:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8008b4c:	68bb      	ldr	r3, [r7, #8]
 8008b4e:	7f9b      	ldrb	r3, [r3, #30]
 8008b50:	00db      	lsls	r3, r3, #3
 8008b52:	b2da      	uxtb	r2, r3
 8008b54:	4b76      	ldr	r3, [pc, #472]	; (8008d30 <RadioSetRxGenericConfig+0x2c4>)
 8008b56:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 8008b58:	68bb      	ldr	r3, [r7, #8]
 8008b5a:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8008b5e:	4b74      	ldr	r3, [pc, #464]	; (8008d30 <RadioSetRxGenericConfig+0x2c4>)
 8008b60:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 8008b62:	68bb      	ldr	r3, [r7, #8]
 8008b64:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d105      	bne.n	8008b78 <RadioSetRxGenericConfig+0x10c>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 8008b6c:	68bb      	ldr	r3, [r7, #8]
 8008b6e:	695b      	ldr	r3, [r3, #20]
 8008b70:	b2da      	uxtb	r2, r3
 8008b72:	4b6f      	ldr	r3, [pc, #444]	; (8008d30 <RadioSetRxGenericConfig+0x2c4>)
 8008b74:	759a      	strb	r2, [r3, #22]
 8008b76:	e00b      	b.n	8008b90 <RadioSetRxGenericConfig+0x124>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 8008b78:	68bb      	ldr	r3, [r7, #8]
 8008b7a:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8008b7e:	2b02      	cmp	r3, #2
 8008b80:	d103      	bne.n	8008b8a <RadioSetRxGenericConfig+0x11e>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8008b82:	4b6b      	ldr	r3, [pc, #428]	; (8008d30 <RadioSetRxGenericConfig+0x2c4>)
 8008b84:	22ff      	movs	r2, #255	; 0xff
 8008b86:	759a      	strb	r2, [r3, #22]
 8008b88:	e002      	b.n	8008b90 <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8008b8a:	4b69      	ldr	r3, [pc, #420]	; (8008d30 <RadioSetRxGenericConfig+0x2c4>)
 8008b8c:	22ff      	movs	r2, #255	; 0xff
 8008b8e:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 8008b90:	68bb      	ldr	r3, [r7, #8]
 8008b92:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008b96:	2b02      	cmp	r3, #2
 8008b98:	d004      	beq.n	8008ba4 <RadioSetRxGenericConfig+0x138>
            || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8008b9a:	68bb      	ldr	r3, [r7, #8]
 8008b9c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8008ba0:	2b02      	cmp	r3, #2
 8008ba2:	d12d      	bne.n	8008c00 <RadioSetRxGenericConfig+0x194>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 8008ba4:	68bb      	ldr	r3, [r7, #8]
 8008ba6:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8008baa:	2bf1      	cmp	r3, #241	; 0xf1
 8008bac:	d00c      	beq.n	8008bc8 <RadioSetRxGenericConfig+0x15c>
 8008bae:	68bb      	ldr	r3, [r7, #8]
 8008bb0:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8008bb4:	2bf2      	cmp	r3, #242	; 0xf2
 8008bb6:	d007      	beq.n	8008bc8 <RadioSetRxGenericConfig+0x15c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8008bb8:	68bb      	ldr	r3, [r7, #8]
 8008bba:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8008bbe:	2b01      	cmp	r3, #1
 8008bc0:	d002      	beq.n	8008bc8 <RadioSetRxGenericConfig+0x15c>
                return -1;
 8008bc2:	f04f 33ff 	mov.w	r3, #4294967295
 8008bc6:	e10b      	b.n	8008de0 <RadioSetRxGenericConfig+0x374>
            ConfigGeneric.rtx = CONFIG_RX;
 8008bc8:	2300      	movs	r3, #0
 8008bca:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.RxConfig = config;
 8008bcc:	68bb      	ldr	r3, [r7, #8]
 8008bce:	61bb      	str	r3, [r7, #24]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 8008bd0:	4b58      	ldr	r3, [pc, #352]	; (8008d34 <RadioSetRxGenericConfig+0x2c8>)
 8008bd2:	6819      	ldr	r1, [r3, #0]
 8008bd4:	f107 0314 	add.w	r3, r7, #20
 8008bd8:	4a57      	ldr	r2, [pc, #348]	; (8008d38 <RadioSetRxGenericConfig+0x2cc>)
 8008bda:	4618      	mov	r0, r3
 8008bdc:	f001 fd48 	bl	800a670 <RFW_Init>
 8008be0:	4603      	mov	r3, r0
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d002      	beq.n	8008bec <RadioSetRxGenericConfig+0x180>
                return -1;
 8008be6:	f04f 33ff 	mov.w	r3, #4294967295
 8008bea:	e0f9      	b.n	8008de0 <RadioSetRxGenericConfig+0x374>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8008bec:	4b50      	ldr	r3, [pc, #320]	; (8008d30 <RadioSetRxGenericConfig+0x2c4>)
 8008bee:	2200      	movs	r2, #0
 8008bf0:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8008bf2:	4b4f      	ldr	r3, [pc, #316]	; (8008d30 <RadioSetRxGenericConfig+0x2c4>)
 8008bf4:	2201      	movs	r2, #1
 8008bf6:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8008bf8:	4b4d      	ldr	r3, [pc, #308]	; (8008d30 <RadioSetRxGenericConfig+0x2c4>)
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	755a      	strb	r2, [r3, #21]
        {
 8008bfe:	e00e      	b.n	8008c1e <RadioSetRxGenericConfig+0x1b2>
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8008c00:	68bb      	ldr	r3, [r7, #8]
 8008c02:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8008c06:	4b4a      	ldr	r3, [pc, #296]	; (8008d30 <RadioSetRxGenericConfig+0x2c4>)
 8008c08:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8008c0a:	68bb      	ldr	r3, [r7, #8]
 8008c0c:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8008c10:	4b47      	ldr	r3, [pc, #284]	; (8008d30 <RadioSetRxGenericConfig+0x2c4>)
 8008c12:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 8008c14:	68bb      	ldr	r3, [r7, #8]
 8008c16:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8008c1a:	4b45      	ldr	r3, [pc, #276]	; (8008d30 <RadioSetRxGenericConfig+0x2c4>)
 8008c1c:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 8008c1e:	f7ff fa0e 	bl	800803e <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8008c22:	2000      	movs	r0, #0
 8008c24:	f7fe fb9c 	bl	8007360 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8008c28:	4844      	ldr	r0, [pc, #272]	; (8008d3c <RadioSetRxGenericConfig+0x2d0>)
 8008c2a:	f001 f82d 	bl	8009c88 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008c2e:	4844      	ldr	r0, [pc, #272]	; (8008d40 <RadioSetRxGenericConfig+0x2d4>)
 8008c30:	f001 f8fc 	bl	8009e2c <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8008c34:	f107 0320 	add.w	r3, r7, #32
 8008c38:	4618      	mov	r0, r3
 8008c3a:	f000 fbc0 	bl	80093be <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8008c3e:	68bb      	ldr	r3, [r7, #8]
 8008c40:	8b9b      	ldrh	r3, [r3, #28]
 8008c42:	4618      	mov	r0, r3
 8008c44:	f000 fc0a 	bl	800945c <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 8008c48:	68bb      	ldr	r3, [r7, #8]
 8008c4a:	8b1b      	ldrh	r3, [r3, #24]
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	f000 fbe5 	bl	800941c <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8008c58:	fb03 f202 	mul.w	r2, r3, r2
 8008c5c:	68bb      	ldr	r3, [r7, #8]
 8008c5e:	689b      	ldr	r3, [r3, #8]
 8008c60:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c64:	4a32      	ldr	r2, [pc, #200]	; (8008d30 <RadioSetRxGenericConfig+0x2c4>)
 8008c66:	6093      	str	r3, [r2, #8]
        break;
 8008c68:	e0b9      	b.n	8008dde <RadioSetRxGenericConfig+0x372>
        if( config->lora.PreambleLen == 0 )
 8008c6a:	68bb      	ldr	r3, [r7, #8]
 8008c6c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d102      	bne.n	8008c78 <RadioSetRxGenericConfig+0x20c>
            return -1;
 8008c72:	f04f 33ff 	mov.w	r3, #4294967295
 8008c76:	e0b3      	b.n	8008de0 <RadioSetRxGenericConfig+0x374>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 8008c78:	68bb      	ldr	r3, [r7, #8]
 8008c7a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8008c7e:	2b01      	cmp	r3, #1
 8008c80:	d104      	bne.n	8008c8c <RadioSetRxGenericConfig+0x220>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 8008c82:	68bb      	ldr	r3, [r7, #8]
 8008c84:	695b      	ldr	r3, [r3, #20]
 8008c86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008c8a:	e002      	b.n	8008c92 <RadioSetRxGenericConfig+0x226>
            MaxPayloadLength = 0xFF;
 8008c8c:	23ff      	movs	r3, #255	; 0xff
 8008c8e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8008c92:	68bb      	ldr	r3, [r7, #8]
 8008c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	bf14      	ite	ne
 8008c9a:	2301      	movne	r3, #1
 8008c9c:	2300      	moveq	r3, #0
 8008c9e:	b2db      	uxtb	r3, r3
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	f000 fd53 	bl	800974c <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	b2db      	uxtb	r3, r3
 8008caa:	4618      	mov	r0, r3
 8008cac:	f000 fd5d 	bl	800976a <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8008cb0:	4b1f      	ldr	r3, [pc, #124]	; (8008d30 <RadioSetRxGenericConfig+0x2c4>)
 8008cb2:	2201      	movs	r2, #1
 8008cb4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8008cb8:	68bb      	ldr	r3, [r7, #8]
 8008cba:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8008cbe:	4b1c      	ldr	r3, [pc, #112]	; (8008d30 <RadioSetRxGenericConfig+0x2c4>)
 8008cc0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 8008cc4:	68bb      	ldr	r3, [r7, #8]
 8008cc6:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 8008cca:	4b19      	ldr	r3, [pc, #100]	; (8008d30 <RadioSetRxGenericConfig+0x2c4>)
 8008ccc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8008cd0:	68bb      	ldr	r3, [r7, #8]
 8008cd2:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8008cd6:	4b16      	ldr	r3, [pc, #88]	; (8008d30 <RadioSetRxGenericConfig+0x2c4>)
 8008cd8:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 8008cdc:	68bb      	ldr	r3, [r7, #8]
 8008cde:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008ce2:	2b02      	cmp	r3, #2
 8008ce4:	d010      	beq.n	8008d08 <RadioSetRxGenericConfig+0x29c>
 8008ce6:	2b02      	cmp	r3, #2
 8008ce8:	dc2c      	bgt.n	8008d44 <RadioSetRxGenericConfig+0x2d8>
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d002      	beq.n	8008cf4 <RadioSetRxGenericConfig+0x288>
 8008cee:	2b01      	cmp	r3, #1
 8008cf0:	d005      	beq.n	8008cfe <RadioSetRxGenericConfig+0x292>
            break;
 8008cf2:	e027      	b.n	8008d44 <RadioSetRxGenericConfig+0x2d8>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8008cf4:	4b0e      	ldr	r3, [pc, #56]	; (8008d30 <RadioSetRxGenericConfig+0x2c4>)
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8008cfc:	e023      	b.n	8008d46 <RadioSetRxGenericConfig+0x2da>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8008cfe:	4b0c      	ldr	r3, [pc, #48]	; (8008d30 <RadioSetRxGenericConfig+0x2c4>)
 8008d00:	2201      	movs	r2, #1
 8008d02:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8008d06:	e01e      	b.n	8008d46 <RadioSetRxGenericConfig+0x2da>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8008d08:	68bb      	ldr	r3, [r7, #8]
 8008d0a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008d0e:	2b0b      	cmp	r3, #11
 8008d10:	d004      	beq.n	8008d1c <RadioSetRxGenericConfig+0x2b0>
 8008d12:	68bb      	ldr	r3, [r7, #8]
 8008d14:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008d18:	2b0c      	cmp	r3, #12
 8008d1a:	d104      	bne.n	8008d26 <RadioSetRxGenericConfig+0x2ba>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8008d1c:	4b04      	ldr	r3, [pc, #16]	; (8008d30 <RadioSetRxGenericConfig+0x2c4>)
 8008d1e:	2201      	movs	r2, #1
 8008d20:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8008d24:	e00f      	b.n	8008d46 <RadioSetRxGenericConfig+0x2da>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8008d26:	4b02      	ldr	r3, [pc, #8]	; (8008d30 <RadioSetRxGenericConfig+0x2c4>)
 8008d28:	2200      	movs	r2, #0
 8008d2a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8008d2e:	e00a      	b.n	8008d46 <RadioSetRxGenericConfig+0x2da>
 8008d30:	20000288 	.word	0x20000288
 8008d34:	20000284 	.word	0x20000284
 8008d38:	200002fc 	.word	0x200002fc
 8008d3c:	200002c0 	.word	0x200002c0
 8008d40:	20000296 	.word	0x20000296
            break;
 8008d44:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8008d46:	4b28      	ldr	r3, [pc, #160]	; (8008de8 <RadioSetRxGenericConfig+0x37c>)
 8008d48:	2201      	movs	r2, #1
 8008d4a:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8008d4c:	68bb      	ldr	r3, [r7, #8]
 8008d4e:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 8008d50:	4b25      	ldr	r3, [pc, #148]	; (8008de8 <RadioSetRxGenericConfig+0x37c>)
 8008d52:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8008d54:	68bb      	ldr	r3, [r7, #8]
 8008d56:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 8008d5a:	4b23      	ldr	r3, [pc, #140]	; (8008de8 <RadioSetRxGenericConfig+0x37c>)
 8008d5c:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8008d5e:	4a22      	ldr	r2, [pc, #136]	; (8008de8 <RadioSetRxGenericConfig+0x37c>)
 8008d60:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008d64:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8008d66:	68bb      	ldr	r3, [r7, #8]
 8008d68:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8008d6c:	4b1e      	ldr	r3, [pc, #120]	; (8008de8 <RadioSetRxGenericConfig+0x37c>)
 8008d6e:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 8008d72:	68bb      	ldr	r3, [r7, #8]
 8008d74:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 8008d78:	4b1b      	ldr	r3, [pc, #108]	; (8008de8 <RadioSetRxGenericConfig+0x37c>)
 8008d7a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 8008d7e:	f7ff f95e 	bl	800803e <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8008d82:	2001      	movs	r0, #1
 8008d84:	f7fe faec 	bl	8007360 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8008d88:	4818      	ldr	r0, [pc, #96]	; (8008dec <RadioSetRxGenericConfig+0x380>)
 8008d8a:	f000 ff7d 	bl	8009c88 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008d8e:	4818      	ldr	r0, [pc, #96]	; (8008df0 <RadioSetRxGenericConfig+0x384>)
 8008d90:	f001 f84c 	bl	8009e2c <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8008d94:	4b14      	ldr	r3, [pc, #80]	; (8008de8 <RadioSetRxGenericConfig+0x37c>)
 8008d96:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008d9a:	2b01      	cmp	r3, #1
 8008d9c:	d10d      	bne.n	8008dba <RadioSetRxGenericConfig+0x34e>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 8008d9e:	f240 7036 	movw	r0, #1846	; 0x736
 8008da2:	f001 f99f 	bl	800a0e4 <SUBGRF_ReadRegister>
 8008da6:	4603      	mov	r3, r0
 8008da8:	f023 0304 	bic.w	r3, r3, #4
 8008dac:	b2db      	uxtb	r3, r3
 8008dae:	4619      	mov	r1, r3
 8008db0:	f240 7036 	movw	r0, #1846	; 0x736
 8008db4:	f001 f982 	bl	800a0bc <SUBGRF_WriteRegister>
 8008db8:	e00c      	b.n	8008dd4 <RadioSetRxGenericConfig+0x368>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8008dba:	f240 7036 	movw	r0, #1846	; 0x736
 8008dbe:	f001 f991 	bl	800a0e4 <SUBGRF_ReadRegister>
 8008dc2:	4603      	mov	r3, r0
 8008dc4:	f043 0304 	orr.w	r3, r3, #4
 8008dc8:	b2db      	uxtb	r3, r3
 8008dca:	4619      	mov	r1, r3
 8008dcc:	f240 7036 	movw	r0, #1846	; 0x736
 8008dd0:	f001 f974 	bl	800a0bc <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 8008dd4:	4b04      	ldr	r3, [pc, #16]	; (8008de8 <RadioSetRxGenericConfig+0x37c>)
 8008dd6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008dda:	609a      	str	r2, [r3, #8]
        break;
 8008ddc:	bf00      	nop
    }
    return status;
 8008dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 8008de0:	4618      	mov	r0, r3
 8008de2:	3730      	adds	r7, #48	; 0x30
 8008de4:	46bd      	mov	sp, r7
 8008de6:	bd80      	pop	{r7, pc}
 8008de8:	20000288 	.word	0x20000288
 8008dec:	200002c0 	.word	0x200002c0
 8008df0:	20000296 	.word	0x20000296

08008df4 <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t *config, int8_t power,
                                        uint32_t timeout )
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b08e      	sub	sp, #56	; 0x38
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	60b9      	str	r1, [r7, #8]
 8008dfc:	607b      	str	r3, [r7, #4]
 8008dfe:	4603      	mov	r3, r0
 8008e00:	73fb      	strb	r3, [r7, #15]
 8008e02:	4613      	mov	r3, r2
 8008e04:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    uint8_t syncword[8] = {0};
 8008e06:	2300      	movs	r3, #0
 8008e08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	633b      	str	r3, [r7, #48]	; 0x30
    RadioModems_t radio_modem;
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8008e0e:	f001 fc3c 	bl	800a68a <RFW_DeInit>
    switch( modem )
 8008e12:	7bfb      	ldrb	r3, [r7, #15]
 8008e14:	2b03      	cmp	r3, #3
 8008e16:	f200 8204 	bhi.w	8009222 <RadioSetTxGenericConfig+0x42e>
 8008e1a:	a201      	add	r2, pc, #4	; (adr r2, 8008e20 <RadioSetTxGenericConfig+0x2c>)
 8008e1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e20:	08008fa5 	.word	0x08008fa5
 8008e24:	080090ed 	.word	0x080090ed
 8008e28:	080091e5 	.word	0x080091e5
 8008e2c:	08008e31 	.word	0x08008e31
    {
    case GENERIC_MSK:
        if( config->msk.SyncWordLength > 8 )
 8008e30:	68bb      	ldr	r3, [r7, #8]
 8008e32:	7c9b      	ldrb	r3, [r3, #18]
 8008e34:	2b08      	cmp	r3, #8
 8008e36:	d902      	bls.n	8008e3e <RadioSetTxGenericConfig+0x4a>
        {
            return -1;
 8008e38:	f04f 33ff 	mov.w	r3, #4294967295
 8008e3c:	e206      	b.n	800924c <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->msk.SyncWord, config->msk.SyncWordLength );
 8008e3e:	68bb      	ldr	r3, [r7, #8]
 8008e40:	6899      	ldr	r1, [r3, #8]
 8008e42:	68bb      	ldr	r3, [r7, #8]
 8008e44:	7c9b      	ldrb	r3, [r3, #18]
 8008e46:	b29a      	uxth	r2, r3
 8008e48:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	f002 f86b 	bl	800af28 <UTIL_MEM_cpy_8>
        }
        if( ( config->msk.BitRate == 0 ) )
 8008e52:	68bb      	ldr	r3, [r7, #8]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d102      	bne.n	8008e60 <RadioSetTxGenericConfig+0x6c>
        {
            return -1;
 8008e5a:	f04f 33ff 	mov.w	r3, #4294967295
 8008e5e:	e1f5      	b.n	800924c <RadioSetTxGenericConfig+0x458>
        }
        else if( config->msk.BitRate <= 10000 )
 8008e60:	68bb      	ldr	r3, [r7, #8]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	f242 7210 	movw	r2, #10000	; 0x2710
 8008e68:	4293      	cmp	r3, r2
 8008e6a:	d813      	bhi.n	8008e94 <RadioSetTxGenericConfig+0xa0>
        {
            /*max msk modulator datarate is 10kbps*/
            radio_modem = MODEM_MSK;
 8008e6c:	2302      	movs	r3, #2
 8008e6e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 8008e72:	4b99      	ldr	r3, [pc, #612]	; (80090d8 <RadioSetTxGenericConfig+0x2e4>)
 8008e74:	2203      	movs	r2, #3
 8008e76:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 8008e78:	4b97      	ldr	r3, [pc, #604]	; (80090d8 <RadioSetTxGenericConfig+0x2e4>)
 8008e7a:	2203      	movs	r2, #3
 8008e7c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 8008e80:	68bb      	ldr	r3, [r7, #8]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	4a94      	ldr	r2, [pc, #592]	; (80090d8 <RadioSetTxGenericConfig+0x2e4>)
 8008e86:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 8008e88:	68bb      	ldr	r3, [r7, #8]
 8008e8a:	7cda      	ldrb	r2, [r3, #19]
 8008e8c:	4b92      	ldr	r3, [pc, #584]	; (80090d8 <RadioSetTxGenericConfig+0x2e4>)
 8008e8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008e92:	e017      	b.n	8008ec4 <RadioSetTxGenericConfig+0xd0>
        }
        else
        {
            radio_modem = MODEM_FSK;
 8008e94:	2300      	movs	r3, #0
 8008e96:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8008e9a:	4b8f      	ldr	r3, [pc, #572]	; (80090d8 <RadioSetTxGenericConfig+0x2e4>)
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8008ea0:	4b8d      	ldr	r3, [pc, #564]	; (80090d8 <RadioSetTxGenericConfig+0x2e4>)
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 8008ea8:	68bb      	ldr	r3, [r7, #8]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	4a8a      	ldr	r2, [pc, #552]	; (80090d8 <RadioSetTxGenericConfig+0x2e4>)
 8008eae:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 8008eb0:	68bb      	ldr	r3, [r7, #8]
 8008eb2:	7cda      	ldrb	r2, [r3, #19]
 8008eb4:	4b88      	ldr	r3, [pc, #544]	; (80090d8 <RadioSetTxGenericConfig+0x2e4>)
 8008eb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            /*do msk with gfsk modulator*/
            SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate / 4;
 8008eba:	68bb      	ldr	r3, [r7, #8]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	089b      	lsrs	r3, r3, #2
 8008ec0:	4a85      	ldr	r2, [pc, #532]	; (80090d8 <RadioSetTxGenericConfig+0x2e4>)
 8008ec2:	6413      	str	r3, [r2, #64]	; 0x40
        }

        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 8008ec4:	68bb      	ldr	r3, [r7, #8]
 8008ec6:	685b      	ldr	r3, [r3, #4]
 8008ec8:	b29b      	uxth	r3, r3
 8008eca:	00db      	lsls	r3, r3, #3
 8008ecc:	b29a      	uxth	r2, r3
 8008ece:	4b82      	ldr	r3, [pc, #520]	; (80090d8 <RadioSetTxGenericConfig+0x2e4>)
 8008ed0:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 8008ed2:	4b81      	ldr	r3, [pc, #516]	; (80090d8 <RadioSetTxGenericConfig+0x2e4>)
 8008ed4:	2204      	movs	r2, #4
 8008ed6:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 8008ed8:	68bb      	ldr	r3, [r7, #8]
 8008eda:	7c9b      	ldrb	r3, [r3, #18]
 8008edc:	00db      	lsls	r3, r3, #3
 8008ede:	b2da      	uxtb	r2, r3
 8008ee0:	4b7d      	ldr	r3, [pc, #500]	; (80090d8 <RadioSetTxGenericConfig+0x2e4>)
 8008ee2:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 8008ee4:	4b7c      	ldr	r3, [pc, #496]	; (80090d8 <RadioSetTxGenericConfig+0x2e4>)
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	751a      	strb	r2, [r3, #20]

        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 8008eea:	68bb      	ldr	r3, [r7, #8]
 8008eec:	7d9b      	ldrb	r3, [r3, #22]
 8008eee:	2b02      	cmp	r3, #2
 8008ef0:	d003      	beq.n	8008efa <RadioSetTxGenericConfig+0x106>
            || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8008ef2:	68bb      	ldr	r3, [r7, #8]
 8008ef4:	7d1b      	ldrb	r3, [r3, #20]
 8008ef6:	2b02      	cmp	r3, #2
 8008ef8:	d12b      	bne.n	8008f52 <RadioSetTxGenericConfig+0x15e>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 8008efa:	68bb      	ldr	r3, [r7, #8]
 8008efc:	7d5b      	ldrb	r3, [r3, #21]
 8008efe:	2bf1      	cmp	r3, #241	; 0xf1
 8008f00:	d00a      	beq.n	8008f18 <RadioSetTxGenericConfig+0x124>
 8008f02:	68bb      	ldr	r3, [r7, #8]
 8008f04:	7d5b      	ldrb	r3, [r3, #21]
 8008f06:	2bf2      	cmp	r3, #242	; 0xf2
 8008f08:	d006      	beq.n	8008f18 <RadioSetTxGenericConfig+0x124>
                && ( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8008f0a:	68bb      	ldr	r3, [r7, #8]
 8008f0c:	7d5b      	ldrb	r3, [r3, #21]
 8008f0e:	2b01      	cmp	r3, #1
 8008f10:	d002      	beq.n	8008f18 <RadioSetTxGenericConfig+0x124>
            {
                return -1;
 8008f12:	f04f 33ff 	mov.w	r3, #4294967295
 8008f16:	e199      	b.n	800924c <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            /*msk and fsk are union, no need for copy as fsk/msk struct are on same address*/
            ConfigGeneric.TxConfig = config;
 8008f18:	68bb      	ldr	r3, [r7, #8]
 8008f1a:	623b      	str	r3, [r7, #32]
            ConfigGeneric.rtx = CONFIG_TX;
 8008f1c:	2301      	movs	r3, #1
 8008f1e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 8008f22:	4b6e      	ldr	r3, [pc, #440]	; (80090dc <RadioSetTxGenericConfig+0x2e8>)
 8008f24:	6819      	ldr	r1, [r3, #0]
 8008f26:	f107 0320 	add.w	r3, r7, #32
 8008f2a:	4a6d      	ldr	r2, [pc, #436]	; (80090e0 <RadioSetTxGenericConfig+0x2ec>)
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	f001 fb9f 	bl	800a670 <RFW_Init>
 8008f32:	4603      	mov	r3, r0
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d002      	beq.n	8008f3e <RadioSetTxGenericConfig+0x14a>
            {
                return -1;
 8008f38:	f04f 33ff 	mov.w	r3, #4294967295
 8008f3c:	e186      	b.n	800924c <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8008f3e:	4b66      	ldr	r3, [pc, #408]	; (80090d8 <RadioSetTxGenericConfig+0x2e4>)
 8008f40:	2200      	movs	r2, #0
 8008f42:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8008f44:	4b64      	ldr	r3, [pc, #400]	; (80090d8 <RadioSetTxGenericConfig+0x2e4>)
 8008f46:	2201      	movs	r2, #1
 8008f48:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8008f4a:	4b63      	ldr	r3, [pc, #396]	; (80090d8 <RadioSetTxGenericConfig+0x2e4>)
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	755a      	strb	r2, [r3, #21]
        {
 8008f50:	e00b      	b.n	8008f6a <RadioSetTxGenericConfig+0x176>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 8008f52:	68bb      	ldr	r3, [r7, #8]
 8008f54:	7d5a      	ldrb	r2, [r3, #21]
 8008f56:	4b60      	ldr	r3, [pc, #384]	; (80090d8 <RadioSetTxGenericConfig+0x2e4>)
 8008f58:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 8008f5a:	68bb      	ldr	r3, [r7, #8]
 8008f5c:	7d9a      	ldrb	r2, [r3, #22]
 8008f5e:	4b5e      	ldr	r3, [pc, #376]	; (80090d8 <RadioSetTxGenericConfig+0x2e4>)
 8008f60:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 8008f62:	68bb      	ldr	r3, [r7, #8]
 8008f64:	7d1a      	ldrb	r2, [r3, #20]
 8008f66:	4b5c      	ldr	r3, [pc, #368]	; (80090d8 <RadioSetTxGenericConfig+0x2e4>)
 8008f68:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 8008f6a:	f7ff f868 	bl	800803e <RadioStandby>
        RadioSetModem( radio_modem );
 8008f6e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008f72:	4618      	mov	r0, r3
 8008f74:	f7fe f9f4 	bl	8007360 <RadioSetModem>

        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8008f78:	485a      	ldr	r0, [pc, #360]	; (80090e4 <RadioSetTxGenericConfig+0x2f0>)
 8008f7a:	f000 fe85 	bl	8009c88 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008f7e:	485a      	ldr	r0, [pc, #360]	; (80090e8 <RadioSetTxGenericConfig+0x2f4>)
 8008f80:	f000 ff54 	bl	8009e2c <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8008f84:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008f88:	4618      	mov	r0, r3
 8008f8a:	f000 fa18 	bl	80093be <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 8008f8e:	68bb      	ldr	r3, [r7, #8]
 8008f90:	8a1b      	ldrh	r3, [r3, #16]
 8008f92:	4618      	mov	r0, r3
 8008f94:	f000 fa62 	bl	800945c <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->msk.CrcPolynomial );
 8008f98:	68bb      	ldr	r3, [r7, #8]
 8008f9a:	899b      	ldrh	r3, [r3, #12]
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	f000 fa3d 	bl	800941c <SUBGRF_SetCrcPolynomial>
        break;
 8008fa2:	e13f      	b.n	8009224 <RadioSetTxGenericConfig+0x430>
    case GENERIC_FSK:
        if( config->fsk.BitRate == 0 )
 8008fa4:	68bb      	ldr	r3, [r7, #8]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d102      	bne.n	8008fb2 <RadioSetTxGenericConfig+0x1be>
        {
            return -1;
 8008fac:	f04f 33ff 	mov.w	r3, #4294967295
 8008fb0:	e14c      	b.n	800924c <RadioSetTxGenericConfig+0x458>
        }
        if( config->fsk.SyncWordLength > 8 )
 8008fb2:	68bb      	ldr	r3, [r7, #8]
 8008fb4:	7c9b      	ldrb	r3, [r3, #18]
 8008fb6:	2b08      	cmp	r3, #8
 8008fb8:	d902      	bls.n	8008fc0 <RadioSetTxGenericConfig+0x1cc>
        {
            return -1;
 8008fba:	f04f 33ff 	mov.w	r3, #4294967295
 8008fbe:	e145      	b.n	800924c <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 8008fc0:	68bb      	ldr	r3, [r7, #8]
 8008fc2:	6899      	ldr	r1, [r3, #8]
 8008fc4:	68bb      	ldr	r3, [r7, #8]
 8008fc6:	7c9b      	ldrb	r3, [r3, #18]
 8008fc8:	b29a      	uxth	r2, r3
 8008fca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008fce:	4618      	mov	r0, r3
 8008fd0:	f001 ffaa 	bl	800af28 <UTIL_MEM_cpy_8>
        }
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8008fd4:	4b40      	ldr	r3, [pc, #256]	; (80090d8 <RadioSetTxGenericConfig+0x2e4>)
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8008fdc:	68bb      	ldr	r3, [r7, #8]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	4a3d      	ldr	r2, [pc, #244]	; (80090d8 <RadioSetTxGenericConfig+0x2e4>)
 8008fe2:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 8008fe4:	68bb      	ldr	r3, [r7, #8]
 8008fe6:	7cda      	ldrb	r2, [r3, #19]
 8008fe8:	4b3b      	ldr	r3, [pc, #236]	; (80090d8 <RadioSetTxGenericConfig+0x2e4>)
 8008fea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 8008fee:	68bb      	ldr	r3, [r7, #8]
 8008ff0:	699b      	ldr	r3, [r3, #24]
 8008ff2:	4a39      	ldr	r2, [pc, #228]	; (80090d8 <RadioSetTxGenericConfig+0x2e4>)
 8008ff4:	6413      	str	r3, [r2, #64]	; 0x40

        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8008ff6:	4b38      	ldr	r3, [pc, #224]	; (80090d8 <RadioSetTxGenericConfig+0x2e4>)
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 8008ffc:	68bb      	ldr	r3, [r7, #8]
 8008ffe:	685b      	ldr	r3, [r3, #4]
 8009000:	b29b      	uxth	r3, r3
 8009002:	00db      	lsls	r3, r3, #3
 8009004:	b29a      	uxth	r2, r3
 8009006:	4b34      	ldr	r3, [pc, #208]	; (80090d8 <RadioSetTxGenericConfig+0x2e4>)
 8009008:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 800900a:	4b33      	ldr	r3, [pc, #204]	; (80090d8 <RadioSetTxGenericConfig+0x2e4>)
 800900c:	2204      	movs	r2, #4
 800900e:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8009010:	68bb      	ldr	r3, [r7, #8]
 8009012:	7c9b      	ldrb	r3, [r3, #18]
 8009014:	00db      	lsls	r3, r3, #3
 8009016:	b2da      	uxtb	r2, r3
 8009018:	4b2f      	ldr	r3, [pc, #188]	; (80090d8 <RadioSetTxGenericConfig+0x2e4>)
 800901a:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 800901c:	4b2e      	ldr	r3, [pc, #184]	; (80090d8 <RadioSetTxGenericConfig+0x2e4>)
 800901e:	2200      	movs	r2, #0
 8009020:	751a      	strb	r2, [r3, #20]

        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 8009022:	68bb      	ldr	r3, [r7, #8]
 8009024:	7d9b      	ldrb	r3, [r3, #22]
 8009026:	2b02      	cmp	r3, #2
 8009028:	d003      	beq.n	8009032 <RadioSetTxGenericConfig+0x23e>
            || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 800902a:	68bb      	ldr	r3, [r7, #8]
 800902c:	7d1b      	ldrb	r3, [r3, #20]
 800902e:	2b02      	cmp	r3, #2
 8009030:	d12a      	bne.n	8009088 <RadioSetTxGenericConfig+0x294>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 8009032:	68bb      	ldr	r3, [r7, #8]
 8009034:	7d5b      	ldrb	r3, [r3, #21]
 8009036:	2bf1      	cmp	r3, #241	; 0xf1
 8009038:	d00a      	beq.n	8009050 <RadioSetTxGenericConfig+0x25c>
 800903a:	68bb      	ldr	r3, [r7, #8]
 800903c:	7d5b      	ldrb	r3, [r3, #21]
 800903e:	2bf2      	cmp	r3, #242	; 0xf2
 8009040:	d006      	beq.n	8009050 <RadioSetTxGenericConfig+0x25c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8009042:	68bb      	ldr	r3, [r7, #8]
 8009044:	7d5b      	ldrb	r3, [r3, #21]
 8009046:	2b01      	cmp	r3, #1
 8009048:	d002      	beq.n	8009050 <RadioSetTxGenericConfig+0x25c>
            {
                return -1;
 800904a:	f04f 33ff 	mov.w	r3, #4294967295
 800904e:	e0fd      	b.n	800924c <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            ConfigGeneric.rtx = CONFIG_TX;
 8009050:	2301      	movs	r3, #1
 8009052:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.TxConfig = config;
 8009054:	68bb      	ldr	r3, [r7, #8]
 8009056:	617b      	str	r3, [r7, #20]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 8009058:	4b20      	ldr	r3, [pc, #128]	; (80090dc <RadioSetTxGenericConfig+0x2e8>)
 800905a:	6819      	ldr	r1, [r3, #0]
 800905c:	f107 0314 	add.w	r3, r7, #20
 8009060:	4a1f      	ldr	r2, [pc, #124]	; (80090e0 <RadioSetTxGenericConfig+0x2ec>)
 8009062:	4618      	mov	r0, r3
 8009064:	f001 fb04 	bl	800a670 <RFW_Init>
 8009068:	4603      	mov	r3, r0
 800906a:	2b00      	cmp	r3, #0
 800906c:	d002      	beq.n	8009074 <RadioSetTxGenericConfig+0x280>
            {
                return -1;
 800906e:	f04f 33ff 	mov.w	r3, #4294967295
 8009072:	e0eb      	b.n	800924c <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8009074:	4b18      	ldr	r3, [pc, #96]	; (80090d8 <RadioSetTxGenericConfig+0x2e4>)
 8009076:	2200      	movs	r2, #0
 8009078:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 800907a:	4b17      	ldr	r3, [pc, #92]	; (80090d8 <RadioSetTxGenericConfig+0x2e4>)
 800907c:	2201      	movs	r2, #1
 800907e:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8009080:	4b15      	ldr	r3, [pc, #84]	; (80090d8 <RadioSetTxGenericConfig+0x2e4>)
 8009082:	2200      	movs	r2, #0
 8009084:	755a      	strb	r2, [r3, #21]
        {
 8009086:	e00b      	b.n	80090a0 <RadioSetTxGenericConfig+0x2ac>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8009088:	68bb      	ldr	r3, [r7, #8]
 800908a:	7d5a      	ldrb	r2, [r3, #21]
 800908c:	4b12      	ldr	r3, [pc, #72]	; (80090d8 <RadioSetTxGenericConfig+0x2e4>)
 800908e:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8009090:	68bb      	ldr	r3, [r7, #8]
 8009092:	7d9a      	ldrb	r2, [r3, #22]
 8009094:	4b10      	ldr	r3, [pc, #64]	; (80090d8 <RadioSetTxGenericConfig+0x2e4>)
 8009096:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 8009098:	68bb      	ldr	r3, [r7, #8]
 800909a:	7d1a      	ldrb	r2, [r3, #20]
 800909c:	4b0e      	ldr	r3, [pc, #56]	; (80090d8 <RadioSetTxGenericConfig+0x2e4>)
 800909e:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 80090a0:	f7fe ffcd 	bl	800803e <RadioStandby>
        RadioSetModem( MODEM_FSK );
 80090a4:	2000      	movs	r0, #0
 80090a6:	f7fe f95b 	bl	8007360 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80090aa:	480e      	ldr	r0, [pc, #56]	; (80090e4 <RadioSetTxGenericConfig+0x2f0>)
 80090ac:	f000 fdec 	bl	8009c88 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80090b0:	480d      	ldr	r0, [pc, #52]	; (80090e8 <RadioSetTxGenericConfig+0x2f4>)
 80090b2:	f000 febb 	bl	8009e2c <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 80090b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80090ba:	4618      	mov	r0, r3
 80090bc:	f000 f97f 	bl	80093be <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 80090c0:	68bb      	ldr	r3, [r7, #8]
 80090c2:	8a1b      	ldrh	r3, [r3, #16]
 80090c4:	4618      	mov	r0, r3
 80090c6:	f000 f9c9 	bl	800945c <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 80090ca:	68bb      	ldr	r3, [r7, #8]
 80090cc:	899b      	ldrh	r3, [r3, #12]
 80090ce:	4618      	mov	r0, r3
 80090d0:	f000 f9a4 	bl	800941c <SUBGRF_SetCrcPolynomial>
        break;
 80090d4:	e0a6      	b.n	8009224 <RadioSetTxGenericConfig+0x430>
 80090d6:	bf00      	nop
 80090d8:	20000288 	.word	0x20000288
 80090dc:	20000284 	.word	0x20000284
 80090e0:	200002e4 	.word	0x200002e4
 80090e4:	200002c0 	.word	0x200002c0
 80090e8:	20000296 	.word	0x20000296
    case GENERIC_LORA:
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80090ec:	4b59      	ldr	r3, [pc, #356]	; (8009254 <RadioSetTxGenericConfig+0x460>)
 80090ee:	2201      	movs	r2, #1
 80090f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 80090f4:	68bb      	ldr	r3, [r7, #8]
 80090f6:	781a      	ldrb	r2, [r3, #0]
 80090f8:	4b56      	ldr	r3, [pc, #344]	; (8009254 <RadioSetTxGenericConfig+0x460>)
 80090fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 80090fe:	68bb      	ldr	r3, [r7, #8]
 8009100:	785a      	ldrb	r2, [r3, #1]
 8009102:	4b54      	ldr	r3, [pc, #336]	; (8009254 <RadioSetTxGenericConfig+0x460>)
 8009104:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8009108:	68bb      	ldr	r3, [r7, #8]
 800910a:	789a      	ldrb	r2, [r3, #2]
 800910c:	4b51      	ldr	r3, [pc, #324]	; (8009254 <RadioSetTxGenericConfig+0x460>)
 800910e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 8009112:	68bb      	ldr	r3, [r7, #8]
 8009114:	78db      	ldrb	r3, [r3, #3]
 8009116:	2b02      	cmp	r3, #2
 8009118:	d010      	beq.n	800913c <RadioSetTxGenericConfig+0x348>
 800911a:	2b02      	cmp	r3, #2
 800911c:	dc20      	bgt.n	8009160 <RadioSetTxGenericConfig+0x36c>
 800911e:	2b00      	cmp	r3, #0
 8009120:	d002      	beq.n	8009128 <RadioSetTxGenericConfig+0x334>
 8009122:	2b01      	cmp	r3, #1
 8009124:	d005      	beq.n	8009132 <RadioSetTxGenericConfig+0x33e>
            {
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
            }
            break;
        default:
            break;
 8009126:	e01b      	b.n	8009160 <RadioSetTxGenericConfig+0x36c>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8009128:	4b4a      	ldr	r3, [pc, #296]	; (8009254 <RadioSetTxGenericConfig+0x460>)
 800912a:	2200      	movs	r2, #0
 800912c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8009130:	e017      	b.n	8009162 <RadioSetTxGenericConfig+0x36e>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8009132:	4b48      	ldr	r3, [pc, #288]	; (8009254 <RadioSetTxGenericConfig+0x460>)
 8009134:	2201      	movs	r2, #1
 8009136:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800913a:	e012      	b.n	8009162 <RadioSetTxGenericConfig+0x36e>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 800913c:	68bb      	ldr	r3, [r7, #8]
 800913e:	781b      	ldrb	r3, [r3, #0]
 8009140:	2b0b      	cmp	r3, #11
 8009142:	d003      	beq.n	800914c <RadioSetTxGenericConfig+0x358>
 8009144:	68bb      	ldr	r3, [r7, #8]
 8009146:	781b      	ldrb	r3, [r3, #0]
 8009148:	2b0c      	cmp	r3, #12
 800914a:	d104      	bne.n	8009156 <RadioSetTxGenericConfig+0x362>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800914c:	4b41      	ldr	r3, [pc, #260]	; (8009254 <RadioSetTxGenericConfig+0x460>)
 800914e:	2201      	movs	r2, #1
 8009150:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8009154:	e005      	b.n	8009162 <RadioSetTxGenericConfig+0x36e>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8009156:	4b3f      	ldr	r3, [pc, #252]	; (8009254 <RadioSetTxGenericConfig+0x460>)
 8009158:	2200      	movs	r2, #0
 800915a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800915e:	e000      	b.n	8009162 <RadioSetTxGenericConfig+0x36e>
            break;
 8009160:	bf00      	nop
        }

        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8009162:	4b3c      	ldr	r3, [pc, #240]	; (8009254 <RadioSetTxGenericConfig+0x460>)
 8009164:	2201      	movs	r2, #1
 8009166:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8009168:	68bb      	ldr	r3, [r7, #8]
 800916a:	889a      	ldrh	r2, [r3, #4]
 800916c:	4b39      	ldr	r3, [pc, #228]	; (8009254 <RadioSetTxGenericConfig+0x460>)
 800916e:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8009170:	68bb      	ldr	r3, [r7, #8]
 8009172:	799a      	ldrb	r2, [r3, #6]
 8009174:	4b37      	ldr	r3, [pc, #220]	; (8009254 <RadioSetTxGenericConfig+0x460>)
 8009176:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8009178:	68bb      	ldr	r3, [r7, #8]
 800917a:	79da      	ldrb	r2, [r3, #7]
 800917c:	4b35      	ldr	r3, [pc, #212]	; (8009254 <RadioSetTxGenericConfig+0x460>)
 800917e:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 8009182:	68bb      	ldr	r3, [r7, #8]
 8009184:	7a1a      	ldrb	r2, [r3, #8]
 8009186:	4b33      	ldr	r3, [pc, #204]	; (8009254 <RadioSetTxGenericConfig+0x460>)
 8009188:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        RadioStandby( );
 800918c:	f7fe ff57 	bl	800803e <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8009190:	2001      	movs	r0, #1
 8009192:	f7fe f8e5 	bl	8007360 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8009196:	4830      	ldr	r0, [pc, #192]	; (8009258 <RadioSetTxGenericConfig+0x464>)
 8009198:	f000 fd76 	bl	8009c88 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800919c:	482f      	ldr	r0, [pc, #188]	; (800925c <RadioSetTxGenericConfig+0x468>)
 800919e:	f000 fe45 	bl	8009e2c <SUBGRF_SetPacketParams>

        /* WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see STM32WL Erratasheet */
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 80091a2:	4b2c      	ldr	r3, [pc, #176]	; (8009254 <RadioSetTxGenericConfig+0x460>)
 80091a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80091a8:	2b06      	cmp	r3, #6
 80091aa:	d10d      	bne.n	80091c8 <RadioSetTxGenericConfig+0x3d4>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 80091ac:	f640 0089 	movw	r0, #2185	; 0x889
 80091b0:	f000 ff98 	bl	800a0e4 <SUBGRF_ReadRegister>
 80091b4:	4603      	mov	r3, r0
 80091b6:	f023 0304 	bic.w	r3, r3, #4
 80091ba:	b2db      	uxtb	r3, r3
 80091bc:	4619      	mov	r1, r3
 80091be:	f640 0089 	movw	r0, #2185	; 0x889
 80091c2:	f000 ff7b 	bl	800a0bc <SUBGRF_WriteRegister>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
        }
        /* WORKAROUND END */
        break;
 80091c6:	e02d      	b.n	8009224 <RadioSetTxGenericConfig+0x430>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 80091c8:	f640 0089 	movw	r0, #2185	; 0x889
 80091cc:	f000 ff8a 	bl	800a0e4 <SUBGRF_ReadRegister>
 80091d0:	4603      	mov	r3, r0
 80091d2:	f043 0304 	orr.w	r3, r3, #4
 80091d6:	b2db      	uxtb	r3, r3
 80091d8:	4619      	mov	r1, r3
 80091da:	f640 0089 	movw	r0, #2185	; 0x889
 80091de:	f000 ff6d 	bl	800a0bc <SUBGRF_WriteRegister>
        break;
 80091e2:	e01f      	b.n	8009224 <RadioSetTxGenericConfig+0x430>
    case GENERIC_BPSK:
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 80091e4:	68bb      	ldr	r3, [r7, #8]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d004      	beq.n	80091f6 <RadioSetTxGenericConfig+0x402>
 80091ec:	68bb      	ldr	r3, [r7, #8]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80091f4:	d902      	bls.n	80091fc <RadioSetTxGenericConfig+0x408>
        {
            return -1;
 80091f6:	f04f 33ff 	mov.w	r3, #4294967295
 80091fa:	e027      	b.n	800924c <RadioSetTxGenericConfig+0x458>
        }
        RadioSetModem( MODEM_BPSK );
 80091fc:	2003      	movs	r0, #3
 80091fe:	f7fe f8af 	bl	8007360 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8009202:	4b14      	ldr	r3, [pc, #80]	; (8009254 <RadioSetTxGenericConfig+0x460>)
 8009204:	2202      	movs	r2, #2
 8009206:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 800920a:	68bb      	ldr	r3, [r7, #8]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	4a11      	ldr	r2, [pc, #68]	; (8009254 <RadioSetTxGenericConfig+0x460>)
 8009210:	6493      	str	r3, [r2, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8009212:	4b10      	ldr	r3, [pc, #64]	; (8009254 <RadioSetTxGenericConfig+0x460>)
 8009214:	2216      	movs	r2, #22
 8009216:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800921a:	480f      	ldr	r0, [pc, #60]	; (8009258 <RadioSetTxGenericConfig+0x464>)
 800921c:	f000 fd34 	bl	8009c88 <SUBGRF_SetModulationParams>
        break;
 8009220:	e000      	b.n	8009224 <RadioSetTxGenericConfig+0x430>
    default:
        break;
 8009222:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8009224:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009228:	4618      	mov	r0, r3
 800922a:	f001 f863 	bl	800a2f4 <SUBGRF_SetRfTxPower>
 800922e:	4603      	mov	r3, r0
 8009230:	461a      	mov	r2, r3
 8009232:	4b08      	ldr	r3, [pc, #32]	; (8009254 <RadioSetTxGenericConfig+0x460>)
 8009234:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 8009238:	4b06      	ldr	r3, [pc, #24]	; (8009254 <RadioSetTxGenericConfig+0x460>)
 800923a:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800923e:	4618      	mov	r0, r3
 8009240:	f001 fa37 	bl	800a6b2 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8009244:	4a03      	ldr	r2, [pc, #12]	; (8009254 <RadioSetTxGenericConfig+0x460>)
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	6053      	str	r3, [r2, #4]
    return 0;
 800924a:	2300      	movs	r3, #0
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 800924c:	4618      	mov	r0, r3
 800924e:	3738      	adds	r7, #56	; 0x38
 8009250:	46bd      	mov	sp, r7
 8009252:	bd80      	pop	{r7, pc}
 8009254:	20000288 	.word	0x20000288
 8009258:	200002c0 	.word	0x200002c0
 800925c:	20000296 	.word	0x20000296

08009260 <RadioLrFhssSetCfg>:
    return ( prbs31_val - 1 ) % ( max );
}
#endif /* RADIO_LR_FHSS_IS_ON == 1 */

static radio_status_t RadioLrFhssSetCfg( const radio_lr_fhss_cfg_params_t *cfg_params )
{
 8009260:	b480      	push	{r7}
 8009262:	b085      	sub	sp, #20
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
    radio_status_t status = RADIO_STATUS_UNSUPPORTED_FEATURE;
 8009268:	2301      	movs	r3, #1
 800926a:	73fb      	strb	r3, [r7, #15]
    {
        return status;
    }
    SubgRf.lr_fhss.is_lr_fhss_on = true;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    return  status;
 800926c:	7bfb      	ldrb	r3, [r7, #15]
}
 800926e:	4618      	mov	r0, r3
 8009270:	3714      	adds	r7, #20
 8009272:	46bd      	mov	sp, r7
 8009274:	bc80      	pop	{r7}
 8009276:	4770      	bx	lr

08009278 <RadioLrFhssGetTimeOnAirInMs>:

static radio_status_t RadioLrFhssGetTimeOnAirInMs( const radio_lr_fhss_time_on_air_params_t *params,
                                                    uint32_t *time_on_air_in_ms )
{
 8009278:	b480      	push	{r7}
 800927a:	b083      	sub	sp, #12
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
 8009280:	6039      	str	r1, [r7, #0]
    *time_on_air_in_ms = lr_fhss_get_time_on_air_in_ms( &params->radio_lr_fhss_params.lr_fhss_params,
                                                        params->pld_len_in_bytes );

    return RADIO_STATUS_OK;
#else
    return RADIO_STATUS_UNSUPPORTED_FEATURE;
 8009282:	2301      	movs	r3, #1
#endif /* RADIO_LR_FHSS_IS_ON */
 8009284:	4618      	mov	r0, r3
 8009286:	370c      	adds	r7, #12
 8009288:	46bd      	mov	sp, r7
 800928a:	bc80      	pop	{r7}
 800928c:	4770      	bx	lr
	...

08009290 <SUBGRF_Init>:
 */
static DioIrqHandler RadioOnDioIrqCb;

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 8009290:	b580      	push	{r7, lr}
 8009292:	b084      	sub	sp, #16
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d002      	beq.n	80092a4 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 800929e:	4a1d      	ldr	r2, [pc, #116]	; (8009314 <SUBGRF_Init+0x84>)
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 80092a4:	f7f7 fb80 	bl	80009a8 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 80092a8:	2002      	movs	r0, #2
 80092aa:	f001 f8ff 	bl	800a4ac <Radio_SMPS_Set>

    ImageCalibrated = false;
 80092ae:	4b1a      	ldr	r3, [pc, #104]	; (8009318 <SUBGRF_Init+0x88>)
 80092b0:	2200      	movs	r2, #0
 80092b2:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 80092b4:	2000      	movs	r0, #0
 80092b6:	f000 f97d 	bl	80095b4 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 80092ba:	f001 fd63 	bl	800ad84 <RBI_IsTCXO>
 80092be:	4603      	mov	r3, r0
 80092c0:	2b01      	cmp	r3, #1
 80092c2:	d10e      	bne.n	80092e2 <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 80092c4:	2140      	movs	r1, #64	; 0x40
 80092c6:	2001      	movs	r0, #1
 80092c8:	f000 fb82 	bl	80099d0 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 80092cc:	2100      	movs	r1, #0
 80092ce:	f640 1011 	movw	r0, #2321	; 0x911
 80092d2:	f000 fef3 	bl	800a0bc <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 80092d6:	237f      	movs	r3, #127	; 0x7f
 80092d8:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 80092da:	7b38      	ldrb	r0, [r7, #12]
 80092dc:	f000 fa8b 	bl	80097f6 <SUBGRF_Calibrate>
 80092e0:	e009      	b.n	80092f6 <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 80092e2:	2120      	movs	r1, #32
 80092e4:	f640 1011 	movw	r0, #2321	; 0x911
 80092e8:	f000 fee8 	bl	800a0bc <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 80092ec:	2120      	movs	r1, #32
 80092ee:	f640 1012 	movw	r0, #2322	; 0x912
 80092f2:	f000 fee3 	bl	800a0bc <SUBGRF_WriteRegister>
    }

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 80092f6:	210e      	movs	r1, #14
 80092f8:	f640 101f 	movw	r0, #2335	; 0x91f
 80092fc:	f000 fede 	bl	800a0bc <SUBGRF_WriteRegister>

    /* Init RF Switch */
    RBI_Init();
 8009300:	f001 fd1a 	bl	800ad38 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 8009304:	4b05      	ldr	r3, [pc, #20]	; (800931c <SUBGRF_Init+0x8c>)
 8009306:	2201      	movs	r2, #1
 8009308:	701a      	strb	r2, [r3, #0]
}
 800930a:	bf00      	nop
 800930c:	3710      	adds	r7, #16
 800930e:	46bd      	mov	sp, r7
 8009310:	bd80      	pop	{r7, pc}
 8009312:	bf00      	nop
 8009314:	20000320 	.word	0x20000320
 8009318:	2000031c 	.word	0x2000031c
 800931c:	20000314 	.word	0x20000314

08009320 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 8009320:	b480      	push	{r7}
 8009322:	af00      	add	r7, sp, #0
    return OperatingMode;
 8009324:	4b02      	ldr	r3, [pc, #8]	; (8009330 <SUBGRF_GetOperatingMode+0x10>)
 8009326:	781b      	ldrb	r3, [r3, #0]
}
 8009328:	4618      	mov	r0, r3
 800932a:	46bd      	mov	sp, r7
 800932c:	bc80      	pop	{r7}
 800932e:	4770      	bx	lr
 8009330:	20000314 	.word	0x20000314

08009334 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 8009334:	b580      	push	{r7, lr}
 8009336:	b082      	sub	sp, #8
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
 800933c:	460b      	mov	r3, r1
 800933e:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 8009340:	78fb      	ldrb	r3, [r7, #3]
 8009342:	461a      	mov	r2, r3
 8009344:	6879      	ldr	r1, [r7, #4]
 8009346:	2000      	movs	r0, #0
 8009348:	f000 ff24 	bl	800a194 <SUBGRF_WriteBuffer>
}
 800934c:	bf00      	nop
 800934e:	3708      	adds	r7, #8
 8009350:	46bd      	mov	sp, r7
 8009352:	bd80      	pop	{r7, pc}

08009354 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 8009354:	b580      	push	{r7, lr}
 8009356:	b086      	sub	sp, #24
 8009358:	af00      	add	r7, sp, #0
 800935a:	60f8      	str	r0, [r7, #12]
 800935c:	60b9      	str	r1, [r7, #8]
 800935e:	4613      	mov	r3, r2
 8009360:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 8009362:	2300      	movs	r3, #0
 8009364:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 8009366:	f107 0317 	add.w	r3, r7, #23
 800936a:	4619      	mov	r1, r3
 800936c:	68b8      	ldr	r0, [r7, #8]
 800936e:	f000 fe27 	bl	8009fc0 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 8009372:	68bb      	ldr	r3, [r7, #8]
 8009374:	781b      	ldrb	r3, [r3, #0]
 8009376:	79fa      	ldrb	r2, [r7, #7]
 8009378:	429a      	cmp	r2, r3
 800937a:	d201      	bcs.n	8009380 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 800937c:	2301      	movs	r3, #1
 800937e:	e007      	b.n	8009390 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 8009380:	7df8      	ldrb	r0, [r7, #23]
 8009382:	68bb      	ldr	r3, [r7, #8]
 8009384:	781b      	ldrb	r3, [r3, #0]
 8009386:	461a      	mov	r2, r3
 8009388:	68f9      	ldr	r1, [r7, #12]
 800938a:	f000 ff25 	bl	800a1d8 <SUBGRF_ReadBuffer>

    return 0;
 800938e:	2300      	movs	r3, #0
}
 8009390:	4618      	mov	r0, r3
 8009392:	3718      	adds	r7, #24
 8009394:	46bd      	mov	sp, r7
 8009396:	bd80      	pop	{r7, pc}

08009398 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b084      	sub	sp, #16
 800939c:	af00      	add	r7, sp, #0
 800939e:	60f8      	str	r0, [r7, #12]
 80093a0:	460b      	mov	r3, r1
 80093a2:	607a      	str	r2, [r7, #4]
 80093a4:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 80093a6:	7afb      	ldrb	r3, [r7, #11]
 80093a8:	4619      	mov	r1, r3
 80093aa:	68f8      	ldr	r0, [r7, #12]
 80093ac:	f7ff ffc2 	bl	8009334 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 80093b0:	6878      	ldr	r0, [r7, #4]
 80093b2:	f000 f91b 	bl	80095ec <SUBGRF_SetTx>
}
 80093b6:	bf00      	nop
 80093b8:	3710      	adds	r7, #16
 80093ba:	46bd      	mov	sp, r7
 80093bc:	bd80      	pop	{r7, pc}

080093be <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 80093be:	b580      	push	{r7, lr}
 80093c0:	b082      	sub	sp, #8
 80093c2:	af00      	add	r7, sp, #0
 80093c4:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 80093c6:	2208      	movs	r2, #8
 80093c8:	6879      	ldr	r1, [r7, #4]
 80093ca:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 80093ce:	f000 fe9d 	bl	800a10c <SUBGRF_WriteRegisters>
    return 0;
 80093d2:	2300      	movs	r3, #0
}
 80093d4:	4618      	mov	r0, r3
 80093d6:	3708      	adds	r7, #8
 80093d8:	46bd      	mov	sp, r7
 80093da:	bd80      	pop	{r7, pc}

080093dc <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b084      	sub	sp, #16
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	4603      	mov	r3, r0
 80093e4:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 80093e6:	88fb      	ldrh	r3, [r7, #6]
 80093e8:	0a1b      	lsrs	r3, r3, #8
 80093ea:	b29b      	uxth	r3, r3
 80093ec:	b2db      	uxtb	r3, r3
 80093ee:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 80093f0:	88fb      	ldrh	r3, [r7, #6]
 80093f2:	b2db      	uxtb	r3, r3
 80093f4:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 80093f6:	f000 fb6f 	bl	8009ad8 <SUBGRF_GetPacketType>
 80093fa:	4603      	mov	r3, r0
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d108      	bne.n	8009412 <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 8009400:	f107 030c 	add.w	r3, r7, #12
 8009404:	2202      	movs	r2, #2
 8009406:	4619      	mov	r1, r3
 8009408:	f240 60bc 	movw	r0, #1724	; 0x6bc
 800940c:	f000 fe7e 	bl	800a10c <SUBGRF_WriteRegisters>
            break;
 8009410:	e000      	b.n	8009414 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 8009412:	bf00      	nop
    }
}
 8009414:	bf00      	nop
 8009416:	3710      	adds	r7, #16
 8009418:	46bd      	mov	sp, r7
 800941a:	bd80      	pop	{r7, pc}

0800941c <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 800941c:	b580      	push	{r7, lr}
 800941e:	b084      	sub	sp, #16
 8009420:	af00      	add	r7, sp, #0
 8009422:	4603      	mov	r3, r0
 8009424:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 8009426:	88fb      	ldrh	r3, [r7, #6]
 8009428:	0a1b      	lsrs	r3, r3, #8
 800942a:	b29b      	uxth	r3, r3
 800942c:	b2db      	uxtb	r3, r3
 800942e:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 8009430:	88fb      	ldrh	r3, [r7, #6]
 8009432:	b2db      	uxtb	r3, r3
 8009434:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8009436:	f000 fb4f 	bl	8009ad8 <SUBGRF_GetPacketType>
 800943a:	4603      	mov	r3, r0
 800943c:	2b00      	cmp	r3, #0
 800943e:	d108      	bne.n	8009452 <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 8009440:	f107 030c 	add.w	r3, r7, #12
 8009444:	2202      	movs	r2, #2
 8009446:	4619      	mov	r1, r3
 8009448:	f240 60be 	movw	r0, #1726	; 0x6be
 800944c:	f000 fe5e 	bl	800a10c <SUBGRF_WriteRegisters>
            break;
 8009450:	e000      	b.n	8009454 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 8009452:	bf00      	nop
    }
}
 8009454:	bf00      	nop
 8009456:	3710      	adds	r7, #16
 8009458:	46bd      	mov	sp, r7
 800945a:	bd80      	pop	{r7, pc}

0800945c <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 800945c:	b580      	push	{r7, lr}
 800945e:	b084      	sub	sp, #16
 8009460:	af00      	add	r7, sp, #0
 8009462:	4603      	mov	r3, r0
 8009464:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 8009466:	2300      	movs	r3, #0
 8009468:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 800946a:	f000 fb35 	bl	8009ad8 <SUBGRF_GetPacketType>
 800946e:	4603      	mov	r3, r0
 8009470:	2b00      	cmp	r3, #0
 8009472:	d121      	bne.n	80094b8 <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 8009474:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8009478:	f000 fe34 	bl	800a0e4 <SUBGRF_ReadRegister>
 800947c:	4603      	mov	r3, r0
 800947e:	f023 0301 	bic.w	r3, r3, #1
 8009482:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 8009484:	88fb      	ldrh	r3, [r7, #6]
 8009486:	0a1b      	lsrs	r3, r3, #8
 8009488:	b29b      	uxth	r3, r3
 800948a:	b25b      	sxtb	r3, r3
 800948c:	f003 0301 	and.w	r3, r3, #1
 8009490:	b25a      	sxtb	r2, r3
 8009492:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009496:	4313      	orrs	r3, r2
 8009498:	b25b      	sxtb	r3, r3
 800949a:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 800949c:	7bfb      	ldrb	r3, [r7, #15]
 800949e:	4619      	mov	r1, r3
 80094a0:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 80094a4:	f000 fe0a 	bl	800a0bc <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 80094a8:	88fb      	ldrh	r3, [r7, #6]
 80094aa:	b2db      	uxtb	r3, r3
 80094ac:	4619      	mov	r1, r3
 80094ae:	f240 60b9 	movw	r0, #1721	; 0x6b9
 80094b2:	f000 fe03 	bl	800a0bc <SUBGRF_WriteRegister>
            break;
 80094b6:	e000      	b.n	80094ba <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 80094b8:	bf00      	nop
    }
}
 80094ba:	bf00      	nop
 80094bc:	3710      	adds	r7, #16
 80094be:	46bd      	mov	sp, r7
 80094c0:	bd80      	pop	{r7, pc}

080094c2 <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 80094c2:	b580      	push	{r7, lr}
 80094c4:	b082      	sub	sp, #8
 80094c6:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 80094c8:	2300      	movs	r3, #0
 80094ca:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 80094cc:	2300      	movs	r3, #0
 80094ce:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 80094d0:	2300      	movs	r3, #0
 80094d2:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 80094d4:	f640 00e2 	movw	r0, #2274	; 0x8e2
 80094d8:	f000 fe04 	bl	800a0e4 <SUBGRF_ReadRegister>
 80094dc:	4603      	mov	r3, r0
 80094de:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 80094e0:	79fb      	ldrb	r3, [r7, #7]
 80094e2:	f023 0301 	bic.w	r3, r3, #1
 80094e6:	b2db      	uxtb	r3, r3
 80094e8:	4619      	mov	r1, r3
 80094ea:	f640 00e2 	movw	r0, #2274	; 0x8e2
 80094ee:	f000 fde5 	bl	800a0bc <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 80094f2:	f640 00e5 	movw	r0, #2277	; 0x8e5
 80094f6:	f000 fdf5 	bl	800a0e4 <SUBGRF_ReadRegister>
 80094fa:	4603      	mov	r3, r0
 80094fc:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 80094fe:	79bb      	ldrb	r3, [r7, #6]
 8009500:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009504:	b2db      	uxtb	r3, r3
 8009506:	4619      	mov	r1, r3
 8009508:	f640 00e5 	movw	r0, #2277	; 0x8e5
 800950c:	f000 fdd6 	bl	800a0bc <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8009510:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8009514:	f000 f88a 	bl	800962c <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 8009518:	463b      	mov	r3, r7
 800951a:	2204      	movs	r2, #4
 800951c:	4619      	mov	r1, r3
 800951e:	f640 0019 	movw	r0, #2073	; 0x819
 8009522:	f000 fe15 	bl	800a150 <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 8009526:	2000      	movs	r0, #0
 8009528:	f000 f844 	bl	80095b4 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 800952c:	79fb      	ldrb	r3, [r7, #7]
 800952e:	4619      	mov	r1, r3
 8009530:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8009534:	f000 fdc2 	bl	800a0bc <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 8009538:	79bb      	ldrb	r3, [r7, #6]
 800953a:	4619      	mov	r1, r3
 800953c:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8009540:	f000 fdbc 	bl	800a0bc <SUBGRF_WriteRegister>

    return number;
 8009544:	683b      	ldr	r3, [r7, #0]
}
 8009546:	4618      	mov	r0, r3
 8009548:	3708      	adds	r7, #8
 800954a:	46bd      	mov	sp, r7
 800954c:	bd80      	pop	{r7, pc}
	...

08009550 <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b084      	sub	sp, #16
 8009554:	af00      	add	r7, sp, #0
 8009556:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 8009558:	2000      	movs	r0, #0
 800955a:	f001 fbf8 	bl	800ad4e <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 800955e:	2002      	movs	r0, #2
 8009560:	f000 ffa4 	bl	800a4ac <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8009564:	793b      	ldrb	r3, [r7, #4]
 8009566:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800956a:	b2db      	uxtb	r3, r3
 800956c:	009b      	lsls	r3, r3, #2
 800956e:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8009570:	793b      	ldrb	r3, [r7, #4]
 8009572:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8009576:	b2db      	uxtb	r3, r3
 8009578:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800957a:	b25b      	sxtb	r3, r3
 800957c:	4313      	orrs	r3, r2
 800957e:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 8009580:	793b      	ldrb	r3, [r7, #4]
 8009582:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8009586:	b2db      	uxtb	r3, r3
 8009588:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 800958a:	4313      	orrs	r3, r2
 800958c:	b25b      	sxtb	r3, r3
 800958e:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8009590:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 8009592:	f107 030f 	add.w	r3, r7, #15
 8009596:	2201      	movs	r2, #1
 8009598:	4619      	mov	r1, r3
 800959a:	2084      	movs	r0, #132	; 0x84
 800959c:	f000 fe3e 	bl	800a21c <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 80095a0:	4b03      	ldr	r3, [pc, #12]	; (80095b0 <SUBGRF_SetSleep+0x60>)
 80095a2:	2200      	movs	r2, #0
 80095a4:	701a      	strb	r2, [r3, #0]
}
 80095a6:	bf00      	nop
 80095a8:	3710      	adds	r7, #16
 80095aa:	46bd      	mov	sp, r7
 80095ac:	bd80      	pop	{r7, pc}
 80095ae:	bf00      	nop
 80095b0:	20000314 	.word	0x20000314

080095b4 <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 80095b4:	b580      	push	{r7, lr}
 80095b6:	b082      	sub	sp, #8
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	4603      	mov	r3, r0
 80095bc:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 80095be:	1dfb      	adds	r3, r7, #7
 80095c0:	2201      	movs	r2, #1
 80095c2:	4619      	mov	r1, r3
 80095c4:	2080      	movs	r0, #128	; 0x80
 80095c6:	f000 fe29 	bl	800a21c <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 80095ca:	79fb      	ldrb	r3, [r7, #7]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d103      	bne.n	80095d8 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 80095d0:	4b05      	ldr	r3, [pc, #20]	; (80095e8 <SUBGRF_SetStandby+0x34>)
 80095d2:	2201      	movs	r2, #1
 80095d4:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 80095d6:	e002      	b.n	80095de <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 80095d8:	4b03      	ldr	r3, [pc, #12]	; (80095e8 <SUBGRF_SetStandby+0x34>)
 80095da:	2202      	movs	r2, #2
 80095dc:	701a      	strb	r2, [r3, #0]
}
 80095de:	bf00      	nop
 80095e0:	3708      	adds	r7, #8
 80095e2:	46bd      	mov	sp, r7
 80095e4:	bd80      	pop	{r7, pc}
 80095e6:	bf00      	nop
 80095e8:	20000314 	.word	0x20000314

080095ec <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b084      	sub	sp, #16
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 80095f4:	4b0c      	ldr	r3, [pc, #48]	; (8009628 <SUBGRF_SetTx+0x3c>)
 80095f6:	2204      	movs	r2, #4
 80095f8:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	0c1b      	lsrs	r3, r3, #16
 80095fe:	b2db      	uxtb	r3, r3
 8009600:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	0a1b      	lsrs	r3, r3, #8
 8009606:	b2db      	uxtb	r3, r3
 8009608:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	b2db      	uxtb	r3, r3
 800960e:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 8009610:	f107 030c 	add.w	r3, r7, #12
 8009614:	2203      	movs	r2, #3
 8009616:	4619      	mov	r1, r3
 8009618:	2083      	movs	r0, #131	; 0x83
 800961a:	f000 fdff 	bl	800a21c <SUBGRF_WriteCommand>
}
 800961e:	bf00      	nop
 8009620:	3710      	adds	r7, #16
 8009622:	46bd      	mov	sp, r7
 8009624:	bd80      	pop	{r7, pc}
 8009626:	bf00      	nop
 8009628:	20000314 	.word	0x20000314

0800962c <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 800962c:	b580      	push	{r7, lr}
 800962e:	b084      	sub	sp, #16
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8009634:	4b0c      	ldr	r3, [pc, #48]	; (8009668 <SUBGRF_SetRx+0x3c>)
 8009636:	2205      	movs	r2, #5
 8009638:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	0c1b      	lsrs	r3, r3, #16
 800963e:	b2db      	uxtb	r3, r3
 8009640:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	0a1b      	lsrs	r3, r3, #8
 8009646:	b2db      	uxtb	r3, r3
 8009648:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	b2db      	uxtb	r3, r3
 800964e:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8009650:	f107 030c 	add.w	r3, r7, #12
 8009654:	2203      	movs	r2, #3
 8009656:	4619      	mov	r1, r3
 8009658:	2082      	movs	r0, #130	; 0x82
 800965a:	f000 fddf 	bl	800a21c <SUBGRF_WriteCommand>
}
 800965e:	bf00      	nop
 8009660:	3710      	adds	r7, #16
 8009662:	46bd      	mov	sp, r7
 8009664:	bd80      	pop	{r7, pc}
 8009666:	bf00      	nop
 8009668:	20000314 	.word	0x20000314

0800966c <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 800966c:	b580      	push	{r7, lr}
 800966e:	b084      	sub	sp, #16
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8009674:	4b0e      	ldr	r3, [pc, #56]	; (80096b0 <SUBGRF_SetRxBoosted+0x44>)
 8009676:	2205      	movs	r2, #5
 8009678:	701a      	strb	r2, [r3, #0]

    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 800967a:	2197      	movs	r1, #151	; 0x97
 800967c:	f640 00ac 	movw	r0, #2220	; 0x8ac
 8009680:	f000 fd1c 	bl	800a0bc <SUBGRF_WriteRegister>

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	0c1b      	lsrs	r3, r3, #16
 8009688:	b2db      	uxtb	r3, r3
 800968a:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	0a1b      	lsrs	r3, r3, #8
 8009690:	b2db      	uxtb	r3, r3
 8009692:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	b2db      	uxtb	r3, r3
 8009698:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 800969a:	f107 030c 	add.w	r3, r7, #12
 800969e:	2203      	movs	r2, #3
 80096a0:	4619      	mov	r1, r3
 80096a2:	2082      	movs	r0, #130	; 0x82
 80096a4:	f000 fdba 	bl	800a21c <SUBGRF_WriteCommand>
}
 80096a8:	bf00      	nop
 80096aa:	3710      	adds	r7, #16
 80096ac:	46bd      	mov	sp, r7
 80096ae:	bd80      	pop	{r7, pc}
 80096b0:	20000314 	.word	0x20000314

080096b4 <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 80096b4:	b580      	push	{r7, lr}
 80096b6:	b084      	sub	sp, #16
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]
 80096bc:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	0c1b      	lsrs	r3, r3, #16
 80096c2:	b2db      	uxtb	r3, r3
 80096c4:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	0a1b      	lsrs	r3, r3, #8
 80096ca:	b2db      	uxtb	r3, r3
 80096cc:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	b2db      	uxtb	r3, r3
 80096d2:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 80096d4:	683b      	ldr	r3, [r7, #0]
 80096d6:	0c1b      	lsrs	r3, r3, #16
 80096d8:	b2db      	uxtb	r3, r3
 80096da:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 80096dc:	683b      	ldr	r3, [r7, #0]
 80096de:	0a1b      	lsrs	r3, r3, #8
 80096e0:	b2db      	uxtb	r3, r3
 80096e2:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 80096e4:	683b      	ldr	r3, [r7, #0]
 80096e6:	b2db      	uxtb	r3, r3
 80096e8:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 80096ea:	f107 0308 	add.w	r3, r7, #8
 80096ee:	2206      	movs	r2, #6
 80096f0:	4619      	mov	r1, r3
 80096f2:	2094      	movs	r0, #148	; 0x94
 80096f4:	f000 fd92 	bl	800a21c <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 80096f8:	4b03      	ldr	r3, [pc, #12]	; (8009708 <SUBGRF_SetRxDutyCycle+0x54>)
 80096fa:	2206      	movs	r2, #6
 80096fc:	701a      	strb	r2, [r3, #0]
}
 80096fe:	bf00      	nop
 8009700:	3710      	adds	r7, #16
 8009702:	46bd      	mov	sp, r7
 8009704:	bd80      	pop	{r7, pc}
 8009706:	bf00      	nop
 8009708:	20000314 	.word	0x20000314

0800970c <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 800970c:	b580      	push	{r7, lr}
 800970e:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 8009710:	2200      	movs	r2, #0
 8009712:	2100      	movs	r1, #0
 8009714:	20c5      	movs	r0, #197	; 0xc5
 8009716:	f000 fd81 	bl	800a21c <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 800971a:	4b02      	ldr	r3, [pc, #8]	; (8009724 <SUBGRF_SetCad+0x18>)
 800971c:	2207      	movs	r2, #7
 800971e:	701a      	strb	r2, [r3, #0]
}
 8009720:	bf00      	nop
 8009722:	bd80      	pop	{r7, pc}
 8009724:	20000314 	.word	0x20000314

08009728 <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 8009728:	b580      	push	{r7, lr}
 800972a:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 800972c:	2200      	movs	r2, #0
 800972e:	2100      	movs	r1, #0
 8009730:	20d1      	movs	r0, #209	; 0xd1
 8009732:	f000 fd73 	bl	800a21c <SUBGRF_WriteCommand>
}
 8009736:	bf00      	nop
 8009738:	bd80      	pop	{r7, pc}

0800973a <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 800973a:	b580      	push	{r7, lr}
 800973c:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 800973e:	2200      	movs	r2, #0
 8009740:	2100      	movs	r1, #0
 8009742:	20d2      	movs	r0, #210	; 0xd2
 8009744:	f000 fd6a 	bl	800a21c <SUBGRF_WriteCommand>
}
 8009748:	bf00      	nop
 800974a:	bd80      	pop	{r7, pc}

0800974c <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 800974c:	b580      	push	{r7, lr}
 800974e:	b082      	sub	sp, #8
 8009750:	af00      	add	r7, sp, #0
 8009752:	4603      	mov	r3, r0
 8009754:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 8009756:	1dfb      	adds	r3, r7, #7
 8009758:	2201      	movs	r2, #1
 800975a:	4619      	mov	r1, r3
 800975c:	209f      	movs	r0, #159	; 0x9f
 800975e:	f000 fd5d 	bl	800a21c <SUBGRF_WriteCommand>
}
 8009762:	bf00      	nop
 8009764:	3708      	adds	r7, #8
 8009766:	46bd      	mov	sp, r7
 8009768:	bd80      	pop	{r7, pc}

0800976a <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 800976a:	b580      	push	{r7, lr}
 800976c:	b084      	sub	sp, #16
 800976e:	af00      	add	r7, sp, #0
 8009770:	4603      	mov	r3, r0
 8009772:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 8009774:	1dfb      	adds	r3, r7, #7
 8009776:	2201      	movs	r2, #1
 8009778:	4619      	mov	r1, r3
 800977a:	20a0      	movs	r0, #160	; 0xa0
 800977c:	f000 fd4e 	bl	800a21c <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 8009780:	79fb      	ldrb	r3, [r7, #7]
 8009782:	2b3f      	cmp	r3, #63	; 0x3f
 8009784:	d91c      	bls.n	80097c0 <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 8009786:	79fb      	ldrb	r3, [r7, #7]
 8009788:	085b      	lsrs	r3, r3, #1
 800978a:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 800978c:	2300      	movs	r3, #0
 800978e:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 8009790:	2300      	movs	r3, #0
 8009792:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 8009794:	e005      	b.n	80097a2 <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 8009796:	7bfb      	ldrb	r3, [r7, #15]
 8009798:	089b      	lsrs	r3, r3, #2
 800979a:	73fb      	strb	r3, [r7, #15]
            exp++;
 800979c:	7bbb      	ldrb	r3, [r7, #14]
 800979e:	3301      	adds	r3, #1
 80097a0:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 80097a2:	7bfb      	ldrb	r3, [r7, #15]
 80097a4:	2b1f      	cmp	r3, #31
 80097a6:	d8f6      	bhi.n	8009796 <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 80097a8:	7bfb      	ldrb	r3, [r7, #15]
 80097aa:	00db      	lsls	r3, r3, #3
 80097ac:	b2da      	uxtb	r2, r3
 80097ae:	7bbb      	ldrb	r3, [r7, #14]
 80097b0:	4413      	add	r3, r2
 80097b2:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 80097b4:	7b7b      	ldrb	r3, [r7, #13]
 80097b6:	4619      	mov	r1, r3
 80097b8:	f240 7006 	movw	r0, #1798	; 0x706
 80097bc:	f000 fc7e 	bl	800a0bc <SUBGRF_WriteRegister>
    }
}
 80097c0:	bf00      	nop
 80097c2:	3710      	adds	r7, #16
 80097c4:	46bd      	mov	sp, r7
 80097c6:	bd80      	pop	{r7, pc}

080097c8 <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 80097c8:	b580      	push	{r7, lr}
 80097ca:	b082      	sub	sp, #8
 80097cc:	af00      	add	r7, sp, #0
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 80097ce:	f001 fae4 	bl	800ad9a <RBI_IsDCDC>
 80097d2:	4603      	mov	r3, r0
 80097d4:	2b01      	cmp	r3, #1
 80097d6:	d102      	bne.n	80097de <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 80097d8:	2301      	movs	r3, #1
 80097da:	71fb      	strb	r3, [r7, #7]
 80097dc:	e001      	b.n	80097e2 <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 80097de:	2300      	movs	r3, #0
 80097e0:	71fb      	strb	r3, [r7, #7]
    }
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 80097e2:	1dfb      	adds	r3, r7, #7
 80097e4:	2201      	movs	r2, #1
 80097e6:	4619      	mov	r1, r3
 80097e8:	2096      	movs	r0, #150	; 0x96
 80097ea:	f000 fd17 	bl	800a21c <SUBGRF_WriteCommand>
}
 80097ee:	bf00      	nop
 80097f0:	3708      	adds	r7, #8
 80097f2:	46bd      	mov	sp, r7
 80097f4:	bd80      	pop	{r7, pc}

080097f6 <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 80097f6:	b580      	push	{r7, lr}
 80097f8:	b084      	sub	sp, #16
 80097fa:	af00      	add	r7, sp, #0
 80097fc:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 80097fe:	793b      	ldrb	r3, [r7, #4]
 8009800:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8009804:	b2db      	uxtb	r3, r3
 8009806:	019b      	lsls	r3, r3, #6
 8009808:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 800980a:	793b      	ldrb	r3, [r7, #4]
 800980c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8009810:	b2db      	uxtb	r3, r3
 8009812:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8009814:	b25b      	sxtb	r3, r3
 8009816:	4313      	orrs	r3, r2
 8009818:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 800981a:	793b      	ldrb	r3, [r7, #4]
 800981c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8009820:	b2db      	uxtb	r3, r3
 8009822:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8009824:	b25b      	sxtb	r3, r3
 8009826:	4313      	orrs	r3, r2
 8009828:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 800982a:	793b      	ldrb	r3, [r7, #4]
 800982c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8009830:	b2db      	uxtb	r3, r3
 8009832:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8009834:	b25b      	sxtb	r3, r3
 8009836:	4313      	orrs	r3, r2
 8009838:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 800983a:	793b      	ldrb	r3, [r7, #4]
 800983c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8009840:	b2db      	uxtb	r3, r3
 8009842:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8009844:	b25b      	sxtb	r3, r3
 8009846:	4313      	orrs	r3, r2
 8009848:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 800984a:	793b      	ldrb	r3, [r7, #4]
 800984c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8009850:	b2db      	uxtb	r3, r3
 8009852:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8009854:	b25b      	sxtb	r3, r3
 8009856:	4313      	orrs	r3, r2
 8009858:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 800985a:	793b      	ldrb	r3, [r7, #4]
 800985c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8009860:	b2db      	uxtb	r3, r3
 8009862:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8009864:	4313      	orrs	r3, r2
 8009866:	b25b      	sxtb	r3, r3
 8009868:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800986a:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 800986c:	f107 030f 	add.w	r3, r7, #15
 8009870:	2201      	movs	r2, #1
 8009872:	4619      	mov	r1, r3
 8009874:	2089      	movs	r0, #137	; 0x89
 8009876:	f000 fcd1 	bl	800a21c <SUBGRF_WriteCommand>
}
 800987a:	bf00      	nop
 800987c:	3710      	adds	r7, #16
 800987e:	46bd      	mov	sp, r7
 8009880:	bd80      	pop	{r7, pc}
	...

08009884 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 8009884:	b580      	push	{r7, lr}
 8009886:	b084      	sub	sp, #16
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	4a1d      	ldr	r2, [pc, #116]	; (8009904 <SUBGRF_CalibrateImage+0x80>)
 8009890:	4293      	cmp	r3, r2
 8009892:	d904      	bls.n	800989e <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 8009894:	23e1      	movs	r3, #225	; 0xe1
 8009896:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 8009898:	23e9      	movs	r3, #233	; 0xe9
 800989a:	737b      	strb	r3, [r7, #13]
 800989c:	e027      	b.n	80098ee <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 850000000 )
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	4a19      	ldr	r2, [pc, #100]	; (8009908 <SUBGRF_CalibrateImage+0x84>)
 80098a2:	4293      	cmp	r3, r2
 80098a4:	d904      	bls.n	80098b0 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 80098a6:	23d7      	movs	r3, #215	; 0xd7
 80098a8:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 80098aa:	23db      	movs	r3, #219	; 0xdb
 80098ac:	737b      	strb	r3, [r7, #13]
 80098ae:	e01e      	b.n	80098ee <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 770000000 )
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	4a16      	ldr	r2, [pc, #88]	; (800990c <SUBGRF_CalibrateImage+0x88>)
 80098b4:	4293      	cmp	r3, r2
 80098b6:	d904      	bls.n	80098c2 <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 80098b8:	23c1      	movs	r3, #193	; 0xc1
 80098ba:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 80098bc:	23c5      	movs	r3, #197	; 0xc5
 80098be:	737b      	strb	r3, [r7, #13]
 80098c0:	e015      	b.n	80098ee <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 460000000 )
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	4a12      	ldr	r2, [pc, #72]	; (8009910 <SUBGRF_CalibrateImage+0x8c>)
 80098c6:	4293      	cmp	r3, r2
 80098c8:	d904      	bls.n	80098d4 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 80098ca:	2375      	movs	r3, #117	; 0x75
 80098cc:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 80098ce:	2381      	movs	r3, #129	; 0x81
 80098d0:	737b      	strb	r3, [r7, #13]
 80098d2:	e00c      	b.n	80098ee <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 425000000 )
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	4a0f      	ldr	r2, [pc, #60]	; (8009914 <SUBGRF_CalibrateImage+0x90>)
 80098d8:	4293      	cmp	r3, r2
 80098da:	d904      	bls.n	80098e6 <SUBGRF_CalibrateImage+0x62>
    {
        calFreq[0] = 0x6B;
 80098dc:	236b      	movs	r3, #107	; 0x6b
 80098de:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 80098e0:	236f      	movs	r3, #111	; 0x6f
 80098e2:	737b      	strb	r3, [r7, #13]
 80098e4:	e003      	b.n	80098ee <SUBGRF_CalibrateImage+0x6a>
    }
    else /* freq <= 425000000*/
    {
        /* [ 156MHz - 171MHz ] */
        calFreq[0] = 0x29;
 80098e6:	2329      	movs	r3, #41	; 0x29
 80098e8:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x2B ;
 80098ea:	232b      	movs	r3, #43	; 0x2b
 80098ec:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 80098ee:	f107 030c 	add.w	r3, r7, #12
 80098f2:	2202      	movs	r2, #2
 80098f4:	4619      	mov	r1, r3
 80098f6:	2098      	movs	r0, #152	; 0x98
 80098f8:	f000 fc90 	bl	800a21c <SUBGRF_WriteCommand>
}
 80098fc:	bf00      	nop
 80098fe:	3710      	adds	r7, #16
 8009900:	46bd      	mov	sp, r7
 8009902:	bd80      	pop	{r7, pc}
 8009904:	35a4e900 	.word	0x35a4e900
 8009908:	32a9f880 	.word	0x32a9f880
 800990c:	2de54480 	.word	0x2de54480
 8009910:	1b6b0b00 	.word	0x1b6b0b00
 8009914:	1954fc40 	.word	0x1954fc40

08009918 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 8009918:	b590      	push	{r4, r7, lr}
 800991a:	b085      	sub	sp, #20
 800991c:	af00      	add	r7, sp, #0
 800991e:	4604      	mov	r4, r0
 8009920:	4608      	mov	r0, r1
 8009922:	4611      	mov	r1, r2
 8009924:	461a      	mov	r2, r3
 8009926:	4623      	mov	r3, r4
 8009928:	71fb      	strb	r3, [r7, #7]
 800992a:	4603      	mov	r3, r0
 800992c:	71bb      	strb	r3, [r7, #6]
 800992e:	460b      	mov	r3, r1
 8009930:	717b      	strb	r3, [r7, #5]
 8009932:	4613      	mov	r3, r2
 8009934:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 8009936:	79fb      	ldrb	r3, [r7, #7]
 8009938:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 800993a:	79bb      	ldrb	r3, [r7, #6]
 800993c:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 800993e:	797b      	ldrb	r3, [r7, #5]
 8009940:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 8009942:	793b      	ldrb	r3, [r7, #4]
 8009944:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 8009946:	f107 030c 	add.w	r3, r7, #12
 800994a:	2204      	movs	r2, #4
 800994c:	4619      	mov	r1, r3
 800994e:	2095      	movs	r0, #149	; 0x95
 8009950:	f000 fc64 	bl	800a21c <SUBGRF_WriteCommand>
}
 8009954:	bf00      	nop
 8009956:	3714      	adds	r7, #20
 8009958:	46bd      	mov	sp, r7
 800995a:	bd90      	pop	{r4, r7, pc}

0800995c <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 800995c:	b590      	push	{r4, r7, lr}
 800995e:	b085      	sub	sp, #20
 8009960:	af00      	add	r7, sp, #0
 8009962:	4604      	mov	r4, r0
 8009964:	4608      	mov	r0, r1
 8009966:	4611      	mov	r1, r2
 8009968:	461a      	mov	r2, r3
 800996a:	4623      	mov	r3, r4
 800996c:	80fb      	strh	r3, [r7, #6]
 800996e:	4603      	mov	r3, r0
 8009970:	80bb      	strh	r3, [r7, #4]
 8009972:	460b      	mov	r3, r1
 8009974:	807b      	strh	r3, [r7, #2]
 8009976:	4613      	mov	r3, r2
 8009978:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 800997a:	88fb      	ldrh	r3, [r7, #6]
 800997c:	0a1b      	lsrs	r3, r3, #8
 800997e:	b29b      	uxth	r3, r3
 8009980:	b2db      	uxtb	r3, r3
 8009982:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 8009984:	88fb      	ldrh	r3, [r7, #6]
 8009986:	b2db      	uxtb	r3, r3
 8009988:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 800998a:	88bb      	ldrh	r3, [r7, #4]
 800998c:	0a1b      	lsrs	r3, r3, #8
 800998e:	b29b      	uxth	r3, r3
 8009990:	b2db      	uxtb	r3, r3
 8009992:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 8009994:	88bb      	ldrh	r3, [r7, #4]
 8009996:	b2db      	uxtb	r3, r3
 8009998:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 800999a:	887b      	ldrh	r3, [r7, #2]
 800999c:	0a1b      	lsrs	r3, r3, #8
 800999e:	b29b      	uxth	r3, r3
 80099a0:	b2db      	uxtb	r3, r3
 80099a2:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 80099a4:	887b      	ldrh	r3, [r7, #2]
 80099a6:	b2db      	uxtb	r3, r3
 80099a8:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 80099aa:	883b      	ldrh	r3, [r7, #0]
 80099ac:	0a1b      	lsrs	r3, r3, #8
 80099ae:	b29b      	uxth	r3, r3
 80099b0:	b2db      	uxtb	r3, r3
 80099b2:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 80099b4:	883b      	ldrh	r3, [r7, #0]
 80099b6:	b2db      	uxtb	r3, r3
 80099b8:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 80099ba:	f107 0308 	add.w	r3, r7, #8
 80099be:	2208      	movs	r2, #8
 80099c0:	4619      	mov	r1, r3
 80099c2:	2008      	movs	r0, #8
 80099c4:	f000 fc2a 	bl	800a21c <SUBGRF_WriteCommand>
}
 80099c8:	bf00      	nop
 80099ca:	3714      	adds	r7, #20
 80099cc:	46bd      	mov	sp, r7
 80099ce:	bd90      	pop	{r4, r7, pc}

080099d0 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 80099d0:	b580      	push	{r7, lr}
 80099d2:	b084      	sub	sp, #16
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	4603      	mov	r3, r0
 80099d8:	6039      	str	r1, [r7, #0]
 80099da:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 80099dc:	79fb      	ldrb	r3, [r7, #7]
 80099de:	f003 0307 	and.w	r3, r3, #7
 80099e2:	b2db      	uxtb	r3, r3
 80099e4:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80099e6:	683b      	ldr	r3, [r7, #0]
 80099e8:	0c1b      	lsrs	r3, r3, #16
 80099ea:	b2db      	uxtb	r3, r3
 80099ec:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80099ee:	683b      	ldr	r3, [r7, #0]
 80099f0:	0a1b      	lsrs	r3, r3, #8
 80099f2:	b2db      	uxtb	r3, r3
 80099f4:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 80099f6:	683b      	ldr	r3, [r7, #0]
 80099f8:	b2db      	uxtb	r3, r3
 80099fa:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 80099fc:	f107 030c 	add.w	r3, r7, #12
 8009a00:	2204      	movs	r2, #4
 8009a02:	4619      	mov	r1, r3
 8009a04:	2097      	movs	r0, #151	; 0x97
 8009a06:	f000 fc09 	bl	800a21c <SUBGRF_WriteCommand>
}
 8009a0a:	bf00      	nop
 8009a0c:	3710      	adds	r7, #16
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	bd80      	pop	{r7, pc}
	...

08009a14 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 8009a14:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8009a18:	b084      	sub	sp, #16
 8009a1a:	af00      	add	r7, sp, #0
 8009a1c:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 8009a1e:	2300      	movs	r3, #0
 8009a20:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 8009a22:	4b1d      	ldr	r3, [pc, #116]	; (8009a98 <SUBGRF_SetRfFrequency+0x84>)
 8009a24:	781b      	ldrb	r3, [r3, #0]
 8009a26:	f083 0301 	eor.w	r3, r3, #1
 8009a2a:	b2db      	uxtb	r3, r3
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d005      	beq.n	8009a3c <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 8009a30:	6878      	ldr	r0, [r7, #4]
 8009a32:	f7ff ff27 	bl	8009884 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 8009a36:	4b18      	ldr	r3, [pc, #96]	; (8009a98 <SUBGRF_SetRfFrequency+0x84>)
 8009a38:	2201      	movs	r2, #1
 8009a3a:	701a      	strb	r2, [r3, #0]
    }
    SX_FREQ_TO_CHANNEL(chan, frequency);
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	2200      	movs	r2, #0
 8009a40:	461c      	mov	r4, r3
 8009a42:	4615      	mov	r5, r2
 8009a44:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 8009a48:	ea4f 6844 	mov.w	r8, r4, lsl #25
 8009a4c:	4a13      	ldr	r2, [pc, #76]	; (8009a9c <SUBGRF_SetRfFrequency+0x88>)
 8009a4e:	f04f 0300 	mov.w	r3, #0
 8009a52:	4640      	mov	r0, r8
 8009a54:	4649      	mov	r1, r9
 8009a56:	f7f6 fb97 	bl	8000188 <__aeabi_uldivmod>
 8009a5a:	4602      	mov	r2, r0
 8009a5c:	460b      	mov	r3, r1
 8009a5e:	4613      	mov	r3, r2
 8009a60:	60fb      	str	r3, [r7, #12]
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	0e1b      	lsrs	r3, r3, #24
 8009a66:	b2db      	uxtb	r3, r3
 8009a68:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	0c1b      	lsrs	r3, r3, #16
 8009a6e:	b2db      	uxtb	r3, r3
 8009a70:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	0a1b      	lsrs	r3, r3, #8
 8009a76:	b2db      	uxtb	r3, r3
 8009a78:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	b2db      	uxtb	r3, r3
 8009a7e:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 8009a80:	f107 0308 	add.w	r3, r7, #8
 8009a84:	2204      	movs	r2, #4
 8009a86:	4619      	mov	r1, r3
 8009a88:	2086      	movs	r0, #134	; 0x86
 8009a8a:	f000 fbc7 	bl	800a21c <SUBGRF_WriteCommand>
}
 8009a8e:	bf00      	nop
 8009a90:	3710      	adds	r7, #16
 8009a92:	46bd      	mov	sp, r7
 8009a94:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8009a98:	2000031c 	.word	0x2000031c
 8009a9c:	01e84800 	.word	0x01e84800

08009aa0 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b082      	sub	sp, #8
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	4603      	mov	r3, r0
 8009aa8:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 8009aaa:	79fa      	ldrb	r2, [r7, #7]
 8009aac:	4b09      	ldr	r3, [pc, #36]	; (8009ad4 <SUBGRF_SetPacketType+0x34>)
 8009aae:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 8009ab0:	79fb      	ldrb	r3, [r7, #7]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d104      	bne.n	8009ac0 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 8009ab6:	2100      	movs	r1, #0
 8009ab8:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8009abc:	f000 fafe 	bl	800a0bc <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 8009ac0:	1dfb      	adds	r3, r7, #7
 8009ac2:	2201      	movs	r2, #1
 8009ac4:	4619      	mov	r1, r3
 8009ac6:	208a      	movs	r0, #138	; 0x8a
 8009ac8:	f000 fba8 	bl	800a21c <SUBGRF_WriteCommand>
}
 8009acc:	bf00      	nop
 8009ace:	3708      	adds	r7, #8
 8009ad0:	46bd      	mov	sp, r7
 8009ad2:	bd80      	pop	{r7, pc}
 8009ad4:	20000315 	.word	0x20000315

08009ad8 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 8009ad8:	b480      	push	{r7}
 8009ada:	af00      	add	r7, sp, #0
    return PacketType;
 8009adc:	4b02      	ldr	r3, [pc, #8]	; (8009ae8 <SUBGRF_GetPacketType+0x10>)
 8009ade:	781b      	ldrb	r3, [r3, #0]
}
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	46bd      	mov	sp, r7
 8009ae4:	bc80      	pop	{r7}
 8009ae6:	4770      	bx	lr
 8009ae8:	20000315 	.word	0x20000315

08009aec <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 8009aec:	b580      	push	{r7, lr}
 8009aee:	b084      	sub	sp, #16
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	4603      	mov	r3, r0
 8009af4:	71fb      	strb	r3, [r7, #7]
 8009af6:	460b      	mov	r3, r1
 8009af8:	71bb      	strb	r3, [r7, #6]
 8009afa:	4613      	mov	r3, r2
 8009afc:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 8009afe:	79fb      	ldrb	r3, [r7, #7]
 8009b00:	2b01      	cmp	r3, #1
 8009b02:	d149      	bne.n	8009b98 <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 8009b04:	2000      	movs	r0, #0
 8009b06:	f001 f953 	bl	800adb0 <RBI_GetRFOMaxPowerConfig>
 8009b0a:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 8009b0c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8009b10:	68fa      	ldr	r2, [r7, #12]
 8009b12:	429a      	cmp	r2, r3
 8009b14:	da01      	bge.n	8009b1a <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	2b0e      	cmp	r3, #14
 8009b1e:	d10e      	bne.n	8009b3e <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 8009b20:	2301      	movs	r3, #1
 8009b22:	2201      	movs	r2, #1
 8009b24:	2100      	movs	r1, #0
 8009b26:	2004      	movs	r0, #4
 8009b28:	f7ff fef6 	bl	8009918 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8009b2c:	79ba      	ldrb	r2, [r7, #6]
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	b2db      	uxtb	r3, r3
 8009b32:	1ad3      	subs	r3, r2, r3
 8009b34:	b2db      	uxtb	r3, r3
 8009b36:	330e      	adds	r3, #14
 8009b38:	b2db      	uxtb	r3, r3
 8009b3a:	71bb      	strb	r3, [r7, #6]
 8009b3c:	e01f      	b.n	8009b7e <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	2b0a      	cmp	r3, #10
 8009b42:	d10e      	bne.n	8009b62 <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 8009b44:	2301      	movs	r3, #1
 8009b46:	2201      	movs	r2, #1
 8009b48:	2100      	movs	r1, #0
 8009b4a:	2001      	movs	r0, #1
 8009b4c:	f7ff fee4 	bl	8009918 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 8009b50:	79ba      	ldrb	r2, [r7, #6]
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	b2db      	uxtb	r3, r3
 8009b56:	1ad3      	subs	r3, r2, r3
 8009b58:	b2db      	uxtb	r3, r3
 8009b5a:	330d      	adds	r3, #13
 8009b5c:	b2db      	uxtb	r3, r3
 8009b5e:	71bb      	strb	r3, [r7, #6]
 8009b60:	e00d      	b.n	8009b7e <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 8009b62:	2301      	movs	r3, #1
 8009b64:	2201      	movs	r2, #1
 8009b66:	2100      	movs	r1, #0
 8009b68:	2007      	movs	r0, #7
 8009b6a:	f7ff fed5 	bl	8009918 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8009b6e:	79ba      	ldrb	r2, [r7, #6]
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	b2db      	uxtb	r3, r3
 8009b74:	1ad3      	subs	r3, r2, r3
 8009b76:	b2db      	uxtb	r3, r3
 8009b78:	330e      	adds	r3, #14
 8009b7a:	b2db      	uxtb	r3, r3
 8009b7c:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 8009b7e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8009b82:	f113 0f11 	cmn.w	r3, #17
 8009b86:	da01      	bge.n	8009b8c <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 8009b88:	23ef      	movs	r3, #239	; 0xef
 8009b8a:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 8009b8c:	2118      	movs	r1, #24
 8009b8e:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8009b92:	f000 fa93 	bl	800a0bc <SUBGRF_WriteRegister>
 8009b96:	e067      	b.n	8009c68 <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 8009b98:	f640 00d8 	movw	r0, #2264	; 0x8d8
 8009b9c:	f000 faa2 	bl	800a0e4 <SUBGRF_ReadRegister>
 8009ba0:	4603      	mov	r3, r0
 8009ba2:	f043 031e 	orr.w	r3, r3, #30
 8009ba6:	b2db      	uxtb	r3, r3
 8009ba8:	4619      	mov	r1, r3
 8009baa:	f640 00d8 	movw	r0, #2264	; 0x8d8
 8009bae:	f000 fa85 	bl	800a0bc <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 8009bb2:	2001      	movs	r0, #1
 8009bb4:	f001 f8fc 	bl	800adb0 <RBI_GetRFOMaxPowerConfig>
 8009bb8:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 8009bba:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8009bbe:	68fa      	ldr	r2, [r7, #12]
 8009bc0:	429a      	cmp	r2, r3
 8009bc2:	da01      	bge.n	8009bc8 <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	2b14      	cmp	r3, #20
 8009bcc:	d10e      	bne.n	8009bec <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 8009bce:	2301      	movs	r3, #1
 8009bd0:	2200      	movs	r2, #0
 8009bd2:	2105      	movs	r1, #5
 8009bd4:	2003      	movs	r0, #3
 8009bd6:	f7ff fe9f 	bl	8009918 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8009bda:	79ba      	ldrb	r2, [r7, #6]
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	b2db      	uxtb	r3, r3
 8009be0:	1ad3      	subs	r3, r2, r3
 8009be2:	b2db      	uxtb	r3, r3
 8009be4:	3316      	adds	r3, #22
 8009be6:	b2db      	uxtb	r3, r3
 8009be8:	71bb      	strb	r3, [r7, #6]
 8009bea:	e031      	b.n	8009c50 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	2b11      	cmp	r3, #17
 8009bf0:	d10e      	bne.n	8009c10 <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 8009bf2:	2301      	movs	r3, #1
 8009bf4:	2200      	movs	r2, #0
 8009bf6:	2103      	movs	r1, #3
 8009bf8:	2002      	movs	r0, #2
 8009bfa:	f7ff fe8d 	bl	8009918 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8009bfe:	79ba      	ldrb	r2, [r7, #6]
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	b2db      	uxtb	r3, r3
 8009c04:	1ad3      	subs	r3, r2, r3
 8009c06:	b2db      	uxtb	r3, r3
 8009c08:	3316      	adds	r3, #22
 8009c0a:	b2db      	uxtb	r3, r3
 8009c0c:	71bb      	strb	r3, [r7, #6]
 8009c0e:	e01f      	b.n	8009c50 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	2b0e      	cmp	r3, #14
 8009c14:	d10e      	bne.n	8009c34 <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 8009c16:	2301      	movs	r3, #1
 8009c18:	2200      	movs	r2, #0
 8009c1a:	2102      	movs	r1, #2
 8009c1c:	2002      	movs	r0, #2
 8009c1e:	f7ff fe7b 	bl	8009918 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8009c22:	79ba      	ldrb	r2, [r7, #6]
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	b2db      	uxtb	r3, r3
 8009c28:	1ad3      	subs	r3, r2, r3
 8009c2a:	b2db      	uxtb	r3, r3
 8009c2c:	330e      	adds	r3, #14
 8009c2e:	b2db      	uxtb	r3, r3
 8009c30:	71bb      	strb	r3, [r7, #6]
 8009c32:	e00d      	b.n	8009c50 <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 8009c34:	2301      	movs	r3, #1
 8009c36:	2200      	movs	r2, #0
 8009c38:	2107      	movs	r1, #7
 8009c3a:	2004      	movs	r0, #4
 8009c3c:	f7ff fe6c 	bl	8009918 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8009c40:	79ba      	ldrb	r2, [r7, #6]
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	b2db      	uxtb	r3, r3
 8009c46:	1ad3      	subs	r3, r2, r3
 8009c48:	b2db      	uxtb	r3, r3
 8009c4a:	3316      	adds	r3, #22
 8009c4c:	b2db      	uxtb	r3, r3
 8009c4e:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 8009c50:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8009c54:	f113 0f09 	cmn.w	r3, #9
 8009c58:	da01      	bge.n	8009c5e <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 8009c5a:	23f7      	movs	r3, #247	; 0xf7
 8009c5c:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 8009c5e:	2138      	movs	r1, #56	; 0x38
 8009c60:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8009c64:	f000 fa2a 	bl	800a0bc <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 8009c68:	79bb      	ldrb	r3, [r7, #6]
 8009c6a:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 8009c6c:	797b      	ldrb	r3, [r7, #5]
 8009c6e:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 8009c70:	f107 0308 	add.w	r3, r7, #8
 8009c74:	2202      	movs	r2, #2
 8009c76:	4619      	mov	r1, r3
 8009c78:	208e      	movs	r0, #142	; 0x8e
 8009c7a:	f000 facf 	bl	800a21c <SUBGRF_WriteCommand>
}
 8009c7e:	bf00      	nop
 8009c80:	3710      	adds	r7, #16
 8009c82:	46bd      	mov	sp, r7
 8009c84:	bd80      	pop	{r7, pc}
	...

08009c88 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 8009c88:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8009c8c:	b086      	sub	sp, #24
 8009c8e:	af00      	add	r7, sp, #0
 8009c90:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 8009c92:	2300      	movs	r3, #0
 8009c94:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8009c96:	4a61      	ldr	r2, [pc, #388]	; (8009e1c <SUBGRF_SetModulationParams+0x194>)
 8009c98:	f107 0308 	add.w	r3, r7, #8
 8009c9c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009ca0:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	781a      	ldrb	r2, [r3, #0]
 8009ca8:	4b5d      	ldr	r3, [pc, #372]	; (8009e20 <SUBGRF_SetModulationParams+0x198>)
 8009caa:	781b      	ldrb	r3, [r3, #0]
 8009cac:	429a      	cmp	r2, r3
 8009cae:	d004      	beq.n	8009cba <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	781b      	ldrb	r3, [r3, #0]
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	f7ff fef3 	bl	8009aa0 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	781b      	ldrb	r3, [r3, #0]
 8009cbe:	2b03      	cmp	r3, #3
 8009cc0:	f200 80a5 	bhi.w	8009e0e <SUBGRF_SetModulationParams+0x186>
 8009cc4:	a201      	add	r2, pc, #4	; (adr r2, 8009ccc <SUBGRF_SetModulationParams+0x44>)
 8009cc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cca:	bf00      	nop
 8009ccc:	08009cdd 	.word	0x08009cdd
 8009cd0:	08009d9d 	.word	0x08009d9d
 8009cd4:	08009d5f 	.word	0x08009d5f
 8009cd8:	08009dcb 	.word	0x08009dcb
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 8009cdc:	2308      	movs	r3, #8
 8009cde:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	685b      	ldr	r3, [r3, #4]
 8009ce4:	4a4f      	ldr	r2, [pc, #316]	; (8009e24 <SUBGRF_SetModulationParams+0x19c>)
 8009ce6:	fbb2 f3f3 	udiv	r3, r2, r3
 8009cea:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8009cec:	697b      	ldr	r3, [r7, #20]
 8009cee:	0c1b      	lsrs	r3, r3, #16
 8009cf0:	b2db      	uxtb	r3, r3
 8009cf2:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8009cf4:	697b      	ldr	r3, [r7, #20]
 8009cf6:	0a1b      	lsrs	r3, r3, #8
 8009cf8:	b2db      	uxtb	r3, r3
 8009cfa:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8009cfc:	697b      	ldr	r3, [r7, #20]
 8009cfe:	b2db      	uxtb	r3, r3
 8009d00:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	7b1b      	ldrb	r3, [r3, #12]
 8009d06:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	7b5b      	ldrb	r3, [r3, #13]
 8009d0c:	733b      	strb	r3, [r7, #12]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	689b      	ldr	r3, [r3, #8]
 8009d12:	2200      	movs	r2, #0
 8009d14:	461c      	mov	r4, r3
 8009d16:	4615      	mov	r5, r2
 8009d18:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 8009d1c:	ea4f 6844 	mov.w	r8, r4, lsl #25
 8009d20:	4a41      	ldr	r2, [pc, #260]	; (8009e28 <SUBGRF_SetModulationParams+0x1a0>)
 8009d22:	f04f 0300 	mov.w	r3, #0
 8009d26:	4640      	mov	r0, r8
 8009d28:	4649      	mov	r1, r9
 8009d2a:	f7f6 fa2d 	bl	8000188 <__aeabi_uldivmod>
 8009d2e:	4602      	mov	r2, r0
 8009d30:	460b      	mov	r3, r1
 8009d32:	4613      	mov	r3, r2
 8009d34:	617b      	str	r3, [r7, #20]
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 8009d36:	697b      	ldr	r3, [r7, #20]
 8009d38:	0c1b      	lsrs	r3, r3, #16
 8009d3a:	b2db      	uxtb	r3, r3
 8009d3c:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 8009d3e:	697b      	ldr	r3, [r7, #20]
 8009d40:	0a1b      	lsrs	r3, r3, #8
 8009d42:	b2db      	uxtb	r3, r3
 8009d44:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 8009d46:	697b      	ldr	r3, [r7, #20]
 8009d48:	b2db      	uxtb	r3, r3
 8009d4a:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8009d4c:	7cfb      	ldrb	r3, [r7, #19]
 8009d4e:	b29a      	uxth	r2, r3
 8009d50:	f107 0308 	add.w	r3, r7, #8
 8009d54:	4619      	mov	r1, r3
 8009d56:	208b      	movs	r0, #139	; 0x8b
 8009d58:	f000 fa60 	bl	800a21c <SUBGRF_WriteCommand>
        break;
 8009d5c:	e058      	b.n	8009e10 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 8009d5e:	2304      	movs	r3, #4
 8009d60:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	691b      	ldr	r3, [r3, #16]
 8009d66:	4a2f      	ldr	r2, [pc, #188]	; (8009e24 <SUBGRF_SetModulationParams+0x19c>)
 8009d68:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d6c:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8009d6e:	697b      	ldr	r3, [r7, #20]
 8009d70:	0c1b      	lsrs	r3, r3, #16
 8009d72:	b2db      	uxtb	r3, r3
 8009d74:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8009d76:	697b      	ldr	r3, [r7, #20]
 8009d78:	0a1b      	lsrs	r3, r3, #8
 8009d7a:	b2db      	uxtb	r3, r3
 8009d7c:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8009d7e:	697b      	ldr	r3, [r7, #20]
 8009d80:	b2db      	uxtb	r3, r3
 8009d82:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	7d1b      	ldrb	r3, [r3, #20]
 8009d88:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8009d8a:	7cfb      	ldrb	r3, [r7, #19]
 8009d8c:	b29a      	uxth	r2, r3
 8009d8e:	f107 0308 	add.w	r3, r7, #8
 8009d92:	4619      	mov	r1, r3
 8009d94:	208b      	movs	r0, #139	; 0x8b
 8009d96:	f000 fa41 	bl	800a21c <SUBGRF_WriteCommand>
        break;
 8009d9a:	e039      	b.n	8009e10 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 8009d9c:	2304      	movs	r3, #4
 8009d9e:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	7e1b      	ldrb	r3, [r3, #24]
 8009da4:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	7e5b      	ldrb	r3, [r3, #25]
 8009daa:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	7e9b      	ldrb	r3, [r3, #26]
 8009db0:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	7edb      	ldrb	r3, [r3, #27]
 8009db6:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8009db8:	7cfb      	ldrb	r3, [r7, #19]
 8009dba:	b29a      	uxth	r2, r3
 8009dbc:	f107 0308 	add.w	r3, r7, #8
 8009dc0:	4619      	mov	r1, r3
 8009dc2:	208b      	movs	r0, #139	; 0x8b
 8009dc4:	f000 fa2a 	bl	800a21c <SUBGRF_WriteCommand>

        break;
 8009dc8:	e022      	b.n	8009e10 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 8009dca:	2305      	movs	r3, #5
 8009dcc:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	685b      	ldr	r3, [r3, #4]
 8009dd2:	4a14      	ldr	r2, [pc, #80]	; (8009e24 <SUBGRF_SetModulationParams+0x19c>)
 8009dd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8009dd8:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8009dda:	697b      	ldr	r3, [r7, #20]
 8009ddc:	0c1b      	lsrs	r3, r3, #16
 8009dde:	b2db      	uxtb	r3, r3
 8009de0:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8009de2:	697b      	ldr	r3, [r7, #20]
 8009de4:	0a1b      	lsrs	r3, r3, #8
 8009de6:	b2db      	uxtb	r3, r3
 8009de8:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8009dea:	697b      	ldr	r3, [r7, #20]
 8009dec:	b2db      	uxtb	r3, r3
 8009dee:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	7b1b      	ldrb	r3, [r3, #12]
 8009df4:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	7b5b      	ldrb	r3, [r3, #13]
 8009dfa:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8009dfc:	7cfb      	ldrb	r3, [r7, #19]
 8009dfe:	b29a      	uxth	r2, r3
 8009e00:	f107 0308 	add.w	r3, r7, #8
 8009e04:	4619      	mov	r1, r3
 8009e06:	208b      	movs	r0, #139	; 0x8b
 8009e08:	f000 fa08 	bl	800a21c <SUBGRF_WriteCommand>
        break;
 8009e0c:	e000      	b.n	8009e10 <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 8009e0e:	bf00      	nop
    }
}
 8009e10:	bf00      	nop
 8009e12:	3718      	adds	r7, #24
 8009e14:	46bd      	mov	sp, r7
 8009e16:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8009e1a:	bf00      	nop
 8009e1c:	0800c408 	.word	0x0800c408
 8009e20:	20000315 	.word	0x20000315
 8009e24:	3d090000 	.word	0x3d090000
 8009e28:	01e84800 	.word	0x01e84800

08009e2c <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	b086      	sub	sp, #24
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 8009e34:	2300      	movs	r3, #0
 8009e36:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8009e38:	4a48      	ldr	r2, [pc, #288]	; (8009f5c <SUBGRF_SetPacketParams+0x130>)
 8009e3a:	f107 030c 	add.w	r3, r7, #12
 8009e3e:	ca07      	ldmia	r2, {r0, r1, r2}
 8009e40:	c303      	stmia	r3!, {r0, r1}
 8009e42:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	781a      	ldrb	r2, [r3, #0]
 8009e48:	4b45      	ldr	r3, [pc, #276]	; (8009f60 <SUBGRF_SetPacketParams+0x134>)
 8009e4a:	781b      	ldrb	r3, [r3, #0]
 8009e4c:	429a      	cmp	r2, r3
 8009e4e:	d004      	beq.n	8009e5a <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	781b      	ldrb	r3, [r3, #0]
 8009e54:	4618      	mov	r0, r3
 8009e56:	f7ff fe23 	bl	8009aa0 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	781b      	ldrb	r3, [r3, #0]
 8009e5e:	2b03      	cmp	r3, #3
 8009e60:	d878      	bhi.n	8009f54 <SUBGRF_SetPacketParams+0x128>
 8009e62:	a201      	add	r2, pc, #4	; (adr r2, 8009e68 <SUBGRF_SetPacketParams+0x3c>)
 8009e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e68:	08009e79 	.word	0x08009e79
 8009e6c:	08009f09 	.word	0x08009f09
 8009e70:	08009efd 	.word	0x08009efd
 8009e74:	08009e79 	.word	0x08009e79
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	7a5b      	ldrb	r3, [r3, #9]
 8009e7c:	2bf1      	cmp	r3, #241	; 0xf1
 8009e7e:	d10a      	bne.n	8009e96 <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 8009e80:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8009e84:	f7ff faaa 	bl	80093dc <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 8009e88:	f248 0005 	movw	r0, #32773	; 0x8005
 8009e8c:	f7ff fac6 	bl	800941c <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 8009e90:	2302      	movs	r3, #2
 8009e92:	75bb      	strb	r3, [r7, #22]
 8009e94:	e011      	b.n	8009eba <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	7a5b      	ldrb	r3, [r3, #9]
 8009e9a:	2bf2      	cmp	r3, #242	; 0xf2
 8009e9c:	d10a      	bne.n	8009eb4 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 8009e9e:	f641 500f 	movw	r0, #7439	; 0x1d0f
 8009ea2:	f7ff fa9b 	bl	80093dc <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 8009ea6:	f241 0021 	movw	r0, #4129	; 0x1021
 8009eaa:	f7ff fab7 	bl	800941c <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 8009eae:	2306      	movs	r3, #6
 8009eb0:	75bb      	strb	r3, [r7, #22]
 8009eb2:	e002      	b.n	8009eba <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	7a5b      	ldrb	r3, [r3, #9]
 8009eb8:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 8009eba:	2309      	movs	r3, #9
 8009ebc:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	885b      	ldrh	r3, [r3, #2]
 8009ec2:	0a1b      	lsrs	r3, r3, #8
 8009ec4:	b29b      	uxth	r3, r3
 8009ec6:	b2db      	uxtb	r3, r3
 8009ec8:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	885b      	ldrh	r3, [r3, #2]
 8009ece:	b2db      	uxtb	r3, r3
 8009ed0:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	791b      	ldrb	r3, [r3, #4]
 8009ed6:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	795b      	ldrb	r3, [r3, #5]
 8009edc:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	799b      	ldrb	r3, [r3, #6]
 8009ee2:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	79db      	ldrb	r3, [r3, #7]
 8009ee8:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	7a1b      	ldrb	r3, [r3, #8]
 8009eee:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 8009ef0:	7dbb      	ldrb	r3, [r7, #22]
 8009ef2:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	7a9b      	ldrb	r3, [r3, #10]
 8009ef8:	753b      	strb	r3, [r7, #20]
        break;
 8009efa:	e022      	b.n	8009f42 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 8009efc:	2301      	movs	r3, #1
 8009efe:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	7b1b      	ldrb	r3, [r3, #12]
 8009f04:	733b      	strb	r3, [r7, #12]
        break;
 8009f06:	e01c      	b.n	8009f42 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 8009f08:	2306      	movs	r3, #6
 8009f0a:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	89db      	ldrh	r3, [r3, #14]
 8009f10:	0a1b      	lsrs	r3, r3, #8
 8009f12:	b29b      	uxth	r3, r3
 8009f14:	b2db      	uxtb	r3, r3
 8009f16:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	89db      	ldrh	r3, [r3, #14]
 8009f1c:	b2db      	uxtb	r3, r3
 8009f1e:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	7c1a      	ldrb	r2, [r3, #16]
 8009f24:	4b0f      	ldr	r3, [pc, #60]	; (8009f64 <SUBGRF_SetPacketParams+0x138>)
 8009f26:	4611      	mov	r1, r2
 8009f28:	7019      	strb	r1, [r3, #0]
 8009f2a:	4613      	mov	r3, r2
 8009f2c:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	7c5b      	ldrb	r3, [r3, #17]
 8009f32:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	7c9b      	ldrb	r3, [r3, #18]
 8009f38:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	7cdb      	ldrb	r3, [r3, #19]
 8009f3e:	747b      	strb	r3, [r7, #17]
        break;
 8009f40:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 8009f42:	7dfb      	ldrb	r3, [r7, #23]
 8009f44:	b29a      	uxth	r2, r3
 8009f46:	f107 030c 	add.w	r3, r7, #12
 8009f4a:	4619      	mov	r1, r3
 8009f4c:	208c      	movs	r0, #140	; 0x8c
 8009f4e:	f000 f965 	bl	800a21c <SUBGRF_WriteCommand>
 8009f52:	e000      	b.n	8009f56 <SUBGRF_SetPacketParams+0x12a>
        return;
 8009f54:	bf00      	nop
}
 8009f56:	3718      	adds	r7, #24
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	bd80      	pop	{r7, pc}
 8009f5c:	0800c410 	.word	0x0800c410
 8009f60:	20000315 	.word	0x20000315
 8009f64:	20000316 	.word	0x20000316

08009f68 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 8009f68:	b580      	push	{r7, lr}
 8009f6a:	b084      	sub	sp, #16
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	4603      	mov	r3, r0
 8009f70:	460a      	mov	r2, r1
 8009f72:	71fb      	strb	r3, [r7, #7]
 8009f74:	4613      	mov	r3, r2
 8009f76:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 8009f78:	79fb      	ldrb	r3, [r7, #7]
 8009f7a:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 8009f7c:	79bb      	ldrb	r3, [r7, #6]
 8009f7e:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 8009f80:	f107 030c 	add.w	r3, r7, #12
 8009f84:	2202      	movs	r2, #2
 8009f86:	4619      	mov	r1, r3
 8009f88:	208f      	movs	r0, #143	; 0x8f
 8009f8a:	f000 f947 	bl	800a21c <SUBGRF_WriteCommand>
}
 8009f8e:	bf00      	nop
 8009f90:	3710      	adds	r7, #16
 8009f92:	46bd      	mov	sp, r7
 8009f94:	bd80      	pop	{r7, pc}

08009f96 <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 8009f96:	b580      	push	{r7, lr}
 8009f98:	b082      	sub	sp, #8
 8009f9a:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 8009fa0:	1d3b      	adds	r3, r7, #4
 8009fa2:	2201      	movs	r2, #1
 8009fa4:	4619      	mov	r1, r3
 8009fa6:	2015      	movs	r0, #21
 8009fa8:	f000 f95a 	bl	800a260 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 8009fac:	793b      	ldrb	r3, [r7, #4]
 8009fae:	425b      	negs	r3, r3
 8009fb0:	105b      	asrs	r3, r3, #1
 8009fb2:	71fb      	strb	r3, [r7, #7]
    return rssi;
 8009fb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8009fb8:	4618      	mov	r0, r3
 8009fba:	3708      	adds	r7, #8
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	bd80      	pop	{r7, pc}

08009fc0 <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	b084      	sub	sp, #16
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	6078      	str	r0, [r7, #4]
 8009fc8:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 8009fca:	f107 030c 	add.w	r3, r7, #12
 8009fce:	2202      	movs	r2, #2
 8009fd0:	4619      	mov	r1, r3
 8009fd2:	2013      	movs	r0, #19
 8009fd4:	f000 f944 	bl	800a260 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 8009fd8:	f7ff fd7e 	bl	8009ad8 <SUBGRF_GetPacketType>
 8009fdc:	4603      	mov	r3, r0
 8009fde:	2b01      	cmp	r3, #1
 8009fe0:	d10d      	bne.n	8009ffe <SUBGRF_GetRxBufferStatus+0x3e>
 8009fe2:	4b0c      	ldr	r3, [pc, #48]	; (800a014 <SUBGRF_GetRxBufferStatus+0x54>)
 8009fe4:	781b      	ldrb	r3, [r3, #0]
 8009fe6:	b2db      	uxtb	r3, r3
 8009fe8:	2b01      	cmp	r3, #1
 8009fea:	d108      	bne.n	8009ffe <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 8009fec:	f240 7002 	movw	r0, #1794	; 0x702
 8009ff0:	f000 f878 	bl	800a0e4 <SUBGRF_ReadRegister>
 8009ff4:	4603      	mov	r3, r0
 8009ff6:	461a      	mov	r2, r3
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	701a      	strb	r2, [r3, #0]
 8009ffc:	e002      	b.n	800a004 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 8009ffe:	7b3a      	ldrb	r2, [r7, #12]
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 800a004:	7b7a      	ldrb	r2, [r7, #13]
 800a006:	683b      	ldr	r3, [r7, #0]
 800a008:	701a      	strb	r2, [r3, #0]
}
 800a00a:	bf00      	nop
 800a00c:	3710      	adds	r7, #16
 800a00e:	46bd      	mov	sp, r7
 800a010:	bd80      	pop	{r7, pc}
 800a012:	bf00      	nop
 800a014:	20000316 	.word	0x20000316

0800a018 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 800a018:	b580      	push	{r7, lr}
 800a01a:	b084      	sub	sp, #16
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 800a020:	f107 030c 	add.w	r3, r7, #12
 800a024:	2203      	movs	r2, #3
 800a026:	4619      	mov	r1, r3
 800a028:	2014      	movs	r0, #20
 800a02a:	f000 f919 	bl	800a260 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 800a02e:	f7ff fd53 	bl	8009ad8 <SUBGRF_GetPacketType>
 800a032:	4603      	mov	r3, r0
 800a034:	461a      	mov	r2, r3
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	781b      	ldrb	r3, [r3, #0]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d002      	beq.n	800a048 <SUBGRF_GetPacketStatus+0x30>
 800a042:	2b01      	cmp	r3, #1
 800a044:	d013      	beq.n	800a06e <SUBGRF_GetPacketStatus+0x56>
 800a046:	e02a      	b.n	800a09e <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 800a048:	7b3a      	ldrb	r2, [r7, #12]
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 800a04e:	7b7b      	ldrb	r3, [r7, #13]
 800a050:	425b      	negs	r3, r3
 800a052:	105b      	asrs	r3, r3, #1
 800a054:	b25a      	sxtb	r2, r3
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 800a05a:	7bbb      	ldrb	r3, [r7, #14]
 800a05c:	425b      	negs	r3, r3
 800a05e:	105b      	asrs	r3, r3, #1
 800a060:	b25a      	sxtb	r2, r3
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	2200      	movs	r2, #0
 800a06a:	609a      	str	r2, [r3, #8]
            break;
 800a06c:	e020      	b.n	800a0b0 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 800a06e:	7b3b      	ldrb	r3, [r7, #12]
 800a070:	425b      	negs	r3, r3
 800a072:	105b      	asrs	r3, r3, #1
 800a074:	b25a      	sxtb	r2, r3
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 800a07a:	7b7b      	ldrb	r3, [r7, #13]
 800a07c:	b25b      	sxtb	r3, r3
 800a07e:	3302      	adds	r3, #2
 800a080:	109b      	asrs	r3, r3, #2
 800a082:	b25a      	sxtb	r2, r3
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 800a088:	7bbb      	ldrb	r3, [r7, #14]
 800a08a:	425b      	negs	r3, r3
 800a08c:	105b      	asrs	r3, r3, #1
 800a08e:	b25a      	sxtb	r2, r3
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 800a094:	4b08      	ldr	r3, [pc, #32]	; (800a0b8 <SUBGRF_GetPacketStatus+0xa0>)
 800a096:	681a      	ldr	r2, [r3, #0]
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	611a      	str	r2, [r3, #16]
            break;
 800a09c:	e008      	b.n	800a0b0 <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 800a09e:	2214      	movs	r2, #20
 800a0a0:	2100      	movs	r1, #0
 800a0a2:	6878      	ldr	r0, [r7, #4]
 800a0a4:	f000 ff5f 	bl	800af66 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	220f      	movs	r2, #15
 800a0ac:	701a      	strb	r2, [r3, #0]
            break;
 800a0ae:	bf00      	nop
    }
}
 800a0b0:	bf00      	nop
 800a0b2:	3710      	adds	r7, #16
 800a0b4:	46bd      	mov	sp, r7
 800a0b6:	bd80      	pop	{r7, pc}
 800a0b8:	20000318 	.word	0x20000318

0800a0bc <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 800a0bc:	b580      	push	{r7, lr}
 800a0be:	b082      	sub	sp, #8
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	4603      	mov	r3, r0
 800a0c4:	460a      	mov	r2, r1
 800a0c6:	80fb      	strh	r3, [r7, #6]
 800a0c8:	4613      	mov	r3, r2
 800a0ca:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 800a0cc:	1d7a      	adds	r2, r7, #5
 800a0ce:	88f9      	ldrh	r1, [r7, #6]
 800a0d0:	2301      	movs	r3, #1
 800a0d2:	4803      	ldr	r0, [pc, #12]	; (800a0e0 <SUBGRF_WriteRegister+0x24>)
 800a0d4:	f7fa fac2 	bl	800465c <HAL_SUBGHZ_WriteRegisters>
}
 800a0d8:	bf00      	nop
 800a0da:	3708      	adds	r7, #8
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	bd80      	pop	{r7, pc}
 800a0e0:	20000070 	.word	0x20000070

0800a0e4 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	b084      	sub	sp, #16
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	4603      	mov	r3, r0
 800a0ec:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 800a0ee:	f107 020f 	add.w	r2, r7, #15
 800a0f2:	88f9      	ldrh	r1, [r7, #6]
 800a0f4:	2301      	movs	r3, #1
 800a0f6:	4804      	ldr	r0, [pc, #16]	; (800a108 <SUBGRF_ReadRegister+0x24>)
 800a0f8:	f7fa fb0f 	bl	800471a <HAL_SUBGHZ_ReadRegisters>
    return data;
 800a0fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0fe:	4618      	mov	r0, r3
 800a100:	3710      	adds	r7, #16
 800a102:	46bd      	mov	sp, r7
 800a104:	bd80      	pop	{r7, pc}
 800a106:	bf00      	nop
 800a108:	20000070 	.word	0x20000070

0800a10c <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 800a10c:	b580      	push	{r7, lr}
 800a10e:	b086      	sub	sp, #24
 800a110:	af00      	add	r7, sp, #0
 800a112:	4603      	mov	r3, r0
 800a114:	6039      	str	r1, [r7, #0]
 800a116:	80fb      	strh	r3, [r7, #6]
 800a118:	4613      	mov	r3, r2
 800a11a:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a11c:	f3ef 8310 	mrs	r3, PRIMASK
 800a120:	60fb      	str	r3, [r7, #12]
  return(result);
 800a122:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800a124:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a126:	b672      	cpsid	i
}
 800a128:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 800a12a:	88bb      	ldrh	r3, [r7, #4]
 800a12c:	88f9      	ldrh	r1, [r7, #6]
 800a12e:	683a      	ldr	r2, [r7, #0]
 800a130:	4806      	ldr	r0, [pc, #24]	; (800a14c <SUBGRF_WriteRegisters+0x40>)
 800a132:	f7fa fa93 	bl	800465c <HAL_SUBGHZ_WriteRegisters>
 800a136:	697b      	ldr	r3, [r7, #20]
 800a138:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a13a:	693b      	ldr	r3, [r7, #16]
 800a13c:	f383 8810 	msr	PRIMASK, r3
}
 800a140:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800a142:	bf00      	nop
 800a144:	3718      	adds	r7, #24
 800a146:	46bd      	mov	sp, r7
 800a148:	bd80      	pop	{r7, pc}
 800a14a:	bf00      	nop
 800a14c:	20000070 	.word	0x20000070

0800a150 <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 800a150:	b580      	push	{r7, lr}
 800a152:	b086      	sub	sp, #24
 800a154:	af00      	add	r7, sp, #0
 800a156:	4603      	mov	r3, r0
 800a158:	6039      	str	r1, [r7, #0]
 800a15a:	80fb      	strh	r3, [r7, #6]
 800a15c:	4613      	mov	r3, r2
 800a15e:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a160:	f3ef 8310 	mrs	r3, PRIMASK
 800a164:	60fb      	str	r3, [r7, #12]
  return(result);
 800a166:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800a168:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a16a:	b672      	cpsid	i
}
 800a16c:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 800a16e:	88bb      	ldrh	r3, [r7, #4]
 800a170:	88f9      	ldrh	r1, [r7, #6]
 800a172:	683a      	ldr	r2, [r7, #0]
 800a174:	4806      	ldr	r0, [pc, #24]	; (800a190 <SUBGRF_ReadRegisters+0x40>)
 800a176:	f7fa fad0 	bl	800471a <HAL_SUBGHZ_ReadRegisters>
 800a17a:	697b      	ldr	r3, [r7, #20]
 800a17c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a17e:	693b      	ldr	r3, [r7, #16]
 800a180:	f383 8810 	msr	PRIMASK, r3
}
 800a184:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800a186:	bf00      	nop
 800a188:	3718      	adds	r7, #24
 800a18a:	46bd      	mov	sp, r7
 800a18c:	bd80      	pop	{r7, pc}
 800a18e:	bf00      	nop
 800a190:	20000070 	.word	0x20000070

0800a194 <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 800a194:	b580      	push	{r7, lr}
 800a196:	b086      	sub	sp, #24
 800a198:	af00      	add	r7, sp, #0
 800a19a:	4603      	mov	r3, r0
 800a19c:	6039      	str	r1, [r7, #0]
 800a19e:	71fb      	strb	r3, [r7, #7]
 800a1a0:	4613      	mov	r3, r2
 800a1a2:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a1a4:	f3ef 8310 	mrs	r3, PRIMASK
 800a1a8:	60fb      	str	r3, [r7, #12]
  return(result);
 800a1aa:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800a1ac:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a1ae:	b672      	cpsid	i
}
 800a1b0:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 800a1b2:	79bb      	ldrb	r3, [r7, #6]
 800a1b4:	b29b      	uxth	r3, r3
 800a1b6:	79f9      	ldrb	r1, [r7, #7]
 800a1b8:	683a      	ldr	r2, [r7, #0]
 800a1ba:	4806      	ldr	r0, [pc, #24]	; (800a1d4 <SUBGRF_WriteBuffer+0x40>)
 800a1bc:	f7fa fbc1 	bl	8004942 <HAL_SUBGHZ_WriteBuffer>
 800a1c0:	697b      	ldr	r3, [r7, #20]
 800a1c2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a1c4:	693b      	ldr	r3, [r7, #16]
 800a1c6:	f383 8810 	msr	PRIMASK, r3
}
 800a1ca:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800a1cc:	bf00      	nop
 800a1ce:	3718      	adds	r7, #24
 800a1d0:	46bd      	mov	sp, r7
 800a1d2:	bd80      	pop	{r7, pc}
 800a1d4:	20000070 	.word	0x20000070

0800a1d8 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	b086      	sub	sp, #24
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	4603      	mov	r3, r0
 800a1e0:	6039      	str	r1, [r7, #0]
 800a1e2:	71fb      	strb	r3, [r7, #7]
 800a1e4:	4613      	mov	r3, r2
 800a1e6:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a1e8:	f3ef 8310 	mrs	r3, PRIMASK
 800a1ec:	60fb      	str	r3, [r7, #12]
  return(result);
 800a1ee:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800a1f0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a1f2:	b672      	cpsid	i
}
 800a1f4:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 800a1f6:	79bb      	ldrb	r3, [r7, #6]
 800a1f8:	b29b      	uxth	r3, r3
 800a1fa:	79f9      	ldrb	r1, [r7, #7]
 800a1fc:	683a      	ldr	r2, [r7, #0]
 800a1fe:	4806      	ldr	r0, [pc, #24]	; (800a218 <SUBGRF_ReadBuffer+0x40>)
 800a200:	f7fa fbf2 	bl	80049e8 <HAL_SUBGHZ_ReadBuffer>
 800a204:	697b      	ldr	r3, [r7, #20]
 800a206:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a208:	693b      	ldr	r3, [r7, #16]
 800a20a:	f383 8810 	msr	PRIMASK, r3
}
 800a20e:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800a210:	bf00      	nop
 800a212:	3718      	adds	r7, #24
 800a214:	46bd      	mov	sp, r7
 800a216:	bd80      	pop	{r7, pc}
 800a218:	20000070 	.word	0x20000070

0800a21c <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 800a21c:	b580      	push	{r7, lr}
 800a21e:	b086      	sub	sp, #24
 800a220:	af00      	add	r7, sp, #0
 800a222:	4603      	mov	r3, r0
 800a224:	6039      	str	r1, [r7, #0]
 800a226:	71fb      	strb	r3, [r7, #7]
 800a228:	4613      	mov	r3, r2
 800a22a:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a22c:	f3ef 8310 	mrs	r3, PRIMASK
 800a230:	60fb      	str	r3, [r7, #12]
  return(result);
 800a232:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800a234:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a236:	b672      	cpsid	i
}
 800a238:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 800a23a:	88bb      	ldrh	r3, [r7, #4]
 800a23c:	79f9      	ldrb	r1, [r7, #7]
 800a23e:	683a      	ldr	r2, [r7, #0]
 800a240:	4806      	ldr	r0, [pc, #24]	; (800a25c <SUBGRF_WriteCommand+0x40>)
 800a242:	f7fa facb 	bl	80047dc <HAL_SUBGHZ_ExecSetCmd>
 800a246:	697b      	ldr	r3, [r7, #20]
 800a248:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a24a:	693b      	ldr	r3, [r7, #16]
 800a24c:	f383 8810 	msr	PRIMASK, r3
}
 800a250:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800a252:	bf00      	nop
 800a254:	3718      	adds	r7, #24
 800a256:	46bd      	mov	sp, r7
 800a258:	bd80      	pop	{r7, pc}
 800a25a:	bf00      	nop
 800a25c:	20000070 	.word	0x20000070

0800a260 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 800a260:	b580      	push	{r7, lr}
 800a262:	b086      	sub	sp, #24
 800a264:	af00      	add	r7, sp, #0
 800a266:	4603      	mov	r3, r0
 800a268:	6039      	str	r1, [r7, #0]
 800a26a:	71fb      	strb	r3, [r7, #7]
 800a26c:	4613      	mov	r3, r2
 800a26e:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a270:	f3ef 8310 	mrs	r3, PRIMASK
 800a274:	60fb      	str	r3, [r7, #12]
  return(result);
 800a276:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800a278:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a27a:	b672      	cpsid	i
}
 800a27c:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 800a27e:	88bb      	ldrh	r3, [r7, #4]
 800a280:	79f9      	ldrb	r1, [r7, #7]
 800a282:	683a      	ldr	r2, [r7, #0]
 800a284:	4806      	ldr	r0, [pc, #24]	; (800a2a0 <SUBGRF_ReadCommand+0x40>)
 800a286:	f7fa fb08 	bl	800489a <HAL_SUBGHZ_ExecGetCmd>
 800a28a:	697b      	ldr	r3, [r7, #20]
 800a28c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a28e:	693b      	ldr	r3, [r7, #16]
 800a290:	f383 8810 	msr	PRIMASK, r3
}
 800a294:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800a296:	bf00      	nop
 800a298:	3718      	adds	r7, #24
 800a29a:	46bd      	mov	sp, r7
 800a29c:	bd80      	pop	{r7, pc}
 800a29e:	bf00      	nop
 800a2a0:	20000070 	.word	0x20000070

0800a2a4 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 800a2a4:	b580      	push	{r7, lr}
 800a2a6:	b084      	sub	sp, #16
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	4603      	mov	r3, r0
 800a2ac:	460a      	mov	r2, r1
 800a2ae:	71fb      	strb	r3, [r7, #7]
 800a2b0:	4613      	mov	r3, r2
 800a2b2:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 800a2b4:	2301      	movs	r3, #1
 800a2b6:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 800a2b8:	79bb      	ldrb	r3, [r7, #6]
 800a2ba:	2b01      	cmp	r3, #1
 800a2bc:	d10d      	bne.n	800a2da <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 800a2be:	79fb      	ldrb	r3, [r7, #7]
 800a2c0:	2b01      	cmp	r3, #1
 800a2c2:	d104      	bne.n	800a2ce <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 800a2c4:	2302      	movs	r3, #2
 800a2c6:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 800a2c8:	2004      	movs	r0, #4
 800a2ca:	f000 f8ef 	bl	800a4ac <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 800a2ce:	79fb      	ldrb	r3, [r7, #7]
 800a2d0:	2b02      	cmp	r3, #2
 800a2d2:	d107      	bne.n	800a2e4 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 800a2d4:	2303      	movs	r3, #3
 800a2d6:	73fb      	strb	r3, [r7, #15]
 800a2d8:	e004      	b.n	800a2e4 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 800a2da:	79bb      	ldrb	r3, [r7, #6]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d101      	bne.n	800a2e4 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 800a2e0:	2301      	movs	r3, #1
 800a2e2:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 800a2e4:	7bfb      	ldrb	r3, [r7, #15]
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	f000 fd31 	bl	800ad4e <RBI_ConfigRFSwitch>
}
 800a2ec:	bf00      	nop
 800a2ee:	3710      	adds	r7, #16
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	bd80      	pop	{r7, pc}

0800a2f4 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 800a2f4:	b580      	push	{r7, lr}
 800a2f6:	b084      	sub	sp, #16
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	4603      	mov	r3, r0
 800a2fc:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 800a2fe:	2301      	movs	r3, #1
 800a300:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 800a302:	f000 fd34 	bl	800ad6e <RBI_GetTxConfig>
 800a306:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 800a308:	68bb      	ldr	r3, [r7, #8]
 800a30a:	2b02      	cmp	r3, #2
 800a30c:	d016      	beq.n	800a33c <SUBGRF_SetRfTxPower+0x48>
 800a30e:	68bb      	ldr	r3, [r7, #8]
 800a310:	2b02      	cmp	r3, #2
 800a312:	dc16      	bgt.n	800a342 <SUBGRF_SetRfTxPower+0x4e>
 800a314:	68bb      	ldr	r3, [r7, #8]
 800a316:	2b00      	cmp	r3, #0
 800a318:	d003      	beq.n	800a322 <SUBGRF_SetRfTxPower+0x2e>
 800a31a:	68bb      	ldr	r3, [r7, #8]
 800a31c:	2b01      	cmp	r3, #1
 800a31e:	d00a      	beq.n	800a336 <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 800a320:	e00f      	b.n	800a342 <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 800a322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a326:	2b0f      	cmp	r3, #15
 800a328:	dd02      	ble.n	800a330 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 800a32a:	2302      	movs	r3, #2
 800a32c:	73fb      	strb	r3, [r7, #15]
            break;
 800a32e:	e009      	b.n	800a344 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 800a330:	2301      	movs	r3, #1
 800a332:	73fb      	strb	r3, [r7, #15]
            break;
 800a334:	e006      	b.n	800a344 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 800a336:	2301      	movs	r3, #1
 800a338:	73fb      	strb	r3, [r7, #15]
            break;
 800a33a:	e003      	b.n	800a344 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 800a33c:	2302      	movs	r3, #2
 800a33e:	73fb      	strb	r3, [r7, #15]
            break;
 800a340:	e000      	b.n	800a344 <SUBGRF_SetRfTxPower+0x50>
            break;
 800a342:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 800a344:	f997 1007 	ldrsb.w	r1, [r7, #7]
 800a348:	7bfb      	ldrb	r3, [r7, #15]
 800a34a:	2202      	movs	r2, #2
 800a34c:	4618      	mov	r0, r3
 800a34e:	f7ff fbcd 	bl	8009aec <SUBGRF_SetTxParams>

    return paSelect;
 800a352:	7bfb      	ldrb	r3, [r7, #15]
}
 800a354:	4618      	mov	r0, r3
 800a356:	3710      	adds	r7, #16
 800a358:	46bd      	mov	sp, r7
 800a35a:	bd80      	pop	{r7, pc}

0800a35c <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 800a35c:	b480      	push	{r7}
 800a35e:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 800a360:	2301      	movs	r3, #1
}
 800a362:	4618      	mov	r0, r3
 800a364:	46bd      	mov	sp, r7
 800a366:	bc80      	pop	{r7}
 800a368:	4770      	bx	lr
	...

0800a36c <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a36c:	b580      	push	{r7, lr}
 800a36e:	b082      	sub	sp, #8
 800a370:	af00      	add	r7, sp, #0
 800a372:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 800a374:	4b03      	ldr	r3, [pc, #12]	; (800a384 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	2001      	movs	r0, #1
 800a37a:	4798      	blx	r3
}
 800a37c:	bf00      	nop
 800a37e:	3708      	adds	r7, #8
 800a380:	46bd      	mov	sp, r7
 800a382:	bd80      	pop	{r7, pc}
 800a384:	20000320 	.word	0x20000320

0800a388 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a388:	b580      	push	{r7, lr}
 800a38a:	b082      	sub	sp, #8
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 800a390:	4b03      	ldr	r3, [pc, #12]	; (800a3a0 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	2002      	movs	r0, #2
 800a396:	4798      	blx	r3
}
 800a398:	bf00      	nop
 800a39a:	3708      	adds	r7, #8
 800a39c:	46bd      	mov	sp, r7
 800a39e:	bd80      	pop	{r7, pc}
 800a3a0:	20000320 	.word	0x20000320

0800a3a4 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 800a3a4:	b580      	push	{r7, lr}
 800a3a6:	b082      	sub	sp, #8
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 800a3ac:	4b03      	ldr	r3, [pc, #12]	; (800a3bc <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	2040      	movs	r0, #64	; 0x40
 800a3b2:	4798      	blx	r3
}
 800a3b4:	bf00      	nop
 800a3b6:	3708      	adds	r7, #8
 800a3b8:	46bd      	mov	sp, r7
 800a3ba:	bd80      	pop	{r7, pc}
 800a3bc:	20000320 	.word	0x20000320

0800a3c0 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 800a3c0:	b580      	push	{r7, lr}
 800a3c2:	b082      	sub	sp, #8
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	6078      	str	r0, [r7, #4]
 800a3c8:	460b      	mov	r3, r1
 800a3ca:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 800a3cc:	78fb      	ldrb	r3, [r7, #3]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d002      	beq.n	800a3d8 <HAL_SUBGHZ_CADStatusCallback+0x18>
 800a3d2:	2b01      	cmp	r3, #1
 800a3d4:	d005      	beq.n	800a3e2 <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 800a3d6:	e00a      	b.n	800a3ee <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 800a3d8:	4b07      	ldr	r3, [pc, #28]	; (800a3f8 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	2080      	movs	r0, #128	; 0x80
 800a3de:	4798      	blx	r3
            break;
 800a3e0:	e005      	b.n	800a3ee <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 800a3e2:	4b05      	ldr	r3, [pc, #20]	; (800a3f8 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	f44f 7080 	mov.w	r0, #256	; 0x100
 800a3ea:	4798      	blx	r3
            break;
 800a3ec:	bf00      	nop
    }
}
 800a3ee:	bf00      	nop
 800a3f0:	3708      	adds	r7, #8
 800a3f2:	46bd      	mov	sp, r7
 800a3f4:	bd80      	pop	{r7, pc}
 800a3f6:	bf00      	nop
 800a3f8:	20000320 	.word	0x20000320

0800a3fc <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a3fc:	b580      	push	{r7, lr}
 800a3fe:	b082      	sub	sp, #8
 800a400:	af00      	add	r7, sp, #0
 800a402:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 800a404:	4b04      	ldr	r3, [pc, #16]	; (800a418 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	f44f 7000 	mov.w	r0, #512	; 0x200
 800a40c:	4798      	blx	r3
}
 800a40e:	bf00      	nop
 800a410:	3708      	adds	r7, #8
 800a412:	46bd      	mov	sp, r7
 800a414:	bd80      	pop	{r7, pc}
 800a416:	bf00      	nop
 800a418:	20000320 	.word	0x20000320

0800a41c <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b082      	sub	sp, #8
 800a420:	af00      	add	r7, sp, #0
 800a422:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 800a424:	4b03      	ldr	r3, [pc, #12]	; (800a434 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	2020      	movs	r0, #32
 800a42a:	4798      	blx	r3
}
 800a42c:	bf00      	nop
 800a42e:	3708      	adds	r7, #8
 800a430:	46bd      	mov	sp, r7
 800a432:	bd80      	pop	{r7, pc}
 800a434:	20000320 	.word	0x20000320

0800a438 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a438:	b580      	push	{r7, lr}
 800a43a:	b082      	sub	sp, #8
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 800a440:	4b03      	ldr	r3, [pc, #12]	; (800a450 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	2004      	movs	r0, #4
 800a446:	4798      	blx	r3
}
 800a448:	bf00      	nop
 800a44a:	3708      	adds	r7, #8
 800a44c:	46bd      	mov	sp, r7
 800a44e:	bd80      	pop	{r7, pc}
 800a450:	20000320 	.word	0x20000320

0800a454 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a454:	b580      	push	{r7, lr}
 800a456:	b082      	sub	sp, #8
 800a458:	af00      	add	r7, sp, #0
 800a45a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 800a45c:	4b03      	ldr	r3, [pc, #12]	; (800a46c <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	2008      	movs	r0, #8
 800a462:	4798      	blx	r3
}
 800a464:	bf00      	nop
 800a466:	3708      	adds	r7, #8
 800a468:	46bd      	mov	sp, r7
 800a46a:	bd80      	pop	{r7, pc}
 800a46c:	20000320 	.word	0x20000320

0800a470 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a470:	b580      	push	{r7, lr}
 800a472:	b082      	sub	sp, #8
 800a474:	af00      	add	r7, sp, #0
 800a476:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 800a478:	4b03      	ldr	r3, [pc, #12]	; (800a488 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	2010      	movs	r0, #16
 800a47e:	4798      	blx	r3
}
 800a480:	bf00      	nop
 800a482:	3708      	adds	r7, #8
 800a484:	46bd      	mov	sp, r7
 800a486:	bd80      	pop	{r7, pc}
 800a488:	20000320 	.word	0x20000320

0800a48c <HAL_SUBGHZ_LrFhssHopCallback>:

void HAL_SUBGHZ_LrFhssHopCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a48c:	b580      	push	{r7, lr}
 800a48e:	b082      	sub	sp, #8
 800a490:	af00      	add	r7, sp, #0
 800a492:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 800a494:	4b04      	ldr	r3, [pc, #16]	; (800a4a8 <HAL_SUBGHZ_LrFhssHopCallback+0x1c>)
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800a49c:	4798      	blx	r3
}
 800a49e:	bf00      	nop
 800a4a0:	3708      	adds	r7, #8
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	bd80      	pop	{r7, pc}
 800a4a6:	bf00      	nop
 800a4a8:	20000320 	.word	0x20000320

0800a4ac <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	b084      	sub	sp, #16
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	4603      	mov	r3, r0
 800a4b4:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 800a4b6:	f000 fc70 	bl	800ad9a <RBI_IsDCDC>
 800a4ba:	4603      	mov	r3, r0
 800a4bc:	2b01      	cmp	r3, #1
 800a4be:	d112      	bne.n	800a4e6 <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 800a4c0:	f640 1023 	movw	r0, #2339	; 0x923
 800a4c4:	f7ff fe0e 	bl	800a0e4 <SUBGRF_ReadRegister>
 800a4c8:	4603      	mov	r3, r0
 800a4ca:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 800a4cc:	7bfb      	ldrb	r3, [r7, #15]
 800a4ce:	f023 0306 	bic.w	r3, r3, #6
 800a4d2:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 800a4d4:	7bfa      	ldrb	r2, [r7, #15]
 800a4d6:	79fb      	ldrb	r3, [r7, #7]
 800a4d8:	4313      	orrs	r3, r2
 800a4da:	b2db      	uxtb	r3, r3
 800a4dc:	4619      	mov	r1, r3
 800a4de:	f640 1023 	movw	r0, #2339	; 0x923
 800a4e2:	f7ff fdeb 	bl	800a0bc <SUBGRF_WriteRegister>
  }
}
 800a4e6:	bf00      	nop
 800a4e8:	3710      	adds	r7, #16
 800a4ea:	46bd      	mov	sp, r7
 800a4ec:	bd80      	pop	{r7, pc}
	...

0800a4f0 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 800a4f0:	b480      	push	{r7}
 800a4f2:	b085      	sub	sp, #20
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d101      	bne.n	800a502 <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 800a4fe:	231f      	movs	r3, #31
 800a500:	e016      	b.n	800a530 <SUBGRF_GetFskBandwidthRegValue+0x40>
    }

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 800a502:	2300      	movs	r3, #0
 800a504:	73fb      	strb	r3, [r7, #15]
 800a506:	e00f      	b.n	800a528 <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 800a508:	7bfb      	ldrb	r3, [r7, #15]
 800a50a:	4a0c      	ldr	r2, [pc, #48]	; (800a53c <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 800a50c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a510:	687a      	ldr	r2, [r7, #4]
 800a512:	429a      	cmp	r2, r3
 800a514:	d205      	bcs.n	800a522 <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 800a516:	7bfb      	ldrb	r3, [r7, #15]
 800a518:	4a08      	ldr	r2, [pc, #32]	; (800a53c <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 800a51a:	00db      	lsls	r3, r3, #3
 800a51c:	4413      	add	r3, r2
 800a51e:	791b      	ldrb	r3, [r3, #4]
 800a520:	e006      	b.n	800a530 <SUBGRF_GetFskBandwidthRegValue+0x40>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 800a522:	7bfb      	ldrb	r3, [r7, #15]
 800a524:	3301      	adds	r3, #1
 800a526:	73fb      	strb	r3, [r7, #15]
 800a528:	7bfb      	ldrb	r3, [r7, #15]
 800a52a:	2b15      	cmp	r3, #21
 800a52c:	d9ec      	bls.n	800a508 <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    // ERROR: Value not found
    while( 1 );
 800a52e:	e7fe      	b.n	800a52e <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 800a530:	4618      	mov	r0, r3
 800a532:	3714      	adds	r7, #20
 800a534:	46bd      	mov	sp, r7
 800a536:	bc80      	pop	{r7}
 800a538:	4770      	bx	lr
 800a53a:	bf00      	nop
 800a53c:	0800c7f0 	.word	0x0800c7f0

0800a540 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 800a540:	b580      	push	{r7, lr}
 800a542:	b08a      	sub	sp, #40	; 0x28
 800a544:	af00      	add	r7, sp, #0
 800a546:	6078      	str	r0, [r7, #4]
 800a548:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 800a54a:	4b35      	ldr	r3, [pc, #212]	; (800a620 <SUBGRF_GetCFO+0xe0>)
 800a54c:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 800a54e:	f640 0007 	movw	r0, #2055	; 0x807
 800a552:	f7ff fdc7 	bl	800a0e4 <SUBGRF_ReadRegister>
 800a556:	4603      	mov	r3, r0
 800a558:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 800a55a:	7ffb      	ldrb	r3, [r7, #31]
 800a55c:	08db      	lsrs	r3, r3, #3
 800a55e:	b2db      	uxtb	r3, r3
 800a560:	f003 0303 	and.w	r3, r3, #3
 800a564:	3328      	adds	r3, #40	; 0x28
 800a566:	443b      	add	r3, r7
 800a568:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800a56c:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 800a56e:	7ffb      	ldrb	r3, [r7, #31]
 800a570:	f003 0307 	and.w	r3, r3, #7
 800a574:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp + 1 )));
 800a576:	7fba      	ldrb	r2, [r7, #30]
 800a578:	7f7b      	ldrb	r3, [r7, #29]
 800a57a:	3301      	adds	r3, #1
 800a57c:	fa02 f303 	lsl.w	r3, r2, r3
 800a580:	461a      	mov	r2, r3
 800a582:	4b28      	ldr	r3, [pc, #160]	; (800a624 <SUBGRF_GetCFO+0xe4>)
 800a584:	fbb3 f3f2 	udiv	r3, r3, r2
 800a588:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 800a58a:	69ba      	ldr	r2, [r7, #24]
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a592:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 800a594:	2301      	movs	r3, #1
 800a596:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 800a59a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a59e:	697a      	ldr	r2, [r7, #20]
 800a5a0:	fb02 f303 	mul.w	r3, r2, r3
 800a5a4:	2b07      	cmp	r3, #7
 800a5a6:	d802      	bhi.n	800a5ae <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 800a5a8:	2302      	movs	r3, #2
 800a5aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if (cf_osr * interp < 4)
 800a5ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a5b2:	697a      	ldr	r2, [r7, #20]
 800a5b4:	fb02 f303 	mul.w	r3, r2, r3
 800a5b8:	2b03      	cmp	r3, #3
 800a5ba:	d802      	bhi.n	800a5c2 <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 800a5bc:	2304      	movs	r3, #4
 800a5be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 800a5c2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800a5c6:	69bb      	ldr	r3, [r7, #24]
 800a5c8:	fb02 f303 	mul.w	r3, r2, r3
 800a5cc:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 800a5ce:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 800a5d2:	f7ff fd87 	bl	800a0e4 <SUBGRF_ReadRegister>
 800a5d6:	4603      	mov	r3, r0
 800a5d8:	021b      	lsls	r3, r3, #8
 800a5da:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800a5de:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 800a5e0:	f240 60b1 	movw	r0, #1713	; 0x6b1
 800a5e4:	f7ff fd7e 	bl	800a0e4 <SUBGRF_ReadRegister>
 800a5e8:	4603      	mov	r3, r0
 800a5ea:	461a      	mov	r2, r3
 800a5ec:	6a3b      	ldr	r3, [r7, #32]
 800a5ee:	4313      	orrs	r3, r2
 800a5f0:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 800a5f2:	6a3b      	ldr	r3, [r7, #32]
 800a5f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d005      	beq.n	800a608 <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 800a5fc:	6a3b      	ldr	r3, [r7, #32]
 800a5fe:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800a602:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800a606:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 800a608:	693b      	ldr	r3, [r7, #16]
 800a60a:	095b      	lsrs	r3, r3, #5
 800a60c:	6a3a      	ldr	r2, [r7, #32]
 800a60e:	fb02 f303 	mul.w	r3, r2, r3
 800a612:	11da      	asrs	r2, r3, #7
 800a614:	683b      	ldr	r3, [r7, #0]
 800a616:	601a      	str	r2, [r3, #0]
}
 800a618:	bf00      	nop
 800a61a:	3728      	adds	r7, #40	; 0x28
 800a61c:	46bd      	mov	sp, r7
 800a61e:	bd80      	pop	{r7, pc}
 800a620:	0c0a0804 	.word	0x0c0a0804
 800a624:	01e84800 	.word	0x01e84800

0800a628 <RFW_TransmitLongPacket>:
#endif /* RFW_ENABLE == 1 */

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout,
                                void ( *TxLongPacketGetNextChunkCb )( uint8_t **buffer, uint8_t buffer_size ) )
{
 800a628:	b480      	push	{r7}
 800a62a:	b087      	sub	sp, #28
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	4603      	mov	r3, r0
 800a630:	60b9      	str	r1, [r7, #8]
 800a632:	607a      	str	r2, [r7, #4]
 800a634:	81fb      	strh	r3, [r7, #14]
    int32_t status = 0;
 800a636:	2300      	movs	r3, #0
 800a638:	617b      	str	r3, [r7, #20]
        default:
            break;
        }
    }
#else
    status = -1;
 800a63a:	f04f 33ff 	mov.w	r3, #4294967295
 800a63e:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 800a640:	697b      	ldr	r3, [r7, #20]
}
 800a642:	4618      	mov	r0, r3
 800a644:	371c      	adds	r7, #28
 800a646:	46bd      	mov	sp, r7
 800a648:	bc80      	pop	{r7}
 800a64a:	4770      	bx	lr

0800a64c <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout,
                               void ( *RxLongPacketStoreChunkCb )( uint8_t *buffer, uint8_t chunk_size ) )
{
 800a64c:	b480      	push	{r7}
 800a64e:	b087      	sub	sp, #28
 800a650:	af00      	add	r7, sp, #0
 800a652:	4603      	mov	r3, r0
 800a654:	60b9      	str	r1, [r7, #8]
 800a656:	607a      	str	r2, [r7, #4]
 800a658:	73fb      	strb	r3, [r7, #15]
    int32_t status = 0;
 800a65a:	2300      	movs	r3, #0
 800a65c:	617b      	str	r3, [r7, #20]
        {
            SUBGRF_SetRx( 0xFFFFFF ); /* Rx Continuous */
        }
    }
#else
    status = -1;
 800a65e:	f04f 33ff 	mov.w	r3, #4294967295
 800a662:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 800a664:	697b      	ldr	r3, [r7, #20]
}
 800a666:	4618      	mov	r0, r3
 800a668:	371c      	adds	r7, #28
 800a66a:	46bd      	mov	sp, r7
 800a66c:	bc80      	pop	{r7}
 800a66e:	4770      	bx	lr

0800a670 <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t *config, RadioEvents_t *RadioEvents, TimerEvent_t *TimeoutTimerEvent )
{
 800a670:	b480      	push	{r7}
 800a672:	b085      	sub	sp, #20
 800a674:	af00      	add	r7, sp, #0
 800a676:	60f8      	str	r0, [r7, #12]
 800a678:	60b9      	str	r1, [r7, #8]
 800a67a:	607a      	str	r2, [r7, #4]
    RFWPacket.Init.Enable = 1;
    /* Initialize Timer for end of fixed packet, started at sync*/
    TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
    return 0;
#else
    return -1;
 800a67c:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* RFW_ENABLE == 1 */
}
 800a680:	4618      	mov	r0, r3
 800a682:	3714      	adds	r7, #20
 800a684:	46bd      	mov	sp, r7
 800a686:	bc80      	pop	{r7}
 800a688:	4770      	bx	lr

0800a68a <RFW_DeInit>:

void RFW_DeInit( void )
{
 800a68a:	b480      	push	{r7}
 800a68c:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Enable = 0; /*Disable the RFWPacket decoding*/
#endif /* RFW_ENABLE == 1 */
}
 800a68e:	bf00      	nop
 800a690:	46bd      	mov	sp, r7
 800a692:	bc80      	pop	{r7}
 800a694:	4770      	bx	lr

0800a696 <RFW_Is_Init>:

uint8_t RFW_Is_Init( void )
{
 800a696:	b480      	push	{r7}
 800a698:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.Init.Enable;
#else
    return 0;
 800a69a:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 800a69c:	4618      	mov	r0, r3
 800a69e:	46bd      	mov	sp, r7
 800a6a0:	bc80      	pop	{r7}
 800a6a2:	4770      	bx	lr

0800a6a4 <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void )
{
 800a6a4:	b480      	push	{r7}
 800a6a6:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.LongPacketModeEnable;
#else
    return 0;
 800a6a8:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	46bd      	mov	sp, r7
 800a6ae:	bc80      	pop	{r7}
 800a6b0:	4770      	bx	lr

0800a6b2 <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch )
{
 800a6b2:	b480      	push	{r7}
 800a6b4:	b083      	sub	sp, #12
 800a6b6:	af00      	add	r7, sp, #0
 800a6b8:	4603      	mov	r3, r0
 800a6ba:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.AntSwitchPaSelect = AntSwitch;
#endif /* RFW_ENABLE == 1 */
}
 800a6bc:	bf00      	nop
 800a6be:	370c      	adds	r7, #12
 800a6c0:	46bd      	mov	sp, r7
 800a6c2:	bc80      	pop	{r7}
 800a6c4:	4770      	bx	lr

0800a6c6 <RFW_TransmitInit>:

int32_t RFW_TransmitInit( uint8_t *inOutBuffer, uint8_t size, uint8_t *outSize )
{
 800a6c6:	b480      	push	{r7}
 800a6c8:	b087      	sub	sp, #28
 800a6ca:	af00      	add	r7, sp, #0
 800a6cc:	60f8      	str	r0, [r7, #12]
 800a6ce:	460b      	mov	r3, r1
 800a6d0:	607a      	str	r2, [r7, #4]
 800a6d2:	72fb      	strb	r3, [r7, #11]
    int32_t status = -1;
 800a6d4:	f04f 33ff 	mov.w	r3, #4294967295
 800a6d8:	617b      	str	r3, [r7, #20]
        RFWPacket.LongPacketModeEnable = 0;

        status = 0;
    }
#endif /* RFW_ENABLE == 1 */
    return status;
 800a6da:	697b      	ldr	r3, [r7, #20]
}
 800a6dc:	4618      	mov	r0, r3
 800a6de:	371c      	adds	r7, #28
 800a6e0:	46bd      	mov	sp, r7
 800a6e2:	bc80      	pop	{r7}
 800a6e4:	4770      	bx	lr

0800a6e6 <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 800a6e6:	b480      	push	{r7}
 800a6e8:	af00      	add	r7, sp, #0
    RFWPacket.RxPayloadOffset = 0;

    RFWPacket.LongPacketModeEnable = 0;
    return 0;
#else
    return -1;
 800a6ea:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* RFW_ENABLE == 1 */
}
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	46bd      	mov	sp, r7
 800a6f2:	bc80      	pop	{r7}
 800a6f4:	4770      	bx	lr

0800a6f6 <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket( void )
{
 800a6f6:	b480      	push	{r7}
 800a6f8:	af00      	add	r7, sp, #0
    /*long packet WA*/
    uint8_t reg = SUBGRF_ReadRegister( SUBGHZ_GPKTCTL1AR );
    SUBGRF_WriteRegister( SUBGHZ_GPKTCTL1AR, reg & ~0x02 ); /* clear infinite_sequence bit */
    SUBGRF_WriteRegister( SUBGHZ_GRTXPLDLEN, 0xFF ); /* RxTxPldLen: reset to 0xFF */
#endif /* RFW_LONGPACKET_ENABLE == 1 */
}
 800a6fa:	bf00      	nop
 800a6fc:	46bd      	mov	sp, r7
 800a6fe:	bc80      	pop	{r7}
 800a700:	4770      	bx	lr

0800a702 <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 800a702:	b480      	push	{r7}
 800a704:	af00      	add	r7, sp, #0
        /*timeout*/
        SUBGRF_SetStandby( STDBY_RC );
        RFWPacket.Init.RadioEvents->RxTimeout( );
    }
#endif /* RFW_ENABLE == 1 */
}
 800a706:	bf00      	nop
 800a708:	46bd      	mov	sp, r7
 800a70a:	bc80      	pop	{r7}
 800a70c:	4770      	bx	lr

0800a70e <RFW_SetRadioModem>:

void RFW_SetRadioModem( RadioModems_t Modem )
{
 800a70e:	b480      	push	{r7}
 800a710:	b083      	sub	sp, #12
 800a712:	af00      	add	r7, sp, #0
 800a714:	4603      	mov	r3, r0
 800a716:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Modem = Modem;
#endif /* RFW_ENABLE == 1 */
}
 800a718:	bf00      	nop
 800a71a:	370c      	adds	r7, #12
 800a71c:	46bd      	mov	sp, r7
 800a71e:	bc80      	pop	{r7}
 800a720:	4770      	bx	lr

0800a722 <MX_SubGHz_Phy_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_SubGHz_Phy_Init(void)
{
 800a722:	b580      	push	{r7, lr}
 800a724:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1 */
  SystemApp_Init();
 800a726:	f7f6 f977 	bl	8000a18 <SystemApp_Init>
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1_1 */
  SubghzApp_Init();
 800a72a:	f000 f80b 	bl	800a744 <SubghzApp_Init>
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_2 */

  /* USER CODE END MX_SubGHz_Phy_Init_2 */
}
 800a72e:	bf00      	nop
 800a730:	bd80      	pop	{r7, pc}

0800a732 <MX_SubGHz_Phy_Process>:

void MX_SubGHz_Phy_Process(void)
{
 800a732:	b580      	push	{r7, lr}
 800a734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_SubGHz_Phy_Process_1 */

  /* USER CODE END MX_SubGHz_Phy_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800a736:	f04f 30ff 	mov.w	r0, #4294967295
 800a73a:	f000 ff07 	bl	800b54c <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_SubGHz_Phy_Process_2 */

  /* USER CODE END MX_SubGHz_Phy_Process_2 */
}
 800a73e:	bf00      	nop
 800a740:	bd80      	pop	{r7, pc}
	...

0800a744 <SubghzApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SubghzApp_Init(void)
{
 800a744:	b590      	push	{r4, r7, lr}
 800a746:	b08b      	sub	sp, #44	; 0x2c
 800a748:	af0a      	add	r7, sp, #40	; 0x28
  /* USER CODE BEGIN SubghzApp_Init_1 */

  APP_LOG(TS_OFF, VLEVEL_M, "\n\rPING PONG\n\r");
 800a74a:	4b5e      	ldr	r3, [pc, #376]	; (800a8c4 <SubghzApp_Init+0x180>)
 800a74c:	2200      	movs	r2, #0
 800a74e:	2100      	movs	r1, #0
 800a750:	2002      	movs	r0, #2
 800a752:	f001 fb37 	bl	800bdc4 <UTIL_ADV_TRACE_COND_FSend>
  /* Get SubGHY_Phy APP version*/
  APP_LOG(TS_OFF, VLEVEL_M, "APPLICATION_VERSION: V%X.%X.%X\r\n",
 800a756:	2300      	movs	r3, #0
 800a758:	9302      	str	r3, [sp, #8]
 800a75a:	2303      	movs	r3, #3
 800a75c:	9301      	str	r3, [sp, #4]
 800a75e:	2301      	movs	r3, #1
 800a760:	9300      	str	r3, [sp, #0]
 800a762:	4b59      	ldr	r3, [pc, #356]	; (800a8c8 <SubghzApp_Init+0x184>)
 800a764:	2200      	movs	r2, #0
 800a766:	2100      	movs	r1, #0
 800a768:	2002      	movs	r0, #2
 800a76a:	f001 fb2b 	bl	800bdc4 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(APP_VERSION_MAIN),
          (uint8_t)(APP_VERSION_SUB1),
          (uint8_t)(APP_VERSION_SUB2));

  /* Get MW SubGhz_Phy info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:    V%X.%X.%X\r\n",
 800a76e:	2300      	movs	r3, #0
 800a770:	9302      	str	r3, [sp, #8]
 800a772:	2303      	movs	r3, #3
 800a774:	9301      	str	r3, [sp, #4]
 800a776:	2301      	movs	r3, #1
 800a778:	9300      	str	r3, [sp, #0]
 800a77a:	4b54      	ldr	r3, [pc, #336]	; (800a8cc <SubghzApp_Init+0x188>)
 800a77c:	2200      	movs	r2, #0
 800a77e:	2100      	movs	r1, #0
 800a780:	2002      	movs	r0, #2
 800a782:	f001 fb1f 	bl	800bdc4 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(SUBGHZ_PHY_VERSION_MAIN),
          (uint8_t)(SUBGHZ_PHY_VERSION_SUB1),
          (uint8_t)(SUBGHZ_PHY_VERSION_SUB2));

  /* Led Timers*/
  UTIL_TIMER_Create(&timerLed, LED_PERIOD_MS, UTIL_TIMER_ONESHOT, OnledEvent, NULL);
 800a786:	2300      	movs	r3, #0
 800a788:	9300      	str	r3, [sp, #0]
 800a78a:	4b51      	ldr	r3, [pc, #324]	; (800a8d0 <SubghzApp_Init+0x18c>)
 800a78c:	2200      	movs	r2, #0
 800a78e:	21c8      	movs	r1, #200	; 0xc8
 800a790:	4850      	ldr	r0, [pc, #320]	; (800a8d4 <SubghzApp_Init+0x190>)
 800a792:	f001 f87b 	bl	800b88c <UTIL_TIMER_Create>
  UTIL_TIMER_Start(&timerLed);
 800a796:	484f      	ldr	r0, [pc, #316]	; (800a8d4 <SubghzApp_Init+0x190>)
 800a798:	f001 f8ae 	bl	800b8f8 <UTIL_TIMER_Start>
  /* USER CODE END SubghzApp_Init_1 */

  /* Radio initialization */
  RadioEvents.TxDone = OnTxDone;
 800a79c:	4b4e      	ldr	r3, [pc, #312]	; (800a8d8 <SubghzApp_Init+0x194>)
 800a79e:	4a4f      	ldr	r2, [pc, #316]	; (800a8dc <SubghzApp_Init+0x198>)
 800a7a0:	601a      	str	r2, [r3, #0]
  RadioEvents.RxDone = OnRxDone;
 800a7a2:	4b4d      	ldr	r3, [pc, #308]	; (800a8d8 <SubghzApp_Init+0x194>)
 800a7a4:	4a4e      	ldr	r2, [pc, #312]	; (800a8e0 <SubghzApp_Init+0x19c>)
 800a7a6:	609a      	str	r2, [r3, #8]
  RadioEvents.TxTimeout = OnTxTimeout;
 800a7a8:	4b4b      	ldr	r3, [pc, #300]	; (800a8d8 <SubghzApp_Init+0x194>)
 800a7aa:	4a4e      	ldr	r2, [pc, #312]	; (800a8e4 <SubghzApp_Init+0x1a0>)
 800a7ac:	605a      	str	r2, [r3, #4]
  RadioEvents.RxTimeout = OnRxTimeout;
 800a7ae:	4b4a      	ldr	r3, [pc, #296]	; (800a8d8 <SubghzApp_Init+0x194>)
 800a7b0:	4a4d      	ldr	r2, [pc, #308]	; (800a8e8 <SubghzApp_Init+0x1a4>)
 800a7b2:	60da      	str	r2, [r3, #12]
  RadioEvents.RxError = OnRxError;
 800a7b4:	4b48      	ldr	r3, [pc, #288]	; (800a8d8 <SubghzApp_Init+0x194>)
 800a7b6:	4a4d      	ldr	r2, [pc, #308]	; (800a8ec <SubghzApp_Init+0x1a8>)
 800a7b8:	611a      	str	r2, [r3, #16]

  Radio.Init(&RadioEvents);
 800a7ba:	4b4d      	ldr	r3, [pc, #308]	; (800a8f0 <SubghzApp_Init+0x1ac>)
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	4846      	ldr	r0, [pc, #280]	; (800a8d8 <SubghzApp_Init+0x194>)
 800a7c0:	4798      	blx	r3

  /* USER CODE BEGIN SubghzApp_Init_2 */
  /*calculate random delay for synchronization*/
  random_delay = (Radio.Random()) >> 22; /*10bits random e.g. from 0 to 1023 ms*/
 800a7c2:	4b4b      	ldr	r3, [pc, #300]	; (800a8f0 <SubghzApp_Init+0x1ac>)
 800a7c4:	695b      	ldr	r3, [r3, #20]
 800a7c6:	4798      	blx	r3
 800a7c8:	4603      	mov	r3, r0
 800a7ca:	0d9b      	lsrs	r3, r3, #22
 800a7cc:	461a      	mov	r2, r3
 800a7ce:	4b49      	ldr	r3, [pc, #292]	; (800a8f4 <SubghzApp_Init+0x1b0>)
 800a7d0:	601a      	str	r2, [r3, #0]

  /* Radio Set frequency */
  Radio.SetChannel(RF_FREQUENCY);
 800a7d2:	4b47      	ldr	r3, [pc, #284]	; (800a8f0 <SubghzApp_Init+0x1ac>)
 800a7d4:	68db      	ldr	r3, [r3, #12]
 800a7d6:	4848      	ldr	r0, [pc, #288]	; (800a8f8 <SubghzApp_Init+0x1b4>)
 800a7d8:	4798      	blx	r3

  /* Radio configuration */
#if ((USE_MODEM_LORA == 1) && (USE_MODEM_FSK == 0))
  APP_LOG(TS_OFF, VLEVEL_M, "---------------\n\r");
 800a7da:	4b48      	ldr	r3, [pc, #288]	; (800a8fc <SubghzApp_Init+0x1b8>)
 800a7dc:	2200      	movs	r2, #0
 800a7de:	2100      	movs	r1, #0
 800a7e0:	2002      	movs	r0, #2
 800a7e2:	f001 faef 	bl	800bdc4 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "LORA_MODULATION\n\r");
 800a7e6:	4b46      	ldr	r3, [pc, #280]	; (800a900 <SubghzApp_Init+0x1bc>)
 800a7e8:	2200      	movs	r2, #0
 800a7ea:	2100      	movs	r1, #0
 800a7ec:	2002      	movs	r0, #2
 800a7ee:	f001 fae9 	bl	800bdc4 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "LORA_BW=%d kHz\n\r", (1 << LORA_BANDWIDTH) * 125);
 800a7f2:	237d      	movs	r3, #125	; 0x7d
 800a7f4:	9300      	str	r3, [sp, #0]
 800a7f6:	4b43      	ldr	r3, [pc, #268]	; (800a904 <SubghzApp_Init+0x1c0>)
 800a7f8:	2200      	movs	r2, #0
 800a7fa:	2100      	movs	r1, #0
 800a7fc:	2002      	movs	r0, #2
 800a7fe:	f001 fae1 	bl	800bdc4 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "LORA_SF=%d\n\r", LORA_SPREADING_FACTOR);
 800a802:	2307      	movs	r3, #7
 800a804:	9300      	str	r3, [sp, #0]
 800a806:	4b40      	ldr	r3, [pc, #256]	; (800a908 <SubghzApp_Init+0x1c4>)
 800a808:	2200      	movs	r2, #0
 800a80a:	2100      	movs	r1, #0
 800a80c:	2002      	movs	r0, #2
 800a80e:	f001 fad9 	bl	800bdc4 <UTIL_ADV_TRACE_COND_FSend>

  Radio.SetTxConfig(MODEM_LORA, TX_OUTPUT_POWER, 0, LORA_BANDWIDTH,
 800a812:	4b37      	ldr	r3, [pc, #220]	; (800a8f0 <SubghzApp_Init+0x1ac>)
 800a814:	69dc      	ldr	r4, [r3, #28]
 800a816:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800a81a:	9308      	str	r3, [sp, #32]
 800a81c:	2300      	movs	r3, #0
 800a81e:	9307      	str	r3, [sp, #28]
 800a820:	2300      	movs	r3, #0
 800a822:	9306      	str	r3, [sp, #24]
 800a824:	2300      	movs	r3, #0
 800a826:	9305      	str	r3, [sp, #20]
 800a828:	2301      	movs	r3, #1
 800a82a:	9304      	str	r3, [sp, #16]
 800a82c:	2300      	movs	r3, #0
 800a82e:	9303      	str	r3, [sp, #12]
 800a830:	2308      	movs	r3, #8
 800a832:	9302      	str	r3, [sp, #8]
 800a834:	2301      	movs	r3, #1
 800a836:	9301      	str	r3, [sp, #4]
 800a838:	2307      	movs	r3, #7
 800a83a:	9300      	str	r3, [sp, #0]
 800a83c:	2300      	movs	r3, #0
 800a83e:	2200      	movs	r2, #0
 800a840:	2116      	movs	r1, #22
 800a842:	2001      	movs	r0, #1
 800a844:	47a0      	blx	r4
                    LORA_SPREADING_FACTOR, LORA_CODINGRATE,
                    LORA_PREAMBLE_LENGTH, LORA_FIX_LENGTH_PAYLOAD_ON,
                    true, 0, 0, LORA_IQ_INVERSION_ON, TX_TIMEOUT_VALUE);

  Radio.SetRxConfig(MODEM_LORA, LORA_BANDWIDTH, LORA_SPREADING_FACTOR,
 800a846:	4b2a      	ldr	r3, [pc, #168]	; (800a8f0 <SubghzApp_Init+0x1ac>)
 800a848:	699c      	ldr	r4, [r3, #24]
 800a84a:	2301      	movs	r3, #1
 800a84c:	9309      	str	r3, [sp, #36]	; 0x24
 800a84e:	2300      	movs	r3, #0
 800a850:	9308      	str	r3, [sp, #32]
 800a852:	2300      	movs	r3, #0
 800a854:	9307      	str	r3, [sp, #28]
 800a856:	2300      	movs	r3, #0
 800a858:	9306      	str	r3, [sp, #24]
 800a85a:	2301      	movs	r3, #1
 800a85c:	9305      	str	r3, [sp, #20]
 800a85e:	2300      	movs	r3, #0
 800a860:	9304      	str	r3, [sp, #16]
 800a862:	2300      	movs	r3, #0
 800a864:	9303      	str	r3, [sp, #12]
 800a866:	2305      	movs	r3, #5
 800a868:	9302      	str	r3, [sp, #8]
 800a86a:	2308      	movs	r3, #8
 800a86c:	9301      	str	r3, [sp, #4]
 800a86e:	2300      	movs	r3, #0
 800a870:	9300      	str	r3, [sp, #0]
 800a872:	2301      	movs	r3, #1
 800a874:	2207      	movs	r2, #7
 800a876:	2100      	movs	r1, #0
 800a878:	2001      	movs	r0, #1
 800a87a:	47a0      	blx	r4
                    LORA_CODINGRATE, 0, LORA_PREAMBLE_LENGTH,
                    LORA_SYMBOL_TIMEOUT, LORA_FIX_LENGTH_PAYLOAD_ON,
                    0, true, 0, 0, LORA_IQ_INVERSION_ON, true);

  Radio.SetMaxPayloadLength(MODEM_LORA, MAX_APP_BUFFER_SIZE);
 800a87c:	4b1c      	ldr	r3, [pc, #112]	; (800a8f0 <SubghzApp_Init+0x1ac>)
 800a87e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a880:	21ff      	movs	r1, #255	; 0xff
 800a882:	2001      	movs	r0, #1
 800a884:	4798      	blx	r3
#else
#error "Please define a modulation in the subghz_phy_app.h file."
#endif /* USE_MODEM_LORA | USE_MODEM_FSK */

  /*fills tx buffer*/
  memset(BufferTx, 0x0, MAX_APP_BUFFER_SIZE);
 800a886:	22ff      	movs	r2, #255	; 0xff
 800a888:	2100      	movs	r1, #0
 800a88a:	4820      	ldr	r0, [pc, #128]	; (800a90c <SubghzApp_Init+0x1c8>)
 800a88c:	f001 fd12 	bl	800c2b4 <memset>

  APP_LOG(TS_ON, VLEVEL_L, "rand=%d\n\r", random_delay);
 800a890:	4b18      	ldr	r3, [pc, #96]	; (800a8f4 <SubghzApp_Init+0x1b0>)
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	9300      	str	r3, [sp, #0]
 800a896:	4b1e      	ldr	r3, [pc, #120]	; (800a910 <SubghzApp_Init+0x1cc>)
 800a898:	2201      	movs	r2, #1
 800a89a:	2100      	movs	r1, #0
 800a89c:	2001      	movs	r0, #1
 800a89e:	f001 fa91 	bl	800bdc4 <UTIL_ADV_TRACE_COND_FSend>
  /*starts reception*/
  Radio.Rx(RX_TIMEOUT_VALUE + random_delay);
 800a8a2:	4b13      	ldr	r3, [pc, #76]	; (800a8f0 <SubghzApp_Init+0x1ac>)
 800a8a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8a6:	4a13      	ldr	r2, [pc, #76]	; (800a8f4 <SubghzApp_Init+0x1b0>)
 800a8a8:	6812      	ldr	r2, [r2, #0]
 800a8aa:	f602 32b8 	addw	r2, r2, #3000	; 0xbb8
 800a8ae:	4610      	mov	r0, r2
 800a8b0:	4798      	blx	r3

  /*register task to to be run in while(1) after Radio IT*/
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process), UTIL_SEQ_RFU, PingPong_Process);
 800a8b2:	4a18      	ldr	r2, [pc, #96]	; (800a914 <SubghzApp_Init+0x1d0>)
 800a8b4:	2100      	movs	r1, #0
 800a8b6:	2001      	movs	r0, #1
 800a8b8:	f000 ff44 	bl	800b744 <UTIL_SEQ_RegTask>
  /* USER CODE END SubghzApp_Init_2 */
}
 800a8bc:	bf00      	nop
 800a8be:	3704      	adds	r7, #4
 800a8c0:	46bd      	mov	sp, r7
 800a8c2:	bd90      	pop	{r4, r7, pc}
 800a8c4:	0800c41c 	.word	0x0800c41c
 800a8c8:	0800c42c 	.word	0x0800c42c
 800a8cc:	0800c450 	.word	0x0800c450
 800a8d0:	0800ad11 	.word	0x0800ad11
 800a8d4:	20000548 	.word	0x20000548
 800a8d8:	20000324 	.word	0x20000324
 800a8dc:	0800a919 	.word	0x0800a919
 800a8e0:	0800a945 	.word	0x0800a945
 800a8e4:	0800aa59 	.word	0x0800aa59
 800a8e8:	0800aa85 	.word	0x0800aa85
 800a8ec:	0800aab1 	.word	0x0800aab1
 800a8f0:	0800c760 	.word	0x0800c760
 800a8f4:	20000560 	.word	0x20000560
 800a8f8:	33bca100 	.word	0x33bca100
 800a8fc:	0800c474 	.word	0x0800c474
 800a900:	0800c488 	.word	0x0800c488
 800a904:	0800c49c 	.word	0x0800c49c
 800a908:	0800c4b0 	.word	0x0800c4b0
 800a90c:	20000444 	.word	0x20000444
 800a910:	0800c4c0 	.word	0x0800c4c0
 800a914:	0800aadd 	.word	0x0800aadd

0800a918 <OnTxDone>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void OnTxDone(void)
{
 800a918:	b580      	push	{r7, lr}
 800a91a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxDone */
  APP_LOG(TS_ON, VLEVEL_L, "OnTxDone\n\r");
 800a91c:	4b07      	ldr	r3, [pc, #28]	; (800a93c <OnTxDone+0x24>)
 800a91e:	2201      	movs	r2, #1
 800a920:	2100      	movs	r1, #0
 800a922:	2001      	movs	r0, #1
 800a924:	f001 fa4e 	bl	800bdc4 <UTIL_ADV_TRACE_COND_FSend>
  /* Update the State of the FSM*/
  State = TX;
 800a928:	4b05      	ldr	r3, [pc, #20]	; (800a940 <OnTxDone+0x28>)
 800a92a:	2203      	movs	r2, #3
 800a92c:	701a      	strb	r2, [r3, #0]
  /* Run PingPong process in background*/
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process), CFG_SEQ_Prio_0);
 800a92e:	2100      	movs	r1, #0
 800a930:	2001      	movs	r0, #1
 800a932:	f000 ff29 	bl	800b788 <UTIL_SEQ_SetTask>
  /* USER CODE END OnTxDone */
}
 800a936:	bf00      	nop
 800a938:	bd80      	pop	{r7, pc}
 800a93a:	bf00      	nop
 800a93c:	0800c4cc 	.word	0x0800c4cc
 800a940:	20000340 	.word	0x20000340

0800a944 <OnRxDone>:

static void OnRxDone(uint8_t *payload, uint16_t size, int16_t rssi, int8_t LoraSnr_FskCfo)
{
 800a944:	b580      	push	{r7, lr}
 800a946:	b088      	sub	sp, #32
 800a948:	af02      	add	r7, sp, #8
 800a94a:	60f8      	str	r0, [r7, #12]
 800a94c:	4608      	mov	r0, r1
 800a94e:	4611      	mov	r1, r2
 800a950:	461a      	mov	r2, r3
 800a952:	4603      	mov	r3, r0
 800a954:	817b      	strh	r3, [r7, #10]
 800a956:	460b      	mov	r3, r1
 800a958:	813b      	strh	r3, [r7, #8]
 800a95a:	4613      	mov	r3, r2
 800a95c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnRxDone */
  APP_LOG(TS_ON, VLEVEL_L, "OnRxDone\n\r");
 800a95e:	4b34      	ldr	r3, [pc, #208]	; (800aa30 <OnRxDone+0xec>)
 800a960:	2201      	movs	r2, #1
 800a962:	2100      	movs	r1, #0
 800a964:	2001      	movs	r0, #1
 800a966:	f001 fa2d 	bl	800bdc4 <UTIL_ADV_TRACE_COND_FSend>
#if ((USE_MODEM_LORA == 1) && (USE_MODEM_FSK == 0))
  APP_LOG(TS_ON, VLEVEL_L, "RssiValue=%d dBm, SnrValue=%ddB\n\r", rssi, LoraSnr_FskCfo);
 800a96a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800a96e:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800a972:	9201      	str	r2, [sp, #4]
 800a974:	9300      	str	r3, [sp, #0]
 800a976:	4b2f      	ldr	r3, [pc, #188]	; (800aa34 <OnRxDone+0xf0>)
 800a978:	2201      	movs	r2, #1
 800a97a:	2100      	movs	r1, #0
 800a97c:	2001      	movs	r0, #1
 800a97e:	f001 fa21 	bl	800bdc4 <UTIL_ADV_TRACE_COND_FSend>
  /* Record payload Signal to noise ratio in Lora*/
  SnrValue = LoraSnr_FskCfo;
 800a982:	4a2d      	ldr	r2, [pc, #180]	; (800aa38 <OnRxDone+0xf4>)
 800a984:	79fb      	ldrb	r3, [r7, #7]
 800a986:	7013      	strb	r3, [r2, #0]
#if ((USE_MODEM_LORA == 0) && (USE_MODEM_FSK == 1))
  APP_LOG(TS_ON, VLEVEL_L, "RssiValue=%d dBm, Cfo=%dkHz\n\r", rssi, LoraSnr_FskCfo);
  SnrValue = 0; /*not applicable in GFSK*/
#endif /* USE_MODEM_LORA | USE_MODEM_FSK */
  /* Update the State of the FSM*/
  State = RX;
 800a988:	4b2c      	ldr	r3, [pc, #176]	; (800aa3c <OnRxDone+0xf8>)
 800a98a:	2200      	movs	r2, #0
 800a98c:	701a      	strb	r2, [r3, #0]
  /* Clear BufferRx*/
  memset(BufferRx, 0, MAX_APP_BUFFER_SIZE);
 800a98e:	22ff      	movs	r2, #255	; 0xff
 800a990:	2100      	movs	r1, #0
 800a992:	482b      	ldr	r0, [pc, #172]	; (800aa40 <OnRxDone+0xfc>)
 800a994:	f001 fc8e 	bl	800c2b4 <memset>
  /* Record payload size*/
  RxBufferSize = size;
 800a998:	4a2a      	ldr	r2, [pc, #168]	; (800aa44 <OnRxDone+0x100>)
 800a99a:	897b      	ldrh	r3, [r7, #10]
 800a99c:	8013      	strh	r3, [r2, #0]
  if (RxBufferSize <= MAX_APP_BUFFER_SIZE)
 800a99e:	4b29      	ldr	r3, [pc, #164]	; (800aa44 <OnRxDone+0x100>)
 800a9a0:	881b      	ldrh	r3, [r3, #0]
 800a9a2:	2bff      	cmp	r3, #255	; 0xff
 800a9a4:	d806      	bhi.n	800a9b4 <OnRxDone+0x70>
  {
    memcpy(BufferRx, payload, RxBufferSize);
 800a9a6:	4b27      	ldr	r3, [pc, #156]	; (800aa44 <OnRxDone+0x100>)
 800a9a8:	881b      	ldrh	r3, [r3, #0]
 800a9aa:	461a      	mov	r2, r3
 800a9ac:	68f9      	ldr	r1, [r7, #12]
 800a9ae:	4824      	ldr	r0, [pc, #144]	; (800aa40 <OnRxDone+0xfc>)
 800a9b0:	f001 fcbe 	bl	800c330 <memcpy>
  }
  /* Record Received Signal Strength*/
  RssiValue = rssi;
 800a9b4:	893b      	ldrh	r3, [r7, #8]
 800a9b6:	b25a      	sxtb	r2, r3
 800a9b8:	4b23      	ldr	r3, [pc, #140]	; (800aa48 <OnRxDone+0x104>)
 800a9ba:	701a      	strb	r2, [r3, #0]
  /* Record payload content*/
  APP_LOG(TS_ON, VLEVEL_H, "payload. size=%d \n\r", size);
 800a9bc:	897b      	ldrh	r3, [r7, #10]
 800a9be:	9300      	str	r3, [sp, #0]
 800a9c0:	4b22      	ldr	r3, [pc, #136]	; (800aa4c <OnRxDone+0x108>)
 800a9c2:	2201      	movs	r2, #1
 800a9c4:	2100      	movs	r1, #0
 800a9c6:	2003      	movs	r0, #3
 800a9c8:	f001 f9fc 	bl	800bdc4 <UTIL_ADV_TRACE_COND_FSend>
  for (int32_t i = 0; i < PAYLOAD_LEN; i++)
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	617b      	str	r3, [r7, #20]
 800a9d0:	e01d      	b.n	800aa0e <OnRxDone+0xca>
  {
    APP_LOG(TS_OFF, VLEVEL_H, "%02X", BufferRx[i]);
 800a9d2:	4a1b      	ldr	r2, [pc, #108]	; (800aa40 <OnRxDone+0xfc>)
 800a9d4:	697b      	ldr	r3, [r7, #20]
 800a9d6:	4413      	add	r3, r2
 800a9d8:	781b      	ldrb	r3, [r3, #0]
 800a9da:	9300      	str	r3, [sp, #0]
 800a9dc:	4b1c      	ldr	r3, [pc, #112]	; (800aa50 <OnRxDone+0x10c>)
 800a9de:	2200      	movs	r2, #0
 800a9e0:	2100      	movs	r1, #0
 800a9e2:	2003      	movs	r0, #3
 800a9e4:	f001 f9ee 	bl	800bdc4 <UTIL_ADV_TRACE_COND_FSend>
    if (i % 16 == 15)
 800a9e8:	697b      	ldr	r3, [r7, #20]
 800a9ea:	425a      	negs	r2, r3
 800a9ec:	f003 030f 	and.w	r3, r3, #15
 800a9f0:	f002 020f 	and.w	r2, r2, #15
 800a9f4:	bf58      	it	pl
 800a9f6:	4253      	negpl	r3, r2
 800a9f8:	2b0f      	cmp	r3, #15
 800a9fa:	d105      	bne.n	800aa08 <OnRxDone+0xc4>
    {
      APP_LOG(TS_OFF, VLEVEL_H, "\n\r");
 800a9fc:	4b15      	ldr	r3, [pc, #84]	; (800aa54 <OnRxDone+0x110>)
 800a9fe:	2200      	movs	r2, #0
 800aa00:	2100      	movs	r1, #0
 800aa02:	2003      	movs	r0, #3
 800aa04:	f001 f9de 	bl	800bdc4 <UTIL_ADV_TRACE_COND_FSend>
  for (int32_t i = 0; i < PAYLOAD_LEN; i++)
 800aa08:	697b      	ldr	r3, [r7, #20]
 800aa0a:	3301      	adds	r3, #1
 800aa0c:	617b      	str	r3, [r7, #20]
 800aa0e:	697b      	ldr	r3, [r7, #20]
 800aa10:	2b3f      	cmp	r3, #63	; 0x3f
 800aa12:	ddde      	ble.n	800a9d2 <OnRxDone+0x8e>
    }
  }
  APP_LOG(TS_OFF, VLEVEL_H, "\n\r");
 800aa14:	4b0f      	ldr	r3, [pc, #60]	; (800aa54 <OnRxDone+0x110>)
 800aa16:	2200      	movs	r2, #0
 800aa18:	2100      	movs	r1, #0
 800aa1a:	2003      	movs	r0, #3
 800aa1c:	f001 f9d2 	bl	800bdc4 <UTIL_ADV_TRACE_COND_FSend>
  /* Run PingPong process in background*/
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process), CFG_SEQ_Prio_0);
 800aa20:	2100      	movs	r1, #0
 800aa22:	2001      	movs	r0, #1
 800aa24:	f000 feb0 	bl	800b788 <UTIL_SEQ_SetTask>
  /* USER CODE END OnRxDone */
}
 800aa28:	bf00      	nop
 800aa2a:	3718      	adds	r7, #24
 800aa2c:	46bd      	mov	sp, r7
 800aa2e:	bd80      	pop	{r7, pc}
 800aa30:	0800c4d8 	.word	0x0800c4d8
 800aa34:	0800c4e4 	.word	0x0800c4e4
 800aa38:	20000547 	.word	0x20000547
 800aa3c:	20000340 	.word	0x20000340
 800aa40:	20000344 	.word	0x20000344
 800aa44:	20000544 	.word	0x20000544
 800aa48:	20000546 	.word	0x20000546
 800aa4c:	0800c508 	.word	0x0800c508
 800aa50:	0800c51c 	.word	0x0800c51c
 800aa54:	0800c524 	.word	0x0800c524

0800aa58 <OnTxTimeout>:

static void OnTxTimeout(void)
{
 800aa58:	b580      	push	{r7, lr}
 800aa5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxTimeout */
  APP_LOG(TS_ON, VLEVEL_L, "OnTxTimeout\n\r");
 800aa5c:	4b07      	ldr	r3, [pc, #28]	; (800aa7c <OnTxTimeout+0x24>)
 800aa5e:	2201      	movs	r2, #1
 800aa60:	2100      	movs	r1, #0
 800aa62:	2001      	movs	r0, #1
 800aa64:	f001 f9ae 	bl	800bdc4 <UTIL_ADV_TRACE_COND_FSend>
  /* Update the State of the FSM*/
  State = TX_TIMEOUT;
 800aa68:	4b05      	ldr	r3, [pc, #20]	; (800aa80 <OnTxTimeout+0x28>)
 800aa6a:	2204      	movs	r2, #4
 800aa6c:	701a      	strb	r2, [r3, #0]
  /* Run PingPong process in background*/
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process), CFG_SEQ_Prio_0);
 800aa6e:	2100      	movs	r1, #0
 800aa70:	2001      	movs	r0, #1
 800aa72:	f000 fe89 	bl	800b788 <UTIL_SEQ_SetTask>
  /* USER CODE END OnTxTimeout */
}
 800aa76:	bf00      	nop
 800aa78:	bd80      	pop	{r7, pc}
 800aa7a:	bf00      	nop
 800aa7c:	0800c528 	.word	0x0800c528
 800aa80:	20000340 	.word	0x20000340

0800aa84 <OnRxTimeout>:

static void OnRxTimeout(void)
{
 800aa84:	b580      	push	{r7, lr}
 800aa86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxTimeout */
  APP_LOG(TS_ON, VLEVEL_L, "OnRxTimeout\n\r");
 800aa88:	4b07      	ldr	r3, [pc, #28]	; (800aaa8 <OnRxTimeout+0x24>)
 800aa8a:	2201      	movs	r2, #1
 800aa8c:	2100      	movs	r1, #0
 800aa8e:	2001      	movs	r0, #1
 800aa90:	f001 f998 	bl	800bdc4 <UTIL_ADV_TRACE_COND_FSend>
  /* Update the State of the FSM*/
  State = RX_TIMEOUT;
 800aa94:	4b05      	ldr	r3, [pc, #20]	; (800aaac <OnRxTimeout+0x28>)
 800aa96:	2201      	movs	r2, #1
 800aa98:	701a      	strb	r2, [r3, #0]
  /* Run PingPong process in background*/
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process), CFG_SEQ_Prio_0);
 800aa9a:	2100      	movs	r1, #0
 800aa9c:	2001      	movs	r0, #1
 800aa9e:	f000 fe73 	bl	800b788 <UTIL_SEQ_SetTask>
  /* USER CODE END OnRxTimeout */
}
 800aaa2:	bf00      	nop
 800aaa4:	bd80      	pop	{r7, pc}
 800aaa6:	bf00      	nop
 800aaa8:	0800c538 	.word	0x0800c538
 800aaac:	20000340 	.word	0x20000340

0800aab0 <OnRxError>:

static void OnRxError(void)
{
 800aab0:	b580      	push	{r7, lr}
 800aab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxError */
  APP_LOG(TS_ON, VLEVEL_L, "OnRxError\n\r");
 800aab4:	4b07      	ldr	r3, [pc, #28]	; (800aad4 <OnRxError+0x24>)
 800aab6:	2201      	movs	r2, #1
 800aab8:	2100      	movs	r1, #0
 800aaba:	2001      	movs	r0, #1
 800aabc:	f001 f982 	bl	800bdc4 <UTIL_ADV_TRACE_COND_FSend>
  /* Update the State of the FSM*/
  State = RX_ERROR;
 800aac0:	4b05      	ldr	r3, [pc, #20]	; (800aad8 <OnRxError+0x28>)
 800aac2:	2202      	movs	r2, #2
 800aac4:	701a      	strb	r2, [r3, #0]
  /* Run PingPong process in background*/
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process), CFG_SEQ_Prio_0);
 800aac6:	2100      	movs	r1, #0
 800aac8:	2001      	movs	r0, #1
 800aaca:	f000 fe5d 	bl	800b788 <UTIL_SEQ_SetTask>
  /* USER CODE END OnRxError */
}
 800aace:	bf00      	nop
 800aad0:	bd80      	pop	{r7, pc}
 800aad2:	bf00      	nop
 800aad4:	0800c548 	.word	0x0800c548
 800aad8:	20000340 	.word	0x20000340

0800aadc <PingPong_Process>:

/* USER CODE BEGIN PrFD */
static void PingPong_Process(void)
{
 800aadc:	b580      	push	{r7, lr}
 800aade:	af00      	add	r7, sp, #0
  Radio.Sleep();
 800aae0:	4b7a      	ldr	r3, [pc, #488]	; (800accc <PingPong_Process+0x1f0>)
 800aae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aae4:	4798      	blx	r3

  switch (State)
 800aae6:	4b7a      	ldr	r3, [pc, #488]	; (800acd0 <PingPong_Process+0x1f4>)
 800aae8:	781b      	ldrb	r3, [r3, #0]
 800aaea:	2b04      	cmp	r3, #4
 800aaec:	f200 80e8 	bhi.w	800acc0 <PingPong_Process+0x1e4>
 800aaf0:	a201      	add	r2, pc, #4	; (adr r2, 800aaf8 <PingPong_Process+0x1c>)
 800aaf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aaf6:	bf00      	nop
 800aaf8:	0800ab0d 	.word	0x0800ab0d
 800aafc:	0800ac51 	.word	0x0800ac51
 800ab00:	0800ac51 	.word	0x0800ac51
 800ab04:	0800ac39 	.word	0x0800ac39
 800ab08:	0800aca9 	.word	0x0800aca9
  {
    case RX:

      if (isMaster == true)
 800ab0c:	4b71      	ldr	r3, [pc, #452]	; (800acd4 <PingPong_Process+0x1f8>)
 800ab0e:	781b      	ldrb	r3, [r3, #0]
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d054      	beq.n	800abbe <PingPong_Process+0xe2>
      {
        if (RxBufferSize > 0)
 800ab14:	4b70      	ldr	r3, [pc, #448]	; (800acd8 <PingPong_Process+0x1fc>)
 800ab16:	881b      	ldrh	r3, [r3, #0]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	f000 80d3 	beq.w	800acc4 <PingPong_Process+0x1e8>
        {
          if (strncmp((const char *)BufferRx, PONG, sizeof(PONG) - 1) == 0)
 800ab1e:	2204      	movs	r2, #4
 800ab20:	496e      	ldr	r1, [pc, #440]	; (800acdc <PingPong_Process+0x200>)
 800ab22:	486f      	ldr	r0, [pc, #444]	; (800ace0 <PingPong_Process+0x204>)
 800ab24:	f001 fbce 	bl	800c2c4 <strncmp>
 800ab28:	4603      	mov	r3, r0
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d121      	bne.n	800ab72 <PingPong_Process+0x96>
          {
            UTIL_TIMER_Stop(&timerLed);
 800ab2e:	486d      	ldr	r0, [pc, #436]	; (800ace4 <PingPong_Process+0x208>)
 800ab30:	f000 ff50 	bl	800b9d4 <UTIL_TIMER_Stop>
            /* switch off green led */
//            HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
//            /* master toggles red led */
//            HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin); /* LED_RED */
            /* Add delay between RX and TX */
            HAL_Delay(Radio.GetWakeupTime() + RX_TIME_MARGIN);
 800ab34:	4b65      	ldr	r3, [pc, #404]	; (800accc <PingPong_Process+0x1f0>)
 800ab36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab38:	4798      	blx	r3
 800ab3a:	4603      	mov	r3, r0
 800ab3c:	33c8      	adds	r3, #200	; 0xc8
 800ab3e:	4618      	mov	r0, r3
 800ab40:	f7f5 fff4 	bl	8000b2c <HAL_Delay>
            /* master sends PING*/
            APP_LOG(TS_ON, VLEVEL_L, "..."
 800ab44:	4b68      	ldr	r3, [pc, #416]	; (800ace8 <PingPong_Process+0x20c>)
 800ab46:	2201      	movs	r2, #1
 800ab48:	2100      	movs	r1, #0
 800ab4a:	2001      	movs	r0, #1
 800ab4c:	f001 f93a 	bl	800bdc4 <UTIL_ADV_TRACE_COND_FSend>
                    "PING"
                    "\n\r");
            APP_LOG(TS_ON, VLEVEL_L, "Master Tx start\n\r");
 800ab50:	4b66      	ldr	r3, [pc, #408]	; (800acec <PingPong_Process+0x210>)
 800ab52:	2201      	movs	r2, #1
 800ab54:	2100      	movs	r1, #0
 800ab56:	2001      	movs	r0, #1
 800ab58:	f001 f934 	bl	800bdc4 <UTIL_ADV_TRACE_COND_FSend>
            memcpy(BufferTx, PING, sizeof(PING) - 1);
 800ab5c:	2204      	movs	r2, #4
 800ab5e:	4964      	ldr	r1, [pc, #400]	; (800acf0 <PingPong_Process+0x214>)
 800ab60:	4864      	ldr	r0, [pc, #400]	; (800acf4 <PingPong_Process+0x218>)
 800ab62:	f001 fbe5 	bl	800c330 <memcpy>
            Radio.Send(BufferTx, PAYLOAD_LEN);
 800ab66:	4b59      	ldr	r3, [pc, #356]	; (800accc <PingPong_Process+0x1f0>)
 800ab68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab6a:	2140      	movs	r1, #64	; 0x40
 800ab6c:	4861      	ldr	r0, [pc, #388]	; (800acf4 <PingPong_Process+0x218>)
 800ab6e:	4798      	blx	r3
            APP_LOG(TS_ON, VLEVEL_L, "Master Rx start\n\r");
            Radio.Rx(RX_TIMEOUT_VALUE);
          }
        }
      }
      break;
 800ab70:	e0a8      	b.n	800acc4 <PingPong_Process+0x1e8>
          else if (strncmp((const char *)BufferRx, PING, sizeof(PING) - 1) == 0)
 800ab72:	2204      	movs	r2, #4
 800ab74:	495e      	ldr	r1, [pc, #376]	; (800acf0 <PingPong_Process+0x214>)
 800ab76:	485a      	ldr	r0, [pc, #360]	; (800ace0 <PingPong_Process+0x204>)
 800ab78:	f001 fba4 	bl	800c2c4 <strncmp>
 800ab7c:	4603      	mov	r3, r0
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d10e      	bne.n	800aba0 <PingPong_Process+0xc4>
            isMaster = false;
 800ab82:	4b54      	ldr	r3, [pc, #336]	; (800acd4 <PingPong_Process+0x1f8>)
 800ab84:	2200      	movs	r2, #0
 800ab86:	701a      	strb	r2, [r3, #0]
            APP_LOG(TS_ON, VLEVEL_L, "Slave Rx start\n\r");
 800ab88:	4b5b      	ldr	r3, [pc, #364]	; (800acf8 <PingPong_Process+0x21c>)
 800ab8a:	2201      	movs	r2, #1
 800ab8c:	2100      	movs	r1, #0
 800ab8e:	2001      	movs	r0, #1
 800ab90:	f001 f918 	bl	800bdc4 <UTIL_ADV_TRACE_COND_FSend>
            Radio.Rx(RX_TIMEOUT_VALUE);
 800ab94:	4b4d      	ldr	r3, [pc, #308]	; (800accc <PingPong_Process+0x1f0>)
 800ab96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab98:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800ab9c:	4798      	blx	r3
      break;
 800ab9e:	e091      	b.n	800acc4 <PingPong_Process+0x1e8>
            isMaster = true;
 800aba0:	4b4c      	ldr	r3, [pc, #304]	; (800acd4 <PingPong_Process+0x1f8>)
 800aba2:	2201      	movs	r2, #1
 800aba4:	701a      	strb	r2, [r3, #0]
            APP_LOG(TS_ON, VLEVEL_L, "Master Rx start\n\r");
 800aba6:	4b55      	ldr	r3, [pc, #340]	; (800acfc <PingPong_Process+0x220>)
 800aba8:	2201      	movs	r2, #1
 800abaa:	2100      	movs	r1, #0
 800abac:	2001      	movs	r0, #1
 800abae:	f001 f909 	bl	800bdc4 <UTIL_ADV_TRACE_COND_FSend>
            Radio.Rx(RX_TIMEOUT_VALUE);
 800abb2:	4b46      	ldr	r3, [pc, #280]	; (800accc <PingPong_Process+0x1f0>)
 800abb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abb6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800abba:	4798      	blx	r3
      break;
 800abbc:	e082      	b.n	800acc4 <PingPong_Process+0x1e8>
        if (RxBufferSize > 0)
 800abbe:	4b46      	ldr	r3, [pc, #280]	; (800acd8 <PingPong_Process+0x1fc>)
 800abc0:	881b      	ldrh	r3, [r3, #0]
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d07e      	beq.n	800acc4 <PingPong_Process+0x1e8>
          if (strncmp((const char *)BufferRx, PING, sizeof(PING) - 1) == 0)
 800abc6:	2204      	movs	r2, #4
 800abc8:	4949      	ldr	r1, [pc, #292]	; (800acf0 <PingPong_Process+0x214>)
 800abca:	4845      	ldr	r0, [pc, #276]	; (800ace0 <PingPong_Process+0x204>)
 800abcc:	f001 fb7a 	bl	800c2c4 <strncmp>
 800abd0:	4603      	mov	r3, r0
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d121      	bne.n	800ac1a <PingPong_Process+0x13e>
            UTIL_TIMER_Stop(&timerLed);
 800abd6:	4843      	ldr	r0, [pc, #268]	; (800ace4 <PingPong_Process+0x208>)
 800abd8:	f000 fefc 	bl	800b9d4 <UTIL_TIMER_Stop>
            HAL_Delay(Radio.GetWakeupTime() + RX_TIME_MARGIN);
 800abdc:	4b3b      	ldr	r3, [pc, #236]	; (800accc <PingPong_Process+0x1f0>)
 800abde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800abe0:	4798      	blx	r3
 800abe2:	4603      	mov	r3, r0
 800abe4:	33c8      	adds	r3, #200	; 0xc8
 800abe6:	4618      	mov	r0, r3
 800abe8:	f7f5 ffa0 	bl	8000b2c <HAL_Delay>
            APP_LOG(TS_ON, VLEVEL_L, "..."
 800abec:	4b44      	ldr	r3, [pc, #272]	; (800ad00 <PingPong_Process+0x224>)
 800abee:	2201      	movs	r2, #1
 800abf0:	2100      	movs	r1, #0
 800abf2:	2001      	movs	r0, #1
 800abf4:	f001 f8e6 	bl	800bdc4 <UTIL_ADV_TRACE_COND_FSend>
            APP_LOG(TS_ON, VLEVEL_L, "Slave  Tx start\n\r");
 800abf8:	4b42      	ldr	r3, [pc, #264]	; (800ad04 <PingPong_Process+0x228>)
 800abfa:	2201      	movs	r2, #1
 800abfc:	2100      	movs	r1, #0
 800abfe:	2001      	movs	r0, #1
 800ac00:	f001 f8e0 	bl	800bdc4 <UTIL_ADV_TRACE_COND_FSend>
            memcpy(BufferTx, PONG, sizeof(PONG) - 1);
 800ac04:	2204      	movs	r2, #4
 800ac06:	4935      	ldr	r1, [pc, #212]	; (800acdc <PingPong_Process+0x200>)
 800ac08:	483a      	ldr	r0, [pc, #232]	; (800acf4 <PingPong_Process+0x218>)
 800ac0a:	f001 fb91 	bl	800c330 <memcpy>
            Radio.Send(BufferTx, PAYLOAD_LEN);
 800ac0e:	4b2f      	ldr	r3, [pc, #188]	; (800accc <PingPong_Process+0x1f0>)
 800ac10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac12:	2140      	movs	r1, #64	; 0x40
 800ac14:	4837      	ldr	r0, [pc, #220]	; (800acf4 <PingPong_Process+0x218>)
 800ac16:	4798      	blx	r3
      break;
 800ac18:	e054      	b.n	800acc4 <PingPong_Process+0x1e8>
            isMaster = true;
 800ac1a:	4b2e      	ldr	r3, [pc, #184]	; (800acd4 <PingPong_Process+0x1f8>)
 800ac1c:	2201      	movs	r2, #1
 800ac1e:	701a      	strb	r2, [r3, #0]
            APP_LOG(TS_ON, VLEVEL_L, "Master Rx start\n\r");
 800ac20:	4b36      	ldr	r3, [pc, #216]	; (800acfc <PingPong_Process+0x220>)
 800ac22:	2201      	movs	r2, #1
 800ac24:	2100      	movs	r1, #0
 800ac26:	2001      	movs	r0, #1
 800ac28:	f001 f8cc 	bl	800bdc4 <UTIL_ADV_TRACE_COND_FSend>
            Radio.Rx(RX_TIMEOUT_VALUE);
 800ac2c:	4b27      	ldr	r3, [pc, #156]	; (800accc <PingPong_Process+0x1f0>)
 800ac2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac30:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800ac34:	4798      	blx	r3
      break;
 800ac36:	e045      	b.n	800acc4 <PingPong_Process+0x1e8>
    case TX:
      APP_LOG(TS_ON, VLEVEL_L, "Rx start\n\r");
 800ac38:	4b33      	ldr	r3, [pc, #204]	; (800ad08 <PingPong_Process+0x22c>)
 800ac3a:	2201      	movs	r2, #1
 800ac3c:	2100      	movs	r1, #0
 800ac3e:	2001      	movs	r0, #1
 800ac40:	f001 f8c0 	bl	800bdc4 <UTIL_ADV_TRACE_COND_FSend>
      Radio.Rx(RX_TIMEOUT_VALUE);
 800ac44:	4b21      	ldr	r3, [pc, #132]	; (800accc <PingPong_Process+0x1f0>)
 800ac46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac48:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800ac4c:	4798      	blx	r3
      break;
 800ac4e:	e03a      	b.n	800acc6 <PingPong_Process+0x1ea>
    case RX_TIMEOUT:
    case RX_ERROR:
      if (isMaster == true)
 800ac50:	4b20      	ldr	r3, [pc, #128]	; (800acd4 <PingPong_Process+0x1f8>)
 800ac52:	781b      	ldrb	r3, [r3, #0]
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d01b      	beq.n	800ac90 <PingPong_Process+0x1b4>
      {
        /* Send the next PING frame */
        /* Add delay between RX and TX*/
        /* add random_delay to force sync between boards after some trials*/
        HAL_Delay(Radio.GetWakeupTime() + RX_TIME_MARGIN + random_delay);
 800ac58:	4b1c      	ldr	r3, [pc, #112]	; (800accc <PingPong_Process+0x1f0>)
 800ac5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac5c:	4798      	blx	r3
 800ac5e:	4603      	mov	r3, r0
 800ac60:	4a2a      	ldr	r2, [pc, #168]	; (800ad0c <PingPong_Process+0x230>)
 800ac62:	6812      	ldr	r2, [r2, #0]
 800ac64:	4413      	add	r3, r2
 800ac66:	33c8      	adds	r3, #200	; 0xc8
 800ac68:	4618      	mov	r0, r3
 800ac6a:	f7f5 ff5f 	bl	8000b2c <HAL_Delay>
        APP_LOG(TS_ON, VLEVEL_L, "Master Tx start\n\r");
 800ac6e:	4b1f      	ldr	r3, [pc, #124]	; (800acec <PingPong_Process+0x210>)
 800ac70:	2201      	movs	r2, #1
 800ac72:	2100      	movs	r1, #0
 800ac74:	2001      	movs	r0, #1
 800ac76:	f001 f8a5 	bl	800bdc4 <UTIL_ADV_TRACE_COND_FSend>
        /* master sends PING*/
        memcpy(BufferTx, PING, sizeof(PING) - 1);
 800ac7a:	2204      	movs	r2, #4
 800ac7c:	491c      	ldr	r1, [pc, #112]	; (800acf0 <PingPong_Process+0x214>)
 800ac7e:	481d      	ldr	r0, [pc, #116]	; (800acf4 <PingPong_Process+0x218>)
 800ac80:	f001 fb56 	bl	800c330 <memcpy>
        Radio.Send(BufferTx, PAYLOAD_LEN);
 800ac84:	4b11      	ldr	r3, [pc, #68]	; (800accc <PingPong_Process+0x1f0>)
 800ac86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac88:	2140      	movs	r1, #64	; 0x40
 800ac8a:	481a      	ldr	r0, [pc, #104]	; (800acf4 <PingPong_Process+0x218>)
 800ac8c:	4798      	blx	r3
      else
      {
        APP_LOG(TS_ON, VLEVEL_L, "Slave Rx start\n\r");
        Radio.Rx(RX_TIMEOUT_VALUE);
      }
      break;
 800ac8e:	e01a      	b.n	800acc6 <PingPong_Process+0x1ea>
        APP_LOG(TS_ON, VLEVEL_L, "Slave Rx start\n\r");
 800ac90:	4b19      	ldr	r3, [pc, #100]	; (800acf8 <PingPong_Process+0x21c>)
 800ac92:	2201      	movs	r2, #1
 800ac94:	2100      	movs	r1, #0
 800ac96:	2001      	movs	r0, #1
 800ac98:	f001 f894 	bl	800bdc4 <UTIL_ADV_TRACE_COND_FSend>
        Radio.Rx(RX_TIMEOUT_VALUE);
 800ac9c:	4b0b      	ldr	r3, [pc, #44]	; (800accc <PingPong_Process+0x1f0>)
 800ac9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aca0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800aca4:	4798      	blx	r3
      break;
 800aca6:	e00e      	b.n	800acc6 <PingPong_Process+0x1ea>
    case TX_TIMEOUT:
      APP_LOG(TS_ON, VLEVEL_L, "Slave Rx start\n\r");
 800aca8:	4b13      	ldr	r3, [pc, #76]	; (800acf8 <PingPong_Process+0x21c>)
 800acaa:	2201      	movs	r2, #1
 800acac:	2100      	movs	r1, #0
 800acae:	2001      	movs	r0, #1
 800acb0:	f001 f888 	bl	800bdc4 <UTIL_ADV_TRACE_COND_FSend>
      Radio.Rx(RX_TIMEOUT_VALUE);
 800acb4:	4b05      	ldr	r3, [pc, #20]	; (800accc <PingPong_Process+0x1f0>)
 800acb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800acb8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800acbc:	4798      	blx	r3
      break;
 800acbe:	e002      	b.n	800acc6 <PingPong_Process+0x1ea>
    default:
      break;
 800acc0:	bf00      	nop
 800acc2:	e000      	b.n	800acc6 <PingPong_Process+0x1ea>
      break;
 800acc4:	bf00      	nop
  }
}
 800acc6:	bf00      	nop
 800acc8:	bd80      	pop	{r7, pc}
 800acca:	bf00      	nop
 800accc:	0800c760 	.word	0x0800c760
 800acd0:	20000340 	.word	0x20000340
 800acd4:	20000009 	.word	0x20000009
 800acd8:	20000544 	.word	0x20000544
 800acdc:	0800c554 	.word	0x0800c554
 800ace0:	20000344 	.word	0x20000344
 800ace4:	20000548 	.word	0x20000548
 800ace8:	0800c55c 	.word	0x0800c55c
 800acec:	0800c568 	.word	0x0800c568
 800acf0:	0800c57c 	.word	0x0800c57c
 800acf4:	20000444 	.word	0x20000444
 800acf8:	0800c584 	.word	0x0800c584
 800acfc:	0800c598 	.word	0x0800c598
 800ad00:	0800c5ac 	.word	0x0800c5ac
 800ad04:	0800c5b8 	.word	0x0800c5b8
 800ad08:	0800c5cc 	.word	0x0800c5cc
 800ad0c:	20000560 	.word	0x20000560

0800ad10 <OnledEvent>:

static void OnledEvent(void *context)
{
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b082      	sub	sp, #8
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	6078      	str	r0, [r7, #4]
  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin); /* LED_GREEN */
 800ad18:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800ad1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800ad20:	f7f7 fc29 	bl	8002576 <HAL_GPIO_TogglePin>
  UTIL_TIMER_Start(&timerLed);
 800ad24:	4803      	ldr	r0, [pc, #12]	; (800ad34 <OnledEvent+0x24>)
 800ad26:	f000 fde7 	bl	800b8f8 <UTIL_TIMER_Start>
}
 800ad2a:	bf00      	nop
 800ad2c:	3708      	adds	r7, #8
 800ad2e:	46bd      	mov	sp, r7
 800ad30:	bd80      	pop	{r7, pc}
 800ad32:	bf00      	nop
 800ad34:	20000548 	.word	0x20000548

0800ad38 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800ad38:	b480      	push	{r7}
 800ad3a:	b083      	sub	sp, #12
 800ad3c:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
#else
  /* 2/ Or implement RBI_Init here */
  int32_t retcode = 0;
 800ad3e:	2300      	movs	r3, #0
 800ad40:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
 800ad42:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER  */
}
 800ad44:	4618      	mov	r0, r3
 800ad46:	370c      	adds	r7, #12
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	bc80      	pop	{r7}
 800ad4c:	4770      	bx	lr

0800ad4e <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800ad4e:	b580      	push	{r7, lr}
 800ad50:	b084      	sub	sp, #16
 800ad52:	af00      	add	r7, sp, #0
 800ad54:	4603      	mov	r3, r0
 800ad56:	71fb      	strb	r3, [r7, #7]
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
#else
  /* 2/ Or implement RBI_ConfigRFSwitch here */
  int32_t retcode = 0;
 800ad58:	2300      	movs	r3, #0
 800ad5a:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
	Olimex_ConfigRfSwitch(Config);
 800ad5c:	79fb      	ldrb	r3, [r7, #7]
 800ad5e:	4618      	mov	r0, r3
 800ad60:	f7f6 fbf2 	bl	8001548 <Olimex_ConfigRfSwitch>
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
 800ad64:	68fb      	ldr	r3, [r7, #12]
#endif  /* USE_BSP_DRIVER */
}
 800ad66:	4618      	mov	r0, r3
 800ad68:	3710      	adds	r7, #16
 800ad6a:	46bd      	mov	sp, r7
 800ad6c:	bd80      	pop	{r7, pc}

0800ad6e <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800ad6e:	b480      	push	{r7}
 800ad70:	b083      	sub	sp, #12
 800ad72:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
#else
  /* 2/ Or implement RBI_GetTxConfig here */
  int32_t retcode = RBI_CONF_RFO;
 800ad74:	2300      	movs	r3, #0
 800ad76:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
 800ad78:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER */
}
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	370c      	adds	r7, #12
 800ad7e:	46bd      	mov	sp, r7
 800ad80:	bc80      	pop	{r7}
 800ad82:	4770      	bx	lr

0800ad84 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 800ad84:	b480      	push	{r7}
 800ad86:	b083      	sub	sp, #12
 800ad88:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
#else
  /* 2/ Or implement RBI_IsTCXO here */
  int32_t retcode = IS_TCXO_SUPPORTED;
 800ad8a:	2300      	movs	r3, #0
 800ad8c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
 800ad8e:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER  */
}
 800ad90:	4618      	mov	r0, r3
 800ad92:	370c      	adds	r7, #12
 800ad94:	46bd      	mov	sp, r7
 800ad96:	bc80      	pop	{r7}
 800ad98:	4770      	bx	lr

0800ad9a <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800ad9a:	b480      	push	{r7}
 800ad9c:	b083      	sub	sp, #12
 800ad9e:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
#else
  /* 2/ Or implement RBI_IsDCDC here */
  int32_t retcode = IS_DCDC_SUPPORTED;
 800ada0:	2301      	movs	r3, #1
 800ada2:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
 800ada4:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER  */
}
 800ada6:	4618      	mov	r0, r3
 800ada8:	370c      	adds	r7, #12
 800adaa:	46bd      	mov	sp, r7
 800adac:	bc80      	pop	{r7}
 800adae:	4770      	bx	lr

0800adb0 <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 800adb0:	b480      	push	{r7}
 800adb2:	b085      	sub	sp, #20
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	4603      	mov	r3, r0
 800adb8:	71fb      	strb	r3, [r7, #7]
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
#else
  /* 2/ Or implement RBI_RBI_GetRFOMaxPowerConfig here */
  int32_t ret = 0;
 800adba:	2300      	movs	r3, #0
 800adbc:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN RBI_GetRFOMaxPowerConfig_2 */
#warning user to provide its board code or to call his board driver functions
	if (Config == RBI_RFO_LP_MAXPOWER) {
 800adbe:	79fb      	ldrb	r3, [r7, #7]
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d102      	bne.n	800adca <RBI_GetRFOMaxPowerConfig+0x1a>
		ret = 15; /*dBm*/
 800adc4:	230f      	movs	r3, #15
 800adc6:	60fb      	str	r3, [r7, #12]
 800adc8:	e001      	b.n	800adce <RBI_GetRFOMaxPowerConfig+0x1e>
	} else {
		ret = 22; /*dBm*/
 800adca:	2316      	movs	r3, #22
 800adcc:	60fb      	str	r3, [r7, #12]
	}
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
 800adce:	68fb      	ldr	r3, [r7, #12]
#endif  /* USE_BSP_DRIVER  */
}
 800add0:	4618      	mov	r0, r3
 800add2:	3714      	adds	r7, #20
 800add4:	46bd      	mov	sp, r7
 800add6:	bc80      	pop	{r7}
 800add8:	4770      	bx	lr
	...

0800addc <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800addc:	b480      	push	{r7}
 800adde:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800ade0:	4b04      	ldr	r3, [pc, #16]	; (800adf4 <UTIL_LPM_Init+0x18>)
 800ade2:	2200      	movs	r2, #0
 800ade4:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800ade6:	4b04      	ldr	r3, [pc, #16]	; (800adf8 <UTIL_LPM_Init+0x1c>)
 800ade8:	2200      	movs	r2, #0
 800adea:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800adec:	bf00      	nop
 800adee:	46bd      	mov	sp, r7
 800adf0:	bc80      	pop	{r7}
 800adf2:	4770      	bx	lr
 800adf4:	20000564 	.word	0x20000564
 800adf8:	20000568 	.word	0x20000568

0800adfc <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800adfc:	b480      	push	{r7}
 800adfe:	b087      	sub	sp, #28
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	6078      	str	r0, [r7, #4]
 800ae04:	460b      	mov	r3, r1
 800ae06:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ae08:	f3ef 8310 	mrs	r3, PRIMASK
 800ae0c:	613b      	str	r3, [r7, #16]
  return(result);
 800ae0e:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800ae10:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ae12:	b672      	cpsid	i
}
 800ae14:	bf00      	nop
  
  switch( state )
 800ae16:	78fb      	ldrb	r3, [r7, #3]
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d008      	beq.n	800ae2e <UTIL_LPM_SetStopMode+0x32>
 800ae1c:	2b01      	cmp	r3, #1
 800ae1e:	d10e      	bne.n	800ae3e <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 800ae20:	4b0d      	ldr	r3, [pc, #52]	; (800ae58 <UTIL_LPM_SetStopMode+0x5c>)
 800ae22:	681a      	ldr	r2, [r3, #0]
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	4313      	orrs	r3, r2
 800ae28:	4a0b      	ldr	r2, [pc, #44]	; (800ae58 <UTIL_LPM_SetStopMode+0x5c>)
 800ae2a:	6013      	str	r3, [r2, #0]
      break;
 800ae2c:	e008      	b.n	800ae40 <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	43da      	mvns	r2, r3
 800ae32:	4b09      	ldr	r3, [pc, #36]	; (800ae58 <UTIL_LPM_SetStopMode+0x5c>)
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	4013      	ands	r3, r2
 800ae38:	4a07      	ldr	r2, [pc, #28]	; (800ae58 <UTIL_LPM_SetStopMode+0x5c>)
 800ae3a:	6013      	str	r3, [r2, #0]
      break;
 800ae3c:	e000      	b.n	800ae40 <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 800ae3e:	bf00      	nop
 800ae40:	697b      	ldr	r3, [r7, #20]
 800ae42:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	f383 8810 	msr	PRIMASK, r3
}
 800ae4a:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800ae4c:	bf00      	nop
 800ae4e:	371c      	adds	r7, #28
 800ae50:	46bd      	mov	sp, r7
 800ae52:	bc80      	pop	{r7}
 800ae54:	4770      	bx	lr
 800ae56:	bf00      	nop
 800ae58:	20000564 	.word	0x20000564

0800ae5c <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800ae5c:	b480      	push	{r7}
 800ae5e:	b087      	sub	sp, #28
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	6078      	str	r0, [r7, #4]
 800ae64:	460b      	mov	r3, r1
 800ae66:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ae68:	f3ef 8310 	mrs	r3, PRIMASK
 800ae6c:	613b      	str	r3, [r7, #16]
  return(result);
 800ae6e:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800ae70:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ae72:	b672      	cpsid	i
}
 800ae74:	bf00      	nop
  
  switch(state)
 800ae76:	78fb      	ldrb	r3, [r7, #3]
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d008      	beq.n	800ae8e <UTIL_LPM_SetOffMode+0x32>
 800ae7c:	2b01      	cmp	r3, #1
 800ae7e:	d10e      	bne.n	800ae9e <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800ae80:	4b0d      	ldr	r3, [pc, #52]	; (800aeb8 <UTIL_LPM_SetOffMode+0x5c>)
 800ae82:	681a      	ldr	r2, [r3, #0]
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	4313      	orrs	r3, r2
 800ae88:	4a0b      	ldr	r2, [pc, #44]	; (800aeb8 <UTIL_LPM_SetOffMode+0x5c>)
 800ae8a:	6013      	str	r3, [r2, #0]
      break;
 800ae8c:	e008      	b.n	800aea0 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	43da      	mvns	r2, r3
 800ae92:	4b09      	ldr	r3, [pc, #36]	; (800aeb8 <UTIL_LPM_SetOffMode+0x5c>)
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	4013      	ands	r3, r2
 800ae98:	4a07      	ldr	r2, [pc, #28]	; (800aeb8 <UTIL_LPM_SetOffMode+0x5c>)
 800ae9a:	6013      	str	r3, [r2, #0]
      break;
 800ae9c:	e000      	b.n	800aea0 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800ae9e:	bf00      	nop
 800aea0:	697b      	ldr	r3, [r7, #20]
 800aea2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	f383 8810 	msr	PRIMASK, r3
}
 800aeaa:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800aeac:	bf00      	nop
 800aeae:	371c      	adds	r7, #28
 800aeb0:	46bd      	mov	sp, r7
 800aeb2:	bc80      	pop	{r7}
 800aeb4:	4770      	bx	lr
 800aeb6:	bf00      	nop
 800aeb8:	20000568 	.word	0x20000568

0800aebc <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 800aebc:	b580      	push	{r7, lr}
 800aebe:	b084      	sub	sp, #16
 800aec0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aec2:	f3ef 8310 	mrs	r3, PRIMASK
 800aec6:	60bb      	str	r3, [r7, #8]
  return(result);
 800aec8:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 800aeca:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800aecc:	b672      	cpsid	i
}
 800aece:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 800aed0:	4b12      	ldr	r3, [pc, #72]	; (800af1c <UTIL_LPM_EnterLowPower+0x60>)
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d006      	beq.n	800aee6 <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 800aed8:	4b11      	ldr	r3, [pc, #68]	; (800af20 <UTIL_LPM_EnterLowPower+0x64>)
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 800aede:	4b10      	ldr	r3, [pc, #64]	; (800af20 <UTIL_LPM_EnterLowPower+0x64>)
 800aee0:	685b      	ldr	r3, [r3, #4]
 800aee2:	4798      	blx	r3
 800aee4:	e010      	b.n	800af08 <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 800aee6:	4b0f      	ldr	r3, [pc, #60]	; (800af24 <UTIL_LPM_EnterLowPower+0x68>)
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d006      	beq.n	800aefc <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 800aeee:	4b0c      	ldr	r3, [pc, #48]	; (800af20 <UTIL_LPM_EnterLowPower+0x64>)
 800aef0:	689b      	ldr	r3, [r3, #8]
 800aef2:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 800aef4:	4b0a      	ldr	r3, [pc, #40]	; (800af20 <UTIL_LPM_EnterLowPower+0x64>)
 800aef6:	68db      	ldr	r3, [r3, #12]
 800aef8:	4798      	blx	r3
 800aefa:	e005      	b.n	800af08 <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 800aefc:	4b08      	ldr	r3, [pc, #32]	; (800af20 <UTIL_LPM_EnterLowPower+0x64>)
 800aefe:	691b      	ldr	r3, [r3, #16]
 800af00:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 800af02:	4b07      	ldr	r3, [pc, #28]	; (800af20 <UTIL_LPM_EnterLowPower+0x64>)
 800af04:	695b      	ldr	r3, [r3, #20]
 800af06:	4798      	blx	r3
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	f383 8810 	msr	PRIMASK, r3
}
 800af12:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 800af14:	bf00      	nop
 800af16:	3710      	adds	r7, #16
 800af18:	46bd      	mov	sp, r7
 800af1a:	bd80      	pop	{r7, pc}
 800af1c:	20000564 	.word	0x20000564
 800af20:	0800c630 	.word	0x0800c630
 800af24:	20000568 	.word	0x20000568

0800af28 <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 800af28:	b480      	push	{r7}
 800af2a:	b087      	sub	sp, #28
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	60f8      	str	r0, [r7, #12]
 800af30:	60b9      	str	r1, [r7, #8]
 800af32:	4613      	mov	r3, r2
 800af34:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 800af3a:	68bb      	ldr	r3, [r7, #8]
 800af3c:	613b      	str	r3, [r7, #16]

  while( size-- )
 800af3e:	e007      	b.n	800af50 <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 800af40:	693a      	ldr	r2, [r7, #16]
 800af42:	1c53      	adds	r3, r2, #1
 800af44:	613b      	str	r3, [r7, #16]
 800af46:	697b      	ldr	r3, [r7, #20]
 800af48:	1c59      	adds	r1, r3, #1
 800af4a:	6179      	str	r1, [r7, #20]
 800af4c:	7812      	ldrb	r2, [r2, #0]
 800af4e:	701a      	strb	r2, [r3, #0]
  while( size-- )
 800af50:	88fb      	ldrh	r3, [r7, #6]
 800af52:	1e5a      	subs	r2, r3, #1
 800af54:	80fa      	strh	r2, [r7, #6]
 800af56:	2b00      	cmp	r3, #0
 800af58:	d1f2      	bne.n	800af40 <UTIL_MEM_cpy_8+0x18>
    }
}
 800af5a:	bf00      	nop
 800af5c:	bf00      	nop
 800af5e:	371c      	adds	r7, #28
 800af60:	46bd      	mov	sp, r7
 800af62:	bc80      	pop	{r7}
 800af64:	4770      	bx	lr

0800af66 <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 800af66:	b480      	push	{r7}
 800af68:	b085      	sub	sp, #20
 800af6a:	af00      	add	r7, sp, #0
 800af6c:	6078      	str	r0, [r7, #4]
 800af6e:	460b      	mov	r3, r1
 800af70:	70fb      	strb	r3, [r7, #3]
 800af72:	4613      	mov	r3, r2
 800af74:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	60fb      	str	r3, [r7, #12]
  while( size-- )
 800af7a:	e004      	b.n	800af86 <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	1c5a      	adds	r2, r3, #1
 800af80:	60fa      	str	r2, [r7, #12]
 800af82:	78fa      	ldrb	r2, [r7, #3]
 800af84:	701a      	strb	r2, [r3, #0]
  while( size-- )
 800af86:	883b      	ldrh	r3, [r7, #0]
 800af88:	1e5a      	subs	r2, r3, #1
 800af8a:	803a      	strh	r2, [r7, #0]
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d1f5      	bne.n	800af7c <UTIL_MEM_set_8+0x16>
  }
}
 800af90:	bf00      	nop
 800af92:	bf00      	nop
 800af94:	3714      	adds	r7, #20
 800af96:	46bd      	mov	sp, r7
 800af98:	bc80      	pop	{r7}
 800af9a:	4770      	bx	lr

0800af9c <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 800af9c:	b082      	sub	sp, #8
 800af9e:	b480      	push	{r7}
 800afa0:	b087      	sub	sp, #28
 800afa2:	af00      	add	r7, sp, #0
 800afa4:	60f8      	str	r0, [r7, #12]
 800afa6:	1d38      	adds	r0, r7, #4
 800afa8:	e880 0006 	stmia.w	r0, {r1, r2}
 800afac:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 800afae:	2300      	movs	r3, #0
 800afb0:	613b      	str	r3, [r7, #16]
 800afb2:	2300      	movs	r3, #0
 800afb4:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds + b.Seconds;
 800afb6:	687a      	ldr	r2, [r7, #4]
 800afb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afba:	4413      	add	r3, r2
 800afbc:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 800afbe:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800afc2:	b29a      	uxth	r2, r3
 800afc4:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800afc8:	b29b      	uxth	r3, r3
 800afca:	4413      	add	r3, r2
 800afcc:	b29b      	uxth	r3, r3
 800afce:	b21b      	sxth	r3, r3
 800afd0:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds >= 1000 )
 800afd2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800afd6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800afda:	db0a      	blt.n	800aff2 <SysTimeAdd+0x56>
  {
    c.Seconds++;
 800afdc:	693b      	ldr	r3, [r7, #16]
 800afde:	3301      	adds	r3, #1
 800afe0:	613b      	str	r3, [r7, #16]
    c.SubSeconds -= 1000;
 800afe2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800afe6:	b29b      	uxth	r3, r3
 800afe8:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800afec:	b29b      	uxth	r3, r3
 800afee:	b21b      	sxth	r3, r3
 800aff0:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	461a      	mov	r2, r3
 800aff6:	f107 0310 	add.w	r3, r7, #16
 800affa:	e893 0003 	ldmia.w	r3, {r0, r1}
 800affe:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800b002:	68f8      	ldr	r0, [r7, #12]
 800b004:	371c      	adds	r7, #28
 800b006:	46bd      	mov	sp, r7
 800b008:	bc80      	pop	{r7}
 800b00a:	b002      	add	sp, #8
 800b00c:	4770      	bx	lr
	...

0800b010 <SysTimeGet>:
  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
}

SysTime_t SysTimeGet( void )
{
 800b010:	b580      	push	{r7, lr}
 800b012:	b08a      	sub	sp, #40	; 0x28
 800b014:	af02      	add	r7, sp, #8
 800b016:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800b018:	2300      	movs	r3, #0
 800b01a:	61bb      	str	r3, [r7, #24]
 800b01c:	2300      	movs	r3, #0
 800b01e:	83bb      	strh	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 800b020:	2300      	movs	r3, #0
 800b022:	613b      	str	r3, [r7, #16]
 800b024:	2300      	movs	r3, #0
 800b026:	82bb      	strh	r3, [r7, #20]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800b028:	4b14      	ldr	r3, [pc, #80]	; (800b07c <SysTimeGet+0x6c>)
 800b02a:	691b      	ldr	r3, [r3, #16]
 800b02c:	f107 0218 	add.w	r2, r7, #24
 800b030:	3204      	adds	r2, #4
 800b032:	4610      	mov	r0, r2
 800b034:	4798      	blx	r3
 800b036:	4603      	mov	r3, r0
 800b038:	61bb      	str	r3, [r7, #24]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 800b03a:	4b10      	ldr	r3, [pc, #64]	; (800b07c <SysTimeGet+0x6c>)
 800b03c:	68db      	ldr	r3, [r3, #12]
 800b03e:	4798      	blx	r3
 800b040:	4603      	mov	r3, r0
 800b042:	b21b      	sxth	r3, r3
 800b044:	81bb      	strh	r3, [r7, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 800b046:	4b0d      	ldr	r3, [pc, #52]	; (800b07c <SysTimeGet+0x6c>)
 800b048:	685b      	ldr	r3, [r3, #4]
 800b04a:	4798      	blx	r3
 800b04c:	4603      	mov	r3, r0
 800b04e:	60bb      	str	r3, [r7, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 800b050:	f107 0010 	add.w	r0, r7, #16
 800b054:	69fb      	ldr	r3, [r7, #28]
 800b056:	9300      	str	r3, [sp, #0]
 800b058:	69bb      	ldr	r3, [r7, #24]
 800b05a:	f107 0208 	add.w	r2, r7, #8
 800b05e:	ca06      	ldmia	r2, {r1, r2}
 800b060:	f7ff ff9c 	bl	800af9c <SysTimeAdd>

  return sysTime;
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	461a      	mov	r2, r3
 800b068:	f107 0310 	add.w	r3, r7, #16
 800b06c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b070:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800b074:	6878      	ldr	r0, [r7, #4]
 800b076:	3720      	adds	r7, #32
 800b078:	46bd      	mov	sp, r7
 800b07a:	bd80      	pop	{r7, pc}
 800b07c:	0800c714 	.word	0x0800c714

0800b080 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 800b080:	b480      	push	{r7}
 800b082:	b085      	sub	sp, #20
 800b084:	af00      	add	r7, sp, #0
 800b086:	6078      	str	r0, [r7, #4]
  int i = 0;
 800b088:	2300      	movs	r3, #0
 800b08a:	60fb      	str	r3, [r7, #12]
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 800b08c:	e00e      	b.n	800b0ac <ee_skip_atoi+0x2c>
 800b08e:	68fa      	ldr	r2, [r7, #12]
 800b090:	4613      	mov	r3, r2
 800b092:	009b      	lsls	r3, r3, #2
 800b094:	4413      	add	r3, r2
 800b096:	005b      	lsls	r3, r3, #1
 800b098:	4618      	mov	r0, r3
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	1c59      	adds	r1, r3, #1
 800b0a0:	687a      	ldr	r2, [r7, #4]
 800b0a2:	6011      	str	r1, [r2, #0]
 800b0a4:	781b      	ldrb	r3, [r3, #0]
 800b0a6:	4403      	add	r3, r0
 800b0a8:	3b30      	subs	r3, #48	; 0x30
 800b0aa:	60fb      	str	r3, [r7, #12]
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	781b      	ldrb	r3, [r3, #0]
 800b0b2:	2b2f      	cmp	r3, #47	; 0x2f
 800b0b4:	d904      	bls.n	800b0c0 <ee_skip_atoi+0x40>
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	781b      	ldrb	r3, [r3, #0]
 800b0bc:	2b39      	cmp	r3, #57	; 0x39
 800b0be:	d9e6      	bls.n	800b08e <ee_skip_atoi+0xe>
  return i;
 800b0c0:	68fb      	ldr	r3, [r7, #12]
}
 800b0c2:	4618      	mov	r0, r3
 800b0c4:	3714      	adds	r7, #20
 800b0c6:	46bd      	mov	sp, r7
 800b0c8:	bc80      	pop	{r7}
 800b0ca:	4770      	bx	lr

0800b0cc <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 800b0cc:	b480      	push	{r7}
 800b0ce:	b099      	sub	sp, #100	; 0x64
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	60f8      	str	r0, [r7, #12]
 800b0d4:	60b9      	str	r1, [r7, #8]
 800b0d6:	607a      	str	r2, [r7, #4]
 800b0d8:	603b      	str	r3, [r7, #0]
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
 800b0da:	4b71      	ldr	r3, [pc, #452]	; (800b2a0 <ee_number+0x1d4>)
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	65bb      	str	r3, [r7, #88]	; 0x58
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 800b0e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b0e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d002      	beq.n	800b0f0 <ee_number+0x24>
 800b0ea:	4b6e      	ldr	r3, [pc, #440]	; (800b2a4 <ee_number+0x1d8>)
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	65bb      	str	r3, [r7, #88]	; 0x58
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 800b0f0:	683b      	ldr	r3, [r7, #0]
 800b0f2:	2b01      	cmp	r3, #1
 800b0f4:	dd02      	ble.n	800b0fc <ee_number+0x30>
 800b0f6:	683b      	ldr	r3, [r7, #0]
 800b0f8:	2b24      	cmp	r3, #36	; 0x24
 800b0fa:	dd01      	ble.n	800b100 <ee_number+0x34>
 800b0fc:	2300      	movs	r3, #0
 800b0fe:	e0ca      	b.n	800b296 <ee_number+0x1ca>

  c = (type & ZEROPAD) ? '0' : ' ';
 800b100:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b102:	f003 0301 	and.w	r3, r3, #1
 800b106:	2b00      	cmp	r3, #0
 800b108:	d001      	beq.n	800b10e <ee_number+0x42>
 800b10a:	2330      	movs	r3, #48	; 0x30
 800b10c:	e000      	b.n	800b110 <ee_number+0x44>
 800b10e:	2320      	movs	r3, #32
 800b110:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  sign = 0;
 800b114:	2300      	movs	r3, #0
 800b116:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  if (type & SIGN)
 800b11a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b11c:	f003 0302 	and.w	r3, r3, #2
 800b120:	2b00      	cmp	r3, #0
 800b122:	d00b      	beq.n	800b13c <ee_number+0x70>
  {
    if (num < 0)
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	2b00      	cmp	r3, #0
 800b128:	da08      	bge.n	800b13c <ee_number+0x70>
    {
      sign = '-';
 800b12a:	232d      	movs	r3, #45	; 0x2d
 800b12c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      num = -num;
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	425b      	negs	r3, r3
 800b134:	607b      	str	r3, [r7, #4]
      size--;
 800b136:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b138:	3b01      	subs	r3, #1
 800b13a:	66bb      	str	r3, [r7, #104]	; 0x68
    else if (base == 8)
      size--;
  }
#endif

  i = 0;
 800b13c:	2300      	movs	r3, #0
 800b13e:	657b      	str	r3, [r7, #84]	; 0x54

  if (num == 0)
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	2b00      	cmp	r3, #0
 800b144:	d11e      	bne.n	800b184 <ee_number+0xb8>
    tmp[i++] = '0';
 800b146:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b148:	1c5a      	adds	r2, r3, #1
 800b14a:	657a      	str	r2, [r7, #84]	; 0x54
 800b14c:	3360      	adds	r3, #96	; 0x60
 800b14e:	443b      	add	r3, r7
 800b150:	2230      	movs	r2, #48	; 0x30
 800b152:	f803 2c50 	strb.w	r2, [r3, #-80]
 800b156:	e018      	b.n	800b18a <ee_number+0xbe>
  else
  {
    while (num != 0)
    {
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	683a      	ldr	r2, [r7, #0]
 800b15c:	fbb3 f1f2 	udiv	r1, r3, r2
 800b160:	fb01 f202 	mul.w	r2, r1, r2
 800b164:	1a9b      	subs	r3, r3, r2
 800b166:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b168:	441a      	add	r2, r3
 800b16a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b16c:	1c59      	adds	r1, r3, #1
 800b16e:	6579      	str	r1, [r7, #84]	; 0x54
 800b170:	7812      	ldrb	r2, [r2, #0]
 800b172:	3360      	adds	r3, #96	; 0x60
 800b174:	443b      	add	r3, r7
 800b176:	f803 2c50 	strb.w	r2, [r3, #-80]
      num = ((unsigned long) num) / (unsigned) base;
 800b17a:	687a      	ldr	r2, [r7, #4]
 800b17c:	683b      	ldr	r3, [r7, #0]
 800b17e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b182:	607b      	str	r3, [r7, #4]
    while (num != 0)
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	2b00      	cmp	r3, #0
 800b188:	d1e6      	bne.n	800b158 <ee_number+0x8c>
    }
  }

  if (i > precision) precision = i;
 800b18a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b18c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b18e:	429a      	cmp	r2, r3
 800b190:	dd01      	ble.n	800b196 <ee_number+0xca>
 800b192:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b194:	66fb      	str	r3, [r7, #108]	; 0x6c
  size -= precision;
 800b196:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b198:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b19a:	1ad3      	subs	r3, r2, r3
 800b19c:	66bb      	str	r3, [r7, #104]	; 0x68
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 800b19e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b1a0:	f003 0301 	and.w	r3, r3, #1
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d112      	bne.n	800b1ce <ee_number+0x102>
 800b1a8:	e00c      	b.n	800b1c4 <ee_number+0xf8>
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	1c5a      	adds	r2, r3, #1
 800b1ae:	60fa      	str	r2, [r7, #12]
 800b1b0:	2220      	movs	r2, #32
 800b1b2:	701a      	strb	r2, [r3, #0]
 800b1b4:	68bb      	ldr	r3, [r7, #8]
 800b1b6:	3b01      	subs	r3, #1
 800b1b8:	60bb      	str	r3, [r7, #8]
 800b1ba:	68bb      	ldr	r3, [r7, #8]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d101      	bne.n	800b1c4 <ee_number+0xf8>
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	e068      	b.n	800b296 <ee_number+0x1ca>
 800b1c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b1c6:	1e5a      	subs	r2, r3, #1
 800b1c8:	66ba      	str	r2, [r7, #104]	; 0x68
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	dced      	bgt.n	800b1aa <ee_number+0xde>
  if (sign) ASSIGN_STR(sign);
 800b1ce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d01b      	beq.n	800b20e <ee_number+0x142>
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	1c5a      	adds	r2, r3, #1
 800b1da:	60fa      	str	r2, [r7, #12]
 800b1dc:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800b1e0:	701a      	strb	r2, [r3, #0]
 800b1e2:	68bb      	ldr	r3, [r7, #8]
 800b1e4:	3b01      	subs	r3, #1
 800b1e6:	60bb      	str	r3, [r7, #8]
 800b1e8:	68bb      	ldr	r3, [r7, #8]
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d10f      	bne.n	800b20e <ee_number+0x142>
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	e051      	b.n	800b296 <ee_number+0x1ca>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	1c5a      	adds	r2, r3, #1
 800b1f6:	60fa      	str	r2, [r7, #12]
 800b1f8:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 800b1fc:	701a      	strb	r2, [r3, #0]
 800b1fe:	68bb      	ldr	r3, [r7, #8]
 800b200:	3b01      	subs	r3, #1
 800b202:	60bb      	str	r3, [r7, #8]
 800b204:	68bb      	ldr	r3, [r7, #8]
 800b206:	2b00      	cmp	r3, #0
 800b208:	d101      	bne.n	800b20e <ee_number+0x142>
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	e043      	b.n	800b296 <ee_number+0x1ca>
 800b20e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b210:	1e5a      	subs	r2, r3, #1
 800b212:	66ba      	str	r2, [r7, #104]	; 0x68
 800b214:	2b00      	cmp	r3, #0
 800b216:	dcec      	bgt.n	800b1f2 <ee_number+0x126>
#else
  if (!(type & LEFT)) while (size-- > 0) ASSIGN_STR(c);
#endif
  while (i < precision--) ASSIGN_STR('0');
 800b218:	e00c      	b.n	800b234 <ee_number+0x168>
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	1c5a      	adds	r2, r3, #1
 800b21e:	60fa      	str	r2, [r7, #12]
 800b220:	2230      	movs	r2, #48	; 0x30
 800b222:	701a      	strb	r2, [r3, #0]
 800b224:	68bb      	ldr	r3, [r7, #8]
 800b226:	3b01      	subs	r3, #1
 800b228:	60bb      	str	r3, [r7, #8]
 800b22a:	68bb      	ldr	r3, [r7, #8]
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d101      	bne.n	800b234 <ee_number+0x168>
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	e030      	b.n	800b296 <ee_number+0x1ca>
 800b234:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b236:	1e5a      	subs	r2, r3, #1
 800b238:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b23a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b23c:	429a      	cmp	r2, r3
 800b23e:	dbec      	blt.n	800b21a <ee_number+0x14e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 800b240:	e010      	b.n	800b264 <ee_number+0x198>
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	1c5a      	adds	r2, r3, #1
 800b246:	60fa      	str	r2, [r7, #12]
 800b248:	f107 0110 	add.w	r1, r7, #16
 800b24c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b24e:	440a      	add	r2, r1
 800b250:	7812      	ldrb	r2, [r2, #0]
 800b252:	701a      	strb	r2, [r3, #0]
 800b254:	68bb      	ldr	r3, [r7, #8]
 800b256:	3b01      	subs	r3, #1
 800b258:	60bb      	str	r3, [r7, #8]
 800b25a:	68bb      	ldr	r3, [r7, #8]
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d101      	bne.n	800b264 <ee_number+0x198>
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	e018      	b.n	800b296 <ee_number+0x1ca>
 800b264:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b266:	1e5a      	subs	r2, r3, #1
 800b268:	657a      	str	r2, [r7, #84]	; 0x54
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	dce9      	bgt.n	800b242 <ee_number+0x176>
  while (size-- > 0) ASSIGN_STR(' ');
 800b26e:	e00c      	b.n	800b28a <ee_number+0x1be>
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	1c5a      	adds	r2, r3, #1
 800b274:	60fa      	str	r2, [r7, #12]
 800b276:	2220      	movs	r2, #32
 800b278:	701a      	strb	r2, [r3, #0]
 800b27a:	68bb      	ldr	r3, [r7, #8]
 800b27c:	3b01      	subs	r3, #1
 800b27e:	60bb      	str	r3, [r7, #8]
 800b280:	68bb      	ldr	r3, [r7, #8]
 800b282:	2b00      	cmp	r3, #0
 800b284:	d101      	bne.n	800b28a <ee_number+0x1be>
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	e005      	b.n	800b296 <ee_number+0x1ca>
 800b28a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b28c:	1e5a      	subs	r2, r3, #1
 800b28e:	66ba      	str	r2, [r7, #104]	; 0x68
 800b290:	2b00      	cmp	r3, #0
 800b292:	dced      	bgt.n	800b270 <ee_number+0x1a4>

  return str;
 800b294:	68fb      	ldr	r3, [r7, #12]
}
 800b296:	4618      	mov	r0, r3
 800b298:	3764      	adds	r7, #100	; 0x64
 800b29a:	46bd      	mov	sp, r7
 800b29c:	bc80      	pop	{r7}
 800b29e:	4770      	bx	lr
 800b2a0:	2000000c 	.word	0x2000000c
 800b2a4:	20000010 	.word	0x20000010

0800b2a8 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 800b2a8:	b580      	push	{r7, lr}
 800b2aa:	b092      	sub	sp, #72	; 0x48
 800b2ac:	af04      	add	r7, sp, #16
 800b2ae:	60f8      	str	r0, [r7, #12]
 800b2b0:	60b9      	str	r1, [r7, #8]
 800b2b2:	607a      	str	r2, [r7, #4]
 800b2b4:	603b      	str	r3, [r7, #0]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 800b2b6:	68bb      	ldr	r3, [r7, #8]
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	dc01      	bgt.n	800b2c0 <tiny_vsnprintf_like+0x18>
  {
    return 0;
 800b2bc:	2300      	movs	r3, #0
 800b2be:	e13e      	b.n	800b53e <tiny_vsnprintf_like+0x296>
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b2c4:	e128      	b.n	800b518 <tiny_vsnprintf_like+0x270>
  {
    CHECK_STR_SIZE(buf, str, size);
 800b2c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	1ad2      	subs	r2, r2, r3
 800b2cc:	68bb      	ldr	r3, [r7, #8]
 800b2ce:	3b01      	subs	r3, #1
 800b2d0:	429a      	cmp	r2, r3
 800b2d2:	f280 812e 	bge.w	800b532 <tiny_vsnprintf_like+0x28a>

    if (*fmt != '%')
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	781b      	ldrb	r3, [r3, #0]
 800b2da:	2b25      	cmp	r3, #37	; 0x25
 800b2dc:	d006      	beq.n	800b2ec <tiny_vsnprintf_like+0x44>
    {
      *str++ = *fmt;
 800b2de:	687a      	ldr	r2, [r7, #4]
 800b2e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2e2:	1c59      	adds	r1, r3, #1
 800b2e4:	62f9      	str	r1, [r7, #44]	; 0x2c
 800b2e6:	7812      	ldrb	r2, [r2, #0]
 800b2e8:	701a      	strb	r2, [r3, #0]
      continue;
 800b2ea:	e112      	b.n	800b512 <tiny_vsnprintf_like+0x26a>
    }

    // Process flags
    flags = 0;
 800b2ec:	2300      	movs	r3, #0
 800b2ee:	623b      	str	r3, [r7, #32]
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	3301      	adds	r3, #1
 800b2f4:	607b      	str	r3, [r7, #4]
    if (*fmt == '0')
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	781b      	ldrb	r3, [r3, #0]
 800b2fa:	2b30      	cmp	r3, #48	; 0x30
 800b2fc:	d103      	bne.n	800b306 <tiny_vsnprintf_like+0x5e>
    {
      flags |= ZEROPAD;
 800b2fe:	6a3b      	ldr	r3, [r7, #32]
 800b300:	f043 0301 	orr.w	r3, r3, #1
 800b304:	623b      	str	r3, [r7, #32]
      case '0': flags |= ZEROPAD; goto repeat;
    }
#endif

    // Get field width
    field_width = -1;
 800b306:	f04f 33ff 	mov.w	r3, #4294967295
 800b30a:	61fb      	str	r3, [r7, #28]
    if (is_digit(*fmt))
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	781b      	ldrb	r3, [r3, #0]
 800b310:	2b2f      	cmp	r3, #47	; 0x2f
 800b312:	d908      	bls.n	800b326 <tiny_vsnprintf_like+0x7e>
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	781b      	ldrb	r3, [r3, #0]
 800b318:	2b39      	cmp	r3, #57	; 0x39
 800b31a:	d804      	bhi.n	800b326 <tiny_vsnprintf_like+0x7e>
      field_width = ee_skip_atoi(&fmt);
 800b31c:	1d3b      	adds	r3, r7, #4
 800b31e:	4618      	mov	r0, r3
 800b320:	f7ff feae 	bl	800b080 <ee_skip_atoi>
 800b324:	61f8      	str	r0, [r7, #28]
      }
    }
#endif

    // Get the precision
    precision = -1;
 800b326:	f04f 33ff 	mov.w	r3, #4294967295
 800b32a:	61bb      	str	r3, [r7, #24]
      if (precision < 0) precision = 0;
    }
#endif

    // Get the conversion qualifier
    qualifier = -1;
 800b32c:	f04f 33ff 	mov.w	r3, #4294967295
 800b330:	617b      	str	r3, [r7, #20]
      fmt++;
    }
#endif

    // Default base
    base = 10;
 800b332:	230a      	movs	r3, #10
 800b334:	633b      	str	r3, [r7, #48]	; 0x30

    switch (*fmt)
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	781b      	ldrb	r3, [r3, #0]
 800b33a:	3b58      	subs	r3, #88	; 0x58
 800b33c:	2b20      	cmp	r3, #32
 800b33e:	f200 8094 	bhi.w	800b46a <tiny_vsnprintf_like+0x1c2>
 800b342:	a201      	add	r2, pc, #4	; (adr r2, 800b348 <tiny_vsnprintf_like+0xa0>)
 800b344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b348:	0800b453 	.word	0x0800b453
 800b34c:	0800b46b 	.word	0x0800b46b
 800b350:	0800b46b 	.word	0x0800b46b
 800b354:	0800b46b 	.word	0x0800b46b
 800b358:	0800b46b 	.word	0x0800b46b
 800b35c:	0800b46b 	.word	0x0800b46b
 800b360:	0800b46b 	.word	0x0800b46b
 800b364:	0800b46b 	.word	0x0800b46b
 800b368:	0800b46b 	.word	0x0800b46b
 800b36c:	0800b46b 	.word	0x0800b46b
 800b370:	0800b46b 	.word	0x0800b46b
 800b374:	0800b3d7 	.word	0x0800b3d7
 800b378:	0800b461 	.word	0x0800b461
 800b37c:	0800b46b 	.word	0x0800b46b
 800b380:	0800b46b 	.word	0x0800b46b
 800b384:	0800b46b 	.word	0x0800b46b
 800b388:	0800b46b 	.word	0x0800b46b
 800b38c:	0800b461 	.word	0x0800b461
 800b390:	0800b46b 	.word	0x0800b46b
 800b394:	0800b46b 	.word	0x0800b46b
 800b398:	0800b46b 	.word	0x0800b46b
 800b39c:	0800b46b 	.word	0x0800b46b
 800b3a0:	0800b46b 	.word	0x0800b46b
 800b3a4:	0800b46b 	.word	0x0800b46b
 800b3a8:	0800b46b 	.word	0x0800b46b
 800b3ac:	0800b46b 	.word	0x0800b46b
 800b3b0:	0800b46b 	.word	0x0800b46b
 800b3b4:	0800b3f7 	.word	0x0800b3f7
 800b3b8:	0800b46b 	.word	0x0800b46b
 800b3bc:	0800b4b7 	.word	0x0800b4b7
 800b3c0:	0800b46b 	.word	0x0800b46b
 800b3c4:	0800b46b 	.word	0x0800b46b
 800b3c8:	0800b45b 	.word	0x0800b45b
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 800b3cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3ce:	1c5a      	adds	r2, r3, #1
 800b3d0:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b3d2:	2220      	movs	r2, #32
 800b3d4:	701a      	strb	r2, [r3, #0]
 800b3d6:	69fb      	ldr	r3, [r7, #28]
 800b3d8:	3b01      	subs	r3, #1
 800b3da:	61fb      	str	r3, [r7, #28]
 800b3dc:	69fb      	ldr	r3, [r7, #28]
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	dcf4      	bgt.n	800b3cc <tiny_vsnprintf_like+0x124>
        *str++ = (unsigned char) va_arg(args, int);
 800b3e2:	683b      	ldr	r3, [r7, #0]
 800b3e4:	1d1a      	adds	r2, r3, #4
 800b3e6:	603a      	str	r2, [r7, #0]
 800b3e8:	6819      	ldr	r1, [r3, #0]
 800b3ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3ec:	1c5a      	adds	r2, r3, #1
 800b3ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b3f0:	b2ca      	uxtb	r2, r1
 800b3f2:	701a      	strb	r2, [r3, #0]
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 800b3f4:	e08d      	b.n	800b512 <tiny_vsnprintf_like+0x26a>

      case 's':
        s = va_arg(args, char *);
 800b3f6:	683b      	ldr	r3, [r7, #0]
 800b3f8:	1d1a      	adds	r2, r3, #4
 800b3fa:	603a      	str	r2, [r7, #0]
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	627b      	str	r3, [r7, #36]	; 0x24
        if (!s) s = "<NULL>";
 800b400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b402:	2b00      	cmp	r3, #0
 800b404:	d101      	bne.n	800b40a <tiny_vsnprintf_like+0x162>
 800b406:	4b50      	ldr	r3, [pc, #320]	; (800b548 <tiny_vsnprintf_like+0x2a0>)
 800b408:	627b      	str	r3, [r7, #36]	; 0x24
#ifdef TINY_PRINTF
        len = strlen(s);
 800b40a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b40c:	f7f4 feb4 	bl	8000178 <strlen>
 800b410:	4603      	mov	r3, r0
 800b412:	613b      	str	r3, [r7, #16]
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 800b414:	e004      	b.n	800b420 <tiny_vsnprintf_like+0x178>
 800b416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b418:	1c5a      	adds	r2, r3, #1
 800b41a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b41c:	2220      	movs	r2, #32
 800b41e:	701a      	strb	r2, [r3, #0]
 800b420:	69fb      	ldr	r3, [r7, #28]
 800b422:	1e5a      	subs	r2, r3, #1
 800b424:	61fa      	str	r2, [r7, #28]
 800b426:	693a      	ldr	r2, [r7, #16]
 800b428:	429a      	cmp	r2, r3
 800b42a:	dbf4      	blt.n	800b416 <tiny_vsnprintf_like+0x16e>
        for (i = 0; i < len; ++i) *str++ = *s++;
 800b42c:	2300      	movs	r3, #0
 800b42e:	62bb      	str	r3, [r7, #40]	; 0x28
 800b430:	e00a      	b.n	800b448 <tiny_vsnprintf_like+0x1a0>
 800b432:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b434:	1c53      	adds	r3, r2, #1
 800b436:	627b      	str	r3, [r7, #36]	; 0x24
 800b438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b43a:	1c59      	adds	r1, r3, #1
 800b43c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800b43e:	7812      	ldrb	r2, [r2, #0]
 800b440:	701a      	strb	r2, [r3, #0]
 800b442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b444:	3301      	adds	r3, #1
 800b446:	62bb      	str	r3, [r7, #40]	; 0x28
 800b448:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b44a:	693b      	ldr	r3, [r7, #16]
 800b44c:	429a      	cmp	r2, r3
 800b44e:	dbf0      	blt.n	800b432 <tiny_vsnprintf_like+0x18a>
#ifdef TINY_PRINTF
#else
        while (len < field_width--) *str++ = ' ';
#endif
        continue;
 800b450:	e05f      	b.n	800b512 <tiny_vsnprintf_like+0x26a>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 800b452:	6a3b      	ldr	r3, [r7, #32]
 800b454:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b458:	623b      	str	r3, [r7, #32]

      case 'x':
        base = 16;
 800b45a:	2310      	movs	r3, #16
 800b45c:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 800b45e:	e02b      	b.n	800b4b8 <tiny_vsnprintf_like+0x210>

      case 'd':
      case 'i':
        flags |= SIGN;
 800b460:	6a3b      	ldr	r3, [r7, #32]
 800b462:	f043 0302 	orr.w	r3, r3, #2
 800b466:	623b      	str	r3, [r7, #32]

      case 'u':
        break;
 800b468:	e025      	b.n	800b4b6 <tiny_vsnprintf_like+0x20e>
        continue;

#endif

      default:
        if (*fmt != '%') *str++ = '%';
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	781b      	ldrb	r3, [r3, #0]
 800b46e:	2b25      	cmp	r3, #37	; 0x25
 800b470:	d004      	beq.n	800b47c <tiny_vsnprintf_like+0x1d4>
 800b472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b474:	1c5a      	adds	r2, r3, #1
 800b476:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b478:	2225      	movs	r2, #37	; 0x25
 800b47a:	701a      	strb	r2, [r3, #0]
        CHECK_STR_SIZE(buf, str, size);
 800b47c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	1ad2      	subs	r2, r2, r3
 800b482:	68bb      	ldr	r3, [r7, #8]
 800b484:	3b01      	subs	r3, #1
 800b486:	429a      	cmp	r2, r3
 800b488:	da16      	bge.n	800b4b8 <tiny_vsnprintf_like+0x210>
        if (*fmt)
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	781b      	ldrb	r3, [r3, #0]
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d006      	beq.n	800b4a0 <tiny_vsnprintf_like+0x1f8>
          *str++ = *fmt;
 800b492:	687a      	ldr	r2, [r7, #4]
 800b494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b496:	1c59      	adds	r1, r3, #1
 800b498:	62f9      	str	r1, [r7, #44]	; 0x2c
 800b49a:	7812      	ldrb	r2, [r2, #0]
 800b49c:	701a      	strb	r2, [r3, #0]
 800b49e:	e002      	b.n	800b4a6 <tiny_vsnprintf_like+0x1fe>
        else
          --fmt;
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	3b01      	subs	r3, #1
 800b4a4:	607b      	str	r3, [r7, #4]
        CHECK_STR_SIZE(buf, str, size);
 800b4a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	1ad2      	subs	r2, r2, r3
 800b4ac:	68bb      	ldr	r3, [r7, #8]
 800b4ae:	3b01      	subs	r3, #1
 800b4b0:	429a      	cmp	r2, r3
 800b4b2:	db2d      	blt.n	800b510 <tiny_vsnprintf_like+0x268>
 800b4b4:	e000      	b.n	800b4b8 <tiny_vsnprintf_like+0x210>
        break;
 800b4b6:	bf00      	nop
        continue;
    }

    if (qualifier == 'l')
 800b4b8:	697b      	ldr	r3, [r7, #20]
 800b4ba:	2b6c      	cmp	r3, #108	; 0x6c
 800b4bc:	d105      	bne.n	800b4ca <tiny_vsnprintf_like+0x222>
      num = va_arg(args, unsigned long);
 800b4be:	683b      	ldr	r3, [r7, #0]
 800b4c0:	1d1a      	adds	r2, r3, #4
 800b4c2:	603a      	str	r2, [r7, #0]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	637b      	str	r3, [r7, #52]	; 0x34
 800b4c8:	e00f      	b.n	800b4ea <tiny_vsnprintf_like+0x242>
    else if (flags & SIGN)
 800b4ca:	6a3b      	ldr	r3, [r7, #32]
 800b4cc:	f003 0302 	and.w	r3, r3, #2
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d005      	beq.n	800b4e0 <tiny_vsnprintf_like+0x238>
      num = va_arg(args, int);
 800b4d4:	683b      	ldr	r3, [r7, #0]
 800b4d6:	1d1a      	adds	r2, r3, #4
 800b4d8:	603a      	str	r2, [r7, #0]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	637b      	str	r3, [r7, #52]	; 0x34
 800b4de:	e004      	b.n	800b4ea <tiny_vsnprintf_like+0x242>
    else
      num = va_arg(args, unsigned int);
 800b4e0:	683b      	ldr	r3, [r7, #0]
 800b4e2:	1d1a      	adds	r2, r3, #4
 800b4e4:	603a      	str	r2, [r7, #0]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	637b      	str	r3, [r7, #52]	; 0x34

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 800b4ea:	68bb      	ldr	r3, [r7, #8]
 800b4ec:	1e5a      	subs	r2, r3, #1
 800b4ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	1acb      	subs	r3, r1, r3
 800b4f4:	1ad1      	subs	r1, r2, r3
 800b4f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b4f8:	6a3b      	ldr	r3, [r7, #32]
 800b4fa:	9302      	str	r3, [sp, #8]
 800b4fc:	69bb      	ldr	r3, [r7, #24]
 800b4fe:	9301      	str	r3, [sp, #4]
 800b500:	69fb      	ldr	r3, [r7, #28]
 800b502:	9300      	str	r3, [sp, #0]
 800b504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b506:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b508:	f7ff fde0 	bl	800b0cc <ee_number>
 800b50c:	62f8      	str	r0, [r7, #44]	; 0x2c
 800b50e:	e000      	b.n	800b512 <tiny_vsnprintf_like+0x26a>
        continue;
 800b510:	bf00      	nop
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	3301      	adds	r3, #1
 800b516:	607b      	str	r3, [r7, #4]
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	781b      	ldrb	r3, [r3, #0]
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	f47f aed2 	bne.w	800b2c6 <tiny_vsnprintf_like+0x1e>
 800b522:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	1ad2      	subs	r2, r2, r3
 800b528:	68bb      	ldr	r3, [r7, #8]
 800b52a:	3b01      	subs	r3, #1
 800b52c:	429a      	cmp	r2, r3
 800b52e:	f6bf aeca 	bge.w	800b2c6 <tiny_vsnprintf_like+0x1e>
  }

  *str = '\0';
 800b532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b534:	2200      	movs	r2, #0
 800b536:	701a      	strb	r2, [r3, #0]
  return str - buf;
 800b538:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	1ad3      	subs	r3, r2, r3
}
 800b53e:	4618      	mov	r0, r3
 800b540:	3738      	adds	r7, #56	; 0x38
 800b542:	46bd      	mov	sp, r7
 800b544:	bd80      	pop	{r7, pc}
 800b546:	bf00      	nop
 800b548:	0800c628 	.word	0x0800c628

0800b54c <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800b54c:	b580      	push	{r7, lr}
 800b54e:	b090      	sub	sp, #64	; 0x40
 800b550:	af00      	add	r7, sp, #0
 800b552:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800b554:	4b73      	ldr	r3, [pc, #460]	; (800b724 <UTIL_SEQ_Run+0x1d8>)
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 800b55a:	4b72      	ldr	r3, [pc, #456]	; (800b724 <UTIL_SEQ_Run+0x1d8>)
 800b55c:	681a      	ldr	r2, [r3, #0]
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	4013      	ands	r3, r2
 800b562:	4a70      	ldr	r2, [pc, #448]	; (800b724 <UTIL_SEQ_Run+0x1d8>)
 800b564:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 800b566:	4b70      	ldr	r3, [pc, #448]	; (800b728 <UTIL_SEQ_Run+0x1dc>)
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800b56c:	4b6f      	ldr	r3, [pc, #444]	; (800b72c <UTIL_SEQ_Run+0x1e0>)
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800b572:	4b6f      	ldr	r3, [pc, #444]	; (800b730 <UTIL_SEQ_Run+0x1e4>)
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 800b578:	4b6e      	ldr	r3, [pc, #440]	; (800b734 <UTIL_SEQ_Run+0x1e8>)
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800b57e:	e08d      	b.n	800b69c <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 800b580:	2300      	movs	r3, #0
 800b582:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800b584:	e002      	b.n	800b58c <UTIL_SEQ_Run+0x40>
    {
      counter++;
 800b586:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b588:	3301      	adds	r3, #1
 800b58a:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800b58c:	4a6a      	ldr	r2, [pc, #424]	; (800b738 <UTIL_SEQ_Run+0x1ec>)
 800b58e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b590:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800b594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b596:	401a      	ands	r2, r3
 800b598:	4b62      	ldr	r3, [pc, #392]	; (800b724 <UTIL_SEQ_Run+0x1d8>)
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	4013      	ands	r3, r2
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d0f1      	beq.n	800b586 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 800b5a2:	4a65      	ldr	r2, [pc, #404]	; (800b738 <UTIL_SEQ_Run+0x1ec>)
 800b5a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b5a6:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800b5aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5ac:	401a      	ands	r2, r3
 800b5ae:	4b5d      	ldr	r3, [pc, #372]	; (800b724 <UTIL_SEQ_Run+0x1d8>)
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	4013      	ands	r3, r2
 800b5b4:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800b5b6:	4a60      	ldr	r2, [pc, #384]	; (800b738 <UTIL_SEQ_Run+0x1ec>)
 800b5b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b5ba:	00db      	lsls	r3, r3, #3
 800b5bc:	4413      	add	r3, r2
 800b5be:	685a      	ldr	r2, [r3, #4]
 800b5c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5c2:	4013      	ands	r3, r2
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d106      	bne.n	800b5d6 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800b5c8:	4a5b      	ldr	r2, [pc, #364]	; (800b738 <UTIL_SEQ_Run+0x1ec>)
 800b5ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b5cc:	00db      	lsls	r3, r3, #3
 800b5ce:	4413      	add	r3, r2
 800b5d0:	f04f 32ff 	mov.w	r2, #4294967295
 800b5d4:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800b5d6:	4a58      	ldr	r2, [pc, #352]	; (800b738 <UTIL_SEQ_Run+0x1ec>)
 800b5d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b5da:	00db      	lsls	r3, r3, #3
 800b5dc:	4413      	add	r3, r2
 800b5de:	685a      	ldr	r2, [r3, #4]
 800b5e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5e2:	4013      	ands	r3, r2
 800b5e4:	4618      	mov	r0, r3
 800b5e6:	f000 f907 	bl	800b7f8 <SEQ_BitPosition>
 800b5ea:	4603      	mov	r3, r0
 800b5ec:	461a      	mov	r2, r3
 800b5ee:	4b53      	ldr	r3, [pc, #332]	; (800b73c <UTIL_SEQ_Run+0x1f0>)
 800b5f0:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800b5f2:	4a51      	ldr	r2, [pc, #324]	; (800b738 <UTIL_SEQ_Run+0x1ec>)
 800b5f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b5f6:	00db      	lsls	r3, r3, #3
 800b5f8:	4413      	add	r3, r2
 800b5fa:	685a      	ldr	r2, [r3, #4]
 800b5fc:	4b4f      	ldr	r3, [pc, #316]	; (800b73c <UTIL_SEQ_Run+0x1f0>)
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	2101      	movs	r1, #1
 800b602:	fa01 f303 	lsl.w	r3, r1, r3
 800b606:	43db      	mvns	r3, r3
 800b608:	401a      	ands	r2, r3
 800b60a:	494b      	ldr	r1, [pc, #300]	; (800b738 <UTIL_SEQ_Run+0x1ec>)
 800b60c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b60e:	00db      	lsls	r3, r3, #3
 800b610:	440b      	add	r3, r1
 800b612:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b614:	f3ef 8310 	mrs	r3, PRIMASK
 800b618:	61bb      	str	r3, [r7, #24]
  return(result);
 800b61a:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800b61c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800b61e:	b672      	cpsid	i
}
 800b620:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800b622:	4b46      	ldr	r3, [pc, #280]	; (800b73c <UTIL_SEQ_Run+0x1f0>)
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	2201      	movs	r2, #1
 800b628:	fa02 f303 	lsl.w	r3, r2, r3
 800b62c:	43da      	mvns	r2, r3
 800b62e:	4b3e      	ldr	r3, [pc, #248]	; (800b728 <UTIL_SEQ_Run+0x1dc>)
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	4013      	ands	r3, r2
 800b634:	4a3c      	ldr	r2, [pc, #240]	; (800b728 <UTIL_SEQ_Run+0x1dc>)
 800b636:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800b638:	2301      	movs	r3, #1
 800b63a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b63c:	e013      	b.n	800b666 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800b63e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b640:	3b01      	subs	r3, #1
 800b642:	4a3d      	ldr	r2, [pc, #244]	; (800b738 <UTIL_SEQ_Run+0x1ec>)
 800b644:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800b648:	4b3c      	ldr	r3, [pc, #240]	; (800b73c <UTIL_SEQ_Run+0x1f0>)
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	2201      	movs	r2, #1
 800b64e:	fa02 f303 	lsl.w	r3, r2, r3
 800b652:	43da      	mvns	r2, r3
 800b654:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b656:	3b01      	subs	r3, #1
 800b658:	400a      	ands	r2, r1
 800b65a:	4937      	ldr	r1, [pc, #220]	; (800b738 <UTIL_SEQ_Run+0x1ec>)
 800b65c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800b660:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b662:	3b01      	subs	r3, #1
 800b664:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b666:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d1e8      	bne.n	800b63e <UTIL_SEQ_Run+0xf2>
 800b66c:	6a3b      	ldr	r3, [r7, #32]
 800b66e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b670:	697b      	ldr	r3, [r7, #20]
 800b672:	f383 8810 	msr	PRIMASK, r3
}
 800b676:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800b678:	4b30      	ldr	r3, [pc, #192]	; (800b73c <UTIL_SEQ_Run+0x1f0>)
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	4a30      	ldr	r2, [pc, #192]	; (800b740 <UTIL_SEQ_Run+0x1f4>)
 800b67e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b682:	4798      	blx	r3

    local_taskset = TaskSet;
 800b684:	4b28      	ldr	r3, [pc, #160]	; (800b728 <UTIL_SEQ_Run+0x1dc>)
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 800b68a:	4b28      	ldr	r3, [pc, #160]	; (800b72c <UTIL_SEQ_Run+0x1e0>)
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 800b690:	4b27      	ldr	r3, [pc, #156]	; (800b730 <UTIL_SEQ_Run+0x1e4>)
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 800b696:	4b27      	ldr	r3, [pc, #156]	; (800b734 <UTIL_SEQ_Run+0x1e8>)
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800b69c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b69e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6a0:	401a      	ands	r2, r3
 800b6a2:	4b20      	ldr	r3, [pc, #128]	; (800b724 <UTIL_SEQ_Run+0x1d8>)
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	4013      	ands	r3, r2
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d005      	beq.n	800b6b8 <UTIL_SEQ_Run+0x16c>
 800b6ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b6ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6b0:	4013      	ands	r3, r2
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	f43f af64 	beq.w	800b580 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800b6b8:	4b20      	ldr	r3, [pc, #128]	; (800b73c <UTIL_SEQ_Run+0x1f0>)
 800b6ba:	f04f 32ff 	mov.w	r2, #4294967295
 800b6be:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800b6c0:	f000 f88e 	bl	800b7e0 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b6c4:	f3ef 8310 	mrs	r3, PRIMASK
 800b6c8:	613b      	str	r3, [r7, #16]
  return(result);
 800b6ca:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800b6cc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800b6ce:	b672      	cpsid	i
}
 800b6d0:	bf00      	nop
  local_taskset = TaskSet;
 800b6d2:	4b15      	ldr	r3, [pc, #84]	; (800b728 <UTIL_SEQ_Run+0x1dc>)
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800b6d8:	4b14      	ldr	r3, [pc, #80]	; (800b72c <UTIL_SEQ_Run+0x1e0>)
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800b6de:	4b14      	ldr	r3, [pc, #80]	; (800b730 <UTIL_SEQ_Run+0x1e4>)
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 800b6e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b6e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6e8:	401a      	ands	r2, r3
 800b6ea:	4b0e      	ldr	r3, [pc, #56]	; (800b724 <UTIL_SEQ_Run+0x1d8>)
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	4013      	ands	r3, r2
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d107      	bne.n	800b704 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 800b6f4:	4b0f      	ldr	r3, [pc, #60]	; (800b734 <UTIL_SEQ_Run+0x1e8>)
 800b6f6:	681a      	ldr	r2, [r3, #0]
 800b6f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6fa:	4013      	ands	r3, r2
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d101      	bne.n	800b704 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 800b700:	f7f5 f9aa 	bl	8000a58 <UTIL_SEQ_Idle>
 800b704:	69fb      	ldr	r3, [r7, #28]
 800b706:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	f383 8810 	msr	PRIMASK, r3
}
 800b70e:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 800b710:	f000 f86c 	bl	800b7ec <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800b714:	4a03      	ldr	r2, [pc, #12]	; (800b724 <UTIL_SEQ_Run+0x1d8>)
 800b716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b718:	6013      	str	r3, [r2, #0]

  return;
 800b71a:	bf00      	nop
}
 800b71c:	3740      	adds	r7, #64	; 0x40
 800b71e:	46bd      	mov	sp, r7
 800b720:	bd80      	pop	{r7, pc}
 800b722:	bf00      	nop
 800b724:	20000018 	.word	0x20000018
 800b728:	2000056c 	.word	0x2000056c
 800b72c:	20000570 	.word	0x20000570
 800b730:	20000014 	.word	0x20000014
 800b734:	20000574 	.word	0x20000574
 800b738:	20000580 	.word	0x20000580
 800b73c:	20000578 	.word	0x20000578
 800b740:	2000057c 	.word	0x2000057c

0800b744 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800b744:	b580      	push	{r7, lr}
 800b746:	b088      	sub	sp, #32
 800b748:	af00      	add	r7, sp, #0
 800b74a:	60f8      	str	r0, [r7, #12]
 800b74c:	60b9      	str	r1, [r7, #8]
 800b74e:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b750:	f3ef 8310 	mrs	r3, PRIMASK
 800b754:	617b      	str	r3, [r7, #20]
  return(result);
 800b756:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800b758:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800b75a:	b672      	cpsid	i
}
 800b75c:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800b75e:	68f8      	ldr	r0, [r7, #12]
 800b760:	f000 f84a 	bl	800b7f8 <SEQ_BitPosition>
 800b764:	4603      	mov	r3, r0
 800b766:	4619      	mov	r1, r3
 800b768:	4a06      	ldr	r2, [pc, #24]	; (800b784 <UTIL_SEQ_RegTask+0x40>)
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800b770:	69fb      	ldr	r3, [r7, #28]
 800b772:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b774:	69bb      	ldr	r3, [r7, #24]
 800b776:	f383 8810 	msr	PRIMASK, r3
}
 800b77a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800b77c:	bf00      	nop
}
 800b77e:	3720      	adds	r7, #32
 800b780:	46bd      	mov	sp, r7
 800b782:	bd80      	pop	{r7, pc}
 800b784:	2000057c 	.word	0x2000057c

0800b788 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800b788:	b480      	push	{r7}
 800b78a:	b087      	sub	sp, #28
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	6078      	str	r0, [r7, #4]
 800b790:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b792:	f3ef 8310 	mrs	r3, PRIMASK
 800b796:	60fb      	str	r3, [r7, #12]
  return(result);
 800b798:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800b79a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b79c:	b672      	cpsid	i
}
 800b79e:	bf00      	nop

  TaskSet |= TaskId_bm;
 800b7a0:	4b0d      	ldr	r3, [pc, #52]	; (800b7d8 <UTIL_SEQ_SetTask+0x50>)
 800b7a2:	681a      	ldr	r2, [r3, #0]
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	4313      	orrs	r3, r2
 800b7a8:	4a0b      	ldr	r2, [pc, #44]	; (800b7d8 <UTIL_SEQ_SetTask+0x50>)
 800b7aa:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800b7ac:	4a0b      	ldr	r2, [pc, #44]	; (800b7dc <UTIL_SEQ_SetTask+0x54>)
 800b7ae:	683b      	ldr	r3, [r7, #0]
 800b7b0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	431a      	orrs	r2, r3
 800b7b8:	4908      	ldr	r1, [pc, #32]	; (800b7dc <UTIL_SEQ_SetTask+0x54>)
 800b7ba:	683b      	ldr	r3, [r7, #0]
 800b7bc:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800b7c0:	697b      	ldr	r3, [r7, #20]
 800b7c2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b7c4:	693b      	ldr	r3, [r7, #16]
 800b7c6:	f383 8810 	msr	PRIMASK, r3
}
 800b7ca:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800b7cc:	bf00      	nop
}
 800b7ce:	371c      	adds	r7, #28
 800b7d0:	46bd      	mov	sp, r7
 800b7d2:	bc80      	pop	{r7}
 800b7d4:	4770      	bx	lr
 800b7d6:	bf00      	nop
 800b7d8:	2000056c 	.word	0x2000056c
 800b7dc:	20000580 	.word	0x20000580

0800b7e0 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800b7e0:	b480      	push	{r7}
 800b7e2:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800b7e4:	bf00      	nop
}
 800b7e6:	46bd      	mov	sp, r7
 800b7e8:	bc80      	pop	{r7}
 800b7ea:	4770      	bx	lr

0800b7ec <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800b7ec:	b480      	push	{r7}
 800b7ee:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800b7f0:	bf00      	nop
}
 800b7f2:	46bd      	mov	sp, r7
 800b7f4:	bc80      	pop	{r7}
 800b7f6:	4770      	bx	lr

0800b7f8 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800b7f8:	b480      	push	{r7}
 800b7fa:	b085      	sub	sp, #20
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 800b800:	2300      	movs	r3, #0
 800b802:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 800b808:	68bb      	ldr	r3, [r7, #8]
 800b80a:	0c1b      	lsrs	r3, r3, #16
 800b80c:	041b      	lsls	r3, r3, #16
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d104      	bne.n	800b81c <SEQ_BitPosition+0x24>
 800b812:	2310      	movs	r3, #16
 800b814:	73fb      	strb	r3, [r7, #15]
 800b816:	68bb      	ldr	r3, [r7, #8]
 800b818:	041b      	lsls	r3, r3, #16
 800b81a:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 800b81c:	68bb      	ldr	r3, [r7, #8]
 800b81e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800b822:	2b00      	cmp	r3, #0
 800b824:	d105      	bne.n	800b832 <SEQ_BitPosition+0x3a>
 800b826:	7bfb      	ldrb	r3, [r7, #15]
 800b828:	3308      	adds	r3, #8
 800b82a:	73fb      	strb	r3, [r7, #15]
 800b82c:	68bb      	ldr	r3, [r7, #8]
 800b82e:	021b      	lsls	r3, r3, #8
 800b830:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 800b832:	68bb      	ldr	r3, [r7, #8]
 800b834:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d105      	bne.n	800b848 <SEQ_BitPosition+0x50>
 800b83c:	7bfb      	ldrb	r3, [r7, #15]
 800b83e:	3304      	adds	r3, #4
 800b840:	73fb      	strb	r3, [r7, #15]
 800b842:	68bb      	ldr	r3, [r7, #8]
 800b844:	011b      	lsls	r3, r3, #4
 800b846:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 800b848:	68bb      	ldr	r3, [r7, #8]
 800b84a:	0f1b      	lsrs	r3, r3, #28
 800b84c:	4a06      	ldr	r2, [pc, #24]	; (800b868 <SEQ_BitPosition+0x70>)
 800b84e:	5cd2      	ldrb	r2, [r2, r3]
 800b850:	7bfb      	ldrb	r3, [r7, #15]
 800b852:	4413      	add	r3, r2
 800b854:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800b856:	7bfb      	ldrb	r3, [r7, #15]
 800b858:	f1c3 031f 	rsb	r3, r3, #31
 800b85c:	b2db      	uxtb	r3, r3
}
 800b85e:	4618      	mov	r0, r3
 800b860:	3714      	adds	r7, #20
 800b862:	46bd      	mov	sp, r7
 800b864:	bc80      	pop	{r7}
 800b866:	4770      	bx	lr
 800b868:	0800c8a0 	.word	0x0800c8a0

0800b86c <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 800b86c:	b580      	push	{r7, lr}
 800b86e:	af00      	add	r7, sp, #0
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 800b870:	4b04      	ldr	r3, [pc, #16]	; (800b884 <UTIL_TIMER_Init+0x18>)
 800b872:	2200      	movs	r2, #0
 800b874:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 800b876:	4b04      	ldr	r3, [pc, #16]	; (800b888 <UTIL_TIMER_Init+0x1c>)
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	4798      	blx	r3
 800b87c:	4603      	mov	r3, r0
}
 800b87e:	4618      	mov	r0, r3
 800b880:	bd80      	pop	{r7, pc}
 800b882:	bf00      	nop
 800b884:	20000588 	.word	0x20000588
 800b888:	0800c6e8 	.word	0x0800c6e8

0800b88c <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 800b88c:	b580      	push	{r7, lr}
 800b88e:	b084      	sub	sp, #16
 800b890:	af00      	add	r7, sp, #0
 800b892:	60f8      	str	r0, [r7, #12]
 800b894:	60b9      	str	r1, [r7, #8]
 800b896:	603b      	str	r3, [r7, #0]
 800b898:	4613      	mov	r3, r2
 800b89a:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d023      	beq.n	800b8ea <UTIL_TIMER_Create+0x5e>
 800b8a2:	683b      	ldr	r3, [r7, #0]
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d020      	beq.n	800b8ea <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	2200      	movs	r2, #0
 800b8ac:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 800b8ae:	4b11      	ldr	r3, [pc, #68]	; (800b8f4 <UTIL_TIMER_Create+0x68>)
 800b8b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8b2:	68b8      	ldr	r0, [r7, #8]
 800b8b4:	4798      	blx	r3
 800b8b6:	4602      	mov	r2, r0
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	2200      	movs	r2, #0
 800b8c0:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	2200      	movs	r2, #0
 800b8c6:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	2200      	movs	r2, #0
 800b8cc:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	683a      	ldr	r2, [r7, #0]
 800b8d2:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	69ba      	ldr	r2, [r7, #24]
 800b8d8:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	79fa      	ldrb	r2, [r7, #7]
 800b8de:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	2200      	movs	r2, #0
 800b8e4:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 800b8e6:	2300      	movs	r3, #0
 800b8e8:	e000      	b.n	800b8ec <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 800b8ea:	2301      	movs	r3, #1
  }
}
 800b8ec:	4618      	mov	r0, r3
 800b8ee:	3710      	adds	r7, #16
 800b8f0:	46bd      	mov	sp, r7
 800b8f2:	bd80      	pop	{r7, pc}
 800b8f4:	0800c6e8 	.word	0x0800c6e8

0800b8f8 <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 800b8f8:	b580      	push	{r7, lr}
 800b8fa:	b08a      	sub	sp, #40	; 0x28
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800b900:	2300      	movs	r3, #0
 800b902:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d056      	beq.n	800b9ba <UTIL_TIMER_Start+0xc2>
 800b90c:	6878      	ldr	r0, [r7, #4]
 800b90e:	f000 f9a9 	bl	800bc64 <TimerExists>
 800b912:	4603      	mov	r3, r0
 800b914:	f083 0301 	eor.w	r3, r3, #1
 800b918:	b2db      	uxtb	r3, r3
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d04d      	beq.n	800b9ba <UTIL_TIMER_Start+0xc2>
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	7a5b      	ldrb	r3, [r3, #9]
 800b922:	2b00      	cmp	r3, #0
 800b924:	d149      	bne.n	800b9ba <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b926:	f3ef 8310 	mrs	r3, PRIMASK
 800b92a:	613b      	str	r3, [r7, #16]
  return(result);
 800b92c:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 800b92e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800b930:	b672      	cpsid	i
}
 800b932:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	685b      	ldr	r3, [r3, #4]
 800b938:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 800b93a:	4b24      	ldr	r3, [pc, #144]	; (800b9cc <UTIL_TIMER_Start+0xd4>)
 800b93c:	6a1b      	ldr	r3, [r3, #32]
 800b93e:	4798      	blx	r3
 800b940:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 800b942:	6a3a      	ldr	r2, [r7, #32]
 800b944:	69bb      	ldr	r3, [r7, #24]
 800b946:	429a      	cmp	r2, r3
 800b948:	d201      	bcs.n	800b94e <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 800b94a:	69bb      	ldr	r3, [r7, #24]
 800b94c:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	6a3a      	ldr	r2, [r7, #32]
 800b952:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	2200      	movs	r2, #0
 800b958:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	2201      	movs	r2, #1
 800b95e:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	2200      	movs	r2, #0
 800b964:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 800b966:	4b1a      	ldr	r3, [pc, #104]	; (800b9d0 <UTIL_TIMER_Start+0xd8>)
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d106      	bne.n	800b97c <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 800b96e:	4b17      	ldr	r3, [pc, #92]	; (800b9cc <UTIL_TIMER_Start+0xd4>)
 800b970:	691b      	ldr	r3, [r3, #16]
 800b972:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 800b974:	6878      	ldr	r0, [r7, #4]
 800b976:	f000 f9eb 	bl	800bd50 <TimerInsertNewHeadTimer>
 800b97a:	e017      	b.n	800b9ac <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 800b97c:	4b13      	ldr	r3, [pc, #76]	; (800b9cc <UTIL_TIMER_Start+0xd4>)
 800b97e:	699b      	ldr	r3, [r3, #24]
 800b980:	4798      	blx	r3
 800b982:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	681a      	ldr	r2, [r3, #0]
 800b988:	697b      	ldr	r3, [r7, #20]
 800b98a:	441a      	add	r2, r3
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	681a      	ldr	r2, [r3, #0]
 800b994:	4b0e      	ldr	r3, [pc, #56]	; (800b9d0 <UTIL_TIMER_Start+0xd8>)
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	429a      	cmp	r2, r3
 800b99c:	d203      	bcs.n	800b9a6 <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 800b99e:	6878      	ldr	r0, [r7, #4]
 800b9a0:	f000 f9d6 	bl	800bd50 <TimerInsertNewHeadTimer>
 800b9a4:	e002      	b.n	800b9ac <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 800b9a6:	6878      	ldr	r0, [r7, #4]
 800b9a8:	f000 f9a2 	bl	800bcf0 <TimerInsertTimer>
 800b9ac:	69fb      	ldr	r3, [r7, #28]
 800b9ae:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	f383 8810 	msr	PRIMASK, r3
}
 800b9b6:	bf00      	nop
  {
 800b9b8:	e002      	b.n	800b9c0 <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 800b9ba:	2301      	movs	r3, #1
 800b9bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 800b9c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800b9c4:	4618      	mov	r0, r3
 800b9c6:	3728      	adds	r7, #40	; 0x28
 800b9c8:	46bd      	mov	sp, r7
 800b9ca:	bd80      	pop	{r7, pc}
 800b9cc:	0800c6e8 	.word	0x0800c6e8
 800b9d0:	20000588 	.word	0x20000588

0800b9d4 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 800b9d4:	b580      	push	{r7, lr}
 800b9d6:	b088      	sub	sp, #32
 800b9d8:	af00      	add	r7, sp, #0
 800b9da:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800b9dc:	2300      	movs	r3, #0
 800b9de:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d05b      	beq.n	800ba9e <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b9e6:	f3ef 8310 	mrs	r3, PRIMASK
 800b9ea:	60fb      	str	r3, [r7, #12]
  return(result);
 800b9ec:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 800b9ee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800b9f0:	b672      	cpsid	i
}
 800b9f2:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 800b9f4:	4b2d      	ldr	r3, [pc, #180]	; (800baac <UTIL_TIMER_Stop+0xd8>)
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 800b9fa:	4b2c      	ldr	r3, [pc, #176]	; (800baac <UTIL_TIMER_Stop+0xd8>)
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	2201      	movs	r2, #1
 800ba04:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 800ba06:	4b29      	ldr	r3, [pc, #164]	; (800baac <UTIL_TIMER_Stop+0xd8>)
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d041      	beq.n	800ba92 <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	2200      	movs	r2, #0
 800ba12:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 800ba14:	4b25      	ldr	r3, [pc, #148]	; (800baac <UTIL_TIMER_Stop+0xd8>)
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	687a      	ldr	r2, [r7, #4]
 800ba1a:	429a      	cmp	r2, r3
 800ba1c:	d134      	bne.n	800ba88 <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 800ba1e:	4b23      	ldr	r3, [pc, #140]	; (800baac <UTIL_TIMER_Stop+0xd8>)
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	2200      	movs	r2, #0
 800ba24:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 800ba26:	4b21      	ldr	r3, [pc, #132]	; (800baac <UTIL_TIMER_Stop+0xd8>)
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	695b      	ldr	r3, [r3, #20]
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d00a      	beq.n	800ba46 <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 800ba30:	4b1e      	ldr	r3, [pc, #120]	; (800baac <UTIL_TIMER_Stop+0xd8>)
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	695b      	ldr	r3, [r3, #20]
 800ba36:	4a1d      	ldr	r2, [pc, #116]	; (800baac <UTIL_TIMER_Stop+0xd8>)
 800ba38:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 800ba3a:	4b1c      	ldr	r3, [pc, #112]	; (800baac <UTIL_TIMER_Stop+0xd8>)
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	4618      	mov	r0, r3
 800ba40:	f000 f92c 	bl	800bc9c <TimerSetTimeout>
 800ba44:	e023      	b.n	800ba8e <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 800ba46:	4b1a      	ldr	r3, [pc, #104]	; (800bab0 <UTIL_TIMER_Stop+0xdc>)
 800ba48:	68db      	ldr	r3, [r3, #12]
 800ba4a:	4798      	blx	r3
            TimerListHead = NULL;
 800ba4c:	4b17      	ldr	r3, [pc, #92]	; (800baac <UTIL_TIMER_Stop+0xd8>)
 800ba4e:	2200      	movs	r2, #0
 800ba50:	601a      	str	r2, [r3, #0]
 800ba52:	e01c      	b.n	800ba8e <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 800ba54:	697a      	ldr	r2, [r7, #20]
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	429a      	cmp	r2, r3
 800ba5a:	d110      	bne.n	800ba7e <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 800ba5c:	697b      	ldr	r3, [r7, #20]
 800ba5e:	695b      	ldr	r3, [r3, #20]
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d006      	beq.n	800ba72 <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 800ba64:	697b      	ldr	r3, [r7, #20]
 800ba66:	695b      	ldr	r3, [r3, #20]
 800ba68:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 800ba6a:	69bb      	ldr	r3, [r7, #24]
 800ba6c:	697a      	ldr	r2, [r7, #20]
 800ba6e:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 800ba70:	e00d      	b.n	800ba8e <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 800ba72:	2300      	movs	r3, #0
 800ba74:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 800ba76:	69bb      	ldr	r3, [r7, #24]
 800ba78:	697a      	ldr	r2, [r7, #20]
 800ba7a:	615a      	str	r2, [r3, #20]
            break;
 800ba7c:	e007      	b.n	800ba8e <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 800ba7e:	697b      	ldr	r3, [r7, #20]
 800ba80:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 800ba82:	697b      	ldr	r3, [r7, #20]
 800ba84:	695b      	ldr	r3, [r3, #20]
 800ba86:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 800ba88:	697b      	ldr	r3, [r7, #20]
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d1e2      	bne.n	800ba54 <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 800ba8e:	2300      	movs	r3, #0
 800ba90:	77fb      	strb	r3, [r7, #31]
 800ba92:	693b      	ldr	r3, [r7, #16]
 800ba94:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ba96:	68bb      	ldr	r3, [r7, #8]
 800ba98:	f383 8810 	msr	PRIMASK, r3
}
 800ba9c:	e001      	b.n	800baa2 <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 800ba9e:	2301      	movs	r3, #1
 800baa0:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 800baa2:	7ffb      	ldrb	r3, [r7, #31]
}
 800baa4:	4618      	mov	r0, r3
 800baa6:	3720      	adds	r7, #32
 800baa8:	46bd      	mov	sp, r7
 800baaa:	bd80      	pop	{r7, pc}
 800baac:	20000588 	.word	0x20000588
 800bab0:	0800c6e8 	.word	0x0800c6e8

0800bab4 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 800bab4:	b580      	push	{r7, lr}
 800bab6:	b084      	sub	sp, #16
 800bab8:	af00      	add	r7, sp, #0
 800baba:	6078      	str	r0, [r7, #4]
 800babc:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800babe:	2300      	movs	r3, #0
 800bac0:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d102      	bne.n	800bace <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 800bac8:	2301      	movs	r3, #1
 800baca:	73fb      	strb	r3, [r7, #15]
 800bacc:	e014      	b.n	800baf8 <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 800bace:	4b0d      	ldr	r3, [pc, #52]	; (800bb04 <UTIL_TIMER_SetPeriod+0x50>)
 800bad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bad2:	6838      	ldr	r0, [r7, #0]
 800bad4:	4798      	blx	r3
 800bad6:	4602      	mov	r2, r0
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 800badc:	6878      	ldr	r0, [r7, #4]
 800bade:	f000 f8c1 	bl	800bc64 <TimerExists>
 800bae2:	4603      	mov	r3, r0
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d007      	beq.n	800baf8 <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 800bae8:	6878      	ldr	r0, [r7, #4]
 800baea:	f7ff ff73 	bl	800b9d4 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 800baee:	6878      	ldr	r0, [r7, #4]
 800baf0:	f7ff ff02 	bl	800b8f8 <UTIL_TIMER_Start>
 800baf4:	4603      	mov	r3, r0
 800baf6:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 800baf8:	7bfb      	ldrb	r3, [r7, #15]
}
 800bafa:	4618      	mov	r0, r3
 800bafc:	3710      	adds	r7, #16
 800bafe:	46bd      	mov	sp, r7
 800bb00:	bd80      	pop	{r7, pc}
 800bb02:	bf00      	nop
 800bb04:	0800c6e8 	.word	0x0800c6e8

0800bb08 <UTIL_TIMER_IRQ_Handler>:
	}
	return NextTimer;
}

void UTIL_TIMER_IRQ_Handler( void )
{
 800bb08:	b590      	push	{r4, r7, lr}
 800bb0a:	b089      	sub	sp, #36	; 0x24
 800bb0c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bb0e:	f3ef 8310 	mrs	r3, PRIMASK
 800bb12:	60bb      	str	r3, [r7, #8]
  return(result);
 800bb14:	68bb      	ldr	r3, [r7, #8]
  UTIL_TIMER_Object_t* cur;
  uint32_t old, now, DeltaContext;

  UTIL_TIMER_ENTER_CRITICAL_SECTION();
 800bb16:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 800bb18:	b672      	cpsid	i
}
 800bb1a:	bf00      	nop

  old  =  UTIL_TimerDriver.GetTimerContext( );
 800bb1c:	4b38      	ldr	r3, [pc, #224]	; (800bc00 <UTIL_TIMER_IRQ_Handler+0xf8>)
 800bb1e:	695b      	ldr	r3, [r3, #20]
 800bb20:	4798      	blx	r3
 800bb22:	6178      	str	r0, [r7, #20]
  now  =  UTIL_TimerDriver.SetTimerContext( );
 800bb24:	4b36      	ldr	r3, [pc, #216]	; (800bc00 <UTIL_TIMER_IRQ_Handler+0xf8>)
 800bb26:	691b      	ldr	r3, [r3, #16]
 800bb28:	4798      	blx	r3
 800bb2a:	6138      	str	r0, [r7, #16]

  DeltaContext = now  - old; /*intentional wrap around */
 800bb2c:	693a      	ldr	r2, [r7, #16]
 800bb2e:	697b      	ldr	r3, [r7, #20]
 800bb30:	1ad3      	subs	r3, r2, r3
 800bb32:	60fb      	str	r3, [r7, #12]
  
  /* update timeStamp based upon new Time Reference*/
  /* because delta context should never exceed 2^32*/
  if ( TimerListHead != NULL )
 800bb34:	4b33      	ldr	r3, [pc, #204]	; (800bc04 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d037      	beq.n	800bbac <UTIL_TIMER_IRQ_Handler+0xa4>
  {
    cur = TimerListHead;
 800bb3c:	4b31      	ldr	r3, [pc, #196]	; (800bc04 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	61fb      	str	r3, [r7, #28]
	do {
      if (cur->Timestamp > DeltaContext)
 800bb42:	69fb      	ldr	r3, [r7, #28]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	68fa      	ldr	r2, [r7, #12]
 800bb48:	429a      	cmp	r2, r3
 800bb4a:	d206      	bcs.n	800bb5a <UTIL_TIMER_IRQ_Handler+0x52>
      {
        cur->Timestamp -= DeltaContext;
 800bb4c:	69fb      	ldr	r3, [r7, #28]
 800bb4e:	681a      	ldr	r2, [r3, #0]
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	1ad2      	subs	r2, r2, r3
 800bb54:	69fb      	ldr	r3, [r7, #28]
 800bb56:	601a      	str	r2, [r3, #0]
 800bb58:	e002      	b.n	800bb60 <UTIL_TIMER_IRQ_Handler+0x58>
      }
      else
      {
        cur->Timestamp = 0;
 800bb5a:	69fb      	ldr	r3, [r7, #28]
 800bb5c:	2200      	movs	r2, #0
 800bb5e:	601a      	str	r2, [r3, #0]
      }
      cur = cur->Next;
 800bb60:	69fb      	ldr	r3, [r7, #28]
 800bb62:	695b      	ldr	r3, [r3, #20]
 800bb64:	61fb      	str	r3, [r7, #28]
    } while(cur != NULL);
 800bb66:	69fb      	ldr	r3, [r7, #28]
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d1ea      	bne.n	800bb42 <UTIL_TIMER_IRQ_Handler+0x3a>
  }

  /* Execute expired timer and update the list */
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 800bb6c:	e01e      	b.n	800bbac <UTIL_TIMER_IRQ_Handler+0xa4>
  {
      cur = TimerListHead;
 800bb6e:	4b25      	ldr	r3, [pc, #148]	; (800bc04 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	61fb      	str	r3, [r7, #28]
      TimerListHead = TimerListHead->Next;
 800bb74:	4b23      	ldr	r3, [pc, #140]	; (800bc04 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	695b      	ldr	r3, [r3, #20]
 800bb7a:	4a22      	ldr	r2, [pc, #136]	; (800bc04 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800bb7c:	6013      	str	r3, [r2, #0]
      cur->IsPending = 0;
 800bb7e:	69fb      	ldr	r3, [r7, #28]
 800bb80:	2200      	movs	r2, #0
 800bb82:	721a      	strb	r2, [r3, #8]
      cur->IsRunning = 0;
 800bb84:	69fb      	ldr	r3, [r7, #28]
 800bb86:	2200      	movs	r2, #0
 800bb88:	725a      	strb	r2, [r3, #9]
      cur->Callback(cur->argument);
 800bb8a:	69fb      	ldr	r3, [r7, #28]
 800bb8c:	68db      	ldr	r3, [r3, #12]
 800bb8e:	69fa      	ldr	r2, [r7, #28]
 800bb90:	6912      	ldr	r2, [r2, #16]
 800bb92:	4610      	mov	r0, r2
 800bb94:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 800bb96:	69fb      	ldr	r3, [r7, #28]
 800bb98:	7adb      	ldrb	r3, [r3, #11]
 800bb9a:	2b01      	cmp	r3, #1
 800bb9c:	d106      	bne.n	800bbac <UTIL_TIMER_IRQ_Handler+0xa4>
 800bb9e:	69fb      	ldr	r3, [r7, #28]
 800bba0:	7a9b      	ldrb	r3, [r3, #10]
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d102      	bne.n	800bbac <UTIL_TIMER_IRQ_Handler+0xa4>
      {
        (void)UTIL_TIMER_Start(cur);
 800bba6:	69f8      	ldr	r0, [r7, #28]
 800bba8:	f7ff fea6 	bl	800b8f8 <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 800bbac:	4b15      	ldr	r3, [pc, #84]	; (800bc04 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d00d      	beq.n	800bbd0 <UTIL_TIMER_IRQ_Handler+0xc8>
 800bbb4:	4b13      	ldr	r3, [pc, #76]	; (800bc04 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d0d7      	beq.n	800bb6e <UTIL_TIMER_IRQ_Handler+0x66>
 800bbbe:	4b11      	ldr	r3, [pc, #68]	; (800bc04 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	681c      	ldr	r4, [r3, #0]
 800bbc4:	4b0e      	ldr	r3, [pc, #56]	; (800bc00 <UTIL_TIMER_IRQ_Handler+0xf8>)
 800bbc6:	699b      	ldr	r3, [r3, #24]
 800bbc8:	4798      	blx	r3
 800bbca:	4603      	mov	r3, r0
 800bbcc:	429c      	cmp	r4, r3
 800bbce:	d3ce      	bcc.n	800bb6e <UTIL_TIMER_IRQ_Handler+0x66>
      }
  }

  /* start the next TimerListHead if it exists and it is not pending*/
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 800bbd0:	4b0c      	ldr	r3, [pc, #48]	; (800bc04 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d009      	beq.n	800bbec <UTIL_TIMER_IRQ_Handler+0xe4>
 800bbd8:	4b0a      	ldr	r3, [pc, #40]	; (800bc04 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	7a1b      	ldrb	r3, [r3, #8]
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d104      	bne.n	800bbec <UTIL_TIMER_IRQ_Handler+0xe4>
  {
    TimerSetTimeout( TimerListHead );
 800bbe2:	4b08      	ldr	r3, [pc, #32]	; (800bc04 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	4618      	mov	r0, r3
 800bbe8:	f000 f858 	bl	800bc9c <TimerSetTimeout>
 800bbec:	69bb      	ldr	r3, [r7, #24]
 800bbee:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	f383 8810 	msr	PRIMASK, r3
}
 800bbf6:	bf00      	nop
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}
 800bbf8:	bf00      	nop
 800bbfa:	3724      	adds	r7, #36	; 0x24
 800bbfc:	46bd      	mov	sp, r7
 800bbfe:	bd90      	pop	{r4, r7, pc}
 800bc00:	0800c6e8 	.word	0x0800c6e8
 800bc04:	20000588 	.word	0x20000588

0800bc08 <UTIL_TIMER_GetCurrentTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 800bc08:	b580      	push	{r7, lr}
 800bc0a:	b082      	sub	sp, #8
 800bc0c:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 800bc0e:	4b06      	ldr	r3, [pc, #24]	; (800bc28 <UTIL_TIMER_GetCurrentTime+0x20>)
 800bc10:	69db      	ldr	r3, [r3, #28]
 800bc12:	4798      	blx	r3
 800bc14:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 800bc16:	4b04      	ldr	r3, [pc, #16]	; (800bc28 <UTIL_TIMER_GetCurrentTime+0x20>)
 800bc18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc1a:	6878      	ldr	r0, [r7, #4]
 800bc1c:	4798      	blx	r3
 800bc1e:	4603      	mov	r3, r0
}
 800bc20:	4618      	mov	r0, r3
 800bc22:	3708      	adds	r7, #8
 800bc24:	46bd      	mov	sp, r7
 800bc26:	bd80      	pop	{r7, pc}
 800bc28:	0800c6e8 	.word	0x0800c6e8

0800bc2c <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 800bc2c:	b580      	push	{r7, lr}
 800bc2e:	b084      	sub	sp, #16
 800bc30:	af00      	add	r7, sp, #0
 800bc32:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 800bc34:	4b0a      	ldr	r3, [pc, #40]	; (800bc60 <UTIL_TIMER_GetElapsedTime+0x34>)
 800bc36:	69db      	ldr	r3, [r3, #28]
 800bc38:	4798      	blx	r3
 800bc3a:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 800bc3c:	4b08      	ldr	r3, [pc, #32]	; (800bc60 <UTIL_TIMER_GetElapsedTime+0x34>)
 800bc3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc40:	6878      	ldr	r0, [r7, #4]
 800bc42:	4798      	blx	r3
 800bc44:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 800bc46:	4b06      	ldr	r3, [pc, #24]	; (800bc60 <UTIL_TIMER_GetElapsedTime+0x34>)
 800bc48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc4a:	68f9      	ldr	r1, [r7, #12]
 800bc4c:	68ba      	ldr	r2, [r7, #8]
 800bc4e:	1a8a      	subs	r2, r1, r2
 800bc50:	4610      	mov	r0, r2
 800bc52:	4798      	blx	r3
 800bc54:	4603      	mov	r3, r0
}
 800bc56:	4618      	mov	r0, r3
 800bc58:	3710      	adds	r7, #16
 800bc5a:	46bd      	mov	sp, r7
 800bc5c:	bd80      	pop	{r7, pc}
 800bc5e:	bf00      	nop
 800bc60:	0800c6e8 	.word	0x0800c6e8

0800bc64 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 800bc64:	b480      	push	{r7}
 800bc66:	b085      	sub	sp, #20
 800bc68:	af00      	add	r7, sp, #0
 800bc6a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800bc6c:	4b0a      	ldr	r3, [pc, #40]	; (800bc98 <TimerExists+0x34>)
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 800bc72:	e008      	b.n	800bc86 <TimerExists+0x22>
  {
    if( cur == TimerObject )
 800bc74:	68fa      	ldr	r2, [r7, #12]
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	429a      	cmp	r2, r3
 800bc7a:	d101      	bne.n	800bc80 <TimerExists+0x1c>
    {
      return true;
 800bc7c:	2301      	movs	r3, #1
 800bc7e:	e006      	b.n	800bc8e <TimerExists+0x2a>
    }
    cur = cur->Next;
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	695b      	ldr	r3, [r3, #20]
 800bc84:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d1f3      	bne.n	800bc74 <TimerExists+0x10>
  }
  return false;
 800bc8c:	2300      	movs	r3, #0
}
 800bc8e:	4618      	mov	r0, r3
 800bc90:	3714      	adds	r7, #20
 800bc92:	46bd      	mov	sp, r7
 800bc94:	bc80      	pop	{r7}
 800bc96:	4770      	bx	lr
 800bc98:	20000588 	.word	0x20000588

0800bc9c <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 800bc9c:	b590      	push	{r4, r7, lr}
 800bc9e:	b085      	sub	sp, #20
 800bca0:	af00      	add	r7, sp, #0
 800bca2:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 800bca4:	4b11      	ldr	r3, [pc, #68]	; (800bcec <TimerSetTimeout+0x50>)
 800bca6:	6a1b      	ldr	r3, [r3, #32]
 800bca8:	4798      	blx	r3
 800bcaa:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	2201      	movs	r2, #1
 800bcb0:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	681c      	ldr	r4, [r3, #0]
 800bcb6:	4b0d      	ldr	r3, [pc, #52]	; (800bcec <TimerSetTimeout+0x50>)
 800bcb8:	699b      	ldr	r3, [r3, #24]
 800bcba:	4798      	blx	r3
 800bcbc:	4602      	mov	r2, r0
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	4413      	add	r3, r2
 800bcc2:	429c      	cmp	r4, r3
 800bcc4:	d207      	bcs.n	800bcd6 <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 800bcc6:	4b09      	ldr	r3, [pc, #36]	; (800bcec <TimerSetTimeout+0x50>)
 800bcc8:	699b      	ldr	r3, [r3, #24]
 800bcca:	4798      	blx	r3
 800bccc:	4602      	mov	r2, r0
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	441a      	add	r2, r3
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 800bcd6:	4b05      	ldr	r3, [pc, #20]	; (800bcec <TimerSetTimeout+0x50>)
 800bcd8:	689b      	ldr	r3, [r3, #8]
 800bcda:	687a      	ldr	r2, [r7, #4]
 800bcdc:	6812      	ldr	r2, [r2, #0]
 800bcde:	4610      	mov	r0, r2
 800bce0:	4798      	blx	r3
}
 800bce2:	bf00      	nop
 800bce4:	3714      	adds	r7, #20
 800bce6:	46bd      	mov	sp, r7
 800bce8:	bd90      	pop	{r4, r7, pc}
 800bcea:	bf00      	nop
 800bcec:	0800c6e8 	.word	0x0800c6e8

0800bcf0 <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 800bcf0:	b480      	push	{r7}
 800bcf2:	b085      	sub	sp, #20
 800bcf4:	af00      	add	r7, sp, #0
 800bcf6:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800bcf8:	4b14      	ldr	r3, [pc, #80]	; (800bd4c <TimerInsertTimer+0x5c>)
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 800bcfe:	4b13      	ldr	r3, [pc, #76]	; (800bd4c <TimerInsertTimer+0x5c>)
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	695b      	ldr	r3, [r3, #20]
 800bd04:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 800bd06:	e012      	b.n	800bd2e <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	681a      	ldr	r2, [r3, #0]
 800bd0c:	68bb      	ldr	r3, [r7, #8]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	429a      	cmp	r2, r3
 800bd12:	d905      	bls.n	800bd20 <TimerInsertTimer+0x30>
    {
        cur = next;
 800bd14:	68bb      	ldr	r3, [r7, #8]
 800bd16:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 800bd18:	68bb      	ldr	r3, [r7, #8]
 800bd1a:	695b      	ldr	r3, [r3, #20]
 800bd1c:	60bb      	str	r3, [r7, #8]
 800bd1e:	e006      	b.n	800bd2e <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	687a      	ldr	r2, [r7, #4]
 800bd24:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	68ba      	ldr	r2, [r7, #8]
 800bd2a:	615a      	str	r2, [r3, #20]
        return;
 800bd2c:	e009      	b.n	800bd42 <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	695b      	ldr	r3, [r3, #20]
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d1e8      	bne.n	800bd08 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	687a      	ldr	r2, [r7, #4]
 800bd3a:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	2200      	movs	r2, #0
 800bd40:	615a      	str	r2, [r3, #20]
}
 800bd42:	3714      	adds	r7, #20
 800bd44:	46bd      	mov	sp, r7
 800bd46:	bc80      	pop	{r7}
 800bd48:	4770      	bx	lr
 800bd4a:	bf00      	nop
 800bd4c:	20000588 	.word	0x20000588

0800bd50 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 800bd50:	b580      	push	{r7, lr}
 800bd52:	b084      	sub	sp, #16
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800bd58:	4b0b      	ldr	r3, [pc, #44]	; (800bd88 <TimerInsertNewHeadTimer+0x38>)
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d002      	beq.n	800bd6a <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	2200      	movs	r2, #0
 800bd68:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	68fa      	ldr	r2, [r7, #12]
 800bd6e:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 800bd70:	4a05      	ldr	r2, [pc, #20]	; (800bd88 <TimerInsertNewHeadTimer+0x38>)
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 800bd76:	4b04      	ldr	r3, [pc, #16]	; (800bd88 <TimerInsertNewHeadTimer+0x38>)
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	4618      	mov	r0, r3
 800bd7c:	f7ff ff8e 	bl	800bc9c <TimerSetTimeout>
}
 800bd80:	bf00      	nop
 800bd82:	3710      	adds	r7, #16
 800bd84:	46bd      	mov	sp, r7
 800bd86:	bd80      	pop	{r7, pc}
 800bd88:	20000588 	.word	0x20000588

0800bd8c <UTIL_ADV_TRACE_Init>:

/** @addtogroup ADV_TRACE_exported_function
 *  @{
 */
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_Init(void)
{
 800bd8c:	b580      	push	{r7, lr}
 800bd8e:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 800bd90:	2218      	movs	r2, #24
 800bd92:	2100      	movs	r1, #0
 800bd94:	4807      	ldr	r0, [pc, #28]	; (800bdb4 <UTIL_ADV_TRACE_Init+0x28>)
 800bd96:	f7ff f8e6 	bl	800af66 <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 800bd9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bd9e:	2100      	movs	r1, #0
 800bda0:	4805      	ldr	r0, [pc, #20]	; (800bdb8 <UTIL_ADV_TRACE_Init+0x2c>)
 800bda2:	f7ff f8e0 	bl	800af66 <UTIL_MEM_set_8>
#endif
  /* Allocate Lock resource */
  UTIL_ADV_TRACE_INIT_CRITICAL_SECTION();

  /* Initialize the Low Level interface */
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 800bda6:	4b05      	ldr	r3, [pc, #20]	; (800bdbc <UTIL_ADV_TRACE_Init+0x30>)
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	4805      	ldr	r0, [pc, #20]	; (800bdc0 <UTIL_ADV_TRACE_Init+0x34>)
 800bdac:	4798      	blx	r3
 800bdae:	4603      	mov	r3, r0
}
 800bdb0:	4618      	mov	r0, r3
 800bdb2:	bd80      	pop	{r7, pc}
 800bdb4:	2000058c 	.word	0x2000058c
 800bdb8:	200005a4 	.word	0x200005a4
 800bdbc:	0800c728 	.word	0x0800c728
 800bdc0:	0800c009 	.word	0x0800c009

0800bdc4 <UTIL_ADV_TRACE_COND_FSend>:
  return UTIL_TraceDriver.StartRx(UserCallback);
}

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_COND_FSend(uint32_t VerboseLevel, uint32_t Region, uint32_t TimeStampState, const char *strFormat, ...)
{
 800bdc4:	b408      	push	{r3}
 800bdc6:	b580      	push	{r7, lr}
 800bdc8:	b08d      	sub	sp, #52	; 0x34
 800bdca:	af00      	add	r7, sp, #0
 800bdcc:	60f8      	str	r0, [r7, #12]
 800bdce:	60b9      	str	r1, [r7, #8]
 800bdd0:	607a      	str	r2, [r7, #4]
  va_list vaArgs;
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  uint8_t buf[UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
  uint16_t timestamp_size = 0u;
 800bdd2:	2300      	movs	r3, #0
 800bdd4:	82fb      	strh	r3, [r7, #22]
  uint16_t writepos;
  uint16_t idx;
#else
  uint8_t buf[UTIL_ADV_TRACE_TMP_BUF_SIZE+UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
#endif
  uint16_t buff_size = 0u;
 800bdd6:	2300      	movs	r3, #0
 800bdd8:	85bb      	strh	r3, [r7, #44]	; 0x2c

  /* check verbose level */
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 800bdda:	4b37      	ldr	r3, [pc, #220]	; (800beb8 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 800bddc:	7a1b      	ldrb	r3, [r3, #8]
 800bdde:	461a      	mov	r2, r3
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	4293      	cmp	r3, r2
 800bde4:	d902      	bls.n	800bdec <UTIL_ADV_TRACE_COND_FSend+0x28>
  {
    return UTIL_ADV_TRACE_GIVEUP;
 800bde6:	f06f 0304 	mvn.w	r3, #4
 800bdea:	e05e      	b.n	800beaa <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 800bdec:	4b32      	ldr	r3, [pc, #200]	; (800beb8 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 800bdee:	68da      	ldr	r2, [r3, #12]
 800bdf0:	68bb      	ldr	r3, [r7, #8]
 800bdf2:	4013      	ands	r3, r2
 800bdf4:	68ba      	ldr	r2, [r7, #8]
 800bdf6:	429a      	cmp	r2, r3
 800bdf8:	d002      	beq.n	800be00 <UTIL_ADV_TRACE_COND_FSend+0x3c>
  {
    return UTIL_ADV_TRACE_REGIONMASKED;
 800bdfa:	f06f 0305 	mvn.w	r3, #5
 800bdfe:	e054      	b.n	800beaa <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 800be00:	4b2d      	ldr	r3, [pc, #180]	; (800beb8 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 800be02:	685b      	ldr	r3, [r3, #4]
 800be04:	2b00      	cmp	r3, #0
 800be06:	d00a      	beq.n	800be1e <UTIL_ADV_TRACE_COND_FSend+0x5a>
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d007      	beq.n	800be1e <UTIL_ADV_TRACE_COND_FSend+0x5a>
  {
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 800be0e:	4b2a      	ldr	r3, [pc, #168]	; (800beb8 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 800be10:	685b      	ldr	r3, [r3, #4]
 800be12:	f107 0116 	add.w	r1, r7, #22
 800be16:	f107 0218 	add.w	r2, r7, #24
 800be1a:	4610      	mov	r0, r2
 800be1c:	4798      	blx	r3
  }

  va_start( vaArgs, strFormat);
 800be1e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800be22:	62bb      	str	r3, [r7, #40]	; 0x28
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 800be24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be26:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800be28:	f44f 7180 	mov.w	r1, #256	; 0x100
 800be2c:	4823      	ldr	r0, [pc, #140]	; (800bebc <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 800be2e:	f7ff fa3b 	bl	800b2a8 <tiny_vsnprintf_like>
 800be32:	4603      	mov	r3, r0
 800be34:	85bb      	strh	r3, [r7, #44]	; 0x2c

  TRACE_Lock();
 800be36:	f000 f9f1 	bl	800c21c <TRACE_Lock>

  /* if allocation is ok, write data into the buffer */
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 800be3a:	8afa      	ldrh	r2, [r7, #22]
 800be3c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800be3e:	4413      	add	r3, r2
 800be40:	b29b      	uxth	r3, r3
 800be42:	f107 0214 	add.w	r2, r7, #20
 800be46:	4611      	mov	r1, r2
 800be48:	4618      	mov	r0, r3
 800be4a:	f000 f969 	bl	800c120 <TRACE_AllocateBufer>
 800be4e:	4603      	mov	r3, r0
 800be50:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be54:	d025      	beq.n	800bea2 <UTIL_ADV_TRACE_COND_FSend+0xde>
    }
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

    /* copy the timestamp */
    for (idx = 0u; idx < timestamp_size; idx++)
 800be56:	2300      	movs	r3, #0
 800be58:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800be5a:	e00e      	b.n	800be7a <UTIL_ADV_TRACE_COND_FSend+0xb6>
    {
      ADV_TRACE_Buffer[writepos] = buf[idx];
 800be5c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800be5e:	8aba      	ldrh	r2, [r7, #20]
 800be60:	3330      	adds	r3, #48	; 0x30
 800be62:	443b      	add	r3, r7
 800be64:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 800be68:	4b15      	ldr	r3, [pc, #84]	; (800bec0 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 800be6a:	5499      	strb	r1, [r3, r2]
      writepos = writepos + 1u;
 800be6c:	8abb      	ldrh	r3, [r7, #20]
 800be6e:	3301      	adds	r3, #1
 800be70:	b29b      	uxth	r3, r3
 800be72:	82bb      	strh	r3, [r7, #20]
    for (idx = 0u; idx < timestamp_size; idx++)
 800be74:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800be76:	3301      	adds	r3, #1
 800be78:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800be7a:	8afb      	ldrh	r3, [r7, #22]
 800be7c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800be7e:	429a      	cmp	r2, r3
 800be80:	d3ec      	bcc.n	800be5c <UTIL_ADV_TRACE_COND_FSend+0x98>
    }

    /* copy the data */
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 800be82:	8abb      	ldrh	r3, [r7, #20]
 800be84:	461a      	mov	r2, r3
 800be86:	4b0e      	ldr	r3, [pc, #56]	; (800bec0 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 800be88:	18d0      	adds	r0, r2, r3
 800be8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be8c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800be8e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800be92:	f7ff fa09 	bl	800b2a8 <tiny_vsnprintf_like>
    va_end(vaArgs);

    TRACE_UnLock();
 800be96:	f000 f9df 	bl	800c258 <TRACE_UnLock>

    return TRACE_Send();
 800be9a:	f000 f831 	bl	800bf00 <TRACE_Send>
 800be9e:	4603      	mov	r3, r0
 800bea0:	e003      	b.n	800beaa <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  va_end(vaArgs);
  TRACE_UnLock();
 800bea2:	f000 f9d9 	bl	800c258 <TRACE_UnLock>
    ADV_TRACE_Ctx.OverRunStatus = TRACE_OVERRUN_INDICATION;
  }
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

  return UTIL_ADV_TRACE_MEM_FULL;
 800bea6:	f06f 0302 	mvn.w	r3, #2
  buff_size += (uint16_t) UTIL_ADV_TRACE_VSNPRINTF((char* )(buf + buff_size), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
  va_end(vaArgs);

  return UTIL_ADV_TRACE_Send(buf, buff_size);
#endif
}
 800beaa:	4618      	mov	r0, r3
 800beac:	3734      	adds	r7, #52	; 0x34
 800beae:	46bd      	mov	sp, r7
 800beb0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800beb4:	b001      	add	sp, #4
 800beb6:	4770      	bx	lr
 800beb8:	2000058c 	.word	0x2000058c
 800bebc:	200007a4 	.word	0x200007a4
 800bec0:	200005a4 	.word	0x200005a4

0800bec4 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
}
#endif

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
void UTIL_ADV_TRACE_RegisterTimeStampFunction(cb_timestamp *cb)
{
 800bec4:	b480      	push	{r7}
 800bec6:	b083      	sub	sp, #12
 800bec8:	af00      	add	r7, sp, #0
 800beca:	6078      	str	r0, [r7, #4]
  ADV_TRACE_Ctx.timestamp_func = *cb;
 800becc:	4a03      	ldr	r2, [pc, #12]	; (800bedc <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x18>)
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	6053      	str	r3, [r2, #4]
}
 800bed2:	bf00      	nop
 800bed4:	370c      	adds	r7, #12
 800bed6:	46bd      	mov	sp, r7
 800bed8:	bc80      	pop	{r7}
 800beda:	4770      	bx	lr
 800bedc:	2000058c 	.word	0x2000058c

0800bee0 <UTIL_ADV_TRACE_SetVerboseLevel>:

void UTIL_ADV_TRACE_SetVerboseLevel(uint8_t Level)
{
 800bee0:	b480      	push	{r7}
 800bee2:	b083      	sub	sp, #12
 800bee4:	af00      	add	r7, sp, #0
 800bee6:	4603      	mov	r3, r0
 800bee8:	71fb      	strb	r3, [r7, #7]
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 800beea:	4a04      	ldr	r2, [pc, #16]	; (800befc <UTIL_ADV_TRACE_SetVerboseLevel+0x1c>)
 800beec:	79fb      	ldrb	r3, [r7, #7]
 800beee:	7213      	strb	r3, [r2, #8]
}
 800bef0:	bf00      	nop
 800bef2:	370c      	adds	r7, #12
 800bef4:	46bd      	mov	sp, r7
 800bef6:	bc80      	pop	{r7}
 800bef8:	4770      	bx	lr
 800befa:	bf00      	nop
 800befc:	2000058c 	.word	0x2000058c

0800bf00 <TRACE_Send>:
/**
 * @brief send the data of the trace to low layer
 * @retval Status based on @ref UTIL_ADV_TRACE_Status_t
 */
static UTIL_ADV_TRACE_Status_t TRACE_Send(void)
{
 800bf00:	b580      	push	{r7, lr}
 800bf02:	b088      	sub	sp, #32
 800bf04:	af00      	add	r7, sp, #0
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 800bf06:	2300      	movs	r3, #0
 800bf08:	77fb      	strb	r3, [r7, #31]
  uint8_t *ptr = NULL;
 800bf0a:	2300      	movs	r3, #0
 800bf0c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bf0e:	f3ef 8310 	mrs	r3, PRIMASK
 800bf12:	613b      	str	r3, [r7, #16]
  return(result);
 800bf14:	693b      	ldr	r3, [r7, #16]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 800bf16:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800bf18:	b672      	cpsid	i
}
 800bf1a:	bf00      	nop

  if(TRACE_IsLocked() == 0u)
 800bf1c:	f000 f9ba 	bl	800c294 <TRACE_IsLocked>
 800bf20:	4603      	mov	r3, r0
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d15d      	bne.n	800bfe2 <TRACE_Send+0xe2>
  {
    TRACE_Lock();
 800bf26:	f000 f979 	bl	800c21c <TRACE_Lock>

    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 800bf2a:	4b34      	ldr	r3, [pc, #208]	; (800bffc <TRACE_Send+0xfc>)
 800bf2c:	8a1a      	ldrh	r2, [r3, #16]
 800bf2e:	4b33      	ldr	r3, [pc, #204]	; (800bffc <TRACE_Send+0xfc>)
 800bf30:	8a5b      	ldrh	r3, [r3, #18]
 800bf32:	429a      	cmp	r2, r3
 800bf34:	d04d      	beq.n	800bfd2 <TRACE_Send+0xd2>
    {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 800bf36:	4b31      	ldr	r3, [pc, #196]	; (800bffc <TRACE_Send+0xfc>)
 800bf38:	789b      	ldrb	r3, [r3, #2]
 800bf3a:	2b01      	cmp	r3, #1
 800bf3c:	d117      	bne.n	800bf6e <TRACE_Send+0x6e>
      {
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 800bf3e:	4b2f      	ldr	r3, [pc, #188]	; (800bffc <TRACE_Send+0xfc>)
 800bf40:	881a      	ldrh	r2, [r3, #0]
 800bf42:	4b2e      	ldr	r3, [pc, #184]	; (800bffc <TRACE_Send+0xfc>)
 800bf44:	8a1b      	ldrh	r3, [r3, #16]
 800bf46:	1ad3      	subs	r3, r2, r3
 800bf48:	b29a      	uxth	r2, r3
 800bf4a:	4b2c      	ldr	r3, [pc, #176]	; (800bffc <TRACE_Send+0xfc>)
 800bf4c:	829a      	strh	r2, [r3, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 800bf4e:	4b2b      	ldr	r3, [pc, #172]	; (800bffc <TRACE_Send+0xfc>)
 800bf50:	2202      	movs	r2, #2
 800bf52:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 800bf54:	4b29      	ldr	r3, [pc, #164]	; (800bffc <TRACE_Send+0xfc>)
 800bf56:	2200      	movs	r2, #0
 800bf58:	801a      	strh	r2, [r3, #0]

        UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 800bf5a:	4b28      	ldr	r3, [pc, #160]	; (800bffc <TRACE_Send+0xfc>)
 800bf5c:	8a9b      	ldrh	r3, [r3, #20]
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d105      	bne.n	800bf6e <TRACE_Send+0x6e>
        {
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 800bf62:	4b26      	ldr	r3, [pc, #152]	; (800bffc <TRACE_Send+0xfc>)
 800bf64:	2200      	movs	r2, #0
 800bf66:	709a      	strb	r2, [r3, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 800bf68:	4b24      	ldr	r3, [pc, #144]	; (800bffc <TRACE_Send+0xfc>)
 800bf6a:	2200      	movs	r2, #0
 800bf6c:	821a      	strh	r2, [r3, #16]
        }
      }

      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 800bf6e:	4b23      	ldr	r3, [pc, #140]	; (800bffc <TRACE_Send+0xfc>)
 800bf70:	789b      	ldrb	r3, [r3, #2]
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d115      	bne.n	800bfa2 <TRACE_Send+0xa2>
      {
#endif
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 800bf76:	4b21      	ldr	r3, [pc, #132]	; (800bffc <TRACE_Send+0xfc>)
 800bf78:	8a5a      	ldrh	r2, [r3, #18]
 800bf7a:	4b20      	ldr	r3, [pc, #128]	; (800bffc <TRACE_Send+0xfc>)
 800bf7c:	8a1b      	ldrh	r3, [r3, #16]
 800bf7e:	429a      	cmp	r2, r3
 800bf80:	d908      	bls.n	800bf94 <TRACE_Send+0x94>
        {
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 800bf82:	4b1e      	ldr	r3, [pc, #120]	; (800bffc <TRACE_Send+0xfc>)
 800bf84:	8a5a      	ldrh	r2, [r3, #18]
 800bf86:	4b1d      	ldr	r3, [pc, #116]	; (800bffc <TRACE_Send+0xfc>)
 800bf88:	8a1b      	ldrh	r3, [r3, #16]
 800bf8a:	1ad3      	subs	r3, r2, r3
 800bf8c:	b29a      	uxth	r2, r3
 800bf8e:	4b1b      	ldr	r3, [pc, #108]	; (800bffc <TRACE_Send+0xfc>)
 800bf90:	829a      	strh	r2, [r3, #20]
 800bf92:	e006      	b.n	800bfa2 <TRACE_Send+0xa2>
        }
        else /* TraceRdPtr > TraceWrPtr */
        {
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 800bf94:	4b19      	ldr	r3, [pc, #100]	; (800bffc <TRACE_Send+0xfc>)
 800bf96:	8a1b      	ldrh	r3, [r3, #16]
 800bf98:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800bf9c:	b29a      	uxth	r2, r3
 800bf9e:	4b17      	ldr	r3, [pc, #92]	; (800bffc <TRACE_Send+0xfc>)
 800bfa0:	829a      	strh	r2, [r3, #20]

        }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      }
#endif
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 800bfa2:	4b16      	ldr	r3, [pc, #88]	; (800bffc <TRACE_Send+0xfc>)
 800bfa4:	8a1b      	ldrh	r3, [r3, #16]
 800bfa6:	461a      	mov	r2, r3
 800bfa8:	4b15      	ldr	r3, [pc, #84]	; (800c000 <TRACE_Send+0x100>)
 800bfaa:	4413      	add	r3, r2
 800bfac:	61bb      	str	r3, [r7, #24]
 800bfae:	697b      	ldr	r3, [r7, #20]
 800bfb0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	f383 8810 	msr	PRIMASK, r3
}
 800bfb8:	bf00      	nop

      UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
      UTIL_ADV_TRACE_PreSendHook();
 800bfba:	f7f4 fd73 	bl	8000aa4 <UTIL_ADV_TRACE_PreSendHook>

      UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 800bfbe:	4b11      	ldr	r3, [pc, #68]	; (800c004 <TRACE_Send+0x104>)
 800bfc0:	68db      	ldr	r3, [r3, #12]
 800bfc2:	4a0e      	ldr	r2, [pc, #56]	; (800bffc <TRACE_Send+0xfc>)
 800bfc4:	8a92      	ldrh	r2, [r2, #20]
 800bfc6:	4611      	mov	r1, r2
 800bfc8:	69b8      	ldr	r0, [r7, #24]
 800bfca:	4798      	blx	r3
 800bfcc:	4603      	mov	r3, r0
 800bfce:	77fb      	strb	r3, [r7, #31]
 800bfd0:	e00d      	b.n	800bfee <TRACE_Send+0xee>
    }
    else
    {
      TRACE_UnLock();
 800bfd2:	f000 f941 	bl	800c258 <TRACE_UnLock>
 800bfd6:	697b      	ldr	r3, [r7, #20]
 800bfd8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bfda:	68bb      	ldr	r3, [r7, #8]
 800bfdc:	f383 8810 	msr	PRIMASK, r3
}
 800bfe0:	e005      	b.n	800bfee <TRACE_Send+0xee>
 800bfe2:	697b      	ldr	r3, [r7, #20]
 800bfe4:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	f383 8810 	msr	PRIMASK, r3
}
 800bfec:	bf00      	nop
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  }

  return ret;
 800bfee:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800bff2:	4618      	mov	r0, r3
 800bff4:	3720      	adds	r7, #32
 800bff6:	46bd      	mov	sp, r7
 800bff8:	bd80      	pop	{r7, pc}
 800bffa:	bf00      	nop
 800bffc:	2000058c 	.word	0x2000058c
 800c000:	200005a4 	.word	0x200005a4
 800c004:	0800c728 	.word	0x0800c728

0800c008 <TRACE_TxCpltCallback>:
 * @brief Tx callback called by the low layer level to inform a transfer complete
 * @param Ptr pointer not used only for HAL compatibility
 * @retval none
 */
static void TRACE_TxCpltCallback(void *Ptr)
{
 800c008:	b580      	push	{r7, lr}
 800c00a:	b088      	sub	sp, #32
 800c00c:	af00      	add	r7, sp, #0
 800c00e:	6078      	str	r0, [r7, #4]
  uint8_t *ptr = NULL;
 800c010:	2300      	movs	r3, #0
 800c012:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c014:	f3ef 8310 	mrs	r3, PRIMASK
 800c018:	617b      	str	r3, [r7, #20]
  return(result);
 800c01a:	697b      	ldr	r3, [r7, #20]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 800c01c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 800c01e:	b672      	cpsid	i
}
 800c020:	bf00      	nop
    ADV_TRACE_Ctx.TraceSentSize = 0u;
  }
#endif

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 800c022:	4b3c      	ldr	r3, [pc, #240]	; (800c114 <TRACE_TxCpltCallback+0x10c>)
 800c024:	789b      	ldrb	r3, [r3, #2]
 800c026:	2b02      	cmp	r3, #2
 800c028:	d106      	bne.n	800c038 <TRACE_TxCpltCallback+0x30>
  {
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 800c02a:	4b3a      	ldr	r3, [pc, #232]	; (800c114 <TRACE_TxCpltCallback+0x10c>)
 800c02c:	2200      	movs	r2, #0
 800c02e:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 800c030:	4b38      	ldr	r3, [pc, #224]	; (800c114 <TRACE_TxCpltCallback+0x10c>)
 800c032:	2200      	movs	r2, #0
 800c034:	821a      	strh	r2, [r3, #16]
 800c036:	e00a      	b.n	800c04e <TRACE_TxCpltCallback+0x46>
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
  }
  else
  {
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 800c038:	4b36      	ldr	r3, [pc, #216]	; (800c114 <TRACE_TxCpltCallback+0x10c>)
 800c03a:	8a1a      	ldrh	r2, [r3, #16]
 800c03c:	4b35      	ldr	r3, [pc, #212]	; (800c114 <TRACE_TxCpltCallback+0x10c>)
 800c03e:	8a9b      	ldrh	r3, [r3, #20]
 800c040:	4413      	add	r3, r2
 800c042:	b29b      	uxth	r3, r3
 800c044:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c048:	b29a      	uxth	r2, r3
 800c04a:	4b32      	ldr	r3, [pc, #200]	; (800c114 <TRACE_TxCpltCallback+0x10c>)
 800c04c:	821a      	strh	r2, [r3, #16]
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
    return;
  }
#endif

  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 800c04e:	4b31      	ldr	r3, [pc, #196]	; (800c114 <TRACE_TxCpltCallback+0x10c>)
 800c050:	8a1a      	ldrh	r2, [r3, #16]
 800c052:	4b30      	ldr	r3, [pc, #192]	; (800c114 <TRACE_TxCpltCallback+0x10c>)
 800c054:	8a5b      	ldrh	r3, [r3, #18]
 800c056:	429a      	cmp	r2, r3
 800c058:	d04d      	beq.n	800c0f6 <TRACE_TxCpltCallback+0xee>
 800c05a:	4b2e      	ldr	r3, [pc, #184]	; (800c114 <TRACE_TxCpltCallback+0x10c>)
 800c05c:	8adb      	ldrh	r3, [r3, #22]
 800c05e:	2b01      	cmp	r3, #1
 800c060:	d149      	bne.n	800c0f6 <TRACE_TxCpltCallback+0xee>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 800c062:	4b2c      	ldr	r3, [pc, #176]	; (800c114 <TRACE_TxCpltCallback+0x10c>)
 800c064:	789b      	ldrb	r3, [r3, #2]
 800c066:	2b01      	cmp	r3, #1
 800c068:	d117      	bne.n	800c09a <TRACE_TxCpltCallback+0x92>
    {
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 800c06a:	4b2a      	ldr	r3, [pc, #168]	; (800c114 <TRACE_TxCpltCallback+0x10c>)
 800c06c:	881a      	ldrh	r2, [r3, #0]
 800c06e:	4b29      	ldr	r3, [pc, #164]	; (800c114 <TRACE_TxCpltCallback+0x10c>)
 800c070:	8a1b      	ldrh	r3, [r3, #16]
 800c072:	1ad3      	subs	r3, r2, r3
 800c074:	b29a      	uxth	r2, r3
 800c076:	4b27      	ldr	r3, [pc, #156]	; (800c114 <TRACE_TxCpltCallback+0x10c>)
 800c078:	829a      	strh	r2, [r3, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 800c07a:	4b26      	ldr	r3, [pc, #152]	; (800c114 <TRACE_TxCpltCallback+0x10c>)
 800c07c:	2202      	movs	r2, #2
 800c07e:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 800c080:	4b24      	ldr	r3, [pc, #144]	; (800c114 <TRACE_TxCpltCallback+0x10c>)
 800c082:	2200      	movs	r2, #0
 800c084:	801a      	strh	r2, [r3, #0]

      UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 800c086:	4b23      	ldr	r3, [pc, #140]	; (800c114 <TRACE_TxCpltCallback+0x10c>)
 800c088:	8a9b      	ldrh	r3, [r3, #20]
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d105      	bne.n	800c09a <TRACE_TxCpltCallback+0x92>
      {
        /* this case occurs when an ongoing write aligned the Rd position with chunk position */
        /* in that case the unchunk is forgot */
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 800c08e:	4b21      	ldr	r3, [pc, #132]	; (800c114 <TRACE_TxCpltCallback+0x10c>)
 800c090:	2200      	movs	r2, #0
 800c092:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 800c094:	4b1f      	ldr	r3, [pc, #124]	; (800c114 <TRACE_TxCpltCallback+0x10c>)
 800c096:	2200      	movs	r2, #0
 800c098:	821a      	strh	r2, [r3, #16]
      }
    }

    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 800c09a:	4b1e      	ldr	r3, [pc, #120]	; (800c114 <TRACE_TxCpltCallback+0x10c>)
 800c09c:	789b      	ldrb	r3, [r3, #2]
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d115      	bne.n	800c0ce <TRACE_TxCpltCallback+0xc6>
    {
#endif
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 800c0a2:	4b1c      	ldr	r3, [pc, #112]	; (800c114 <TRACE_TxCpltCallback+0x10c>)
 800c0a4:	8a5a      	ldrh	r2, [r3, #18]
 800c0a6:	4b1b      	ldr	r3, [pc, #108]	; (800c114 <TRACE_TxCpltCallback+0x10c>)
 800c0a8:	8a1b      	ldrh	r3, [r3, #16]
 800c0aa:	429a      	cmp	r2, r3
 800c0ac:	d908      	bls.n	800c0c0 <TRACE_TxCpltCallback+0xb8>
      {
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 800c0ae:	4b19      	ldr	r3, [pc, #100]	; (800c114 <TRACE_TxCpltCallback+0x10c>)
 800c0b0:	8a5a      	ldrh	r2, [r3, #18]
 800c0b2:	4b18      	ldr	r3, [pc, #96]	; (800c114 <TRACE_TxCpltCallback+0x10c>)
 800c0b4:	8a1b      	ldrh	r3, [r3, #16]
 800c0b6:	1ad3      	subs	r3, r2, r3
 800c0b8:	b29a      	uxth	r2, r3
 800c0ba:	4b16      	ldr	r3, [pc, #88]	; (800c114 <TRACE_TxCpltCallback+0x10c>)
 800c0bc:	829a      	strh	r2, [r3, #20]
 800c0be:	e006      	b.n	800c0ce <TRACE_TxCpltCallback+0xc6>
      }
      else /* TraceRdPtr > TraceWrPtr */
      {
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 800c0c0:	4b14      	ldr	r3, [pc, #80]	; (800c114 <TRACE_TxCpltCallback+0x10c>)
 800c0c2:	8a1b      	ldrh	r3, [r3, #16]
 800c0c4:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800c0c8:	b29a      	uxth	r2, r3
 800c0ca:	4b12      	ldr	r3, [pc, #72]	; (800c114 <TRACE_TxCpltCallback+0x10c>)
 800c0cc:	829a      	strh	r2, [r3, #20]
      }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    }
#endif
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 800c0ce:	4b11      	ldr	r3, [pc, #68]	; (800c114 <TRACE_TxCpltCallback+0x10c>)
 800c0d0:	8a1b      	ldrh	r3, [r3, #16]
 800c0d2:	461a      	mov	r2, r3
 800c0d4:	4b10      	ldr	r3, [pc, #64]	; (800c118 <TRACE_TxCpltCallback+0x110>)
 800c0d6:	4413      	add	r3, r2
 800c0d8:	61fb      	str	r3, [r7, #28]
 800c0da:	69bb      	ldr	r3, [r7, #24]
 800c0dc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c0de:	693b      	ldr	r3, [r7, #16]
 800c0e0:	f383 8810 	msr	PRIMASK, r3
}
 800c0e4:	bf00      	nop
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 800c0e6:	4b0d      	ldr	r3, [pc, #52]	; (800c11c <TRACE_TxCpltCallback+0x114>)
 800c0e8:	68db      	ldr	r3, [r3, #12]
 800c0ea:	4a0a      	ldr	r2, [pc, #40]	; (800c114 <TRACE_TxCpltCallback+0x10c>)
 800c0ec:	8a92      	ldrh	r2, [r2, #20]
 800c0ee:	4611      	mov	r1, r2
 800c0f0:	69f8      	ldr	r0, [r7, #28]
 800c0f2:	4798      	blx	r3
 800c0f4:	e00a      	b.n	800c10c <TRACE_TxCpltCallback+0x104>
 800c0f6:	69bb      	ldr	r3, [r7, #24]
 800c0f8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	f383 8810 	msr	PRIMASK, r3
}
 800c100:	bf00      	nop
  }
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_PostSendHook();
 800c102:	f7f4 fcd7 	bl	8000ab4 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 800c106:	f000 f8a7 	bl	800c258 <TRACE_UnLock>
  }
}
 800c10a:	bf00      	nop
 800c10c:	bf00      	nop
 800c10e:	3720      	adds	r7, #32
 800c110:	46bd      	mov	sp, r7
 800c112:	bd80      	pop	{r7, pc}
 800c114:	2000058c 	.word	0x2000058c
 800c118:	200005a4 	.word	0x200005a4
 800c11c:	0800c728 	.word	0x0800c728

0800c120 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 800c120:	b480      	push	{r7}
 800c122:	b087      	sub	sp, #28
 800c124:	af00      	add	r7, sp, #0
 800c126:	4603      	mov	r3, r0
 800c128:	6039      	str	r1, [r7, #0]
 800c12a:	80fb      	strh	r3, [r7, #6]
  uint16_t freesize;
  int16_t ret = -1;
 800c12c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c130:	82bb      	strh	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c132:	f3ef 8310 	mrs	r3, PRIMASK
 800c136:	60fb      	str	r3, [r7, #12]
  return(result);
 800c138:	68fb      	ldr	r3, [r7, #12]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 800c13a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800c13c:	b672      	cpsid	i
}
 800c13e:	bf00      	nop

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 800c140:	4b35      	ldr	r3, [pc, #212]	; (800c218 <TRACE_AllocateBufer+0xf8>)
 800c142:	8a5a      	ldrh	r2, [r3, #18]
 800c144:	4b34      	ldr	r3, [pc, #208]	; (800c218 <TRACE_AllocateBufer+0xf8>)
 800c146:	8a1b      	ldrh	r3, [r3, #16]
 800c148:	429a      	cmp	r2, r3
 800c14a:	d11b      	bne.n	800c184 <TRACE_AllocateBufer+0x64>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 800c14c:	4b32      	ldr	r3, [pc, #200]	; (800c218 <TRACE_AllocateBufer+0xf8>)
 800c14e:	8a5b      	ldrh	r3, [r3, #18]
 800c150:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800c154:	82fb      	strh	r3, [r7, #22]
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 800c156:	88fa      	ldrh	r2, [r7, #6]
 800c158:	8afb      	ldrh	r3, [r7, #22]
 800c15a:	429a      	cmp	r2, r3
 800c15c:	d33a      	bcc.n	800c1d4 <TRACE_AllocateBufer+0xb4>
 800c15e:	4b2e      	ldr	r3, [pc, #184]	; (800c218 <TRACE_AllocateBufer+0xf8>)
 800c160:	8a1b      	ldrh	r3, [r3, #16]
 800c162:	88fa      	ldrh	r2, [r7, #6]
 800c164:	429a      	cmp	r2, r3
 800c166:	d235      	bcs.n	800c1d4 <TRACE_AllocateBufer+0xb4>
    {
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 800c168:	4b2b      	ldr	r3, [pc, #172]	; (800c218 <TRACE_AllocateBufer+0xf8>)
 800c16a:	2201      	movs	r2, #1
 800c16c:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 800c16e:	4b2a      	ldr	r3, [pc, #168]	; (800c218 <TRACE_AllocateBufer+0xf8>)
 800c170:	8a5a      	ldrh	r2, [r3, #18]
 800c172:	4b29      	ldr	r3, [pc, #164]	; (800c218 <TRACE_AllocateBufer+0xf8>)
 800c174:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 800c176:	4b28      	ldr	r3, [pc, #160]	; (800c218 <TRACE_AllocateBufer+0xf8>)
 800c178:	8a1b      	ldrh	r3, [r3, #16]
 800c17a:	82fb      	strh	r3, [r7, #22]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 800c17c:	4b26      	ldr	r3, [pc, #152]	; (800c218 <TRACE_AllocateBufer+0xf8>)
 800c17e:	2200      	movs	r2, #0
 800c180:	825a      	strh	r2, [r3, #18]
 800c182:	e027      	b.n	800c1d4 <TRACE_AllocateBufer+0xb4>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 800c184:	4b24      	ldr	r3, [pc, #144]	; (800c218 <TRACE_AllocateBufer+0xf8>)
 800c186:	8a5a      	ldrh	r2, [r3, #18]
 800c188:	4b23      	ldr	r3, [pc, #140]	; (800c218 <TRACE_AllocateBufer+0xf8>)
 800c18a:	8a1b      	ldrh	r3, [r3, #16]
 800c18c:	429a      	cmp	r2, r3
 800c18e:	d91b      	bls.n	800c1c8 <TRACE_AllocateBufer+0xa8>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 800c190:	4b21      	ldr	r3, [pc, #132]	; (800c218 <TRACE_AllocateBufer+0xf8>)
 800c192:	8a5b      	ldrh	r3, [r3, #18]
 800c194:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800c198:	82fb      	strh	r3, [r7, #22]
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 800c19a:	88fa      	ldrh	r2, [r7, #6]
 800c19c:	8afb      	ldrh	r3, [r7, #22]
 800c19e:	429a      	cmp	r2, r3
 800c1a0:	d318      	bcc.n	800c1d4 <TRACE_AllocateBufer+0xb4>
 800c1a2:	4b1d      	ldr	r3, [pc, #116]	; (800c218 <TRACE_AllocateBufer+0xf8>)
 800c1a4:	8a1b      	ldrh	r3, [r3, #16]
 800c1a6:	88fa      	ldrh	r2, [r7, #6]
 800c1a8:	429a      	cmp	r2, r3
 800c1aa:	d213      	bcs.n	800c1d4 <TRACE_AllocateBufer+0xb4>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 800c1ac:	4b1a      	ldr	r3, [pc, #104]	; (800c218 <TRACE_AllocateBufer+0xf8>)
 800c1ae:	2201      	movs	r2, #1
 800c1b0:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 800c1b2:	4b19      	ldr	r3, [pc, #100]	; (800c218 <TRACE_AllocateBufer+0xf8>)
 800c1b4:	8a5a      	ldrh	r2, [r3, #18]
 800c1b6:	4b18      	ldr	r3, [pc, #96]	; (800c218 <TRACE_AllocateBufer+0xf8>)
 800c1b8:	801a      	strh	r2, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 800c1ba:	4b17      	ldr	r3, [pc, #92]	; (800c218 <TRACE_AllocateBufer+0xf8>)
 800c1bc:	8a1b      	ldrh	r3, [r3, #16]
 800c1be:	82fb      	strh	r3, [r7, #22]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 800c1c0:	4b15      	ldr	r3, [pc, #84]	; (800c218 <TRACE_AllocateBufer+0xf8>)
 800c1c2:	2200      	movs	r2, #0
 800c1c4:	825a      	strh	r2, [r3, #18]
 800c1c6:	e005      	b.n	800c1d4 <TRACE_AllocateBufer+0xb4>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 800c1c8:	4b13      	ldr	r3, [pc, #76]	; (800c218 <TRACE_AllocateBufer+0xf8>)
 800c1ca:	8a1a      	ldrh	r2, [r3, #16]
 800c1cc:	4b12      	ldr	r3, [pc, #72]	; (800c218 <TRACE_AllocateBufer+0xf8>)
 800c1ce:	8a5b      	ldrh	r3, [r3, #18]
 800c1d0:	1ad3      	subs	r3, r2, r3
 800c1d2:	82fb      	strh	r3, [r7, #22]
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 800c1d4:	8afa      	ldrh	r2, [r7, #22]
 800c1d6:	88fb      	ldrh	r3, [r7, #6]
 800c1d8:	429a      	cmp	r2, r3
 800c1da:	d90f      	bls.n	800c1fc <TRACE_AllocateBufer+0xdc>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 800c1dc:	4b0e      	ldr	r3, [pc, #56]	; (800c218 <TRACE_AllocateBufer+0xf8>)
 800c1de:	8a5a      	ldrh	r2, [r3, #18]
 800c1e0:	683b      	ldr	r3, [r7, #0]
 800c1e2:	801a      	strh	r2, [r3, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 800c1e4:	4b0c      	ldr	r3, [pc, #48]	; (800c218 <TRACE_AllocateBufer+0xf8>)
 800c1e6:	8a5a      	ldrh	r2, [r3, #18]
 800c1e8:	88fb      	ldrh	r3, [r7, #6]
 800c1ea:	4413      	add	r3, r2
 800c1ec:	b29b      	uxth	r3, r3
 800c1ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c1f2:	b29a      	uxth	r2, r3
 800c1f4:	4b08      	ldr	r3, [pc, #32]	; (800c218 <TRACE_AllocateBufer+0xf8>)
 800c1f6:	825a      	strh	r2, [r3, #18]
    ret = 0;
 800c1f8:	2300      	movs	r3, #0
 800c1fa:	82bb      	strh	r3, [r7, #20]
 800c1fc:	693b      	ldr	r3, [r7, #16]
 800c1fe:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c200:	68bb      	ldr	r3, [r7, #8]
 800c202:	f383 8810 	msr	PRIMASK, r3
}
 800c206:	bf00      	nop
    }
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
 800c208:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 800c20c:	4618      	mov	r0, r3
 800c20e:	371c      	adds	r7, #28
 800c210:	46bd      	mov	sp, r7
 800c212:	bc80      	pop	{r7}
 800c214:	4770      	bx	lr
 800c216:	bf00      	nop
 800c218:	2000058c 	.word	0x2000058c

0800c21c <TRACE_Lock>:
/**
 * @brief  Lock the trace buffer.
 * @retval None.
 */
static void TRACE_Lock(void)
{
 800c21c:	b480      	push	{r7}
 800c21e:	b085      	sub	sp, #20
 800c220:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c222:	f3ef 8310 	mrs	r3, PRIMASK
 800c226:	607b      	str	r3, [r7, #4]
  return(result);
 800c228:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 800c22a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800c22c:	b672      	cpsid	i
}
 800c22e:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock++;
 800c230:	4b08      	ldr	r3, [pc, #32]	; (800c254 <TRACE_Lock+0x38>)
 800c232:	8adb      	ldrh	r3, [r3, #22]
 800c234:	3301      	adds	r3, #1
 800c236:	b29a      	uxth	r2, r3
 800c238:	4b06      	ldr	r3, [pc, #24]	; (800c254 <TRACE_Lock+0x38>)
 800c23a:	82da      	strh	r2, [r3, #22]
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c240:	68bb      	ldr	r3, [r7, #8]
 800c242:	f383 8810 	msr	PRIMASK, r3
}
 800c246:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 800c248:	bf00      	nop
 800c24a:	3714      	adds	r7, #20
 800c24c:	46bd      	mov	sp, r7
 800c24e:	bc80      	pop	{r7}
 800c250:	4770      	bx	lr
 800c252:	bf00      	nop
 800c254:	2000058c 	.word	0x2000058c

0800c258 <TRACE_UnLock>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static void TRACE_UnLock(void)
{
 800c258:	b480      	push	{r7}
 800c25a:	b085      	sub	sp, #20
 800c25c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c25e:	f3ef 8310 	mrs	r3, PRIMASK
 800c262:	607b      	str	r3, [r7, #4]
  return(result);
 800c264:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 800c266:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800c268:	b672      	cpsid	i
}
 800c26a:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock--;
 800c26c:	4b08      	ldr	r3, [pc, #32]	; (800c290 <TRACE_UnLock+0x38>)
 800c26e:	8adb      	ldrh	r3, [r3, #22]
 800c270:	3b01      	subs	r3, #1
 800c272:	b29a      	uxth	r2, r3
 800c274:	4b06      	ldr	r3, [pc, #24]	; (800c290 <TRACE_UnLock+0x38>)
 800c276:	82da      	strh	r2, [r3, #22]
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c27c:	68bb      	ldr	r3, [r7, #8]
 800c27e:	f383 8810 	msr	PRIMASK, r3
}
 800c282:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 800c284:	bf00      	nop
 800c286:	3714      	adds	r7, #20
 800c288:	46bd      	mov	sp, r7
 800c28a:	bc80      	pop	{r7}
 800c28c:	4770      	bx	lr
 800c28e:	bf00      	nop
 800c290:	2000058c 	.word	0x2000058c

0800c294 <TRACE_IsLocked>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
 800c294:	b480      	push	{r7}
 800c296:	af00      	add	r7, sp, #0
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 800c298:	4b05      	ldr	r3, [pc, #20]	; (800c2b0 <TRACE_IsLocked+0x1c>)
 800c29a:	8adb      	ldrh	r3, [r3, #22]
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	bf14      	ite	ne
 800c2a0:	2301      	movne	r3, #1
 800c2a2:	2300      	moveq	r3, #0
 800c2a4:	b2db      	uxtb	r3, r3
}
 800c2a6:	4618      	mov	r0, r3
 800c2a8:	46bd      	mov	sp, r7
 800c2aa:	bc80      	pop	{r7}
 800c2ac:	4770      	bx	lr
 800c2ae:	bf00      	nop
 800c2b0:	2000058c 	.word	0x2000058c

0800c2b4 <memset>:
 800c2b4:	4402      	add	r2, r0
 800c2b6:	4603      	mov	r3, r0
 800c2b8:	4293      	cmp	r3, r2
 800c2ba:	d100      	bne.n	800c2be <memset+0xa>
 800c2bc:	4770      	bx	lr
 800c2be:	f803 1b01 	strb.w	r1, [r3], #1
 800c2c2:	e7f9      	b.n	800c2b8 <memset+0x4>

0800c2c4 <strncmp>:
 800c2c4:	b510      	push	{r4, lr}
 800c2c6:	b16a      	cbz	r2, 800c2e4 <strncmp+0x20>
 800c2c8:	3901      	subs	r1, #1
 800c2ca:	1884      	adds	r4, r0, r2
 800c2cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c2d0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c2d4:	429a      	cmp	r2, r3
 800c2d6:	d103      	bne.n	800c2e0 <strncmp+0x1c>
 800c2d8:	42a0      	cmp	r0, r4
 800c2da:	d001      	beq.n	800c2e0 <strncmp+0x1c>
 800c2dc:	2a00      	cmp	r2, #0
 800c2de:	d1f5      	bne.n	800c2cc <strncmp+0x8>
 800c2e0:	1ad0      	subs	r0, r2, r3
 800c2e2:	bd10      	pop	{r4, pc}
 800c2e4:	4610      	mov	r0, r2
 800c2e6:	e7fc      	b.n	800c2e2 <strncmp+0x1e>

0800c2e8 <__libc_init_array>:
 800c2e8:	b570      	push	{r4, r5, r6, lr}
 800c2ea:	4d0d      	ldr	r5, [pc, #52]	; (800c320 <__libc_init_array+0x38>)
 800c2ec:	4c0d      	ldr	r4, [pc, #52]	; (800c324 <__libc_init_array+0x3c>)
 800c2ee:	1b64      	subs	r4, r4, r5
 800c2f0:	10a4      	asrs	r4, r4, #2
 800c2f2:	2600      	movs	r6, #0
 800c2f4:	42a6      	cmp	r6, r4
 800c2f6:	d109      	bne.n	800c30c <__libc_init_array+0x24>
 800c2f8:	4d0b      	ldr	r5, [pc, #44]	; (800c328 <__libc_init_array+0x40>)
 800c2fa:	4c0c      	ldr	r4, [pc, #48]	; (800c32c <__libc_init_array+0x44>)
 800c2fc:	f000 f826 	bl	800c34c <_init>
 800c300:	1b64      	subs	r4, r4, r5
 800c302:	10a4      	asrs	r4, r4, #2
 800c304:	2600      	movs	r6, #0
 800c306:	42a6      	cmp	r6, r4
 800c308:	d105      	bne.n	800c316 <__libc_init_array+0x2e>
 800c30a:	bd70      	pop	{r4, r5, r6, pc}
 800c30c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c310:	4798      	blx	r3
 800c312:	3601      	adds	r6, #1
 800c314:	e7ee      	b.n	800c2f4 <__libc_init_array+0xc>
 800c316:	f855 3b04 	ldr.w	r3, [r5], #4
 800c31a:	4798      	blx	r3
 800c31c:	3601      	adds	r6, #1
 800c31e:	e7f2      	b.n	800c306 <__libc_init_array+0x1e>
 800c320:	0800c8b8 	.word	0x0800c8b8
 800c324:	0800c8b8 	.word	0x0800c8b8
 800c328:	0800c8b8 	.word	0x0800c8b8
 800c32c:	0800c8bc 	.word	0x0800c8bc

0800c330 <memcpy>:
 800c330:	440a      	add	r2, r1
 800c332:	4291      	cmp	r1, r2
 800c334:	f100 33ff 	add.w	r3, r0, #4294967295
 800c338:	d100      	bne.n	800c33c <memcpy+0xc>
 800c33a:	4770      	bx	lr
 800c33c:	b510      	push	{r4, lr}
 800c33e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c342:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c346:	4291      	cmp	r1, r2
 800c348:	d1f9      	bne.n	800c33e <memcpy+0xe>
 800c34a:	bd10      	pop	{r4, pc}

0800c34c <_init>:
 800c34c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c34e:	bf00      	nop
 800c350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c352:	bc08      	pop	{r3}
 800c354:	469e      	mov	lr, r3
 800c356:	4770      	bx	lr

0800c358 <_fini>:
 800c358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c35a:	bf00      	nop
 800c35c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c35e:	bc08      	pop	{r3}
 800c360:	469e      	mov	lr, r3
 800c362:	4770      	bx	lr
