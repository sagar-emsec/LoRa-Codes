
WL55JC Ping Pong M4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c360  08000138  08000138  00010138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000054c  0800c498  0800c498  0001c498  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c9e4  0800c9e4  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  0800c9e4  0800c9e4  0001c9e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c9ec  0800c9ec  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c9ec  0800c9ec  0001c9ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c9f0  0800c9f0  0001c9f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  0800c9f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000888  2000001c  0800ca10  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000a04  200008a4  0800ca10  000208a4  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020046  2**0
                  CONTENTS, READONLY
 13 .debug_info   000221d8  00000000  00000000  00020089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005d38  00000000  00000000  00042261  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001f60  00000000  00000000  00047fa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000178c  00000000  00000000  00049f00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000234ea  00000000  00000000  0004b68c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00025ebc  00000000  00000000  0006eb76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c4d1a  00000000  00000000  00094a32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007eec  00000000  00000000  0015974c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  00161638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	2000001c 	.word	0x2000001c
 8000154:	00000000 	.word	0x00000000
 8000158:	0800c480 	.word	0x0800c480

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	20000020 	.word	0x20000020
 8000174:	0800c480 	.word	0x0800c480

08000178 <strlen>:
 8000178:	4603      	mov	r3, r0
 800017a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800017e:	2a00      	cmp	r2, #0
 8000180:	d1fb      	bne.n	800017a <strlen+0x2>
 8000182:	1a18      	subs	r0, r3, r0
 8000184:	3801      	subs	r0, #1
 8000186:	4770      	bx	lr

08000188 <__aeabi_uldivmod>:
 8000188:	b953      	cbnz	r3, 80001a0 <__aeabi_uldivmod+0x18>
 800018a:	b94a      	cbnz	r2, 80001a0 <__aeabi_uldivmod+0x18>
 800018c:	2900      	cmp	r1, #0
 800018e:	bf08      	it	eq
 8000190:	2800      	cmpeq	r0, #0
 8000192:	bf1c      	itt	ne
 8000194:	f04f 31ff 	movne.w	r1, #4294967295
 8000198:	f04f 30ff 	movne.w	r0, #4294967295
 800019c:	f000 b970 	b.w	8000480 <__aeabi_idiv0>
 80001a0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001a4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001a8:	f000 f806 	bl	80001b8 <__udivmoddi4>
 80001ac:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001b4:	b004      	add	sp, #16
 80001b6:	4770      	bx	lr

080001b8 <__udivmoddi4>:
 80001b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001bc:	9e08      	ldr	r6, [sp, #32]
 80001be:	460d      	mov	r5, r1
 80001c0:	4604      	mov	r4, r0
 80001c2:	460f      	mov	r7, r1
 80001c4:	2b00      	cmp	r3, #0
 80001c6:	d14a      	bne.n	800025e <__udivmoddi4+0xa6>
 80001c8:	428a      	cmp	r2, r1
 80001ca:	4694      	mov	ip, r2
 80001cc:	d965      	bls.n	800029a <__udivmoddi4+0xe2>
 80001ce:	fab2 f382 	clz	r3, r2
 80001d2:	b143      	cbz	r3, 80001e6 <__udivmoddi4+0x2e>
 80001d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80001d8:	f1c3 0220 	rsb	r2, r3, #32
 80001dc:	409f      	lsls	r7, r3
 80001de:	fa20 f202 	lsr.w	r2, r0, r2
 80001e2:	4317      	orrs	r7, r2
 80001e4:	409c      	lsls	r4, r3
 80001e6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80001ea:	fa1f f58c 	uxth.w	r5, ip
 80001ee:	fbb7 f1fe 	udiv	r1, r7, lr
 80001f2:	0c22      	lsrs	r2, r4, #16
 80001f4:	fb0e 7711 	mls	r7, lr, r1, r7
 80001f8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80001fc:	fb01 f005 	mul.w	r0, r1, r5
 8000200:	4290      	cmp	r0, r2
 8000202:	d90a      	bls.n	800021a <__udivmoddi4+0x62>
 8000204:	eb1c 0202 	adds.w	r2, ip, r2
 8000208:	f101 37ff 	add.w	r7, r1, #4294967295
 800020c:	f080 811b 	bcs.w	8000446 <__udivmoddi4+0x28e>
 8000210:	4290      	cmp	r0, r2
 8000212:	f240 8118 	bls.w	8000446 <__udivmoddi4+0x28e>
 8000216:	3902      	subs	r1, #2
 8000218:	4462      	add	r2, ip
 800021a:	1a12      	subs	r2, r2, r0
 800021c:	b2a4      	uxth	r4, r4
 800021e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000222:	fb0e 2210 	mls	r2, lr, r0, r2
 8000226:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800022a:	fb00 f505 	mul.w	r5, r0, r5
 800022e:	42a5      	cmp	r5, r4
 8000230:	d90a      	bls.n	8000248 <__udivmoddi4+0x90>
 8000232:	eb1c 0404 	adds.w	r4, ip, r4
 8000236:	f100 32ff 	add.w	r2, r0, #4294967295
 800023a:	f080 8106 	bcs.w	800044a <__udivmoddi4+0x292>
 800023e:	42a5      	cmp	r5, r4
 8000240:	f240 8103 	bls.w	800044a <__udivmoddi4+0x292>
 8000244:	4464      	add	r4, ip
 8000246:	3802      	subs	r0, #2
 8000248:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800024c:	1b64      	subs	r4, r4, r5
 800024e:	2100      	movs	r1, #0
 8000250:	b11e      	cbz	r6, 800025a <__udivmoddi4+0xa2>
 8000252:	40dc      	lsrs	r4, r3
 8000254:	2300      	movs	r3, #0
 8000256:	e9c6 4300 	strd	r4, r3, [r6]
 800025a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800025e:	428b      	cmp	r3, r1
 8000260:	d908      	bls.n	8000274 <__udivmoddi4+0xbc>
 8000262:	2e00      	cmp	r6, #0
 8000264:	f000 80ec 	beq.w	8000440 <__udivmoddi4+0x288>
 8000268:	2100      	movs	r1, #0
 800026a:	e9c6 0500 	strd	r0, r5, [r6]
 800026e:	4608      	mov	r0, r1
 8000270:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000274:	fab3 f183 	clz	r1, r3
 8000278:	2900      	cmp	r1, #0
 800027a:	d149      	bne.n	8000310 <__udivmoddi4+0x158>
 800027c:	42ab      	cmp	r3, r5
 800027e:	d302      	bcc.n	8000286 <__udivmoddi4+0xce>
 8000280:	4282      	cmp	r2, r0
 8000282:	f200 80f7 	bhi.w	8000474 <__udivmoddi4+0x2bc>
 8000286:	1a84      	subs	r4, r0, r2
 8000288:	eb65 0203 	sbc.w	r2, r5, r3
 800028c:	2001      	movs	r0, #1
 800028e:	4617      	mov	r7, r2
 8000290:	2e00      	cmp	r6, #0
 8000292:	d0e2      	beq.n	800025a <__udivmoddi4+0xa2>
 8000294:	e9c6 4700 	strd	r4, r7, [r6]
 8000298:	e7df      	b.n	800025a <__udivmoddi4+0xa2>
 800029a:	b902      	cbnz	r2, 800029e <__udivmoddi4+0xe6>
 800029c:	deff      	udf	#255	; 0xff
 800029e:	fab2 f382 	clz	r3, r2
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	f040 808f 	bne.w	80003c6 <__udivmoddi4+0x20e>
 80002a8:	1a8a      	subs	r2, r1, r2
 80002aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ae:	fa1f fe8c 	uxth.w	lr, ip
 80002b2:	2101      	movs	r1, #1
 80002b4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002b8:	fb07 2015 	mls	r0, r7, r5, r2
 80002bc:	0c22      	lsrs	r2, r4, #16
 80002be:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80002c2:	fb0e f005 	mul.w	r0, lr, r5
 80002c6:	4290      	cmp	r0, r2
 80002c8:	d908      	bls.n	80002dc <__udivmoddi4+0x124>
 80002ca:	eb1c 0202 	adds.w	r2, ip, r2
 80002ce:	f105 38ff 	add.w	r8, r5, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0x122>
 80002d4:	4290      	cmp	r0, r2
 80002d6:	f200 80ca 	bhi.w	800046e <__udivmoddi4+0x2b6>
 80002da:	4645      	mov	r5, r8
 80002dc:	1a12      	subs	r2, r2, r0
 80002de:	b2a4      	uxth	r4, r4
 80002e0:	fbb2 f0f7 	udiv	r0, r2, r7
 80002e4:	fb07 2210 	mls	r2, r7, r0, r2
 80002e8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ec:	fb0e fe00 	mul.w	lr, lr, r0
 80002f0:	45a6      	cmp	lr, r4
 80002f2:	d908      	bls.n	8000306 <__udivmoddi4+0x14e>
 80002f4:	eb1c 0404 	adds.w	r4, ip, r4
 80002f8:	f100 32ff 	add.w	r2, r0, #4294967295
 80002fc:	d202      	bcs.n	8000304 <__udivmoddi4+0x14c>
 80002fe:	45a6      	cmp	lr, r4
 8000300:	f200 80ba 	bhi.w	8000478 <__udivmoddi4+0x2c0>
 8000304:	4610      	mov	r0, r2
 8000306:	eba4 040e 	sub.w	r4, r4, lr
 800030a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800030e:	e79f      	b.n	8000250 <__udivmoddi4+0x98>
 8000310:	f1c1 0720 	rsb	r7, r1, #32
 8000314:	408b      	lsls	r3, r1
 8000316:	fa22 fc07 	lsr.w	ip, r2, r7
 800031a:	ea4c 0c03 	orr.w	ip, ip, r3
 800031e:	fa05 f401 	lsl.w	r4, r5, r1
 8000322:	fa20 f307 	lsr.w	r3, r0, r7
 8000326:	40fd      	lsrs	r5, r7
 8000328:	4323      	orrs	r3, r4
 800032a:	fa00 f901 	lsl.w	r9, r0, r1
 800032e:	ea4f 401c 	mov.w	r0, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	fbb5 f8f0 	udiv	r8, r5, r0
 800033a:	0c1c      	lsrs	r4, r3, #16
 800033c:	fb00 5518 	mls	r5, r0, r8, r5
 8000340:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000344:	fb08 f50e 	mul.w	r5, r8, lr
 8000348:	42a5      	cmp	r5, r4
 800034a:	fa02 f201 	lsl.w	r2, r2, r1
 800034e:	d90b      	bls.n	8000368 <__udivmoddi4+0x1b0>
 8000350:	eb1c 0404 	adds.w	r4, ip, r4
 8000354:	f108 3aff 	add.w	sl, r8, #4294967295
 8000358:	f080 8087 	bcs.w	800046a <__udivmoddi4+0x2b2>
 800035c:	42a5      	cmp	r5, r4
 800035e:	f240 8084 	bls.w	800046a <__udivmoddi4+0x2b2>
 8000362:	f1a8 0802 	sub.w	r8, r8, #2
 8000366:	4464      	add	r4, ip
 8000368:	1b64      	subs	r4, r4, r5
 800036a:	b29d      	uxth	r5, r3
 800036c:	fbb4 f3f0 	udiv	r3, r4, r0
 8000370:	fb00 4413 	mls	r4, r0, r3, r4
 8000374:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000378:	fb03 fe0e 	mul.w	lr, r3, lr
 800037c:	45a6      	cmp	lr, r4
 800037e:	d908      	bls.n	8000392 <__udivmoddi4+0x1da>
 8000380:	eb1c 0404 	adds.w	r4, ip, r4
 8000384:	f103 30ff 	add.w	r0, r3, #4294967295
 8000388:	d26b      	bcs.n	8000462 <__udivmoddi4+0x2aa>
 800038a:	45a6      	cmp	lr, r4
 800038c:	d969      	bls.n	8000462 <__udivmoddi4+0x2aa>
 800038e:	3b02      	subs	r3, #2
 8000390:	4464      	add	r4, ip
 8000392:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000396:	fba0 8302 	umull	r8, r3, r0, r2
 800039a:	eba4 040e 	sub.w	r4, r4, lr
 800039e:	429c      	cmp	r4, r3
 80003a0:	46c6      	mov	lr, r8
 80003a2:	461d      	mov	r5, r3
 80003a4:	d355      	bcc.n	8000452 <__udivmoddi4+0x29a>
 80003a6:	d052      	beq.n	800044e <__udivmoddi4+0x296>
 80003a8:	b156      	cbz	r6, 80003c0 <__udivmoddi4+0x208>
 80003aa:	ebb9 030e 	subs.w	r3, r9, lr
 80003ae:	eb64 0405 	sbc.w	r4, r4, r5
 80003b2:	fa04 f707 	lsl.w	r7, r4, r7
 80003b6:	40cb      	lsrs	r3, r1
 80003b8:	40cc      	lsrs	r4, r1
 80003ba:	431f      	orrs	r7, r3
 80003bc:	e9c6 7400 	strd	r7, r4, [r6]
 80003c0:	2100      	movs	r1, #0
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	f1c3 0120 	rsb	r1, r3, #32
 80003ca:	fa02 fc03 	lsl.w	ip, r2, r3
 80003ce:	fa20 f201 	lsr.w	r2, r0, r1
 80003d2:	fa25 f101 	lsr.w	r1, r5, r1
 80003d6:	409d      	lsls	r5, r3
 80003d8:	432a      	orrs	r2, r5
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e6:	fb07 1510 	mls	r5, r7, r0, r1
 80003ea:	0c11      	lsrs	r1, r2, #16
 80003ec:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80003f0:	fb00 f50e 	mul.w	r5, r0, lr
 80003f4:	428d      	cmp	r5, r1
 80003f6:	fa04 f403 	lsl.w	r4, r4, r3
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x256>
 80003fc:	eb1c 0101 	adds.w	r1, ip, r1
 8000400:	f100 38ff 	add.w	r8, r0, #4294967295
 8000404:	d22f      	bcs.n	8000466 <__udivmoddi4+0x2ae>
 8000406:	428d      	cmp	r5, r1
 8000408:	d92d      	bls.n	8000466 <__udivmoddi4+0x2ae>
 800040a:	3802      	subs	r0, #2
 800040c:	4461      	add	r1, ip
 800040e:	1b49      	subs	r1, r1, r5
 8000410:	b292      	uxth	r2, r2
 8000412:	fbb1 f5f7 	udiv	r5, r1, r7
 8000416:	fb07 1115 	mls	r1, r7, r5, r1
 800041a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800041e:	fb05 f10e 	mul.w	r1, r5, lr
 8000422:	4291      	cmp	r1, r2
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x280>
 8000426:	eb1c 0202 	adds.w	r2, ip, r2
 800042a:	f105 38ff 	add.w	r8, r5, #4294967295
 800042e:	d216      	bcs.n	800045e <__udivmoddi4+0x2a6>
 8000430:	4291      	cmp	r1, r2
 8000432:	d914      	bls.n	800045e <__udivmoddi4+0x2a6>
 8000434:	3d02      	subs	r5, #2
 8000436:	4462      	add	r2, ip
 8000438:	1a52      	subs	r2, r2, r1
 800043a:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800043e:	e739      	b.n	80002b4 <__udivmoddi4+0xfc>
 8000440:	4631      	mov	r1, r6
 8000442:	4630      	mov	r0, r6
 8000444:	e709      	b.n	800025a <__udivmoddi4+0xa2>
 8000446:	4639      	mov	r1, r7
 8000448:	e6e7      	b.n	800021a <__udivmoddi4+0x62>
 800044a:	4610      	mov	r0, r2
 800044c:	e6fc      	b.n	8000248 <__udivmoddi4+0x90>
 800044e:	45c1      	cmp	r9, r8
 8000450:	d2aa      	bcs.n	80003a8 <__udivmoddi4+0x1f0>
 8000452:	ebb8 0e02 	subs.w	lr, r8, r2
 8000456:	eb63 050c 	sbc.w	r5, r3, ip
 800045a:	3801      	subs	r0, #1
 800045c:	e7a4      	b.n	80003a8 <__udivmoddi4+0x1f0>
 800045e:	4645      	mov	r5, r8
 8000460:	e7ea      	b.n	8000438 <__udivmoddi4+0x280>
 8000462:	4603      	mov	r3, r0
 8000464:	e795      	b.n	8000392 <__udivmoddi4+0x1da>
 8000466:	4640      	mov	r0, r8
 8000468:	e7d1      	b.n	800040e <__udivmoddi4+0x256>
 800046a:	46d0      	mov	r8, sl
 800046c:	e77c      	b.n	8000368 <__udivmoddi4+0x1b0>
 800046e:	3d02      	subs	r5, #2
 8000470:	4462      	add	r2, ip
 8000472:	e733      	b.n	80002dc <__udivmoddi4+0x124>
 8000474:	4608      	mov	r0, r1
 8000476:	e70b      	b.n	8000290 <__udivmoddi4+0xd8>
 8000478:	4464      	add	r4, ip
 800047a:	3802      	subs	r0, #2
 800047c:	e743      	b.n	8000306 <__udivmoddi4+0x14e>
 800047e:	bf00      	nop

08000480 <__aeabi_idiv0>:
 8000480:	4770      	bx	lr
 8000482:	bf00      	nop

08000484 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_DMAMUX1
  *         @arg @ref LL_AHB1_GRP1_PERIPH_CRC
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000484:	b480      	push	{r7}
 8000486:	b085      	sub	sp, #20
 8000488:	af00      	add	r7, sp, #0
 800048a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 800048c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000490:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000492:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	4313      	orrs	r3, r2
 800049a:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800049c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004a0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	4013      	ands	r3, r2
 80004a6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004a8:	68fb      	ldr	r3, [r7, #12]
}
 80004aa:	bf00      	nop
 80004ac:	3714      	adds	r7, #20
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bc80      	pop	{r7}
 80004b2:	4770      	bx	lr

080004b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80004b8:	2004      	movs	r0, #4
 80004ba:	f7ff ffe3 	bl	8000484 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004be:	2001      	movs	r0, #1
 80004c0:	f7ff ffe0 	bl	8000484 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 2, 0);
 80004c4:	2200      	movs	r2, #0
 80004c6:	2102      	movs	r1, #2
 80004c8:	200f      	movs	r0, #15
 80004ca:	f001 fa56 	bl	800197a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80004ce:	200f      	movs	r0, #15
 80004d0:	f001 fa6d 	bl	80019ae <HAL_NVIC_EnableIRQ>

}
 80004d4:	bf00      	nop
 80004d6:	bd80      	pop	{r7, pc}

080004d8 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80004d8:	b480      	push	{r7}
 80004da:	b085      	sub	sp, #20
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80004e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004e4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	4313      	orrs	r3, r2
 80004ee:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80004f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	4013      	ands	r3, r2
 80004fa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004fc:	68fb      	ldr	r3, [r7, #12]
}
 80004fe:	bf00      	nop
 8000500:	3714      	adds	r7, #20
 8000502:	46bd      	mov	sp, r7
 8000504:	bc80      	pop	{r7}
 8000506:	4770      	bx	lr

08000508 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b086      	sub	sp, #24
 800050c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800050e:	1d3b      	adds	r3, r7, #4
 8000510:	2200      	movs	r2, #0
 8000512:	601a      	str	r2, [r3, #0]
 8000514:	605a      	str	r2, [r3, #4]
 8000516:	609a      	str	r2, [r3, #8]
 8000518:	60da      	str	r2, [r3, #12]
 800051a:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800051c:	2002      	movs	r0, #2
 800051e:	f7ff ffdb 	bl	80004d8 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000522:	2004      	movs	r0, #4
 8000524:	f7ff ffd8 	bl	80004d8 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000528:	2001      	movs	r0, #1
 800052a:	f7ff ffd5 	bl	80004d8 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|PROB2_Pin|PROB1_Pin
 800052e:	2200      	movs	r2, #0
 8000530:	f44f 413a 	mov.w	r1, #47616	; 0xba00
 8000534:	481d      	ldr	r0, [pc, #116]	; (80005ac <MX_GPIO_Init+0xa4>)
 8000536:	f002 f89d 	bl	8002674 <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 800053a:	f44f 430a 	mov.w	r3, #35328	; 0x8a00
 800053e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000540:	2301      	movs	r3, #1
 8000542:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000544:	2300      	movs	r3, #0
 8000546:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000548:	2302      	movs	r3, #2
 800054a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800054c:	1d3b      	adds	r3, r7, #4
 800054e:	4619      	mov	r1, r3
 8000550:	4816      	ldr	r0, [pc, #88]	; (80005ac <MX_GPIO_Init+0xa4>)
 8000552:	f001 fe61 	bl	8002218 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = BUT1_Pin|BUT2_Pin;
 8000556:	2303      	movs	r3, #3
 8000558:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800055a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800055e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000560:	2301      	movs	r3, #1
 8000562:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000564:	1d3b      	adds	r3, r7, #4
 8000566:	4619      	mov	r1, r3
 8000568:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800056c:	f001 fe54 	bl	8002218 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = PROB2_Pin|PROB1_Pin;
 8000570:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000574:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000576:	2301      	movs	r3, #1
 8000578:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800057a:	2300      	movs	r3, #0
 800057c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800057e:	2303      	movs	r3, #3
 8000580:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000582:	1d3b      	adds	r3, r7, #4
 8000584:	4619      	mov	r1, r3
 8000586:	4809      	ldr	r0, [pc, #36]	; (80005ac <MX_GPIO_Init+0xa4>)
 8000588:	f001 fe46 	bl	8002218 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUT3_Pin;
 800058c:	2340      	movs	r3, #64	; 0x40
 800058e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000590:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000594:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000596:	2301      	movs	r3, #1
 8000598:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BUT3_GPIO_Port, &GPIO_InitStruct);
 800059a:	1d3b      	adds	r3, r7, #4
 800059c:	4619      	mov	r1, r3
 800059e:	4804      	ldr	r0, [pc, #16]	; (80005b0 <MX_GPIO_Init+0xa8>)
 80005a0:	f001 fe3a 	bl	8002218 <HAL_GPIO_Init>

}
 80005a4:	bf00      	nop
 80005a6:	3718      	adds	r7, #24
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	48000400 	.word	0x48000400
 80005b0:	48000800 	.word	0x48000800

080005b4 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 80005b4:	b480      	push	{r7}
 80005b6:	b083      	sub	sp, #12
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80005bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80005c4:	f023 0218 	bic.w	r2, r3, #24
 80005c8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	4313      	orrs	r3, r2
 80005d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80005d4:	bf00      	nop
 80005d6:	370c      	adds	r7, #12
 80005d8:	46bd      	mov	sp, r7
 80005da:	bc80      	pop	{r7}
 80005dc:	4770      	bx	lr

080005de <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005de:	b580      	push	{r7, lr}
 80005e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e2:	f001 f8a3 	bl	800172c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e6:	f000 f807 	bl	80005f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ea:	f7ff ff8d 	bl	8000508 <MX_GPIO_Init>
  MX_SubGHz_Phy_Init();
 80005ee:	f00a f92e 	bl	800a84e <MX_SubGHz_Phy_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_SubGHz_Phy_Process();
 80005f2:	f00a f934 	bl	800a85e <MX_SubGHz_Phy_Process>
 80005f6:	e7fc      	b.n	80005f2 <main+0x14>

080005f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b09a      	sub	sp, #104	; 0x68
 80005fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005fe:	f107 0320 	add.w	r3, r7, #32
 8000602:	2248      	movs	r2, #72	; 0x48
 8000604:	2100      	movs	r1, #0
 8000606:	4618      	mov	r0, r3
 8000608:	f00b feee 	bl	800c3e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800060c:	1d3b      	adds	r3, r7, #4
 800060e:	2200      	movs	r2, #0
 8000610:	601a      	str	r2, [r3, #0]
 8000612:	605a      	str	r2, [r3, #4]
 8000614:	609a      	str	r2, [r3, #8]
 8000616:	60da      	str	r2, [r3, #12]
 8000618:	611a      	str	r2, [r3, #16]
 800061a:	615a      	str	r2, [r3, #20]
 800061c:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800061e:	f002 f859 	bl	80026d4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000622:	2000      	movs	r0, #0
 8000624:	f7ff ffc6 	bl	80005b4 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000628:	4b1e      	ldr	r3, [pc, #120]	; (80006a4 <SystemClock_Config+0xac>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000630:	4a1c      	ldr	r2, [pc, #112]	; (80006a4 <SystemClock_Config+0xac>)
 8000632:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000636:	6013      	str	r3, [r2, #0]
 8000638:	4b1a      	ldr	r3, [pc, #104]	; (80006a4 <SystemClock_Config+0xac>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000640:	603b      	str	r3, [r7, #0]
 8000642:	683b      	ldr	r3, [r7, #0]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000644:	2324      	movs	r3, #36	; 0x24
 8000646:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000648:	2381      	movs	r3, #129	; 0x81
 800064a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800064c:	2301      	movs	r3, #1
 800064e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000650:	2300      	movs	r3, #0
 8000652:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8000654:	23b0      	movs	r3, #176	; 0xb0
 8000656:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000658:	2300      	movs	r3, #0
 800065a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800065c:	f107 0320 	add.w	r3, r7, #32
 8000660:	4618      	mov	r0, r3
 8000662:	f002 fbab 	bl	8002dbc <HAL_RCC_OscConfig>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <SystemClock_Config+0x78>
  {
    Error_Handler();
 800066c:	f000 f81c 	bl	80006a8 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8000670:	234f      	movs	r3, #79	; 0x4f
 8000672:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000674:	2300      	movs	r3, #0
 8000676:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000678:	2300      	movs	r3, #0
 800067a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800067c:	2300      	movs	r3, #0
 800067e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000680:	2300      	movs	r3, #0
 8000682:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8000684:	2300      	movs	r3, #0
 8000686:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000688:	1d3b      	adds	r3, r7, #4
 800068a:	2102      	movs	r1, #2
 800068c:	4618      	mov	r0, r3
 800068e:	f002 ff17 	bl	80034c0 <HAL_RCC_ClockConfig>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000698:	f000 f806 	bl	80006a8 <Error_Handler>
  }
}
 800069c:	bf00      	nop
 800069e:	3768      	adds	r7, #104	; 0x68
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	58000400 	.word	0x58000400

080006a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006ac:	b672      	cpsid	i
}
 80006ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006b0:	e7fe      	b.n	80006b0 <Error_Handler+0x8>

080006b2 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 80006b2:	b480      	push	{r7}
 80006b4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80006b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80006ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80006be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80006c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80006c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80006ca:	bf00      	nop
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bc80      	pop	{r7}
 80006d0:	4770      	bx	lr

080006d2 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80006d2:	b480      	push	{r7}
 80006d4:	b085      	sub	sp, #20
 80006d6:	af00      	add	r7, sp, #0
 80006d8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80006da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80006de:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80006e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	4313      	orrs	r3, r2
 80006e8:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80006ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80006ee:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	4013      	ands	r3, r2
 80006f4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80006f6:	68fb      	ldr	r3, [r7, #12]
}
 80006f8:	bf00      	nop
 80006fa:	3714      	adds	r7, #20
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bc80      	pop	{r7}
 8000700:	4770      	bx	lr
	...

08000704 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b08c      	sub	sp, #48	; 0x30
 8000708:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 800070a:	1d3b      	adds	r3, r7, #4
 800070c:	222c      	movs	r2, #44	; 0x2c
 800070e:	2100      	movs	r1, #0
 8000710:	4618      	mov	r0, r3
 8000712:	f00b fe69 	bl	800c3e8 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000716:	4b22      	ldr	r3, [pc, #136]	; (80007a0 <MX_RTC_Init+0x9c>)
 8000718:	4a22      	ldr	r2, [pc, #136]	; (80007a4 <MX_RTC_Init+0xa0>)
 800071a:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 800071c:	4b20      	ldr	r3, [pc, #128]	; (80007a0 <MX_RTC_Init+0x9c>)
 800071e:	221f      	movs	r2, #31
 8000720:	609a      	str	r2, [r3, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000722:	4b1f      	ldr	r3, [pc, #124]	; (80007a0 <MX_RTC_Init+0x9c>)
 8000724:	2200      	movs	r2, #0
 8000726:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000728:	4b1d      	ldr	r3, [pc, #116]	; (80007a0 <MX_RTC_Init+0x9c>)
 800072a:	2200      	movs	r2, #0
 800072c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800072e:	4b1c      	ldr	r3, [pc, #112]	; (80007a0 <MX_RTC_Init+0x9c>)
 8000730:	2200      	movs	r2, #0
 8000732:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000734:	4b1a      	ldr	r3, [pc, #104]	; (80007a0 <MX_RTC_Init+0x9c>)
 8000736:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800073a:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800073c:	4b18      	ldr	r3, [pc, #96]	; (80007a0 <MX_RTC_Init+0x9c>)
 800073e:	2200      	movs	r2, #0
 8000740:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 8000742:	4b17      	ldr	r3, [pc, #92]	; (80007a0 <MX_RTC_Init+0x9c>)
 8000744:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000748:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800074a:	4815      	ldr	r0, [pc, #84]	; (80007a0 <MX_RTC_Init+0x9c>)
 800074c:	f003 fb92 	bl	8003e74 <HAL_RTC_Init>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <MX_RTC_Init+0x56>
  {
    Error_Handler();
 8000756:	f7ff ffa7 	bl	80006a8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 800075a:	4811      	ldr	r0, [pc, #68]	; (80007a0 <MX_RTC_Init+0x9c>)
 800075c:	f003 fe88 	bl	8004470 <HAL_RTCEx_SetSSRU_IT>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8000766:	f7ff ff9f 	bl	80006a8 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 800076a:	2300      	movs	r3, #0
 800076c:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800076e:	2300      	movs	r3, #0
 8000770:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000772:	2300      	movs	r3, #0
 8000774:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8000776:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800077a:	61fb      	str	r3, [r7, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 800077c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000780:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 8000782:	1d3b      	adds	r3, r7, #4
 8000784:	2200      	movs	r2, #0
 8000786:	4619      	mov	r1, r3
 8000788:	4805      	ldr	r0, [pc, #20]	; (80007a0 <MX_RTC_Init+0x9c>)
 800078a:	f003 fbf5 	bl	8003f78 <HAL_RTC_SetAlarm_IT>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8000794:	f7ff ff88 	bl	80006a8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000798:	bf00      	nop
 800079a:	3730      	adds	r7, #48	; 0x30
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	20000038 	.word	0x20000038
 80007a4:	40002800 	.word	0x40002800

080007a8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b090      	sub	sp, #64	; 0x40
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007b0:	f107 0308 	add.w	r3, r7, #8
 80007b4:	2238      	movs	r2, #56	; 0x38
 80007b6:	2100      	movs	r1, #0
 80007b8:	4618      	mov	r0, r3
 80007ba:	f00b fe15 	bl	800c3e8 <memset>
  if(rtcHandle->Instance==RTC)
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	4a16      	ldr	r2, [pc, #88]	; (800081c <HAL_RTC_MspInit+0x74>)
 80007c4:	4293      	cmp	r3, r2
 80007c6:	d125      	bne.n	8000814 <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80007c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007cc:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80007ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007d2:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007d4:	f107 0308 	add.w	r3, r7, #8
 80007d8:	4618      	mov	r0, r3
 80007da:	f003 fa31 	bl	8003c40 <HAL_RCCEx_PeriphCLKConfig>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80007e4:	f7ff ff60 	bl	80006a8 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80007e8:	f7ff ff63 	bl	80006b2 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80007ec:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80007f0:	f7ff ff6f 	bl	80006d2 <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 80007f4:	2200      	movs	r2, #0
 80007f6:	2100      	movs	r1, #0
 80007f8:	2002      	movs	r0, #2
 80007fa:	f001 f8be 	bl	800197a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 80007fe:	2002      	movs	r0, #2
 8000800:	f001 f8d5 	bl	80019ae <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8000804:	2200      	movs	r2, #0
 8000806:	2100      	movs	r1, #0
 8000808:	202a      	movs	r0, #42	; 0x2a
 800080a:	f001 f8b6 	bl	800197a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 800080e:	202a      	movs	r0, #42	; 0x2a
 8000810:	f001 f8cd 	bl	80019ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000814:	bf00      	nop
 8000816:	3740      	adds	r7, #64	; 0x40
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	40002800 	.word	0x40002800

08000820 <LL_PWR_ClearFlag_C1STOP_C1STB>:
  * @brief  Clear standby and stop flags for CPU1
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 8000824:	4b03      	ldr	r3, [pc, #12]	; (8000834 <LL_PWR_ClearFlag_C1STOP_C1STB+0x14>)
 8000826:	2201      	movs	r2, #1
 8000828:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800082c:	bf00      	nop
 800082e:	46bd      	mov	sp, r7
 8000830:	bc80      	pop	{r7}
 8000832:	4770      	bx	lr
 8000834:	58000400 	.word	0x58000400

08000838 <PWR_EnterOffMode>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void PWR_EnterOffMode(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 800083c:	bf00      	nop
 800083e:	46bd      	mov	sp, r7
 8000840:	bc80      	pop	{r7}
 8000842:	4770      	bx	lr

08000844 <PWR_ExitOffMode>:

void PWR_ExitOffMode(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 8000848:	bf00      	nop
 800084a:	46bd      	mov	sp, r7
 800084c:	bc80      	pop	{r7}
 800084e:	4770      	bx	lr

08000850 <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 8000854:	f000 ff8a 	bl	800176c <HAL_SuspendTick>
  /* Clear Status Flag before entering STOP/STANDBY Mode */
  LL_PWR_ClearFlag_C1STOP_C1STB();
 8000858:	f7ff ffe2 	bl	8000820 <LL_PWR_ClearFlag_C1STOP_C1STB>

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 800085c:	2001      	movs	r0, #1
 800085e:	f001 ffcb 	bl	80027f8 <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 8000862:	bf00      	nop
 8000864:	bd80      	pop	{r7, pc}

08000866 <PWR_ExitStopMode>:

void PWR_ExitStopMode(void)
{
 8000866:	b580      	push	{r7, lr}
 8000868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitStopMode_1 */

  /* USER CODE END ExitStopMode_1 */
  /* Resume sysTick : work around for debugger problem in dual core */
  HAL_ResumeTick();
 800086a:	f000 ff8d 	bl	8001788 <HAL_ResumeTick>
    ADC interface
    DAC interface USARTx, TIMx, i2Cx, SPIx
    SRAM ctrls, DMAx, DMAMux, AES, RNG, HSEM  */

  /* Resume not retained USARTx and DMA */
  vcom_Resume();
 800086e:	f000 fdd9 	bl	8001424 <vcom_Resume>
  /* USER CODE BEGIN ExitStopMode_2 */

  /* USER CODE END ExitStopMode_2 */
}
 8000872:	bf00      	nop
 8000874:	bd80      	pop	{r7, pc}

08000876 <PWR_EnterSleepMode>:

void PWR_EnterSleepMode(void)
{
 8000876:	b580      	push	{r7, lr}
 8000878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterSleepMode_1 */

  /* USER CODE END EnterSleepMode_1 */
  /* Suspend sysTick */
  HAL_SuspendTick();
 800087a:	f000 ff77 	bl	800176c <HAL_SuspendTick>
  /* USER CODE BEGIN EnterSleepMode_2 */

  /* USER CODE END EnterSleepMode_2 */
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 800087e:	2101      	movs	r1, #1
 8000880:	2000      	movs	r0, #0
 8000882:	f001 ff35 	bl	80026f0 <HAL_PWR_EnterSLEEPMode>
  /* USER CODE BEGIN EnterSleepMode_3 */

  /* USER CODE END EnterSleepMode_3 */
}
 8000886:	bf00      	nop
 8000888:	bd80      	pop	{r7, pc}

0800088a <PWR_ExitSleepMode>:

void PWR_ExitSleepMode(void)
{
 800088a:	b580      	push	{r7, lr}
 800088c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Resume sysTick */
  HAL_ResumeTick();
 800088e:	f000 ff7b 	bl	8001788 <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 8000892:	bf00      	nop
 8000894:	bd80      	pop	{r7, pc}

08000896 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000896:	b480      	push	{r7}
 8000898:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800089a:	bf00      	nop
 800089c:	46bd      	mov	sp, r7
 800089e:	bc80      	pop	{r7}
 80008a0:	4770      	bx	lr

080008a2 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008a2:	b480      	push	{r7}
 80008a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008a6:	e7fe      	b.n	80008a6 <NMI_Handler+0x4>

080008a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ac:	e7fe      	b.n	80008ac <HardFault_Handler+0x4>

080008ae <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008ae:	b480      	push	{r7}
 80008b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008b2:	e7fe      	b.n	80008b2 <MemManage_Handler+0x4>

080008b4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008b8:	e7fe      	b.n	80008b8 <BusFault_Handler+0x4>

080008ba <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008ba:	b480      	push	{r7}
 80008bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008be:	e7fe      	b.n	80008be <UsageFault_Handler+0x4>

080008c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008c4:	bf00      	nop
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bc80      	pop	{r7}
 80008ca:	4770      	bx	lr

080008cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008d0:	bf00      	nop
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bc80      	pop	{r7}
 80008d6:	4770      	bx	lr

080008d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008dc:	bf00      	nop
 80008de:	46bd      	mov	sp, r7
 80008e0:	bc80      	pop	{r7}
 80008e2:	4770      	bx	lr

080008e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008e8:	bf00      	nop
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bc80      	pop	{r7}
 80008ee:	4770      	bx	lr

080008f0 <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 80008f4:	4802      	ldr	r0, [pc, #8]	; (8000900 <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0x10>)
 80008f6:	f003 fdf7 	bl	80044e8 <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 80008fa:	bf00      	nop
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	20000038 	.word	0x20000038

08000904 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 5 Interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000908:	4802      	ldr	r0, [pc, #8]	; (8000914 <DMA1_Channel5_IRQHandler+0x10>)
 800090a:	f001 fae7 	bl	8001edc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800090e:	bf00      	nop
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	20000118 	.word	0x20000118

08000918 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800091c:	4802      	ldr	r0, [pc, #8]	; (8000928 <USART2_IRQHandler+0x10>)
 800091e:	f004 fc2d 	bl	800517c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000922:	bf00      	nop
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	20000084 	.word	0x20000084

0800092c <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8000930:	4802      	ldr	r0, [pc, #8]	; (800093c <RTC_Alarm_IRQHandler+0x10>)
 8000932:	f003 fc89 	bl	8004248 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8000936:	bf00      	nop
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	20000038 	.word	0x20000038

08000940 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8000944:	4802      	ldr	r0, [pc, #8]	; (8000950 <SUBGHZ_Radio_IRQHandler+0x10>)
 8000946:	f004 f93d 	bl	8004bc4 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 800094a:	bf00      	nop
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	20000070 	.word	0x20000070

08000954 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8000954:	b480      	push	{r7}
 8000956:	b085      	sub	sp, #20
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 800095c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000960:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8000962:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	4313      	orrs	r3, r2
 800096a:	664b      	str	r3, [r1, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 800096c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000970:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	4013      	ands	r3, r2
 8000976:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000978:	68fb      	ldr	r3, [r7, #12]
}
 800097a:	bf00      	nop
 800097c:	3714      	adds	r7, #20
 800097e:	46bd      	mov	sp, r7
 8000980:	bc80      	pop	{r7}
 8000982:	4770      	bx	lr

08000984 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8000988:	4b06      	ldr	r3, [pc, #24]	; (80009a4 <MX_SUBGHZ_Init+0x20>)
 800098a:	2208      	movs	r2, #8
 800098c:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 800098e:	4805      	ldr	r0, [pc, #20]	; (80009a4 <MX_SUBGHZ_Init+0x20>)
 8000990:	f003 fe96 	bl	80046c0 <HAL_SUBGHZ_Init>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 800099a:	f7ff fe85 	bl	80006a8 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 800099e:	bf00      	nop
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	20000070 	.word	0x20000070

080009a8 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 80009b0:	2001      	movs	r0, #1
 80009b2:	f7ff ffcf 	bl	8000954 <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 80009b6:	2200      	movs	r2, #0
 80009b8:	2100      	movs	r1, #0
 80009ba:	2032      	movs	r0, #50	; 0x32
 80009bc:	f000 ffdd 	bl	800197a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 80009c0:	2032      	movs	r0, #50	; 0x32
 80009c2:	f000 fff4 	bl	80019ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 80009c6:	bf00      	nop
 80009c8:	3708      	adds	r7, #8
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}

080009ce <LL_RCC_SetClkAfterWakeFromStop>:
{
 80009ce:	b480      	push	{r7}
 80009d0:	b083      	sub	sp, #12
 80009d2:	af00      	add	r7, sp, #0
 80009d4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 80009d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80009da:	689b      	ldr	r3, [r3, #8]
 80009dc:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80009e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	4313      	orrs	r3, r2
 80009e8:	608b      	str	r3, [r1, #8]
}
 80009ea:	bf00      	nop
 80009ec:	370c      	adds	r7, #12
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bc80      	pop	{r7}
 80009f2:	4770      	bx	lr

080009f4 <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

  /* Ensure that MSI is wake-up system clock */
  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI);
 80009f8:	2000      	movs	r0, #0
 80009fa:	f7ff ffe8 	bl	80009ce <LL_RCC_SetClkAfterWakeFromStop>

  /*Initialize timer and RTC*/
  UTIL_TIMER_Init();
 80009fe:	f00a ffcf 	bl	800b9a0 <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 8000a02:	4b0a      	ldr	r3, [pc, #40]	; (8000a2c <SystemApp_Init+0x38>)
 8000a04:	2201      	movs	r2, #1
 8000a06:	701a      	strb	r2, [r3, #0]
  /* Initializes the SW probes pins and the monitor RF pins via Alternate Function */
  DBG_Init();
 8000a08:	f000 f8a2 	bl	8000b50 <DBG_Init>

  /*Initialize the terminal */
  UTIL_ADV_TRACE_Init();
 8000a0c:	f00b fa58 	bl	800bec0 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8000a10:	4807      	ldr	r0, [pc, #28]	; (8000a30 <SystemApp_Init+0x3c>)
 8000a12:	f00b faf1 	bl	800bff8 <UTIL_ADV_TRACE_RegisterTimeStampFunction>

  /*Set verbose LEVEL*/
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8000a16:	2002      	movs	r0, #2
 8000a18:	f00b fafc 	bl	800c014 <UTIL_ADV_TRACE_SetVerboseLevel>

  /*Init low power manager*/
  UTIL_LPM_Init();
 8000a1c:	f00a fa78 	bl	800af10 <UTIL_LPM_Init>
  /* Disable Stand-by mode */
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8000a20:	2101      	movs	r1, #1
 8000a22:	2001      	movs	r0, #1
 8000a24:	f00a fab4 	bl	800af90 <UTIL_LPM_SetOffMode>
#endif /* LOW_POWER_DISABLE */

  /* USER CODE BEGIN SystemApp_Init_2 */

  /* USER CODE END SystemApp_Init_2 */
}
 8000a28:	bf00      	nop
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	2000007c 	.word	0x2000007c
 8000a30:	08000a41 	.word	0x08000a41

08000a34 <UTIL_SEQ_Idle>:

/**
  * @brief redefines __weak function in stm32_seq.c such to enter low power
  */
void UTIL_SEQ_Idle(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_SEQ_Idle_1 */

  /* USER CODE END UTIL_SEQ_Idle_1 */
  UTIL_LPM_EnterLowPower();
 8000a38:	f00a fada 	bl	800aff0 <UTIL_LPM_EnterLowPower>
  /* USER CODE BEGIN UTIL_SEQ_Idle_2 */

  /* USER CODE END UTIL_SEQ_Idle_2 */
}
 8000a3c:	bf00      	nop
 8000a3e:	bd80      	pop	{r7, pc}

08000a40 <TimestampNow>:
/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/

static void TimestampNow(uint8_t *buff, uint16_t *size)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b086      	sub	sp, #24
 8000a44:	af02      	add	r7, sp, #8
 8000a46:	6078      	str	r0, [r7, #4]
 8000a48:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TimestampNow_1 */

  /* USER CODE END TimestampNow_1 */
  SysTime_t curtime = SysTimeGet();
 8000a4a:	f107 0308 	add.w	r3, r7, #8
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f00a fb78 	bl	800b144 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8000a54:	68bb      	ldr	r3, [r7, #8]
 8000a56:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000a5a:	9200      	str	r2, [sp, #0]
 8000a5c:	4a07      	ldr	r2, [pc, #28]	; (8000a7c <TimestampNow+0x3c>)
 8000a5e:	2110      	movs	r1, #16
 8000a60:	6878      	ldr	r0, [r7, #4]
 8000a62:	f000 f81d 	bl	8000aa0 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 8000a66:	6878      	ldr	r0, [r7, #4]
 8000a68:	f7ff fb86 	bl	8000178 <strlen>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	b29a      	uxth	r2, r3
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN TimestampNow_2 */

  /* USER CODE END TimestampNow_2 */
}
 8000a74:	bf00      	nop
 8000a76:	3710      	adds	r7, #16
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	0800c498 	.word	0x0800c498

08000a80 <UTIL_ADV_TRACE_PreSendHook>:

/* Disable StopMode when traces need to be printed */
void UTIL_ADV_TRACE_PreSendHook(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_1 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8000a84:	2101      	movs	r1, #1
 8000a86:	2002      	movs	r0, #2
 8000a88:	f00a fa52 	bl	800af30 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_2 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_2 */
}
 8000a8c:	bf00      	nop
 8000a8e:	bd80      	pop	{r7, pc}

08000a90 <UTIL_ADV_TRACE_PostSendHook>:
/* Re-enable StopMode when traces have been printed */
void UTIL_ADV_TRACE_PostSendHook(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_1 */

  /* USER CODE END UTIL_LPM_SetStopMode_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 8000a94:	2100      	movs	r1, #0
 8000a96:	2002      	movs	r0, #2
 8000a98:	f00a fa4a 	bl	800af30 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}
 8000a9c:	bf00      	nop
 8000a9e:	bd80      	pop	{r7, pc}

08000aa0 <tiny_snprintf_like>:

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 8000aa0:	b40c      	push	{r2, r3}
 8000aa2:	b580      	push	{r7, lr}
 8000aa4:	b084      	sub	sp, #16
 8000aa6:	af00      	add	r7, sp, #0
 8000aa8:	6078      	str	r0, [r7, #4]
 8000aaa:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 8000aac:	f107 031c 	add.w	r3, r7, #28
 8000ab0:	60fb      	str	r3, [r7, #12]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8000ab2:	6839      	ldr	r1, [r7, #0]
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	69ba      	ldr	r2, [r7, #24]
 8000ab8:	6878      	ldr	r0, [r7, #4]
 8000aba:	f00a fc8f 	bl	800b3dc <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 8000abe:	bf00      	nop
 8000ac0:	3710      	adds	r7, #16
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000ac8:	b002      	add	sp, #8
 8000aca:	4770      	bx	lr

08000acc <HAL_InitTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b083      	sub	sp, #12
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  /*Don't enable SysTick if TIMER_IF is based on other counters (e.g. RTC) */
  /* USER CODE BEGIN HAL_InitTick_1 */

  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
 8000ad4:	2300      	movs	r3, #0
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	370c      	adds	r7, #12
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bc80      	pop	{r7}
 8000ade:	4770      	bx	lr

08000ae0 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	607b      	str	r3, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 8000aea:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <HAL_GetTick+0x24>)
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d002      	beq.n	8000af8 <HAL_GetTick+0x18>

    /* USER CODE END HAL_GetTick_EarlyCall */
  }
  else
  {
    ret = TIMER_IF_GetTimerValue();
 8000af2:	f000 f92d 	bl	8000d50 <TIMER_IF_GetTimerValue>
 8000af6:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
 8000af8:	687b      	ldr	r3, [r7, #4]
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	3708      	adds	r7, #8
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	2000007c 	.word	0x2000007c

08000b08 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	4618      	mov	r0, r3
 8000b14:	f000 f9a3 	bl	8000e5e <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8000b18:	bf00      	nop
 8000b1a:	3708      	adds	r7, #8
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}

08000b20 <LL_AHB2_GRP1_EnableClock>:
{
 8000b20:	b480      	push	{r7}
 8000b22:	b085      	sub	sp, #20
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000b28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b2c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b2e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	4313      	orrs	r3, r2
 8000b36:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000b38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b3c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	4013      	ands	r3, r2
 8000b42:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b44:	68fb      	ldr	r3, [r7, #12]
}
 8000b46:	bf00      	nop
 8000b48:	3714      	adds	r7, #20
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bc80      	pop	{r7}
 8000b4e:	4770      	bx	lr

08000b50 <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b086      	sub	sp, #24
 8000b54:	af00      	add	r7, sp, #0

  /* USER CODE END DBG_Init_1 */

  /* SW probes */
#if defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 0 )
  HAL_DBGMCU_DisableDBGSleepMode();
 8000b56:	f000 fe25 	bl	80017a4 <HAL_DBGMCU_DisableDBGSleepMode>
  HAL_DBGMCU_DisableDBGStopMode();
 8000b5a:	f000 fe29 	bl	80017b0 <HAL_DBGMCU_DisableDBGStopMode>
  HAL_DBGMCU_DisableDBGStandbyMode();
 8000b5e:	f000 fe2d 	bl	80017bc <HAL_DBGMCU_DisableDBGStandbyMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
#elif !defined (DEBUGGER_ENABLED)
#error "DEBUGGER_ENABLED not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */

  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 8000b62:	1d3b      	adds	r3, r7, #4
 8000b64:	2200      	movs	r2, #0
 8000b66:	601a      	str	r2, [r3, #0]
 8000b68:	605a      	str	r2, [r3, #4]
 8000b6a:	609a      	str	r2, [r3, #8]
 8000b6c:	60da      	str	r2, [r3, #12]
 8000b6e:	611a      	str	r2, [r3, #16]

  /* Configure the GPIO pin */
  GPIO_InitStruct.Mode   = GPIO_MODE_OUTPUT_PP;
 8000b70:	2301      	movs	r3, #1
 8000b72:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
 8000b74:	2300      	movs	r3, #0
 8000b76:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b78:	2303      	movs	r3, #3
 8000b7a:	613b      	str	r3, [r7, #16]

  /* Enable the GPIO Clock */
  PROBE_LINE1_CLK_ENABLE();
 8000b7c:	2002      	movs	r0, #2
 8000b7e:	f7ff ffcf 	bl	8000b20 <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE2_CLK_ENABLE();
 8000b82:	2002      	movs	r0, #2
 8000b84:	f7ff ffcc 	bl	8000b20 <LL_AHB2_GRP1_EnableClock>

  GPIO_InitStruct.Pin    = PROBE_LINE1_PIN;
 8000b88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b8c:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE1_PORT, &GPIO_InitStruct);
 8000b8e:	1d3b      	adds	r3, r7, #4
 8000b90:	4619      	mov	r1, r3
 8000b92:	480d      	ldr	r0, [pc, #52]	; (8000bc8 <DBG_Init+0x78>)
 8000b94:	f001 fb40 	bl	8002218 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE2_PIN;
 8000b98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b9c:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE2_PORT, &GPIO_InitStruct);
 8000b9e:	1d3b      	adds	r3, r7, #4
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	4809      	ldr	r0, [pc, #36]	; (8000bc8 <DBG_Init+0x78>)
 8000ba4:	f001 fb38 	bl	8002218 <HAL_GPIO_Init>

  /* Reset probe Pins */
  HAL_GPIO_WritePin(PROBE_LINE1_PORT, PROBE_LINE1_PIN, GPIO_PIN_RESET);
 8000ba8:	2200      	movs	r2, #0
 8000baa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bae:	4806      	ldr	r0, [pc, #24]	; (8000bc8 <DBG_Init+0x78>)
 8000bb0:	f001 fd60 	bl	8002674 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE2_PORT, PROBE_LINE2_PIN, GPIO_PIN_RESET);
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bba:	4803      	ldr	r0, [pc, #12]	; (8000bc8 <DBG_Init+0x78>)
 8000bbc:	f001 fd5a 	bl	8002674 <HAL_GPIO_WritePin>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 8000bc0:	bf00      	nop
 8000bc2:	3718      	adds	r7, #24
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	48000400 	.word	0x48000400

08000bcc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8000bd0:	bf00      	nop
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bc80      	pop	{r7}
 8000bd6:	4770      	bx	lr

08000bd8 <LL_RTC_TIME_GetSubSecond>:
  * @param  RTCx RTC Instance
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	689b      	ldr	r3, [r3, #8]
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	370c      	adds	r7, #12
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bc80      	pop	{r7}
 8000bec:	4770      	bx	lr
	...

08000bf0 <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  if (RTC_Initialized == false)
 8000bfa:	4b14      	ldr	r3, [pc, #80]	; (8000c4c <TIMER_IF_Init+0x5c>)
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	f083 0301 	eor.w	r3, r3, #1
 8000c02:	b2db      	uxtb	r3, r3
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d01b      	beq.n	8000c40 <TIMER_IF_Init+0x50>
  {
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8000c08:	4b11      	ldr	r3, [pc, #68]	; (8000c50 <TIMER_IF_Init+0x60>)
 8000c0a:	f04f 32ff 	mov.w	r2, #4294967295
 8000c0e:	631a      	str	r2, [r3, #48]	; 0x30
    /*Init RTC*/
    MX_RTC_Init();
 8000c10:	f7ff fd78 	bl	8000704 <MX_RTC_Init>
    /*Stop Timer */
    TIMER_IF_StopTimer();
 8000c14:	f000 f856 	bl	8000cc4 <TIMER_IF_StopTimer>
    /** DeActivate the Alarm A enabled by STM32CubeMX during MX_RTC_Init() */
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8000c18:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c1c:	480c      	ldr	r0, [pc, #48]	; (8000c50 <TIMER_IF_Init+0x60>)
 8000c1e:	f003 fab7 	bl	8004190 <HAL_RTC_DeactivateAlarm>
    /*overload RTC feature enable*/
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8000c22:	4b0b      	ldr	r3, [pc, #44]	; (8000c50 <TIMER_IF_Init+0x60>)
 8000c24:	f04f 32ff 	mov.w	r2, #4294967295
 8000c28:	631a      	str	r2, [r3, #48]	; 0x30

    /*Enable Direct Read of the calendar registers (not through Shadow) */
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8000c2a:	4809      	ldr	r0, [pc, #36]	; (8000c50 <TIMER_IF_Init+0x60>)
 8000c2c:	f003 fbee 	bl	800440c <HAL_RTCEx_EnableBypassShadow>
    /*Initialize MSB ticks*/
    TIMER_IF_BkUp_Write_MSBticks(0);
 8000c30:	2000      	movs	r0, #0
 8000c32:	f000 f9d3 	bl	8000fdc <TIMER_IF_BkUp_Write_MSBticks>

    TIMER_IF_SetTimerContext();
 8000c36:	f000 f85f 	bl	8000cf8 <TIMER_IF_SetTimerContext>

    /* Register a task to associate to UTIL_TIMER_Irq() interrupt */
    UTIL_TIMER_IRQ_MAP_INIT();

    RTC_Initialized = true;
 8000c3a:	4b04      	ldr	r3, [pc, #16]	; (8000c4c <TIMER_IF_Init+0x5c>)
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN TIMER_IF_Init_Last */

  /* USER CODE END TIMER_IF_Init_Last */
  return ret;
 8000c40:	79fb      	ldrb	r3, [r7, #7]
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	3708      	adds	r7, #8
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	2000007d 	.word	0x2000007d
 8000c50:	20000038 	.word	0x20000038

08000c54 <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b08e      	sub	sp, #56	; 0x38
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  RTC_AlarmTypeDef sAlarm = {0};
 8000c62:	f107 0308 	add.w	r3, r7, #8
 8000c66:	222c      	movs	r2, #44	; 0x2c
 8000c68:	2100      	movs	r1, #0
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f00b fbbc 	bl	800c3e8 <memset>
  /*Stop timer if one is already started*/
  TIMER_IF_StopTimer();
 8000c70:	f000 f828 	bl	8000cc4 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 8000c74:	4b11      	ldr	r3, [pc, #68]	; (8000cbc <TIMER_IF_StartTimer+0x68>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	687a      	ldr	r2, [r7, #4]
 8000c7a:	4413      	add	r3, r2
 8000c7c:	607b      	str	r3, [r7, #4]

  TIMER_IF_DBG_PRINTF("Start timer: time=%d, alarm=%d\n\r",  GetTimerTicks(), timeout);
  /* starts timer*/
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	43db      	mvns	r3, r3
 8000c86:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8000c8c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000c90:	623b      	str	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8000c92:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c96:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000c98:	f107 0308 	add.w	r3, r7, #8
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	4807      	ldr	r0, [pc, #28]	; (8000cc0 <TIMER_IF_StartTimer+0x6c>)
 8000ca2:	f003 f969 	bl	8003f78 <HAL_RTC_SetAlarm_IT>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <TIMER_IF_StartTimer+0x5c>
  {
    Error_Handler();
 8000cac:	f7ff fcfc 	bl	80006a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIMER_IF_StartTimer_Last */

  /* USER CODE END TIMER_IF_StartTimer_Last */
  return ret;
 8000cb0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	3738      	adds	r7, #56	; 0x38
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	20000080 	.word	0x20000080
 8000cc0:	20000038 	.word	0x20000038

08000cc4 <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8000cce:	4b08      	ldr	r3, [pc, #32]	; (8000cf0 <TIMER_IF_StopTimer+0x2c>)
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8000cd4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cd8:	4806      	ldr	r0, [pc, #24]	; (8000cf4 <TIMER_IF_StopTimer+0x30>)
 8000cda:	f003 fa59 	bl	8004190 <HAL_RTC_DeactivateAlarm>
  /*overload RTC feature enable*/
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8000cde:	4b05      	ldr	r3, [pc, #20]	; (8000cf4 <TIMER_IF_StopTimer+0x30>)
 8000ce0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ce4:	631a      	str	r2, [r3, #48]	; 0x30
  /* USER CODE BEGIN TIMER_IF_StopTimer_Last */

  /* USER CODE END TIMER_IF_StopTimer_Last */
  return ret;
 8000ce6:	79fb      	ldrb	r3, [r7, #7]
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	3708      	adds	r7, #8
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	40002800 	.word	0x40002800
 8000cf4:	20000038 	.word	0x20000038

08000cf8 <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /*store time context*/
  RtcTimerContext = GetTimerTicks();
 8000cfc:	f000 f98e 	bl	800101c <GetTimerTicks>
 8000d00:	4603      	mov	r3, r0
 8000d02:	4a03      	ldr	r2, [pc, #12]	; (8000d10 <TIMER_IF_SetTimerContext+0x18>)
 8000d04:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIMER_IF_SetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_SetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8000d06:	4b02      	ldr	r3, [pc, #8]	; (8000d10 <TIMER_IF_SetTimerContext+0x18>)
 8000d08:	681b      	ldr	r3, [r3, #0]
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	20000080 	.word	0x20000080

08000d14 <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0

  /* USER CODE END TIMER_IF_GetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_GetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8000d18:	4b02      	ldr	r3, [pc, #8]	; (8000d24 <TIMER_IF_GetTimerContext+0x10>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bc80      	pop	{r7}
 8000d22:	4770      	bx	lr
 8000d24:	20000080 	.word	0x20000080

08000d28 <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 8000d32:	f000 f973 	bl	800101c <GetTimerTicks>
 8000d36:	4602      	mov	r2, r0
 8000d38:	4b04      	ldr	r3, [pc, #16]	; (8000d4c <TIMER_IF_GetTimerElapsedTime+0x24>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	1ad3      	subs	r3, r2, r3
 8000d3e:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime_Last */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime_Last */
  return ret;
 8000d40:	687b      	ldr	r3, [r7, #4]
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	3708      	adds	r7, #8
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	20000080 	.word	0x20000080

08000d50 <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8000d56:	2300      	movs	r3, #0
 8000d58:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  if (RTC_Initialized == true)
 8000d5a:	4b06      	ldr	r3, [pc, #24]	; (8000d74 <TIMER_IF_GetTimerValue+0x24>)
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d002      	beq.n	8000d68 <TIMER_IF_GetTimerValue+0x18>
  {
    ret = GetTimerTicks();
 8000d62:	f000 f95b 	bl	800101c <GetTimerTicks>
 8000d66:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN TIMER_IF_GetTimerValue_Last */

  /* USER CODE END TIMER_IF_GetTimerValue_Last */
  return ret;
 8000d68:	687b      	ldr	r3, [r7, #4]
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	3708      	adds	r7, #8
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	2000007d 	.word	0x2000007d

08000d78 <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  ret = (MIN_ALARM_DELAY);
 8000d82:	2303      	movs	r3, #3
 8000d84:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout_Last */

  /* USER CODE END TIMER_IF_GetMinimumTimeout_Last */
  return ret;
 8000d86:	687b      	ldr	r3, [r7, #4]
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	370c      	adds	r7, #12
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bc80      	pop	{r7}
 8000d90:	4770      	bx	lr

08000d92 <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 8000d92:	b5b0      	push	{r4, r5, r7, lr}
 8000d94:	b084      	sub	sp, #16
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 8000d9e:	6879      	ldr	r1, [r7, #4]
 8000da0:	2000      	movs	r0, #0
 8000da2:	460a      	mov	r2, r1
 8000da4:	4603      	mov	r3, r0
 8000da6:	0d95      	lsrs	r5, r2, #22
 8000da8:	0294      	lsls	r4, r2, #10
 8000daa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000dae:	f04f 0300 	mov.w	r3, #0
 8000db2:	4620      	mov	r0, r4
 8000db4:	4629      	mov	r1, r5
 8000db6:	f7ff f9e7 	bl	8000188 <__aeabi_uldivmod>
 8000dba:	4602      	mov	r2, r0
 8000dbc:	460b      	mov	r3, r1
 8000dbe:	4613      	mov	r3, r2
 8000dc0:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick_Last */

  /* USER CODE END TIMER_IF_Convert_ms2Tick_Last */
  return ret;
 8000dc2:	68fb      	ldr	r3, [r7, #12]
}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	3710      	adds	r7, #16
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bdb0      	pop	{r4, r5, r7, pc}

08000dcc <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 8000dcc:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8000dd0:	b085      	sub	sp, #20
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 8000dda:	6879      	ldr	r1, [r7, #4]
 8000ddc:	2000      	movs	r0, #0
 8000dde:	460c      	mov	r4, r1
 8000de0:	4605      	mov	r5, r0
 8000de2:	4620      	mov	r0, r4
 8000de4:	4629      	mov	r1, r5
 8000de6:	f04f 0a00 	mov.w	sl, #0
 8000dea:	f04f 0b00 	mov.w	fp, #0
 8000dee:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 8000df2:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 8000df6:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 8000dfa:	4650      	mov	r0, sl
 8000dfc:	4659      	mov	r1, fp
 8000dfe:	1b02      	subs	r2, r0, r4
 8000e00:	eb61 0305 	sbc.w	r3, r1, r5
 8000e04:	f04f 0000 	mov.w	r0, #0
 8000e08:	f04f 0100 	mov.w	r1, #0
 8000e0c:	0099      	lsls	r1, r3, #2
 8000e0e:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8000e12:	0090      	lsls	r0, r2, #2
 8000e14:	4602      	mov	r2, r0
 8000e16:	460b      	mov	r3, r1
 8000e18:	eb12 0804 	adds.w	r8, r2, r4
 8000e1c:	eb43 0905 	adc.w	r9, r3, r5
 8000e20:	f04f 0200 	mov.w	r2, #0
 8000e24:	f04f 0300 	mov.w	r3, #0
 8000e28:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000e2c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000e30:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000e34:	4690      	mov	r8, r2
 8000e36:	4699      	mov	r9, r3
 8000e38:	4640      	mov	r0, r8
 8000e3a:	4649      	mov	r1, r9
 8000e3c:	f04f 0200 	mov.w	r2, #0
 8000e40:	f04f 0300 	mov.w	r3, #0
 8000e44:	0a82      	lsrs	r2, r0, #10
 8000e46:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8000e4a:	0a8b      	lsrs	r3, r1, #10
 8000e4c:	4613      	mov	r3, r2
 8000e4e:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms_Last */

  /* USER CODE END TIMER_IF_Convert_Tick2ms_Last */
  return ret;
 8000e50:	68fb      	ldr	r3, [r7, #12]
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	3714      	adds	r7, #20
 8000e56:	46bd      	mov	sp, r7
 8000e58:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8000e5c:	4770      	bx	lr

08000e5e <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 8000e5e:	b580      	push	{r7, lr}
 8000e60:	b084      	sub	sp, #16
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 8000e66:	6878      	ldr	r0, [r7, #4]
 8000e68:	f7ff ff93 	bl	8000d92 <TIMER_IF_Convert_ms2Tick>
 8000e6c:	60f8      	str	r0, [r7, #12]
  uint32_t timeout = GetTimerTicks();
 8000e6e:	f000 f8d5 	bl	800101c <GetTimerTicks>
 8000e72:	60b8      	str	r0, [r7, #8]

  /* Wait delay ms */
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8000e74:	e000      	b.n	8000e78 <TIMER_IF_DelayMs+0x1a>
  {
    __NOP();
 8000e76:	bf00      	nop
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8000e78:	f000 f8d0 	bl	800101c <GetTimerTicks>
 8000e7c:	4602      	mov	r2, r0
 8000e7e:	68bb      	ldr	r3, [r7, #8]
 8000e80:	1ad3      	subs	r3, r2, r3
 8000e82:	68fa      	ldr	r2, [r7, #12]
 8000e84:	429a      	cmp	r2, r3
 8000e86:	d8f6      	bhi.n	8000e76 <TIMER_IF_DelayMs+0x18>
  }
  /* USER CODE BEGIN TIMER_IF_DelayMs_Last */

  /* USER CODE END TIMER_IF_DelayMs_Last */
}
 8000e88:	bf00      	nop
 8000e8a:	bf00      	nop
 8000e8c:	3710      	adds	r7, #16
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}

08000e92 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8000e92:	b580      	push	{r7, lr}
 8000e94:	b082      	sub	sp, #8
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback */

  /* USER CODE END HAL_RTC_AlarmAEventCallback */
  UTIL_TIMER_IRQ_MAP_PROCESS();
 8000e9a:	f00a fecf 	bl	800bc3c <UTIL_TIMER_IRQ_Handler>
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback_Last */

  /* USER CODE END HAL_RTC_AlarmAEventCallback_Last */
}
 8000e9e:	bf00      	nop
 8000ea0:	3708      	adds	r7, #8
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}

08000ea6 <HAL_RTCEx_SSRUEventCallback>:

void HAL_RTCEx_SSRUEventCallback(RTC_HandleTypeDef *hrtc)
{
 8000ea6:	b580      	push	{r7, lr}
 8000ea8:	b084      	sub	sp, #16
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_RTCEx_SSRUEventCallback */
  /*called every 48 days with 1024 ticks per seconds*/
  TIMER_IF_DBG_PRINTF(">>Handler SSRUnderflow at %d\n\r", GetTimerTicks());
  /*Increment MSBticks*/
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 8000eae:	f000 f8a5 	bl	8000ffc <TIMER_IF_BkUp_Read_MSBticks>
 8000eb2:	60f8      	str	r0, [r7, #12]
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	3301      	adds	r3, #1
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f000 f88f 	bl	8000fdc <TIMER_IF_BkUp_Write_MSBticks>
  /* USER CODE BEGIN HAL_RTCEx_SSRUEventCallback_Last */

  /* USER CODE END HAL_RTCEx_SSRUEventCallback_Last */
}
 8000ebe:	bf00      	nop
 8000ec0:	3710      	adds	r7, #16
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}

08000ec6 <TIMER_IF_GetTime>:

uint32_t TIMER_IF_GetTime(uint16_t *mSeconds)
{
 8000ec6:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000eca:	b08c      	sub	sp, #48	; 0x30
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6178      	str	r0, [r7, #20]
  uint32_t seconds = 0;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* USER CODE BEGIN TIMER_IF_GetTime */

  /* USER CODE END TIMER_IF_GetTime */
  uint64_t ticks;
  uint32_t timerValueLsb = GetTimerTicks();
 8000ed4:	f000 f8a2 	bl	800101c <GetTimerTicks>
 8000ed8:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 8000eda:	f000 f88f 	bl	8000ffc <TIMER_IF_BkUp_Read_MSBticks>
 8000ede:	6278      	str	r0, [r7, #36]	; 0x24

  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 8000ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	60bb      	str	r3, [r7, #8]
 8000ee6:	60fa      	str	r2, [r7, #12]
 8000ee8:	f04f 0200 	mov.w	r2, #0
 8000eec:	f04f 0300 	mov.w	r3, #0
 8000ef0:	68b9      	ldr	r1, [r7, #8]
 8000ef2:	000b      	movs	r3, r1
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000ef8:	2000      	movs	r0, #0
 8000efa:	460c      	mov	r4, r1
 8000efc:	4605      	mov	r5, r0
 8000efe:	eb12 0804 	adds.w	r8, r2, r4
 8000f02:	eb43 0905 	adc.w	r9, r3, r5
 8000f06:	e9c7 8906 	strd	r8, r9, [r7, #24]

  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 8000f0a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000f0e:	f04f 0200 	mov.w	r2, #0
 8000f12:	f04f 0300 	mov.w	r3, #0
 8000f16:	0a82      	lsrs	r2, r0, #10
 8000f18:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8000f1c:	0a8b      	lsrs	r3, r1, #10
 8000f1e:	4613      	mov	r3, r2
 8000f20:	62fb      	str	r3, [r7, #44]	; 0x2c

  ticks = (uint32_t) ticks & RTC_PREDIV_S;
 8000f22:	69bb      	ldr	r3, [r7, #24]
 8000f24:	2200      	movs	r2, #0
 8000f26:	603b      	str	r3, [r7, #0]
 8000f28:	607a      	str	r2, [r7, #4]
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 8000f30:	f04f 0b00 	mov.w	fp, #0
 8000f34:	e9c7 ab06 	strd	sl, fp, [r7, #24]

  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 8000f38:	69bb      	ldr	r3, [r7, #24]
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f7ff ff46 	bl	8000dcc <TIMER_IF_Convert_Tick2ms>
 8000f40:	4603      	mov	r3, r0
 8000f42:	b29a      	uxth	r2, r3
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	801a      	strh	r2, [r3, #0]

  /* USER CODE BEGIN TIMER_IF_GetTime_Last */

  /* USER CODE END TIMER_IF_GetTime_Last */
  return seconds;
 8000f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3730      	adds	r7, #48	; 0x30
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08000f54 <TIMER_IF_BkUp_Write_Seconds>:

void TIMER_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8000f5c:	687a      	ldr	r2, [r7, #4]
 8000f5e:	2100      	movs	r1, #0
 8000f60:	4803      	ldr	r0, [pc, #12]	; (8000f70 <TIMER_IF_BkUp_Write_Seconds+0x1c>)
 8000f62:	f003 fae5 	bl	8004530 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds_Last */
}
 8000f66:	bf00      	nop
 8000f68:	3708      	adds	r7, #8
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	20000038 	.word	0x20000038

08000f74 <TIMER_IF_BkUp_Write_SubSeconds>:

void TIMER_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8000f7c:	687a      	ldr	r2, [r7, #4]
 8000f7e:	2101      	movs	r1, #1
 8000f80:	4803      	ldr	r0, [pc, #12]	; (8000f90 <TIMER_IF_BkUp_Write_SubSeconds+0x1c>)
 8000f82:	f003 fad5 	bl	8004530 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds_Last */
}
 8000f86:	bf00      	nop
 8000f88:	3708      	adds	r7, #8
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	20000038 	.word	0x20000038

08000f94 <TIMER_IF_BkUp_Read_Seconds>:

uint32_t TIMER_IF_BkUp_Read_Seconds(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 8000f9e:	2100      	movs	r1, #0
 8000fa0:	4804      	ldr	r0, [pc, #16]	; (8000fb4 <TIMER_IF_BkUp_Read_Seconds+0x20>)
 8000fa2:	f003 fadd 	bl	8004560 <HAL_RTCEx_BKUPRead>
 8000fa6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds_Last */
  return ret;
 8000fa8:	687b      	ldr	r3, [r7, #4]
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	3708      	adds	r7, #8
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	20000038 	.word	0x20000038

08000fb8 <TIMER_IF_BkUp_Read_SubSeconds>:

uint32_t TIMER_IF_BkUp_Read_SubSeconds(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 8000fc2:	2101      	movs	r1, #1
 8000fc4:	4804      	ldr	r0, [pc, #16]	; (8000fd8 <TIMER_IF_BkUp_Read_SubSeconds+0x20>)
 8000fc6:	f003 facb 	bl	8004560 <HAL_RTCEx_BKUPRead>
 8000fca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds_Last */
  return ret;
 8000fcc:	687b      	ldr	r3, [r7, #4]
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	20000038 	.word	0x20000038

08000fdc <TIMER_IF_BkUp_Write_MSBticks>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void TIMER_IF_BkUp_Write_MSBticks(uint32_t MSBticks)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 8000fe4:	687a      	ldr	r2, [r7, #4]
 8000fe6:	2102      	movs	r1, #2
 8000fe8:	4803      	ldr	r0, [pc, #12]	; (8000ff8 <TIMER_IF_BkUp_Write_MSBticks+0x1c>)
 8000fea:	f003 faa1 	bl	8004530 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks_Last */
}
 8000fee:	bf00      	nop
 8000ff0:	3708      	adds	r7, #8
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	20000038 	.word	0x20000038

08000ffc <TIMER_IF_BkUp_Read_MSBticks>:

static uint32_t TIMER_IF_BkUp_Read_MSBticks(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks */
  uint32_t MSBticks;
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 8001002:	2102      	movs	r1, #2
 8001004:	4804      	ldr	r0, [pc, #16]	; (8001018 <TIMER_IF_BkUp_Read_MSBticks+0x1c>)
 8001006:	f003 faab 	bl	8004560 <HAL_RTCEx_BKUPRead>
 800100a:	6078      	str	r0, [r7, #4]
  return MSBticks;
 800100c:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks_Last */
}
 800100e:	4618      	mov	r0, r3
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	20000038 	.word	0x20000038

0800101c <GetTimerTicks>:

static inline uint32_t GetTimerTicks(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
 8001022:	480b      	ldr	r0, [pc, #44]	; (8001050 <GetTimerTicks+0x34>)
 8001024:	f7ff fdd8 	bl	8000bd8 <LL_RTC_TIME_GetSubSecond>
 8001028:	6078      	str	r0, [r7, #4]
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 800102a:	e003      	b.n	8001034 <GetTimerTicks+0x18>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
 800102c:	4808      	ldr	r0, [pc, #32]	; (8001050 <GetTimerTicks+0x34>)
 800102e:	f7ff fdd3 	bl	8000bd8 <LL_RTC_TIME_GetSubSecond>
 8001032:	6078      	str	r0, [r7, #4]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001034:	4806      	ldr	r0, [pc, #24]	; (8001050 <GetTimerTicks+0x34>)
 8001036:	f7ff fdcf 	bl	8000bd8 <LL_RTC_TIME_GetSubSecond>
 800103a:	4602      	mov	r2, r0
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	4293      	cmp	r3, r2
 8001040:	d1f4      	bne.n	800102c <GetTimerTicks+0x10>
  }
  return UINT32_MAX - ssr;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	43db      	mvns	r3, r3
  /* USER CODE BEGIN GetTimerTicks_Last */

  /* USER CODE END GetTimerTicks_Last */
}
 8001046:	4618      	mov	r0, r3
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	40002800 	.word	0x40002800

08001054 <LL_AHB2_GRP1_EnableClock>:
{
 8001054:	b480      	push	{r7}
 8001056:	b085      	sub	sp, #20
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800105c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001060:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001062:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4313      	orrs	r3, r2
 800106a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800106c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001070:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4013      	ands	r3, r2
 8001076:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001078:	68fb      	ldr	r3, [r7, #12]
}
 800107a:	bf00      	nop
 800107c:	3714      	adds	r7, #20
 800107e:	46bd      	mov	sp, r7
 8001080:	bc80      	pop	{r7}
 8001082:	4770      	bx	lr

08001084 <LL_APB1_GRP1_EnableClock>:
{
 8001084:	b480      	push	{r7}
 8001086:	b085      	sub	sp, #20
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800108c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001090:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001092:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4313      	orrs	r3, r2
 800109a:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800109c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010a0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4013      	ands	r3, r2
 80010a6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80010a8:	68fb      	ldr	r3, [r7, #12]
}
 80010aa:	bf00      	nop
 80010ac:	3714      	adds	r7, #20
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bc80      	pop	{r7}
 80010b2:	4770      	bx	lr

080010b4 <LL_APB1_GRP1_DisableClock>:
{
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 80010bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010c0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	43db      	mvns	r3, r3
 80010c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80010ca:	4013      	ands	r3, r2
 80010cc:	658b      	str	r3, [r1, #88]	; 0x58
}
 80010ce:	bf00      	nop
 80010d0:	370c      	adds	r7, #12
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bc80      	pop	{r7}
 80010d6:	4770      	bx	lr

080010d8 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010dc:	4b22      	ldr	r3, [pc, #136]	; (8001168 <MX_USART2_UART_Init+0x90>)
 80010de:	4a23      	ldr	r2, [pc, #140]	; (800116c <MX_USART2_UART_Init+0x94>)
 80010e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80010e2:	4b21      	ldr	r3, [pc, #132]	; (8001168 <MX_USART2_UART_Init+0x90>)
 80010e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010ea:	4b1f      	ldr	r3, [pc, #124]	; (8001168 <MX_USART2_UART_Init+0x90>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010f0:	4b1d      	ldr	r3, [pc, #116]	; (8001168 <MX_USART2_UART_Init+0x90>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010f6:	4b1c      	ldr	r3, [pc, #112]	; (8001168 <MX_USART2_UART_Init+0x90>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010fc:	4b1a      	ldr	r3, [pc, #104]	; (8001168 <MX_USART2_UART_Init+0x90>)
 80010fe:	220c      	movs	r2, #12
 8001100:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001102:	4b19      	ldr	r3, [pc, #100]	; (8001168 <MX_USART2_UART_Init+0x90>)
 8001104:	2200      	movs	r2, #0
 8001106:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001108:	4b17      	ldr	r3, [pc, #92]	; (8001168 <MX_USART2_UART_Init+0x90>)
 800110a:	2200      	movs	r2, #0
 800110c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800110e:	4b16      	ldr	r3, [pc, #88]	; (8001168 <MX_USART2_UART_Init+0x90>)
 8001110:	2200      	movs	r2, #0
 8001112:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001114:	4b14      	ldr	r3, [pc, #80]	; (8001168 <MX_USART2_UART_Init+0x90>)
 8001116:	2200      	movs	r2, #0
 8001118:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800111a:	4b13      	ldr	r3, [pc, #76]	; (8001168 <MX_USART2_UART_Init+0x90>)
 800111c:	2200      	movs	r2, #0
 800111e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001120:	4811      	ldr	r0, [pc, #68]	; (8001168 <MX_USART2_UART_Init+0x90>)
 8001122:	f003 ff0e 	bl	8004f42 <HAL_UART_Init>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800112c:	f7ff fabc 	bl	80006a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001130:	2100      	movs	r1, #0
 8001132:	480d      	ldr	r0, [pc, #52]	; (8001168 <MX_USART2_UART_Init+0x90>)
 8001134:	f006 f831 	bl	800719a <HAL_UARTEx_SetTxFifoThreshold>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800113e:	f7ff fab3 	bl	80006a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001142:	2100      	movs	r1, #0
 8001144:	4808      	ldr	r0, [pc, #32]	; (8001168 <MX_USART2_UART_Init+0x90>)
 8001146:	f006 f866 	bl	8007216 <HAL_UARTEx_SetRxFifoThreshold>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001150:	f7ff faaa 	bl	80006a8 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart2) != HAL_OK)
 8001154:	4804      	ldr	r0, [pc, #16]	; (8001168 <MX_USART2_UART_Init+0x90>)
 8001156:	f005 ffe5 	bl	8007124 <HAL_UARTEx_EnableFifoMode>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001160:	f7ff faa2 	bl	80006a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001164:	bf00      	nop
 8001166:	bd80      	pop	{r7, pc}
 8001168:	20000084 	.word	0x20000084
 800116c:	40004400 	.word	0x40004400

08001170 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b096      	sub	sp, #88	; 0x58
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001178:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
 8001180:	605a      	str	r2, [r3, #4]
 8001182:	609a      	str	r2, [r3, #8]
 8001184:	60da      	str	r2, [r3, #12]
 8001186:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001188:	f107 030c 	add.w	r3, r7, #12
 800118c:	2238      	movs	r2, #56	; 0x38
 800118e:	2100      	movs	r1, #0
 8001190:	4618      	mov	r0, r3
 8001192:	f00b f929 	bl	800c3e8 <memset>
  if(uartHandle->Instance==USART2)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4a33      	ldr	r2, [pc, #204]	; (8001268 <HAL_UART_MspInit+0xf8>)
 800119c:	4293      	cmp	r3, r2
 800119e:	d15f      	bne.n	8001260 <HAL_UART_MspInit+0xf0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80011a0:	2302      	movs	r3, #2
 80011a2:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 80011a4:	4b31      	ldr	r3, [pc, #196]	; (800126c <HAL_UART_MspInit+0xfc>)
 80011a6:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011a8:	f107 030c 	add.w	r3, r7, #12
 80011ac:	4618      	mov	r0, r3
 80011ae:	f002 fd47 	bl	8003c40 <HAL_RCCEx_PeriphCLKConfig>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80011b8:	f7ff fa76 	bl	80006a8 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80011bc:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80011c0:	f7ff ff60 	bl	8001084 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011c4:	2001      	movs	r0, #1
 80011c6:	f7ff ff45 	bl	8001054 <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 80011ca:	230c      	movs	r3, #12
 80011cc:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ce:	2302      	movs	r3, #2
 80011d0:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d2:	2300      	movs	r3, #0
 80011d4:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011d6:	2303      	movs	r3, #3
 80011d8:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011da:	2307      	movs	r3, #7
 80011dc:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011de:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80011e2:	4619      	mov	r1, r3
 80011e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011e8:	f001 f816 	bl	8002218 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel5;
 80011ec:	4b20      	ldr	r3, [pc, #128]	; (8001270 <HAL_UART_MspInit+0x100>)
 80011ee:	4a21      	ldr	r2, [pc, #132]	; (8001274 <HAL_UART_MspInit+0x104>)
 80011f0:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80011f2:	4b1f      	ldr	r3, [pc, #124]	; (8001270 <HAL_UART_MspInit+0x100>)
 80011f4:	2214      	movs	r2, #20
 80011f6:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80011f8:	4b1d      	ldr	r3, [pc, #116]	; (8001270 <HAL_UART_MspInit+0x100>)
 80011fa:	2210      	movs	r2, #16
 80011fc:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011fe:	4b1c      	ldr	r3, [pc, #112]	; (8001270 <HAL_UART_MspInit+0x100>)
 8001200:	2200      	movs	r2, #0
 8001202:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001204:	4b1a      	ldr	r3, [pc, #104]	; (8001270 <HAL_UART_MspInit+0x100>)
 8001206:	2280      	movs	r2, #128	; 0x80
 8001208:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800120a:	4b19      	ldr	r3, [pc, #100]	; (8001270 <HAL_UART_MspInit+0x100>)
 800120c:	2200      	movs	r2, #0
 800120e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001210:	4b17      	ldr	r3, [pc, #92]	; (8001270 <HAL_UART_MspInit+0x100>)
 8001212:	2200      	movs	r2, #0
 8001214:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001216:	4b16      	ldr	r3, [pc, #88]	; (8001270 <HAL_UART_MspInit+0x100>)
 8001218:	2200      	movs	r2, #0
 800121a:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800121c:	4b14      	ldr	r3, [pc, #80]	; (8001270 <HAL_UART_MspInit+0x100>)
 800121e:	2200      	movs	r2, #0
 8001220:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001222:	4813      	ldr	r0, [pc, #76]	; (8001270 <HAL_UART_MspInit+0x100>)
 8001224:	f000 fbe0 	bl	80019e8 <HAL_DMA_Init>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 800122e:	f7ff fa3b 	bl	80006a8 <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart2_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001232:	2110      	movs	r1, #16
 8001234:	480e      	ldr	r0, [pc, #56]	; (8001270 <HAL_UART_MspInit+0x100>)
 8001236:	f000 ff17 	bl	8002068 <HAL_DMA_ConfigChannelAttributes>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <HAL_UART_MspInit+0xd4>
    {
      Error_Handler();
 8001240:	f7ff fa32 	bl	80006a8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	4a0a      	ldr	r2, [pc, #40]	; (8001270 <HAL_UART_MspInit+0x100>)
 8001248:	67da      	str	r2, [r3, #124]	; 0x7c
 800124a:	4a09      	ldr	r2, [pc, #36]	; (8001270 <HAL_UART_MspInit+0x100>)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 8001250:	2200      	movs	r2, #0
 8001252:	2102      	movs	r1, #2
 8001254:	2025      	movs	r0, #37	; 0x25
 8001256:	f000 fb90 	bl	800197a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800125a:	2025      	movs	r0, #37	; 0x25
 800125c:	f000 fba7 	bl	80019ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001260:	bf00      	nop
 8001262:	3758      	adds	r7, #88	; 0x58
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	40004400 	.word	0x40004400
 800126c:	000c0004 	.word	0x000c0004
 8001270:	20000118 	.word	0x20000118
 8001274:	40020058 	.word	0x40020058

08001278 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART2)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a0b      	ldr	r2, [pc, #44]	; (80012b4 <HAL_UART_MspDeInit+0x3c>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d110      	bne.n	80012ac <HAL_UART_MspDeInit+0x34>
  {
  /* USER CODE BEGIN USART2_MspDeInit 0 */

  /* USER CODE END USART2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART2_CLK_DISABLE();
 800128a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800128e:	f7ff ff11 	bl	80010b4 <LL_APB1_GRP1_DisableClock>

    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    HAL_GPIO_DeInit(GPIOA, USARTx_RX_Pin|USARTx_TX_Pin);
 8001292:	210c      	movs	r1, #12
 8001294:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001298:	f001 f91e 	bl	80024d8 <HAL_GPIO_DeInit>

    /* USART2 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80012a0:	4618      	mov	r0, r3
 80012a2:	f000 fc49 	bl	8001b38 <HAL_DMA_DeInit>

    /* USART2 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 80012a6:	2025      	movs	r0, #37	; 0x25
 80012a8:	f000 fb8f 	bl	80019ca <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 80012ac:	bf00      	nop
 80012ae:	3708      	adds	r7, #8
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	40004400 	.word	0x40004400

080012b8 <LL_APB1_GRP1_ForceReset>:
{
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR1, Periphs);
 80012c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80012c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	638b      	str	r3, [r1, #56]	; 0x38
}
 80012d0:	bf00      	nop
 80012d2:	370c      	adds	r7, #12
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bc80      	pop	{r7}
 80012d8:	4770      	bx	lr

080012da <LL_APB1_GRP1_ReleaseReset>:
{
 80012da:	b480      	push	{r7}
 80012dc:	b083      	sub	sp, #12
 80012de:	af00      	add	r7, sp, #0
 80012e0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 80012e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	43db      	mvns	r3, r3
 80012ec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80012f0:	4013      	ands	r3, r2
 80012f2:	638b      	str	r3, [r1, #56]	; 0x38
}
 80012f4:	bf00      	nop
 80012f6:	370c      	adds	r7, #12
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bc80      	pop	{r7}
 80012fc:	4770      	bx	lr
	...

08001300 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001308:	4b06      	ldr	r3, [pc, #24]	; (8001324 <LL_EXTI_EnableIT_0_31+0x24>)
 800130a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800130e:	4905      	ldr	r1, [pc, #20]	; (8001324 <LL_EXTI_EnableIT_0_31+0x24>)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	4313      	orrs	r3, r2
 8001314:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8001318:	bf00      	nop
 800131a:	370c      	adds	r7, #12
 800131c:	46bd      	mov	sp, r7
 800131e:	bc80      	pop	{r7}
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	58000800 	.word	0x58000800

08001328 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 8001330:	4a07      	ldr	r2, [pc, #28]	; (8001350 <vcom_Init+0x28>)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6013      	str	r3, [r2, #0]
  MX_DMA_Init();
 8001336:	f7ff f8bd 	bl	80004b4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800133a:	f7ff fecd 	bl	80010d8 <MX_USART2_UART_Init>
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_27);
 800133e:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8001342:	f7ff ffdd 	bl	8001300 <LL_EXTI_EnableIT_0_31>
  return UTIL_ADV_TRACE_OK;
 8001346:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 8001348:	4618      	mov	r0, r3
 800134a:	3708      	adds	r7, #8
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	2000017c 	.word	0x2000017c

08001354 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART2_FORCE_RESET();
 8001358:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800135c:	f7ff ffac 	bl	80012b8 <LL_APB1_GRP1_ForceReset>
  __HAL_RCC_USART2_RELEASE_RESET();
 8001360:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001364:	f7ff ffb9 	bl	80012da <LL_APB1_GRP1_ReleaseReset>

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart2);
 8001368:	4804      	ldr	r0, [pc, #16]	; (800137c <vcom_DeInit+0x28>)
 800136a:	f7ff ff85 	bl	8001278 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 800136e:	200f      	movs	r0, #15
 8001370:	f000 fb2b 	bl	80019ca <HAL_NVIC_DisableIRQ>

  return UTIL_ADV_TRACE_OK;
 8001374:	2300      	movs	r3, #0
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 8001376:	4618      	mov	r0, r3
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	20000084 	.word	0x20000084

08001380 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	460b      	mov	r3, r1
 800138a:	807b      	strh	r3, [r7, #2]
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart2, p_data, size);
 800138c:	887b      	ldrh	r3, [r7, #2]
 800138e:	461a      	mov	r2, r3
 8001390:	6879      	ldr	r1, [r7, #4]
 8001392:	4804      	ldr	r0, [pc, #16]	; (80013a4 <vcom_Trace_DMA+0x24>)
 8001394:	f003 fe72 	bl	800507c <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
 8001398:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 800139a:	4618      	mov	r0, r3
 800139c:	3708      	adds	r7, #8
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	20000084 	.word	0x20000084

080013a8 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b084      	sub	sp, #16
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 80013b0:	4a19      	ldr	r2, [pc, #100]	; (8001418 <vcom_ReceiveInit+0x70>)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6013      	str	r3, [r2, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 80013b6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80013ba:	60bb      	str	r3, [r7, #8]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart2, WakeUpSelection);
 80013bc:	f107 0308 	add.w	r3, r7, #8
 80013c0:	e893 0006 	ldmia.w	r3, {r1, r2}
 80013c4:	4815      	ldr	r0, [pc, #84]	; (800141c <vcom_ReceiveInit+0x74>)
 80013c6:	f005 fe20 	bl	800700a <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_BUSY) == SET);
 80013ca:	bf00      	nop
 80013cc:	4b13      	ldr	r3, [pc, #76]	; (800141c <vcom_ReceiveInit+0x74>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	69db      	ldr	r3, [r3, #28]
 80013d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013da:	d0f7      	beq.n	80013cc <vcom_ReceiveInit+0x24>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_REACK) == RESET);
 80013dc:	bf00      	nop
 80013de:	4b0f      	ldr	r3, [pc, #60]	; (800141c <vcom_ReceiveInit+0x74>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	69db      	ldr	r3, [r3, #28]
 80013e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80013ec:	d1f7      	bne.n	80013de <vcom_ReceiveInit+0x36>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_WUF);
 80013ee:	4b0b      	ldr	r3, [pc, #44]	; (800141c <vcom_ReceiveInit+0x74>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	689a      	ldr	r2, [r3, #8]
 80013f4:	4b09      	ldr	r3, [pc, #36]	; (800141c <vcom_ReceiveInit+0x74>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80013fc:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart2);
 80013fe:	4807      	ldr	r0, [pc, #28]	; (800141c <vcom_ReceiveInit+0x74>)
 8001400:	f005 fe5e 	bl	80070c0 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart2, &charRx, 1);
 8001404:	2201      	movs	r2, #1
 8001406:	4906      	ldr	r1, [pc, #24]	; (8001420 <vcom_ReceiveInit+0x78>)
 8001408:	4804      	ldr	r0, [pc, #16]	; (800141c <vcom_ReceiveInit+0x74>)
 800140a:	f003 fdeb 	bl	8004fe4 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
 800140e:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 8001410:	4618      	mov	r0, r3
 8001412:	3710      	adds	r7, #16
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	20000180 	.word	0x20000180
 800141c:	20000084 	.word	0x20000084
 8001420:	20000178 	.word	0x20000178

08001424 <vcom_Resume>:

void vcom_Resume(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001428:	4808      	ldr	r0, [pc, #32]	; (800144c <vcom_Resume+0x28>)
 800142a:	f003 fd8a 	bl	8004f42 <HAL_UART_Init>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <vcom_Resume+0x14>
  {
    Error_Handler();
 8001434:	f7ff f938 	bl	80006a8 <Error_Handler>
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001438:	4805      	ldr	r0, [pc, #20]	; (8001450 <vcom_Resume+0x2c>)
 800143a:	f000 fad5 	bl	80019e8 <HAL_DMA_Init>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <vcom_Resume+0x24>
  {
    Error_Handler();
 8001444:	f7ff f930 	bl	80006a8 <Error_Handler>
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 8001448:	bf00      	nop
 800144a:	bd80      	pop	{r7, pc}
 800144c:	20000084 	.word	0x20000084
 8001450:	20000118 	.word	0x20000118

08001454 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART2)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a05      	ldr	r2, [pc, #20]	; (8001478 <HAL_UART_TxCpltCallback+0x24>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d103      	bne.n	800146e <HAL_UART_TxCpltCallback+0x1a>
  {
    TxCpltCallback(NULL);
 8001466:	4b05      	ldr	r3, [pc, #20]	; (800147c <HAL_UART_TxCpltCallback+0x28>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	2000      	movs	r0, #0
 800146c:	4798      	blx	r3
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 800146e:	bf00      	nop
 8001470:	3708      	adds	r7, #8
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	40004400 	.word	0x40004400
 800147c:	2000017c 	.word	0x2000017c

08001480 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == USART2)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a0d      	ldr	r2, [pc, #52]	; (80014c4 <HAL_UART_RxCpltCallback+0x44>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d113      	bne.n	80014ba <HAL_UART_RxCpltCallback+0x3a>
  {
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 8001492:	4b0d      	ldr	r3, [pc, #52]	; (80014c8 <HAL_UART_RxCpltCallback+0x48>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d00a      	beq.n	80014b0 <HAL_UART_RxCpltCallback+0x30>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d105      	bne.n	80014b0 <HAL_UART_RxCpltCallback+0x30>
    {
      RxCpltCallback(&charRx, 1, 0);
 80014a4:	4b08      	ldr	r3, [pc, #32]	; (80014c8 <HAL_UART_RxCpltCallback+0x48>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	2200      	movs	r2, #0
 80014aa:	2101      	movs	r1, #1
 80014ac:	4807      	ldr	r0, [pc, #28]	; (80014cc <HAL_UART_RxCpltCallback+0x4c>)
 80014ae:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 80014b0:	2201      	movs	r2, #1
 80014b2:	4906      	ldr	r1, [pc, #24]	; (80014cc <HAL_UART_RxCpltCallback+0x4c>)
 80014b4:	6878      	ldr	r0, [r7, #4]
 80014b6:	f003 fd95 	bl	8004fe4 <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 80014ba:	bf00      	nop
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	40004400 	.word	0x40004400
 80014c8:	20000180 	.word	0x20000180
 80014cc:	20000178 	.word	0x20000178

080014d0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80014d0:	480d      	ldr	r0, [pc, #52]	; (8001508 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80014d2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80014d4:	f7ff fb7a 	bl	8000bcc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014d8:	480c      	ldr	r0, [pc, #48]	; (800150c <LoopForever+0x6>)
  ldr r1, =_edata
 80014da:	490d      	ldr	r1, [pc, #52]	; (8001510 <LoopForever+0xa>)
  ldr r2, =_sidata
 80014dc:	4a0d      	ldr	r2, [pc, #52]	; (8001514 <LoopForever+0xe>)
  movs r3, #0
 80014de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014e0:	e002      	b.n	80014e8 <LoopCopyDataInit>

080014e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014e6:	3304      	adds	r3, #4

080014e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014ec:	d3f9      	bcc.n	80014e2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014ee:	4a0a      	ldr	r2, [pc, #40]	; (8001518 <LoopForever+0x12>)
  ldr r4, =_ebss
 80014f0:	4c0a      	ldr	r4, [pc, #40]	; (800151c <LoopForever+0x16>)
  movs r3, #0
 80014f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014f4:	e001      	b.n	80014fa <LoopFillZerobss>

080014f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014f8:	3204      	adds	r2, #4

080014fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014fc:	d3fb      	bcc.n	80014f6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80014fe:	f00a ff8d 	bl	800c41c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001502:	f7ff f86c 	bl	80005de <main>

08001506 <LoopForever>:

LoopForever:
    b LoopForever
 8001506:	e7fe      	b.n	8001506 <LoopForever>
  ldr   r0, =_estack
 8001508:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800150c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001510:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8001514:	0800c9f4 	.word	0x0800c9f4
  ldr r2, =_sbss
 8001518:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 800151c:	200008a4 	.word	0x200008a4

08001520 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001520:	e7fe      	b.n	8001520 <ADC_IRQHandler>

08001522 <LL_AHB2_GRP1_EnableClock>:
{
 8001522:	b480      	push	{r7}
 8001524:	b085      	sub	sp, #20
 8001526:	af00      	add	r7, sp, #0
 8001528:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800152a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800152e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001530:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	4313      	orrs	r3, r2
 8001538:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800153a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800153e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	4013      	ands	r3, r2
 8001544:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001546:	68fb      	ldr	r3, [r7, #12]
}
 8001548:	bf00      	nop
 800154a:	3714      	adds	r7, #20
 800154c:	46bd      	mov	sp, r7
 800154e:	bc80      	pop	{r7}
 8001550:	4770      	bx	lr
	...

08001554 <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b086      	sub	sp, #24
 8001558:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure = {0};
 800155a:	1d3b      	adds	r3, r7, #4
 800155c:	2200      	movs	r2, #0
 800155e:	601a      	str	r2, [r3, #0]
 8001560:	605a      	str	r2, [r3, #4]
 8001562:	609a      	str	r2, [r3, #8]
 8001564:	60da      	str	r2, [r3, #12]
 8001566:	611a      	str	r2, [r3, #16]
  
  /* Enable the Radio Switch Clock */
  RF_SW_CTRL3_GPIO_CLK_ENABLE();
 8001568:	2004      	movs	r0, #4
 800156a:	f7ff ffda 	bl	8001522 <LL_AHB2_GRP1_EnableClock>
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 800156e:	2310      	movs	r3, #16
 8001570:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001572:	2301      	movs	r3, #1
 8001574:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8001576:	2300      	movs	r3, #0
 8001578:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800157a:	2303      	movs	r3, #3
 800157c:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 800157e:	1d3b      	adds	r3, r7, #4
 8001580:	4619      	mov	r1, r3
 8001582:	4812      	ldr	r0, [pc, #72]	; (80015cc <BSP_RADIO_Init+0x78>)
 8001584:	f000 fe48 	bl	8002218 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 8001588:	2320      	movs	r3, #32
 800158a:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 800158c:	1d3b      	adds	r3, r7, #4
 800158e:	4619      	mov	r1, r3
 8001590:	480e      	ldr	r0, [pc, #56]	; (80015cc <BSP_RADIO_Init+0x78>)
 8001592:	f000 fe41 	bl	8002218 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL3_PIN;
 8001596:	2308      	movs	r3, #8
 8001598:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL3_GPIO_PORT, &gpio_init_structure);
 800159a:	1d3b      	adds	r3, r7, #4
 800159c:	4619      	mov	r1, r3
 800159e:	480b      	ldr	r0, [pc, #44]	; (80015cc <BSP_RADIO_Init+0x78>)
 80015a0:	f000 fe3a 	bl	8002218 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 80015a4:	2200      	movs	r2, #0
 80015a6:	2120      	movs	r1, #32
 80015a8:	4808      	ldr	r0, [pc, #32]	; (80015cc <BSP_RADIO_Init+0x78>)
 80015aa:	f001 f863 	bl	8002674 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 80015ae:	2200      	movs	r2, #0
 80015b0:	2110      	movs	r1, #16
 80015b2:	4806      	ldr	r0, [pc, #24]	; (80015cc <BSP_RADIO_Init+0x78>)
 80015b4:	f001 f85e 	bl	8002674 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET); 
 80015b8:	2200      	movs	r2, #0
 80015ba:	2108      	movs	r1, #8
 80015bc:	4803      	ldr	r0, [pc, #12]	; (80015cc <BSP_RADIO_Init+0x78>)
 80015be:	f001 f859 	bl	8002674 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 80015c2:	2300      	movs	r3, #0
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	3718      	adds	r7, #24
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	48000800 	.word	0x48000800

080015d0 <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	4603      	mov	r3, r0
 80015d8:	71fb      	strb	r3, [r7, #7]
  switch (Config)
 80015da:	79fb      	ldrb	r3, [r7, #7]
 80015dc:	2b03      	cmp	r3, #3
 80015de:	d84b      	bhi.n	8001678 <BSP_RADIO_ConfigRFSwitch+0xa8>
 80015e0:	a201      	add	r2, pc, #4	; (adr r2, 80015e8 <BSP_RADIO_ConfigRFSwitch+0x18>)
 80015e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015e6:	bf00      	nop
 80015e8:	080015f9 	.word	0x080015f9
 80015ec:	08001619 	.word	0x08001619
 80015f0:	08001639 	.word	0x08001639
 80015f4:	08001659 	.word	0x08001659
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET);
 80015f8:	2200      	movs	r2, #0
 80015fa:	2108      	movs	r1, #8
 80015fc:	4821      	ldr	r0, [pc, #132]	; (8001684 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 80015fe:	f001 f839 	bl	8002674 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8001602:	2200      	movs	r2, #0
 8001604:	2110      	movs	r1, #16
 8001606:	481f      	ldr	r0, [pc, #124]	; (8001684 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001608:	f001 f834 	bl	8002674 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 800160c:	2200      	movs	r2, #0
 800160e:	2120      	movs	r1, #32
 8001610:	481c      	ldr	r0, [pc, #112]	; (8001684 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001612:	f001 f82f 	bl	8002674 <HAL_GPIO_WritePin>
      break;      
 8001616:	e030      	b.n	800167a <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    case RADIO_SWITCH_RX:
    {
      /*Turns On in Rx Mode the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8001618:	2201      	movs	r2, #1
 800161a:	2108      	movs	r1, #8
 800161c:	4819      	ldr	r0, [pc, #100]	; (8001684 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 800161e:	f001 f829 	bl	8002674 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8001622:	2201      	movs	r2, #1
 8001624:	2110      	movs	r1, #16
 8001626:	4817      	ldr	r0, [pc, #92]	; (8001684 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001628:	f001 f824 	bl	8002674 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 800162c:	2200      	movs	r2, #0
 800162e:	2120      	movs	r1, #32
 8001630:	4814      	ldr	r0, [pc, #80]	; (8001684 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001632:	f001 f81f 	bl	8002674 <HAL_GPIO_WritePin>
      break;
 8001636:	e020      	b.n	800167a <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    case RADIO_SWITCH_RFO_LP:
    {
      /*Turns On in Tx Low Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8001638:	2201      	movs	r2, #1
 800163a:	2108      	movs	r1, #8
 800163c:	4811      	ldr	r0, [pc, #68]	; (8001684 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 800163e:	f001 f819 	bl	8002674 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8001642:	2201      	movs	r2, #1
 8001644:	2110      	movs	r1, #16
 8001646:	480f      	ldr	r0, [pc, #60]	; (8001684 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001648:	f001 f814 	bl	8002674 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 800164c:	2201      	movs	r2, #1
 800164e:	2120      	movs	r1, #32
 8001650:	480c      	ldr	r0, [pc, #48]	; (8001684 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001652:	f001 f80f 	bl	8002674 <HAL_GPIO_WritePin>
      break;
 8001656:	e010      	b.n	800167a <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    case RADIO_SWITCH_RFO_HP:
    {
      /*Turns On in Tx High Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8001658:	2201      	movs	r2, #1
 800165a:	2108      	movs	r1, #8
 800165c:	4809      	ldr	r0, [pc, #36]	; (8001684 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 800165e:	f001 f809 	bl	8002674 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8001662:	2200      	movs	r2, #0
 8001664:	2110      	movs	r1, #16
 8001666:	4807      	ldr	r0, [pc, #28]	; (8001684 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001668:	f001 f804 	bl	8002674 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 800166c:	2201      	movs	r2, #1
 800166e:	2120      	movs	r1, #32
 8001670:	4804      	ldr	r0, [pc, #16]	; (8001684 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001672:	f000 ffff 	bl	8002674 <HAL_GPIO_WritePin>
      break;
 8001676:	e000      	b.n	800167a <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    default:
      break;    
 8001678:	bf00      	nop
  }  

  return BSP_ERROR_NONE;
 800167a:	2300      	movs	r3, #0
}
 800167c:	4618      	mov	r0, r3
 800167e:	3708      	adds	r7, #8
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	48000800 	.word	0x48000800

08001688 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_LP_HP
  *  RADIO_CONF_RFO_LP
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  return RADIO_CONF_RFO_LP_HP;
 800168c:	2300      	movs	r3, #0
}
 800168e:	4618      	mov	r0, r3
 8001690:	46bd      	mov	sp, r7
 8001692:	bc80      	pop	{r7}
 8001694:	4770      	bx	lr

08001696 <BSP_RADIO_IsTCXO>:
  * @retval
  *  RADIO_CONF_TCXO_NOT_SUPPORTED
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
 8001696:	b480      	push	{r7}
 8001698:	af00      	add	r7, sp, #0
  return RADIO_CONF_TCXO_SUPPORTED;
 800169a:	2301      	movs	r3, #1
}
 800169c:	4618      	mov	r0, r3
 800169e:	46bd      	mov	sp, r7
 80016a0:	bc80      	pop	{r7}
 80016a2:	4770      	bx	lr

080016a4 <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 80016a8:	2301      	movs	r3, #1
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bc80      	pop	{r7}
 80016b0:	4770      	bx	lr

080016b2 <BSP_RADIO_GetRFOMaxPowerConfig>:
  * @retval
  *    RADIO_CONF_RFO_LP_MAX_15_dBm for LP mode
  *    RADIO_CONF_RFO_HP_MAX_22_dBm for HP mode
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
 80016b2:	b480      	push	{r7}
 80016b4:	b085      	sub	sp, #20
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	4603      	mov	r3, r0
 80016ba:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 80016bc:	79fb      	ldrb	r3, [r7, #7]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d102      	bne.n	80016c8 <BSP_RADIO_GetRFOMaxPowerConfig+0x16>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 80016c2:	230f      	movs	r3, #15
 80016c4:	60fb      	str	r3, [r7, #12]
 80016c6:	e001      	b.n	80016cc <BSP_RADIO_GetRFOMaxPowerConfig+0x1a>
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 80016c8:	2316      	movs	r3, #22
 80016ca:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80016cc:	68fb      	ldr	r3, [r7, #12]
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	3714      	adds	r7, #20
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bc80      	pop	{r7}
 80016d6:	4770      	bx	lr

080016d8 <LL_DBGMCU_DisableDBGSleepMode>:
  * @brief  Disable the CPU1 Debug Module during SLEEP mode
  * @rmtoll DBGMCU_CR    DBG_SLEEP     LL_DBGMCU_DisableDBGSleepMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_DisableDBGSleepMode(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 80016dc:	4b04      	ldr	r3, [pc, #16]	; (80016f0 <LL_DBGMCU_DisableDBGSleepMode+0x18>)
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	4a03      	ldr	r2, [pc, #12]	; (80016f0 <LL_DBGMCU_DisableDBGSleepMode+0x18>)
 80016e2:	f023 0301 	bic.w	r3, r3, #1
 80016e6:	6053      	str	r3, [r2, #4]
}
 80016e8:	bf00      	nop
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bc80      	pop	{r7}
 80016ee:	4770      	bx	lr
 80016f0:	e0042000 	.word	0xe0042000

080016f4 <LL_DBGMCU_DisableDBGStopMode>:
  * @brief  Disable the Debug Module during STOP mode
  * @rmtoll DBGMCU_CR    DBG_STOP      LL_DBGMCU_DisableDBGStopMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_DisableDBGStopMode(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80016f8:	4b04      	ldr	r3, [pc, #16]	; (800170c <LL_DBGMCU_DisableDBGStopMode+0x18>)
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	4a03      	ldr	r2, [pc, #12]	; (800170c <LL_DBGMCU_DisableDBGStopMode+0x18>)
 80016fe:	f023 0302 	bic.w	r3, r3, #2
 8001702:	6053      	str	r3, [r2, #4]
}
 8001704:	bf00      	nop
 8001706:	46bd      	mov	sp, r7
 8001708:	bc80      	pop	{r7}
 800170a:	4770      	bx	lr
 800170c:	e0042000 	.word	0xe0042000

08001710 <LL_DBGMCU_DisableDBGStandbyMode>:
  * @brief  Disable the Debug Module during STANDBY mode
  * @rmtoll DBGMCU_CR    DBG_STANDBY   LL_DBGMCU_DisableDBGStandbyMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_DisableDBGStandbyMode(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8001714:	4b04      	ldr	r3, [pc, #16]	; (8001728 <LL_DBGMCU_DisableDBGStandbyMode+0x18>)
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	4a03      	ldr	r2, [pc, #12]	; (8001728 <LL_DBGMCU_DisableDBGStandbyMode+0x18>)
 800171a:	f023 0304 	bic.w	r3, r3, #4
 800171e:	6053      	str	r3, [r2, #4]
}
 8001720:	bf00      	nop
 8001722:	46bd      	mov	sp, r7
 8001724:	bc80      	pop	{r7}
 8001726:	4770      	bx	lr
 8001728:	e0042000 	.word	0xe0042000

0800172c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001732:	2300      	movs	r3, #0
 8001734:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001736:	2003      	movs	r0, #3
 8001738:	f000 f914 	bl	8001964 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800173c:	f002 f8a2 	bl	8003884 <HAL_RCC_GetHCLKFreq>
 8001740:	4603      	mov	r3, r0
 8001742:	4a09      	ldr	r2, [pc, #36]	; (8001768 <HAL_Init+0x3c>)
 8001744:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001746:	200f      	movs	r0, #15
 8001748:	f7ff f9c0 	bl	8000acc <HAL_InitTick>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d002      	beq.n	8001758 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	71fb      	strb	r3, [r7, #7]
 8001756:	e001      	b.n	800175c <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001758:	f7ff f89d 	bl	8000896 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800175c:	79fb      	ldrb	r3, [r7, #7]
}
 800175e:	4618      	mov	r0, r3
 8001760:	3708      	adds	r7, #8
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	20000000 	.word	0x20000000

0800176c <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8001770:	4b04      	ldr	r3, [pc, #16]	; (8001784 <HAL_SuspendTick+0x18>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a03      	ldr	r2, [pc, #12]	; (8001784 <HAL_SuspendTick+0x18>)
 8001776:	f023 0302 	bic.w	r3, r3, #2
 800177a:	6013      	str	r3, [r2, #0]
}
 800177c:	bf00      	nop
 800177e:	46bd      	mov	sp, r7
 8001780:	bc80      	pop	{r7}
 8001782:	4770      	bx	lr
 8001784:	e000e010 	.word	0xe000e010

08001788 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 800178c:	4b04      	ldr	r3, [pc, #16]	; (80017a0 <HAL_ResumeTick+0x18>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a03      	ldr	r2, [pc, #12]	; (80017a0 <HAL_ResumeTick+0x18>)
 8001792:	f043 0302 	orr.w	r3, r3, #2
 8001796:	6013      	str	r3, [r2, #0]
}
 8001798:	bf00      	nop
 800179a:	46bd      	mov	sp, r7
 800179c:	bc80      	pop	{r7}
 800179e:	4770      	bx	lr
 80017a0:	e000e010 	.word	0xe000e010

080017a4 <HAL_DBGMCU_DisableDBGSleepMode>:
/**
  * @brief  Disable the CPU1 Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGSleepMode();
 80017a8:	f7ff ff96 	bl	80016d8 <LL_DBGMCU_DisableDBGSleepMode>
}
 80017ac:	bf00      	nop
 80017ae:	bd80      	pop	{r7, pc}

080017b0 <HAL_DBGMCU_DisableDBGStopMode>:
/**
  * @brief  Disable the CPU1 Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStopMode();
 80017b4:	f7ff ff9e 	bl	80016f4 <LL_DBGMCU_DisableDBGStopMode>
}
 80017b8:	bf00      	nop
 80017ba:	bd80      	pop	{r7, pc}

080017bc <HAL_DBGMCU_DisableDBGStandbyMode>:
/**
  * @brief  Disable the CPU1 Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStandbyMode();
 80017c0:	f7ff ffa6 	bl	8001710 <LL_DBGMCU_DisableDBGStandbyMode>
}
 80017c4:	bf00      	nop
 80017c6:	bd80      	pop	{r7, pc}

080017c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b085      	sub	sp, #20
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	f003 0307 	and.w	r3, r3, #7
 80017d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017d8:	4b0c      	ldr	r3, [pc, #48]	; (800180c <__NVIC_SetPriorityGrouping+0x44>)
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017de:	68ba      	ldr	r2, [r7, #8]
 80017e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017e4:	4013      	ands	r3, r2
 80017e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017fa:	4a04      	ldr	r2, [pc, #16]	; (800180c <__NVIC_SetPriorityGrouping+0x44>)
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	60d3      	str	r3, [r2, #12]
}
 8001800:	bf00      	nop
 8001802:	3714      	adds	r7, #20
 8001804:	46bd      	mov	sp, r7
 8001806:	bc80      	pop	{r7}
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	e000ed00 	.word	0xe000ed00

08001810 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001814:	4b04      	ldr	r3, [pc, #16]	; (8001828 <__NVIC_GetPriorityGrouping+0x18>)
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	0a1b      	lsrs	r3, r3, #8
 800181a:	f003 0307 	and.w	r3, r3, #7
}
 800181e:	4618      	mov	r0, r3
 8001820:	46bd      	mov	sp, r7
 8001822:	bc80      	pop	{r7}
 8001824:	4770      	bx	lr
 8001826:	bf00      	nop
 8001828:	e000ed00 	.word	0xe000ed00

0800182c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	4603      	mov	r3, r0
 8001834:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800183a:	2b00      	cmp	r3, #0
 800183c:	db0b      	blt.n	8001856 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800183e:	79fb      	ldrb	r3, [r7, #7]
 8001840:	f003 021f 	and.w	r2, r3, #31
 8001844:	4906      	ldr	r1, [pc, #24]	; (8001860 <__NVIC_EnableIRQ+0x34>)
 8001846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800184a:	095b      	lsrs	r3, r3, #5
 800184c:	2001      	movs	r0, #1
 800184e:	fa00 f202 	lsl.w	r2, r0, r2
 8001852:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001856:	bf00      	nop
 8001858:	370c      	adds	r7, #12
 800185a:	46bd      	mov	sp, r7
 800185c:	bc80      	pop	{r7}
 800185e:	4770      	bx	lr
 8001860:	e000e100 	.word	0xe000e100

08001864 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	4603      	mov	r3, r0
 800186c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800186e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001872:	2b00      	cmp	r3, #0
 8001874:	db12      	blt.n	800189c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001876:	79fb      	ldrb	r3, [r7, #7]
 8001878:	f003 021f 	and.w	r2, r3, #31
 800187c:	490a      	ldr	r1, [pc, #40]	; (80018a8 <__NVIC_DisableIRQ+0x44>)
 800187e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001882:	095b      	lsrs	r3, r3, #5
 8001884:	2001      	movs	r0, #1
 8001886:	fa00 f202 	lsl.w	r2, r0, r2
 800188a:	3320      	adds	r3, #32
 800188c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001890:	f3bf 8f4f 	dsb	sy
}
 8001894:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001896:	f3bf 8f6f 	isb	sy
}
 800189a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800189c:	bf00      	nop
 800189e:	370c      	adds	r7, #12
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bc80      	pop	{r7}
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	e000e100 	.word	0xe000e100

080018ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	4603      	mov	r3, r0
 80018b4:	6039      	str	r1, [r7, #0]
 80018b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	db0a      	blt.n	80018d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	b2da      	uxtb	r2, r3
 80018c4:	490c      	ldr	r1, [pc, #48]	; (80018f8 <__NVIC_SetPriority+0x4c>)
 80018c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ca:	0112      	lsls	r2, r2, #4
 80018cc:	b2d2      	uxtb	r2, r2
 80018ce:	440b      	add	r3, r1
 80018d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018d4:	e00a      	b.n	80018ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	b2da      	uxtb	r2, r3
 80018da:	4908      	ldr	r1, [pc, #32]	; (80018fc <__NVIC_SetPriority+0x50>)
 80018dc:	79fb      	ldrb	r3, [r7, #7]
 80018de:	f003 030f 	and.w	r3, r3, #15
 80018e2:	3b04      	subs	r3, #4
 80018e4:	0112      	lsls	r2, r2, #4
 80018e6:	b2d2      	uxtb	r2, r2
 80018e8:	440b      	add	r3, r1
 80018ea:	761a      	strb	r2, [r3, #24]
}
 80018ec:	bf00      	nop
 80018ee:	370c      	adds	r7, #12
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bc80      	pop	{r7}
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop
 80018f8:	e000e100 	.word	0xe000e100
 80018fc:	e000ed00 	.word	0xe000ed00

08001900 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001900:	b480      	push	{r7}
 8001902:	b089      	sub	sp, #36	; 0x24
 8001904:	af00      	add	r7, sp, #0
 8001906:	60f8      	str	r0, [r7, #12]
 8001908:	60b9      	str	r1, [r7, #8]
 800190a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	f003 0307 	and.w	r3, r3, #7
 8001912:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001914:	69fb      	ldr	r3, [r7, #28]
 8001916:	f1c3 0307 	rsb	r3, r3, #7
 800191a:	2b04      	cmp	r3, #4
 800191c:	bf28      	it	cs
 800191e:	2304      	movcs	r3, #4
 8001920:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	3304      	adds	r3, #4
 8001926:	2b06      	cmp	r3, #6
 8001928:	d902      	bls.n	8001930 <NVIC_EncodePriority+0x30>
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	3b03      	subs	r3, #3
 800192e:	e000      	b.n	8001932 <NVIC_EncodePriority+0x32>
 8001930:	2300      	movs	r3, #0
 8001932:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001934:	f04f 32ff 	mov.w	r2, #4294967295
 8001938:	69bb      	ldr	r3, [r7, #24]
 800193a:	fa02 f303 	lsl.w	r3, r2, r3
 800193e:	43da      	mvns	r2, r3
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	401a      	ands	r2, r3
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001948:	f04f 31ff 	mov.w	r1, #4294967295
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	fa01 f303 	lsl.w	r3, r1, r3
 8001952:	43d9      	mvns	r1, r3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001958:	4313      	orrs	r3, r2
         );
}
 800195a:	4618      	mov	r0, r3
 800195c:	3724      	adds	r7, #36	; 0x24
 800195e:	46bd      	mov	sp, r7
 8001960:	bc80      	pop	{r7}
 8001962:	4770      	bx	lr

08001964 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800196c:	6878      	ldr	r0, [r7, #4]
 800196e:	f7ff ff2b 	bl	80017c8 <__NVIC_SetPriorityGrouping>
}
 8001972:	bf00      	nop
 8001974:	3708      	adds	r7, #8
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}

0800197a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800197a:	b580      	push	{r7, lr}
 800197c:	b086      	sub	sp, #24
 800197e:	af00      	add	r7, sp, #0
 8001980:	4603      	mov	r3, r0
 8001982:	60b9      	str	r1, [r7, #8]
 8001984:	607a      	str	r2, [r7, #4]
 8001986:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001988:	f7ff ff42 	bl	8001810 <__NVIC_GetPriorityGrouping>
 800198c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800198e:	687a      	ldr	r2, [r7, #4]
 8001990:	68b9      	ldr	r1, [r7, #8]
 8001992:	6978      	ldr	r0, [r7, #20]
 8001994:	f7ff ffb4 	bl	8001900 <NVIC_EncodePriority>
 8001998:	4602      	mov	r2, r0
 800199a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800199e:	4611      	mov	r1, r2
 80019a0:	4618      	mov	r0, r3
 80019a2:	f7ff ff83 	bl	80018ac <__NVIC_SetPriority>
}
 80019a6:	bf00      	nop
 80019a8:	3718      	adds	r7, #24
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}

080019ae <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019ae:	b580      	push	{r7, lr}
 80019b0:	b082      	sub	sp, #8
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	4603      	mov	r3, r0
 80019b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019bc:	4618      	mov	r0, r3
 80019be:	f7ff ff35 	bl	800182c <__NVIC_EnableIRQ>
}
 80019c2:	bf00      	nop
 80019c4:	3708      	adds	r7, #8
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}

080019ca <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80019ca:	b580      	push	{r7, lr}
 80019cc:	b082      	sub	sp, #8
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	4603      	mov	r3, r0
 80019d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80019d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d8:	4618      	mov	r0, r3
 80019da:	f7ff ff43 	bl	8001864 <__NVIC_DisableIRQ>
}
 80019de:	bf00      	nop
 80019e0:	3708      	adds	r7, #8
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
	...

080019e8 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d101      	bne.n	80019fa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e08e      	b.n	8001b18 <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	461a      	mov	r2, r3
 8001a00:	4b47      	ldr	r3, [pc, #284]	; (8001b20 <HAL_DMA_Init+0x138>)
 8001a02:	429a      	cmp	r2, r3
 8001a04:	d80f      	bhi.n	8001a26 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	4b45      	ldr	r3, [pc, #276]	; (8001b24 <HAL_DMA_Init+0x13c>)
 8001a0e:	4413      	add	r3, r2
 8001a10:	4a45      	ldr	r2, [pc, #276]	; (8001b28 <HAL_DMA_Init+0x140>)
 8001a12:	fba2 2303 	umull	r2, r3, r2, r3
 8001a16:	091b      	lsrs	r3, r3, #4
 8001a18:	009a      	lsls	r2, r3, #2
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4a42      	ldr	r2, [pc, #264]	; (8001b2c <HAL_DMA_Init+0x144>)
 8001a22:	641a      	str	r2, [r3, #64]	; 0x40
 8001a24:	e00e      	b.n	8001a44 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	4b40      	ldr	r3, [pc, #256]	; (8001b30 <HAL_DMA_Init+0x148>)
 8001a2e:	4413      	add	r3, r2
 8001a30:	4a3d      	ldr	r2, [pc, #244]	; (8001b28 <HAL_DMA_Init+0x140>)
 8001a32:	fba2 2303 	umull	r2, r3, r2, r3
 8001a36:	091b      	lsrs	r3, r3, #4
 8001a38:	009a      	lsls	r2, r3, #2
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4a3c      	ldr	r2, [pc, #240]	; (8001b34 <HAL_DMA_Init+0x14c>)
 8001a42:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2202      	movs	r2, #2
 8001a48:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	687a      	ldr	r2, [r7, #4]
 8001a54:	6812      	ldr	r2, [r2, #0]
 8001a56:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001a5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a5e:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	6819      	ldr	r1, [r3, #0]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	689a      	ldr	r2, [r3, #8]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	68db      	ldr	r3, [r3, #12]
 8001a6e:	431a      	orrs	r2, r3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	691b      	ldr	r3, [r3, #16]
 8001a74:	431a      	orrs	r2, r3
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	695b      	ldr	r3, [r3, #20]
 8001a7a:	431a      	orrs	r2, r3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	699b      	ldr	r3, [r3, #24]
 8001a80:	431a      	orrs	r2, r3
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	69db      	ldr	r3, [r3, #28]
 8001a86:	431a      	orrs	r2, r3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6a1b      	ldr	r3, [r3, #32]
 8001a8c:	431a      	orrs	r2, r3
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	430a      	orrs	r2, r1
 8001a94:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	f000 fb52 	bl	8002140 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001aa4:	d102      	bne.n	8001aac <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	685a      	ldr	r2, [r3, #4]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ab4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001ab8:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001abe:	687a      	ldr	r2, [r7, #4]
 8001ac0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001ac2:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d010      	beq.n	8001aee <HAL_DMA_Init+0x106>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	2b04      	cmp	r3, #4
 8001ad2:	d80c      	bhi.n	8001aee <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	f000 fb7b 	bl	80021d0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ade:	2200      	movs	r2, #0
 8001ae0:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ae6:	687a      	ldr	r2, [r7, #4]
 8001ae8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001aea:	605a      	str	r2, [r3, #4]
 8001aec:	e008      	b.n	8001b00 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = NULL;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2200      	movs	r2, #0
 8001af2:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = NULL;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2200      	movs	r2, #0
 8001af8:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2200      	movs	r2, #0
 8001afe:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2200      	movs	r2, #0
 8001b04:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2201      	movs	r2, #1
 8001b0a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2200      	movs	r2, #0
 8001b12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001b16:	2300      	movs	r3, #0
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3708      	adds	r7, #8
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	40020407 	.word	0x40020407
 8001b24:	bffdfff8 	.word	0xbffdfff8
 8001b28:	cccccccd 	.word	0xcccccccd
 8001b2c:	40020000 	.word	0x40020000
 8001b30:	bffdfbf8 	.word	0xbffdfbf8
 8001b34:	40020400 	.word	0x40020400

08001b38 <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d101      	bne.n	8001b4a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e07b      	b.n	8001c42 <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f022 0201 	bic.w	r2, r2, #1
 8001b58:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	461a      	mov	r2, r3
 8001b60:	4b3a      	ldr	r3, [pc, #232]	; (8001c4c <HAL_DMA_DeInit+0x114>)
 8001b62:	429a      	cmp	r2, r3
 8001b64:	d80f      	bhi.n	8001b86 <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	4b38      	ldr	r3, [pc, #224]	; (8001c50 <HAL_DMA_DeInit+0x118>)
 8001b6e:	4413      	add	r3, r2
 8001b70:	4a38      	ldr	r2, [pc, #224]	; (8001c54 <HAL_DMA_DeInit+0x11c>)
 8001b72:	fba2 2303 	umull	r2, r3, r2, r3
 8001b76:	091b      	lsrs	r3, r3, #4
 8001b78:	009a      	lsls	r2, r3, #2
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4a35      	ldr	r2, [pc, #212]	; (8001c58 <HAL_DMA_DeInit+0x120>)
 8001b82:	641a      	str	r2, [r3, #64]	; 0x40
 8001b84:	e00e      	b.n	8001ba4 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	461a      	mov	r2, r3
 8001b8c:	4b33      	ldr	r3, [pc, #204]	; (8001c5c <HAL_DMA_DeInit+0x124>)
 8001b8e:	4413      	add	r3, r2
 8001b90:	4a30      	ldr	r2, [pc, #192]	; (8001c54 <HAL_DMA_DeInit+0x11c>)
 8001b92:	fba2 2303 	umull	r2, r3, r2, r3
 8001b96:	091b      	lsrs	r3, r3, #4
 8001b98:	009a      	lsls	r2, r3, #2
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4a2f      	ldr	r2, [pc, #188]	; (8001c60 <HAL_DMA_DeInit+0x128>)
 8001ba2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb0:	f003 021c 	and.w	r2, r3, #28
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb8:	2101      	movs	r1, #1
 8001bba:	fa01 f202 	lsl.w	r2, r1, r2
 8001bbe:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001bc0:	6878      	ldr	r0, [r7, #4]
 8001bc2:	f000 fabd 	bl	8002140 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bca:	2200      	movs	r2, #0
 8001bcc:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bd2:	687a      	ldr	r2, [r7, #4]
 8001bd4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001bd6:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d00f      	beq.n	8001c00 <HAL_DMA_DeInit+0xc8>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	2b04      	cmp	r3, #4
 8001be6:	d80b      	bhi.n	8001c00 <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	f000 faf1 	bl	80021d0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bfa:	687a      	ldr	r2, [r7, #4]
 8001bfc:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001bfe:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = NULL;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2200      	movs	r2, #0
 8001c04:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = NULL;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	659a      	str	r2, [r3, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2200      	movs	r2, #0
 8001c16:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2200      	movs	r2, #0
 8001c22:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2200      	movs	r2, #0
 8001c28:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2200      	movs	r2, #0
 8001c34:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001c40:	2300      	movs	r3, #0
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3708      	adds	r7, #8
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	40020407 	.word	0x40020407
 8001c50:	bffdfff8 	.word	0xbffdfff8
 8001c54:	cccccccd 	.word	0xcccccccd
 8001c58:	40020000 	.word	0x40020000
 8001c5c:	bffdfbf8 	.word	0xbffdfbf8
 8001c60:	40020400 	.word	0x40020400

08001c64 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b086      	sub	sp, #24
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	60f8      	str	r0, [r7, #12]
 8001c6c:	60b9      	str	r1, [r7, #8]
 8001c6e:	607a      	str	r2, [r7, #4]
 8001c70:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c72:	2300      	movs	r3, #0
 8001c74:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d101      	bne.n	8001c84 <HAL_DMA_Start_IT+0x20>
 8001c80:	2302      	movs	r3, #2
 8001c82:	e069      	b.n	8001d58 <HAL_DMA_Start_IT+0xf4>
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	2201      	movs	r2, #1
 8001c88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d155      	bne.n	8001d44 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	2202      	movs	r2, #2
 8001c9c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f022 0201 	bic.w	r2, r2, #1
 8001cb4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	687a      	ldr	r2, [r7, #4]
 8001cba:	68b9      	ldr	r1, [r7, #8]
 8001cbc:	68f8      	ldr	r0, [r7, #12]
 8001cbe:	f000 fa02 	bl	80020c6 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d008      	beq.n	8001cdc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f042 020e 	orr.w	r2, r2, #14
 8001cd8:	601a      	str	r2, [r3, #0]
 8001cda:	e00f      	b.n	8001cfc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f022 0204 	bic.w	r2, r2, #4
 8001cea:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f042 020a 	orr.w	r2, r2, #10
 8001cfa:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d007      	beq.n	8001d1a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d14:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d18:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != NULL)
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d007      	beq.n	8001d32 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d30:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f042 0201 	orr.w	r2, r2, #1
 8001d40:	601a      	str	r2, [r3, #0]
 8001d42:	e008      	b.n	8001d56 <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	2280      	movs	r2, #128	; 0x80
 8001d48:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Return error status */
    status = HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8001d56:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	3718      	adds	r7, #24
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}

08001d60 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d101      	bne.n	8001d72 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e04f      	b.n	8001e12 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	2b02      	cmp	r3, #2
 8001d7c:	d008      	beq.n	8001d90 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2204      	movs	r2, #4
 8001d82:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2200      	movs	r2, #0
 8001d88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e040      	b.n	8001e12 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f022 020e 	bic.w	r2, r2, #14
 8001d9e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001daa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001dae:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f022 0201 	bic.w	r2, r2, #1
 8001dbe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc4:	f003 021c 	and.w	r2, r3, #28
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dcc:	2101      	movs	r1, #1
 8001dce:	fa01 f202 	lsl.w	r2, r1, r2
 8001dd2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dd8:	687a      	ldr	r2, [r7, #4]
 8001dda:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001ddc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d00c      	beq.n	8001e00 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001df0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001df4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dfa:	687a      	ldr	r2, [r7, #4]
 8001dfc:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001dfe:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2201      	movs	r2, #1
 8001e04:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8001e10:	2300      	movs	r3, #0
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	370c      	adds	r7, #12
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bc80      	pop	{r7}
 8001e1a:	4770      	bx	lr

08001e1c <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b084      	sub	sp, #16
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e24:	2300      	movs	r3, #0
 8001e26:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	2b02      	cmp	r3, #2
 8001e32:	d005      	beq.n	8001e40 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2204      	movs	r2, #4
 8001e38:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	73fb      	strb	r3, [r7, #15]
 8001e3e:	e047      	b.n	8001ed0 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f022 020e 	bic.w	r2, r2, #14
 8001e4e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f022 0201 	bic.w	r2, r2, #1
 8001e5e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e6a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e6e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e74:	f003 021c 	and.w	r2, r3, #28
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7c:	2101      	movs	r1, #1
 8001e7e:	fa01 f202 	lsl.w	r2, r1, r2
 8001e82:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e88:	687a      	ldr	r2, [r7, #4]
 8001e8a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001e8c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d00c      	beq.n	8001eb0 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ea0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ea4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eaa:	687a      	ldr	r2, [r7, #4]
 8001eac:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001eae:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d003      	beq.n	8001ed0 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ecc:	6878      	ldr	r0, [r7, #4]
 8001ece:	4798      	blx	r3
    }
  }
  return status;
 8001ed0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3710      	adds	r7, #16
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
	...

08001edc <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b084      	sub	sp, #16
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef8:	f003 031c 	and.w	r3, r3, #28
 8001efc:	2204      	movs	r2, #4
 8001efe:	409a      	lsls	r2, r3
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	4013      	ands	r3, r2
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d027      	beq.n	8001f58 <HAL_DMA_IRQHandler+0x7c>
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	f003 0304 	and.w	r3, r3, #4
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d022      	beq.n	8001f58 <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 0320 	and.w	r3, r3, #32
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d107      	bne.n	8001f30 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f022 0204 	bic.w	r2, r2, #4
 8001f2e:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f34:	f003 021c 	and.w	r2, r3, #28
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3c:	2104      	movs	r1, #4
 8001f3e:	fa01 f202 	lsl.w	r2, r1, r2
 8001f42:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	f000 8081 	beq.w	8002050 <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8001f56:	e07b      	b.n	8002050 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f5c:	f003 031c 	and.w	r3, r3, #28
 8001f60:	2202      	movs	r2, #2
 8001f62:	409a      	lsls	r2, r3
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	4013      	ands	r3, r2
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d03d      	beq.n	8001fe8 <HAL_DMA_IRQHandler+0x10c>
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	f003 0302 	and.w	r3, r3, #2
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d038      	beq.n	8001fe8 <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 0320 	and.w	r3, r3, #32
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d10b      	bne.n	8001f9c <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f022 020a 	bic.w	r2, r2, #10
 8001f92:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2201      	movs	r2, #1
 8001f98:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	4b2e      	ldr	r3, [pc, #184]	; (800205c <HAL_DMA_IRQHandler+0x180>)
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d909      	bls.n	8001fbc <HAL_DMA_IRQHandler+0xe0>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fac:	f003 031c 	and.w	r3, r3, #28
 8001fb0:	4a2b      	ldr	r2, [pc, #172]	; (8002060 <HAL_DMA_IRQHandler+0x184>)
 8001fb2:	2102      	movs	r1, #2
 8001fb4:	fa01 f303 	lsl.w	r3, r1, r3
 8001fb8:	6053      	str	r3, [r2, #4]
 8001fba:	e008      	b.n	8001fce <HAL_DMA_IRQHandler+0xf2>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc0:	f003 031c 	and.w	r3, r3, #28
 8001fc4:	4a27      	ldr	r2, [pc, #156]	; (8002064 <HAL_DMA_IRQHandler+0x188>)
 8001fc6:	2102      	movs	r1, #2
 8001fc8:	fa01 f303 	lsl.w	r3, r1, r3
 8001fcc:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if (hdma->XferCpltCallback != NULL)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d038      	beq.n	8002050 <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8001fe6:	e033      	b.n	8002050 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fec:	f003 031c 	and.w	r3, r3, #28
 8001ff0:	2208      	movs	r2, #8
 8001ff2:	409a      	lsls	r2, r3
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d02a      	beq.n	8002052 <HAL_DMA_IRQHandler+0x176>
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	f003 0308 	and.w	r3, r3, #8
 8002002:	2b00      	cmp	r3, #0
 8002004:	d025      	beq.n	8002052 <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f022 020e 	bic.w	r2, r2, #14
 8002014:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800201a:	f003 021c 	and.w	r2, r3, #28
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002022:	2101      	movs	r1, #1
 8002024:	fa01 f202 	lsl.w	r2, r1, r2
 8002028:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2201      	movs	r2, #1
 800202e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2201      	movs	r2, #1
 8002034:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2200      	movs	r2, #0
 800203c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002044:	2b00      	cmp	r3, #0
 8002046:	d004      	beq.n	8002052 <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002050:	bf00      	nop
 8002052:	bf00      	nop
}
 8002054:	3710      	adds	r7, #16
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	40020080 	.word	0x40020080
 8002060:	40020400 	.word	0x40020400
 8002064:	40020000 	.word	0x40020000

08002068 <HAL_DMA_ConfigChannelAttributes>:
  * @param ChannelAttributes specifies the DMA channel secure/privilege attributes.
  *        This parameter can be a one or a combination of @ref DMA_Channel_Attributes
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *hdma, uint32_t ChannelAttributes)
{
 8002068:	b480      	push	{r7}
 800206a:	b085      	sub	sp, #20
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002072:	2300      	movs	r3, #0
 8002074:	72fb      	strb	r3, [r7, #11]
#if defined (CORE_CM0PLUS)
  uint32_t ccr_SECM;
#endif /* CORE_CM0PLUS */

  /* Check the DMA peripheral handle */
  if (hdma == NULL)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d103      	bne.n	8002084 <HAL_DMA_ConfigChannelAttributes+0x1c>
  {
    status = HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	72fb      	strb	r3, [r7, #11]
    return status;
 8002080:	7afb      	ldrb	r3, [r7, #11]
 8002082:	e01b      	b.n	80020bc <HAL_DMA_ConfigChannelAttributes+0x54>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Read CCR register */
  ccr = READ_REG(hdma->Instance->CCR);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	60fb      	str	r3, [r7, #12]

  /* Apply any requested privilege/non-privilege attributes */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	f003 0310 	and.w	r3, r3, #16
 8002092:	2b00      	cmp	r3, #0
 8002094:	d00d      	beq.n	80020b2 <HAL_DMA_ConfigChannelAttributes+0x4a>
  {
    if ((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800209c:	2b00      	cmp	r3, #0
 800209e:	d004      	beq.n	80020aa <HAL_DMA_ConfigChannelAttributes+0x42>
    {
      SET_BIT(ccr, DMA_CCR_PRIV);
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80020a6:	60fb      	str	r3, [r7, #12]
 80020a8:	e003      	b.n	80020b2 <HAL_DMA_ConfigChannelAttributes+0x4a>
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80020b0:	60fb      	str	r3, [r7, #12]
  }

#endif /* CORE_CM0PLUS */

  /* Update CCR Register: PRIV, SECM, SCEC, DSEC bits */
  WRITE_REG(hdma->Instance->CCR, ccr);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	68fa      	ldr	r2, [r7, #12]
 80020b8:	601a      	str	r2, [r3, #0]

  return status;
 80020ba:	7afb      	ldrb	r3, [r7, #11]
}
 80020bc:	4618      	mov	r0, r3
 80020be:	3714      	adds	r7, #20
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bc80      	pop	{r7}
 80020c4:	4770      	bx	lr

080020c6 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020c6:	b480      	push	{r7}
 80020c8:	b085      	sub	sp, #20
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	60f8      	str	r0, [r7, #12]
 80020ce:	60b9      	str	r1, [r7, #8]
 80020d0:	607a      	str	r2, [r7, #4]
 80020d2:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020d8:	68fa      	ldr	r2, [r7, #12]
 80020da:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80020dc:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != NULL)
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d004      	beq.n	80020f0 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ea:	68fa      	ldr	r2, [r7, #12]
 80020ec:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80020ee:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020f4:	f003 021c 	and.w	r2, r3, #28
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fc:	2101      	movs	r1, #1
 80020fe:	fa01 f202 	lsl.w	r2, r1, r2
 8002102:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	683a      	ldr	r2, [r7, #0]
 800210a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	2b10      	cmp	r3, #16
 8002112:	d108      	bne.n	8002126 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	687a      	ldr	r2, [r7, #4]
 800211a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	68ba      	ldr	r2, [r7, #8]
 8002122:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002124:	e007      	b.n	8002136 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	68ba      	ldr	r2, [r7, #8]
 800212c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	687a      	ldr	r2, [r7, #4]
 8002134:	60da      	str	r2, [r3, #12]
}
 8002136:	bf00      	nop
 8002138:	3714      	adds	r7, #20
 800213a:	46bd      	mov	sp, r7
 800213c:	bc80      	pop	{r7}
 800213e:	4770      	bx	lr

08002140 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002140:	b480      	push	{r7}
 8002142:	b085      	sub	sp, #20
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	461a      	mov	r2, r3
 800214e:	4b1c      	ldr	r3, [pc, #112]	; (80021c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 8002150:	429a      	cmp	r2, r3
 8002152:	d813      	bhi.n	800217c <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002158:	089b      	lsrs	r3, r3, #2
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002160:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8002164:	687a      	ldr	r2, [r7, #4]
 8002166:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	b2db      	uxtb	r3, r3
 800216e:	3b08      	subs	r3, #8
 8002170:	4a14      	ldr	r2, [pc, #80]	; (80021c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8002172:	fba2 2303 	umull	r2, r3, r2, r3
 8002176:	091b      	lsrs	r3, r3, #4
 8002178:	60fb      	str	r3, [r7, #12]
 800217a:	e011      	b.n	80021a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002180:	089b      	lsrs	r3, r3, #2
 8002182:	009a      	lsls	r2, r3, #2
 8002184:	4b10      	ldr	r3, [pc, #64]	; (80021c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 8002186:	4413      	add	r3, r2
 8002188:	687a      	ldr	r2, [r7, #4]
 800218a:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	b2db      	uxtb	r3, r3
 8002192:	3b08      	subs	r3, #8
 8002194:	4a0b      	ldr	r2, [pc, #44]	; (80021c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8002196:	fba2 2303 	umull	r2, r3, r2, r3
 800219a:	091b      	lsrs	r3, r3, #4
 800219c:	3307      	adds	r3, #7
 800219e:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	4a0a      	ldr	r2, [pc, #40]	; (80021cc <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 80021a4:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	f003 031f 	and.w	r3, r3, #31
 80021ac:	2201      	movs	r2, #1
 80021ae:	409a      	lsls	r2, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	651a      	str	r2, [r3, #80]	; 0x50
}
 80021b4:	bf00      	nop
 80021b6:	3714      	adds	r7, #20
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bc80      	pop	{r7}
 80021bc:	4770      	bx	lr
 80021be:	bf00      	nop
 80021c0:	40020407 	.word	0x40020407
 80021c4:	cccccccd 	.word	0xcccccccd
 80021c8:	4002081c 	.word	0x4002081c
 80021cc:	40020880 	.word	0x40020880

080021d0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b085      	sub	sp, #20
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80021e0:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80021e2:	68fa      	ldr	r2, [r7, #12]
 80021e4:	4b0a      	ldr	r3, [pc, #40]	; (8002210 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80021e6:	4413      	add	r3, r2
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	461a      	mov	r2, r3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	4a08      	ldr	r2, [pc, #32]	; (8002214 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80021f4:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	3b01      	subs	r3, #1
 80021fa:	f003 0303 	and.w	r3, r3, #3
 80021fe:	2201      	movs	r2, #1
 8002200:	409a      	lsls	r2, r3
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002206:	bf00      	nop
 8002208:	3714      	adds	r7, #20
 800220a:	46bd      	mov	sp, r7
 800220c:	bc80      	pop	{r7}
 800220e:	4770      	bx	lr
 8002210:	1000823f 	.word	0x1000823f
 8002214:	40020940 	.word	0x40020940

08002218 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002218:	b480      	push	{r7}
 800221a:	b087      	sub	sp, #28
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002222:	2300      	movs	r3, #0
 8002224:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002226:	e140      	b.n	80024aa <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	2101      	movs	r1, #1
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	fa01 f303 	lsl.w	r3, r1, r3
 8002234:	4013      	ands	r3, r2
 8002236:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	2b00      	cmp	r3, #0
 800223c:	f000 8132 	beq.w	80024a4 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f003 0303 	and.w	r3, r3, #3
 8002248:	2b01      	cmp	r3, #1
 800224a:	d005      	beq.n	8002258 <HAL_GPIO_Init+0x40>
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f003 0303 	and.w	r3, r3, #3
 8002254:	2b02      	cmp	r3, #2
 8002256:	d130      	bne.n	80022ba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	005b      	lsls	r3, r3, #1
 8002262:	2203      	movs	r2, #3
 8002264:	fa02 f303 	lsl.w	r3, r2, r3
 8002268:	43db      	mvns	r3, r3
 800226a:	693a      	ldr	r2, [r7, #16]
 800226c:	4013      	ands	r3, r2
 800226e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	68da      	ldr	r2, [r3, #12]
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	005b      	lsls	r3, r3, #1
 8002278:	fa02 f303 	lsl.w	r3, r2, r3
 800227c:	693a      	ldr	r2, [r7, #16]
 800227e:	4313      	orrs	r3, r2
 8002280:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	693a      	ldr	r2, [r7, #16]
 8002286:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800228e:	2201      	movs	r2, #1
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	fa02 f303 	lsl.w	r3, r2, r3
 8002296:	43db      	mvns	r3, r3
 8002298:	693a      	ldr	r2, [r7, #16]
 800229a:	4013      	ands	r3, r2
 800229c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	091b      	lsrs	r3, r3, #4
 80022a4:	f003 0201 	and.w	r2, r3, #1
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	fa02 f303 	lsl.w	r3, r2, r3
 80022ae:	693a      	ldr	r2, [r7, #16]
 80022b0:	4313      	orrs	r3, r2
 80022b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	693a      	ldr	r2, [r7, #16]
 80022b8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	f003 0303 	and.w	r3, r3, #3
 80022c2:	2b03      	cmp	r3, #3
 80022c4:	d017      	beq.n	80022f6 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	68db      	ldr	r3, [r3, #12]
 80022ca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	005b      	lsls	r3, r3, #1
 80022d0:	2203      	movs	r2, #3
 80022d2:	fa02 f303 	lsl.w	r3, r2, r3
 80022d6:	43db      	mvns	r3, r3
 80022d8:	693a      	ldr	r2, [r7, #16]
 80022da:	4013      	ands	r3, r2
 80022dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	689a      	ldr	r2, [r3, #8]
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	005b      	lsls	r3, r3, #1
 80022e6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ea:	693a      	ldr	r2, [r7, #16]
 80022ec:	4313      	orrs	r3, r2
 80022ee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	693a      	ldr	r2, [r7, #16]
 80022f4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	f003 0303 	and.w	r3, r3, #3
 80022fe:	2b02      	cmp	r3, #2
 8002300:	d123      	bne.n	800234a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	08da      	lsrs	r2, r3, #3
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	3208      	adds	r2, #8
 800230a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800230e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	f003 0307 	and.w	r3, r3, #7
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	220f      	movs	r2, #15
 800231a:	fa02 f303 	lsl.w	r3, r2, r3
 800231e:	43db      	mvns	r3, r3
 8002320:	693a      	ldr	r2, [r7, #16]
 8002322:	4013      	ands	r3, r2
 8002324:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	691a      	ldr	r2, [r3, #16]
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	f003 0307 	and.w	r3, r3, #7
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	fa02 f303 	lsl.w	r3, r2, r3
 8002336:	693a      	ldr	r2, [r7, #16]
 8002338:	4313      	orrs	r3, r2
 800233a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	08da      	lsrs	r2, r3, #3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	3208      	adds	r2, #8
 8002344:	6939      	ldr	r1, [r7, #16]
 8002346:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	005b      	lsls	r3, r3, #1
 8002354:	2203      	movs	r2, #3
 8002356:	fa02 f303 	lsl.w	r3, r2, r3
 800235a:	43db      	mvns	r3, r3
 800235c:	693a      	ldr	r2, [r7, #16]
 800235e:	4013      	ands	r3, r2
 8002360:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	f003 0203 	and.w	r2, r3, #3
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	005b      	lsls	r3, r3, #1
 800236e:	fa02 f303 	lsl.w	r3, r2, r3
 8002372:	693a      	ldr	r2, [r7, #16]
 8002374:	4313      	orrs	r3, r2
 8002376:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	693a      	ldr	r2, [r7, #16]
 800237c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002386:	2b00      	cmp	r3, #0
 8002388:	f000 808c 	beq.w	80024a4 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 800238c:	4a4e      	ldr	r2, [pc, #312]	; (80024c8 <HAL_GPIO_Init+0x2b0>)
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	089b      	lsrs	r3, r3, #2
 8002392:	3302      	adds	r3, #2
 8002394:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002398:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	f003 0303 	and.w	r3, r3, #3
 80023a0:	009b      	lsls	r3, r3, #2
 80023a2:	2207      	movs	r2, #7
 80023a4:	fa02 f303 	lsl.w	r3, r2, r3
 80023a8:	43db      	mvns	r3, r3
 80023aa:	693a      	ldr	r2, [r7, #16]
 80023ac:	4013      	ands	r3, r2
 80023ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80023b6:	d00d      	beq.n	80023d4 <HAL_GPIO_Init+0x1bc>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	4a44      	ldr	r2, [pc, #272]	; (80024cc <HAL_GPIO_Init+0x2b4>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d007      	beq.n	80023d0 <HAL_GPIO_Init+0x1b8>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	4a43      	ldr	r2, [pc, #268]	; (80024d0 <HAL_GPIO_Init+0x2b8>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d101      	bne.n	80023cc <HAL_GPIO_Init+0x1b4>
 80023c8:	2302      	movs	r3, #2
 80023ca:	e004      	b.n	80023d6 <HAL_GPIO_Init+0x1be>
 80023cc:	2307      	movs	r3, #7
 80023ce:	e002      	b.n	80023d6 <HAL_GPIO_Init+0x1be>
 80023d0:	2301      	movs	r3, #1
 80023d2:	e000      	b.n	80023d6 <HAL_GPIO_Init+0x1be>
 80023d4:	2300      	movs	r3, #0
 80023d6:	697a      	ldr	r2, [r7, #20]
 80023d8:	f002 0203 	and.w	r2, r2, #3
 80023dc:	0092      	lsls	r2, r2, #2
 80023de:	4093      	lsls	r3, r2
 80023e0:	693a      	ldr	r2, [r7, #16]
 80023e2:	4313      	orrs	r3, r2
 80023e4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80023e6:	4938      	ldr	r1, [pc, #224]	; (80024c8 <HAL_GPIO_Init+0x2b0>)
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	089b      	lsrs	r3, r3, #2
 80023ec:	3302      	adds	r3, #2
 80023ee:	693a      	ldr	r2, [r7, #16]
 80023f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80023f4:	4b37      	ldr	r3, [pc, #220]	; (80024d4 <HAL_GPIO_Init+0x2bc>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	43db      	mvns	r3, r3
 80023fe:	693a      	ldr	r2, [r7, #16]
 8002400:	4013      	ands	r3, r2
 8002402:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800240c:	2b00      	cmp	r3, #0
 800240e:	d003      	beq.n	8002418 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8002410:	693a      	ldr	r2, [r7, #16]
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	4313      	orrs	r3, r2
 8002416:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002418:	4a2e      	ldr	r2, [pc, #184]	; (80024d4 <HAL_GPIO_Init+0x2bc>)
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800241e:	4b2d      	ldr	r3, [pc, #180]	; (80024d4 <HAL_GPIO_Init+0x2bc>)
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	43db      	mvns	r3, r3
 8002428:	693a      	ldr	r2, [r7, #16]
 800242a:	4013      	ands	r3, r2
 800242c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d003      	beq.n	8002442 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 800243a:	693a      	ldr	r2, [r7, #16]
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	4313      	orrs	r3, r2
 8002440:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002442:	4a24      	ldr	r2, [pc, #144]	; (80024d4 <HAL_GPIO_Init+0x2bc>)
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8002448:	4b22      	ldr	r3, [pc, #136]	; (80024d4 <HAL_GPIO_Init+0x2bc>)
 800244a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800244e:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	43db      	mvns	r3, r3
 8002454:	693a      	ldr	r2, [r7, #16]
 8002456:	4013      	ands	r3, r2
 8002458:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d003      	beq.n	800246e <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8002466:	693a      	ldr	r2, [r7, #16]
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	4313      	orrs	r3, r2
 800246c:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 800246e:	4a19      	ldr	r2, [pc, #100]	; (80024d4 <HAL_GPIO_Init+0x2bc>)
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8002476:	4b17      	ldr	r3, [pc, #92]	; (80024d4 <HAL_GPIO_Init+0x2bc>)
 8002478:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800247c:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	43db      	mvns	r3, r3
 8002482:	693a      	ldr	r2, [r7, #16]
 8002484:	4013      	ands	r3, r2
 8002486:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002490:	2b00      	cmp	r3, #0
 8002492:	d003      	beq.n	800249c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002494:	693a      	ldr	r2, [r7, #16]
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	4313      	orrs	r3, r2
 800249a:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 800249c:	4a0d      	ldr	r2, [pc, #52]	; (80024d4 <HAL_GPIO_Init+0x2bc>)
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	3301      	adds	r3, #1
 80024a8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	fa22 f303 	lsr.w	r3, r2, r3
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	f47f aeb7 	bne.w	8002228 <HAL_GPIO_Init+0x10>
  }
}
 80024ba:	bf00      	nop
 80024bc:	bf00      	nop
 80024be:	371c      	adds	r7, #28
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bc80      	pop	{r7}
 80024c4:	4770      	bx	lr
 80024c6:	bf00      	nop
 80024c8:	40010000 	.word	0x40010000
 80024cc:	48000400 	.word	0x48000400
 80024d0:	48000800 	.word	0x48000800
 80024d4:	58000800 	.word	0x58000800

080024d8 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80024d8:	b480      	push	{r7}
 80024da:	b087      	sub	sp, #28
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80024e2:	2300      	movs	r3, #0
 80024e4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80024e6:	e0af      	b.n	8002648 <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80024e8:	2201      	movs	r2, #1
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	fa02 f303 	lsl.w	r3, r2, r3
 80024f0:	683a      	ldr	r2, [r7, #0]
 80024f2:	4013      	ands	r3, r2
 80024f4:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	f000 80a2 	beq.w	8002642 <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80024fe:	4a59      	ldr	r2, [pc, #356]	; (8002664 <HAL_GPIO_DeInit+0x18c>)
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	089b      	lsrs	r3, r3, #2
 8002504:	3302      	adds	r3, #2
 8002506:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800250a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	f003 0303 	and.w	r3, r3, #3
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	2207      	movs	r2, #7
 8002516:	fa02 f303 	lsl.w	r3, r2, r3
 800251a:	68fa      	ldr	r2, [r7, #12]
 800251c:	4013      	ands	r3, r2
 800251e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002526:	d00d      	beq.n	8002544 <HAL_GPIO_DeInit+0x6c>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	4a4f      	ldr	r2, [pc, #316]	; (8002668 <HAL_GPIO_DeInit+0x190>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d007      	beq.n	8002540 <HAL_GPIO_DeInit+0x68>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	4a4e      	ldr	r2, [pc, #312]	; (800266c <HAL_GPIO_DeInit+0x194>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d101      	bne.n	800253c <HAL_GPIO_DeInit+0x64>
 8002538:	2302      	movs	r3, #2
 800253a:	e004      	b.n	8002546 <HAL_GPIO_DeInit+0x6e>
 800253c:	2307      	movs	r3, #7
 800253e:	e002      	b.n	8002546 <HAL_GPIO_DeInit+0x6e>
 8002540:	2301      	movs	r3, #1
 8002542:	e000      	b.n	8002546 <HAL_GPIO_DeInit+0x6e>
 8002544:	2300      	movs	r3, #0
 8002546:	697a      	ldr	r2, [r7, #20]
 8002548:	f002 0203 	and.w	r2, r2, #3
 800254c:	0092      	lsls	r2, r2, #2
 800254e:	4093      	lsls	r3, r2
 8002550:	68fa      	ldr	r2, [r7, #12]
 8002552:	429a      	cmp	r2, r3
 8002554:	d136      	bne.n	80025c4 <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 8002556:	4b46      	ldr	r3, [pc, #280]	; (8002670 <HAL_GPIO_DeInit+0x198>)
 8002558:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	43db      	mvns	r3, r3
 8002560:	4943      	ldr	r1, [pc, #268]	; (8002670 <HAL_GPIO_DeInit+0x198>)
 8002562:	4013      	ands	r3, r2
 8002564:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8002568:	4b41      	ldr	r3, [pc, #260]	; (8002670 <HAL_GPIO_DeInit+0x198>)
 800256a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	43db      	mvns	r3, r3
 8002572:	493f      	ldr	r1, [pc, #252]	; (8002670 <HAL_GPIO_DeInit+0x198>)
 8002574:	4013      	ands	r3, r2
 8002576:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800257a:	4b3d      	ldr	r3, [pc, #244]	; (8002670 <HAL_GPIO_DeInit+0x198>)
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	43db      	mvns	r3, r3
 8002582:	493b      	ldr	r1, [pc, #236]	; (8002670 <HAL_GPIO_DeInit+0x198>)
 8002584:	4013      	ands	r3, r2
 8002586:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8002588:	4b39      	ldr	r3, [pc, #228]	; (8002670 <HAL_GPIO_DeInit+0x198>)
 800258a:	685a      	ldr	r2, [r3, #4]
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	43db      	mvns	r3, r3
 8002590:	4937      	ldr	r1, [pc, #220]	; (8002670 <HAL_GPIO_DeInit+0x198>)
 8002592:	4013      	ands	r3, r2
 8002594:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	f003 0303 	and.w	r3, r3, #3
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	2207      	movs	r2, #7
 80025a0:	fa02 f303 	lsl.w	r3, r2, r3
 80025a4:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80025a6:	4a2f      	ldr	r2, [pc, #188]	; (8002664 <HAL_GPIO_DeInit+0x18c>)
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	089b      	lsrs	r3, r3, #2
 80025ac:	3302      	adds	r3, #2
 80025ae:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	43da      	mvns	r2, r3
 80025b6:	482b      	ldr	r0, [pc, #172]	; (8002664 <HAL_GPIO_DeInit+0x18c>)
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	089b      	lsrs	r3, r3, #2
 80025bc:	400a      	ands	r2, r1
 80025be:	3302      	adds	r3, #2
 80025c0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	005b      	lsls	r3, r3, #1
 80025cc:	2103      	movs	r1, #3
 80025ce:	fa01 f303 	lsl.w	r3, r1, r3
 80025d2:	431a      	orrs	r2, r3
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	08da      	lsrs	r2, r3, #3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	3208      	adds	r2, #8
 80025e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	f003 0307 	and.w	r3, r3, #7
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	220f      	movs	r2, #15
 80025ee:	fa02 f303 	lsl.w	r3, r2, r3
 80025f2:	43db      	mvns	r3, r3
 80025f4:	697a      	ldr	r2, [r7, #20]
 80025f6:	08d2      	lsrs	r2, r2, #3
 80025f8:	4019      	ands	r1, r3
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	3208      	adds	r2, #8
 80025fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	689a      	ldr	r2, [r3, #8]
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	005b      	lsls	r3, r3, #1
 800260a:	2103      	movs	r1, #3
 800260c:	fa01 f303 	lsl.w	r3, r1, r3
 8002610:	43db      	mvns	r3, r3
 8002612:	401a      	ands	r2, r3
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	685a      	ldr	r2, [r3, #4]
 800261c:	2101      	movs	r1, #1
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	fa01 f303 	lsl.w	r3, r1, r3
 8002624:	43db      	mvns	r3, r3
 8002626:	401a      	ands	r2, r3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	68da      	ldr	r2, [r3, #12]
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	005b      	lsls	r3, r3, #1
 8002634:	2103      	movs	r1, #3
 8002636:	fa01 f303 	lsl.w	r3, r1, r3
 800263a:	43db      	mvns	r3, r3
 800263c:	401a      	ands	r2, r3
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	60da      	str	r2, [r3, #12]
    }

    position++;
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	3301      	adds	r3, #1
 8002646:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8002648:	683a      	ldr	r2, [r7, #0]
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	fa22 f303 	lsr.w	r3, r2, r3
 8002650:	2b00      	cmp	r3, #0
 8002652:	f47f af49 	bne.w	80024e8 <HAL_GPIO_DeInit+0x10>
  }
}
 8002656:	bf00      	nop
 8002658:	bf00      	nop
 800265a:	371c      	adds	r7, #28
 800265c:	46bd      	mov	sp, r7
 800265e:	bc80      	pop	{r7}
 8002660:	4770      	bx	lr
 8002662:	bf00      	nop
 8002664:	40010000 	.word	0x40010000
 8002668:	48000400 	.word	0x48000400
 800266c:	48000800 	.word	0x48000800
 8002670:	58000800 	.word	0x58000800

08002674 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002674:	b480      	push	{r7}
 8002676:	b083      	sub	sp, #12
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	460b      	mov	r3, r1
 800267e:	807b      	strh	r3, [r7, #2]
 8002680:	4613      	mov	r3, r2
 8002682:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002684:	787b      	ldrb	r3, [r7, #1]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d003      	beq.n	8002692 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800268a:	887a      	ldrh	r2, [r7, #2]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002690:	e002      	b.n	8002698 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002692:	887a      	ldrh	r2, [r7, #2]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002698:	bf00      	nop
 800269a:	370c      	adds	r7, #12
 800269c:	46bd      	mov	sp, r7
 800269e:	bc80      	pop	{r7}
 80026a0:	4770      	bx	lr

080026a2 <HAL_GPIO_TogglePin>:
  * @param GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80026a2:	b480      	push	{r7}
 80026a4:	b085      	sub	sp, #20
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	6078      	str	r0, [r7, #4]
 80026aa:	460b      	mov	r3, r1
 80026ac:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	695b      	ldr	r3, [r3, #20]
 80026b2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80026b4:	887a      	ldrh	r2, [r7, #2]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	4013      	ands	r3, r2
 80026ba:	041a      	lsls	r2, r3, #16
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	43d9      	mvns	r1, r3
 80026c0:	887b      	ldrh	r3, [r7, #2]
 80026c2:	400b      	ands	r3, r1
 80026c4:	431a      	orrs	r2, r3
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	619a      	str	r2, [r3, #24]
}
 80026ca:	bf00      	nop
 80026cc:	3714      	adds	r7, #20
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bc80      	pop	{r7}
 80026d2:	4770      	bx	lr

080026d4 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80026d4:	b480      	push	{r7}
 80026d6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80026d8:	4b04      	ldr	r3, [pc, #16]	; (80026ec <HAL_PWR_EnableBkUpAccess+0x18>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a03      	ldr	r2, [pc, #12]	; (80026ec <HAL_PWR_EnableBkUpAccess+0x18>)
 80026de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026e2:	6013      	str	r3, [r2, #0]
}
 80026e4:	bf00      	nop
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bc80      	pop	{r7}
 80026ea:	4770      	bx	lr
 80026ec:	58000400 	.word	0x58000400

080026f0 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b082      	sub	sp, #8
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	460b      	mov	r3, r1
 80026fa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d10c      	bne.n	800271c <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8002702:	4b13      	ldr	r3, [pc, #76]	; (8002750 <HAL_PWR_EnterSLEEPMode+0x60>)
 8002704:	695b      	ldr	r3, [r3, #20]
 8002706:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800270a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800270e:	d10d      	bne.n	800272c <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8002710:	f000 f83c 	bl	800278c <HAL_PWREx_DisableLowPowerRunMode>
 8002714:	4603      	mov	r3, r0
 8002716:	2b00      	cmp	r3, #0
 8002718:	d008      	beq.n	800272c <HAL_PWR_EnterSLEEPMode+0x3c>
      {
        return ;
 800271a:	e015      	b.n	8002748 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 800271c:	4b0c      	ldr	r3, [pc, #48]	; (8002750 <HAL_PWR_EnterSLEEPMode+0x60>)
 800271e:	695b      	ldr	r3, [r3, #20]
 8002720:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002724:	2b00      	cmp	r3, #0
 8002726:	d101      	bne.n	800272c <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 8002728:	f000 f822 	bl	8002770 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800272c:	4b09      	ldr	r3, [pc, #36]	; (8002754 <HAL_PWR_EnterSLEEPMode+0x64>)
 800272e:	691b      	ldr	r3, [r3, #16]
 8002730:	4a08      	ldr	r2, [pc, #32]	; (8002754 <HAL_PWR_EnterSLEEPMode+0x64>)
 8002732:	f023 0304 	bic.w	r3, r3, #4
 8002736:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8002738:	78fb      	ldrb	r3, [r7, #3]
 800273a:	2b01      	cmp	r3, #1
 800273c:	d101      	bne.n	8002742 <HAL_PWR_EnterSLEEPMode+0x52>
  {
    /* Request Wait For Interrupt */
    __WFI();
 800273e:	bf30      	wfi
 8002740:	e002      	b.n	8002748 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8002742:	bf40      	sev
    __WFE();
 8002744:	bf20      	wfe
    __WFE();
 8002746:	bf20      	wfe
  }
}
 8002748:	3708      	adds	r7, #8
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	58000400 	.word	0x58000400
 8002754:	e000ed00 	.word	0xe000ed00

08002758 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002758:	b480      	push	{r7}
 800275a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800275c:	4b03      	ldr	r3, [pc, #12]	; (800276c <HAL_PWREx_GetVoltageRange+0x14>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8002764:	4618      	mov	r0, r3
 8002766:	46bd      	mov	sp, r7
 8002768:	bc80      	pop	{r7}
 800276a:	4770      	bx	lr
 800276c:	58000400 	.word	0x58000400

08002770 <HAL_PWREx_EnableLowPowerRunMode>:
  * @note  In Low-power Run mode, all I/O pins keep the same state as in Run mode.
  * @note  Clock frequency must be reduced below 2 MHz.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 8002770:	b480      	push	{r7}
 8002772:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8002774:	4b04      	ldr	r3, [pc, #16]	; (8002788 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a03      	ldr	r2, [pc, #12]	; (8002788 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 800277a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800277e:	6013      	str	r3, [r2, #0]
}
 8002780:	bf00      	nop
 8002782:	46bd      	mov	sp, r7
 8002784:	bc80      	pop	{r7}
 8002786:	4770      	bx	lr
 8002788:	58000400 	.word	0x58000400

0800278c <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 800278c:	b480      	push	{r7}
 800278e:	b083      	sub	sp, #12
 8002790:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8002792:	4b16      	ldr	r3, [pc, #88]	; (80027ec <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a15      	ldr	r2, [pc, #84]	; (80027ec <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8002798:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800279c:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 800279e:	4b14      	ldr	r3, [pc, #80]	; (80027f0 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	2232      	movs	r2, #50	; 0x32
 80027a4:	fb02 f303 	mul.w	r3, r2, r3
 80027a8:	4a12      	ldr	r2, [pc, #72]	; (80027f4 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 80027aa:	fba2 2303 	umull	r2, r3, r2, r3
 80027ae:	0c9b      	lsrs	r3, r3, #18
 80027b0:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 80027b2:	e002      	b.n	80027ba <HAL_PWREx_DisableLowPowerRunMode+0x2e>
  {
    wait_loop_index--;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	3b01      	subs	r3, #1
 80027b8:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 80027ba:	4b0c      	ldr	r3, [pc, #48]	; (80027ec <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80027bc:	695b      	ldr	r3, [r3, #20]
 80027be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027c6:	d102      	bne.n	80027ce <HAL_PWREx_DisableLowPowerRunMode+0x42>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d1f2      	bne.n	80027b4 <HAL_PWREx_DisableLowPowerRunMode+0x28>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 80027ce:	4b07      	ldr	r3, [pc, #28]	; (80027ec <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80027d0:	695b      	ldr	r3, [r3, #20]
 80027d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027da:	d101      	bne.n	80027e0 <HAL_PWREx_DisableLowPowerRunMode+0x54>
  {
    return HAL_TIMEOUT;
 80027dc:	2303      	movs	r3, #3
 80027de:	e000      	b.n	80027e2 <HAL_PWREx_DisableLowPowerRunMode+0x56>
  }

  return HAL_OK;
 80027e0:	2300      	movs	r3, #0
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	370c      	adds	r7, #12
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bc80      	pop	{r7}
 80027ea:	4770      	bx	lr
 80027ec:	58000400 	.word	0x58000400
 80027f0:	20000000 	.word	0x20000000
 80027f4:	431bde83 	.word	0x431bde83

080027f8 <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b083      	sub	sp, #12
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	4603      	mov	r3, r0
 8002800:	71fb      	strb	r3, [r7, #7]
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 8002802:	4b10      	ldr	r3, [pc, #64]	; (8002844 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f023 0307 	bic.w	r3, r3, #7
 800280a:	4a0e      	ldr	r2, [pc, #56]	; (8002844 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 800280c:	f043 0302 	orr.w	r3, r3, #2
 8002810:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002812:	4b0d      	ldr	r3, [pc, #52]	; (8002848 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8002814:	691b      	ldr	r3, [r3, #16]
 8002816:	4a0c      	ldr	r2, [pc, #48]	; (8002848 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8002818:	f043 0304 	orr.w	r3, r3, #4
 800281c:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 800281e:	79fb      	ldrb	r3, [r7, #7]
 8002820:	2b01      	cmp	r3, #1
 8002822:	d101      	bne.n	8002828 <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8002824:	bf30      	wfi
 8002826:	e002      	b.n	800282e <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8002828:	bf40      	sev
    __WFE();
 800282a:	bf20      	wfe
    __WFE();
 800282c:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800282e:	4b06      	ldr	r3, [pc, #24]	; (8002848 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8002830:	691b      	ldr	r3, [r3, #16]
 8002832:	4a05      	ldr	r2, [pc, #20]	; (8002848 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8002834:	f023 0304 	bic.w	r3, r3, #4
 8002838:	6113      	str	r3, [r2, #16]
}
 800283a:	bf00      	nop
 800283c:	370c      	adds	r7, #12
 800283e:	46bd      	mov	sp, r7
 8002840:	bc80      	pop	{r7}
 8002842:	4770      	bx	lr
 8002844:	58000400 	.word	0x58000400
 8002848:	e000ed00 	.word	0xe000ed00

0800284c <LL_PWR_IsEnabledBkUpAccess>:
{
 800284c:	b480      	push	{r7}
 800284e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8002850:	4b06      	ldr	r3, [pc, #24]	; (800286c <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002858:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800285c:	d101      	bne.n	8002862 <LL_PWR_IsEnabledBkUpAccess+0x16>
 800285e:	2301      	movs	r3, #1
 8002860:	e000      	b.n	8002864 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8002862:	2300      	movs	r3, #0
}
 8002864:	4618      	mov	r0, r3
 8002866:	46bd      	mov	sp, r7
 8002868:	bc80      	pop	{r7}
 800286a:	4770      	bx	lr
 800286c:	58000400 	.word	0x58000400

08002870 <LL_RCC_HSE_EnableTcxo>:
{
 8002870:	b480      	push	{r7}
 8002872:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8002874:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800287e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002882:	6013      	str	r3, [r2, #0]
}
 8002884:	bf00      	nop
 8002886:	46bd      	mov	sp, r7
 8002888:	bc80      	pop	{r7}
 800288a:	4770      	bx	lr

0800288c <LL_RCC_HSE_DisableTcxo>:
{
 800288c:	b480      	push	{r7}
 800288e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8002890:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800289a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800289e:	6013      	str	r3, [r2, #0]
}
 80028a0:	bf00      	nop
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bc80      	pop	{r7}
 80028a6:	4770      	bx	lr

080028a8 <LL_RCC_HSE_IsEnabledDiv2>:
{
 80028a8:	b480      	push	{r7}
 80028aa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80028ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80028ba:	d101      	bne.n	80028c0 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80028bc:	2301      	movs	r3, #1
 80028be:	e000      	b.n	80028c2 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80028c0:	2300      	movs	r3, #0
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bc80      	pop	{r7}
 80028c8:	4770      	bx	lr

080028ca <LL_RCC_HSE_Enable>:
{
 80028ca:	b480      	push	{r7}
 80028cc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80028ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80028d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028dc:	6013      	str	r3, [r2, #0]
}
 80028de:	bf00      	nop
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bc80      	pop	{r7}
 80028e4:	4770      	bx	lr

080028e6 <LL_RCC_HSE_Disable>:
{
 80028e6:	b480      	push	{r7}
 80028e8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80028ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80028f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028f8:	6013      	str	r3, [r2, #0]
}
 80028fa:	bf00      	nop
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bc80      	pop	{r7}
 8002900:	4770      	bx	lr

08002902 <LL_RCC_HSE_IsReady>:
{
 8002902:	b480      	push	{r7}
 8002904:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002906:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002910:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002914:	d101      	bne.n	800291a <LL_RCC_HSE_IsReady+0x18>
 8002916:	2301      	movs	r3, #1
 8002918:	e000      	b.n	800291c <LL_RCC_HSE_IsReady+0x1a>
 800291a:	2300      	movs	r3, #0
}
 800291c:	4618      	mov	r0, r3
 800291e:	46bd      	mov	sp, r7
 8002920:	bc80      	pop	{r7}
 8002922:	4770      	bx	lr

08002924 <LL_RCC_HSI_Enable>:
{
 8002924:	b480      	push	{r7}
 8002926:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002928:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002932:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002936:	6013      	str	r3, [r2, #0]
}
 8002938:	bf00      	nop
 800293a:	46bd      	mov	sp, r7
 800293c:	bc80      	pop	{r7}
 800293e:	4770      	bx	lr

08002940 <LL_RCC_HSI_Disable>:
{
 8002940:	b480      	push	{r7}
 8002942:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8002944:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800294e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002952:	6013      	str	r3, [r2, #0]
}
 8002954:	bf00      	nop
 8002956:	46bd      	mov	sp, r7
 8002958:	bc80      	pop	{r7}
 800295a:	4770      	bx	lr

0800295c <LL_RCC_HSI_IsReady>:
{
 800295c:	b480      	push	{r7}
 800295e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002960:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800296a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800296e:	d101      	bne.n	8002974 <LL_RCC_HSI_IsReady+0x18>
 8002970:	2301      	movs	r3, #1
 8002972:	e000      	b.n	8002976 <LL_RCC_HSI_IsReady+0x1a>
 8002974:	2300      	movs	r3, #0
}
 8002976:	4618      	mov	r0, r3
 8002978:	46bd      	mov	sp, r7
 800297a:	bc80      	pop	{r7}
 800297c:	4770      	bx	lr

0800297e <LL_RCC_HSI_SetCalibTrimming>:
{
 800297e:	b480      	push	{r7}
 8002980:	b083      	sub	sp, #12
 8002982:	af00      	add	r7, sp, #0
 8002984:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002986:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	061b      	lsls	r3, r3, #24
 8002994:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002998:	4313      	orrs	r3, r2
 800299a:	604b      	str	r3, [r1, #4]
}
 800299c:	bf00      	nop
 800299e:	370c      	adds	r7, #12
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bc80      	pop	{r7}
 80029a4:	4770      	bx	lr

080029a6 <LL_RCC_LSE_IsReady>:
{
 80029a6:	b480      	push	{r7}
 80029a8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80029aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029b2:	f003 0302 	and.w	r3, r3, #2
 80029b6:	2b02      	cmp	r3, #2
 80029b8:	d101      	bne.n	80029be <LL_RCC_LSE_IsReady+0x18>
 80029ba:	2301      	movs	r3, #1
 80029bc:	e000      	b.n	80029c0 <LL_RCC_LSE_IsReady+0x1a>
 80029be:	2300      	movs	r3, #0
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bc80      	pop	{r7}
 80029c6:	4770      	bx	lr

080029c8 <LL_RCC_LSI_Enable>:
{
 80029c8:	b480      	push	{r7}
 80029ca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 80029cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029d8:	f043 0301 	orr.w	r3, r3, #1
 80029dc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80029e0:	bf00      	nop
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bc80      	pop	{r7}
 80029e6:	4770      	bx	lr

080029e8 <LL_RCC_LSI_Disable>:
{
 80029e8:	b480      	push	{r7}
 80029ea:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80029ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029f8:	f023 0301 	bic.w	r3, r3, #1
 80029fc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002a00:	bf00      	nop
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bc80      	pop	{r7}
 8002a06:	4770      	bx	lr

08002a08 <LL_RCC_LSI_IsReady>:
{
 8002a08:	b480      	push	{r7}
 8002a0a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8002a0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a14:	f003 0302 	and.w	r3, r3, #2
 8002a18:	2b02      	cmp	r3, #2
 8002a1a:	d101      	bne.n	8002a20 <LL_RCC_LSI_IsReady+0x18>
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e000      	b.n	8002a22 <LL_RCC_LSI_IsReady+0x1a>
 8002a20:	2300      	movs	r3, #0
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bc80      	pop	{r7}
 8002a28:	4770      	bx	lr

08002a2a <LL_RCC_MSI_Enable>:
{
 8002a2a:	b480      	push	{r7}
 8002a2c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002a2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a38:	f043 0301 	orr.w	r3, r3, #1
 8002a3c:	6013      	str	r3, [r2, #0]
}
 8002a3e:	bf00      	nop
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bc80      	pop	{r7}
 8002a44:	4770      	bx	lr

08002a46 <LL_RCC_MSI_Disable>:
{
 8002a46:	b480      	push	{r7}
 8002a48:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002a4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a54:	f023 0301 	bic.w	r3, r3, #1
 8002a58:	6013      	str	r3, [r2, #0]
}
 8002a5a:	bf00      	nop
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bc80      	pop	{r7}
 8002a60:	4770      	bx	lr

08002a62 <LL_RCC_MSI_IsReady>:
{
 8002a62:	b480      	push	{r7}
 8002a64:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002a66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 0302 	and.w	r3, r3, #2
 8002a70:	2b02      	cmp	r3, #2
 8002a72:	d101      	bne.n	8002a78 <LL_RCC_MSI_IsReady+0x16>
 8002a74:	2301      	movs	r3, #1
 8002a76:	e000      	b.n	8002a7a <LL_RCC_MSI_IsReady+0x18>
 8002a78:	2300      	movs	r3, #0
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bc80      	pop	{r7}
 8002a80:	4770      	bx	lr

08002a82 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8002a82:	b480      	push	{r7}
 8002a84:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8002a86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 0308 	and.w	r3, r3, #8
 8002a90:	2b08      	cmp	r3, #8
 8002a92:	d101      	bne.n	8002a98 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8002a94:	2301      	movs	r3, #1
 8002a96:	e000      	b.n	8002a9a <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8002a98:	2300      	movs	r3, #0
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bc80      	pop	{r7}
 8002aa0:	4770      	bx	lr

08002aa2 <LL_RCC_MSI_GetRange>:
{
 8002aa2:	b480      	push	{r7}
 8002aa4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8002aa6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bc80      	pop	{r7}
 8002ab6:	4770      	bx	lr

08002ab8 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8002ab8:	b480      	push	{r7}
 8002aba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8002abc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ac0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ac4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bc80      	pop	{r7}
 8002ace:	4770      	bx	lr

08002ad0 <LL_RCC_MSI_SetCalibTrimming>:
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002ad8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	021b      	lsls	r3, r3, #8
 8002ae6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002aea:	4313      	orrs	r3, r2
 8002aec:	604b      	str	r3, [r1, #4]
}
 8002aee:	bf00      	nop
 8002af0:	370c      	adds	r7, #12
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bc80      	pop	{r7}
 8002af6:	4770      	bx	lr

08002af8 <LL_RCC_SetSysClkSource>:
{
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002b00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	f023 0203 	bic.w	r2, r3, #3
 8002b0a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	608b      	str	r3, [r1, #8]
}
 8002b14:	bf00      	nop
 8002b16:	370c      	adds	r7, #12
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bc80      	pop	{r7}
 8002b1c:	4770      	bx	lr

08002b1e <LL_RCC_GetSysClkSource>:
{
 8002b1e:	b480      	push	{r7}
 8002b20:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002b22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	f003 030c 	and.w	r3, r3, #12
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bc80      	pop	{r7}
 8002b32:	4770      	bx	lr

08002b34 <LL_RCC_SetAHBPrescaler>:
{
 8002b34:	b480      	push	{r7}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002b3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b46:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	608b      	str	r3, [r1, #8]
}
 8002b50:	bf00      	nop
 8002b52:	370c      	adds	r7, #12
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bc80      	pop	{r7}
 8002b58:	4770      	bx	lr

08002b5a <LL_C2_RCC_SetAHBPrescaler>:
{
 8002b5a:	b480      	push	{r7}
 8002b5c:	b083      	sub	sp, #12
 8002b5e:	af00      	add	r7, sp, #0
 8002b60:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8002b62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b66:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002b6a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b6e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4313      	orrs	r3, r2
 8002b76:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002b7a:	bf00      	nop
 8002b7c:	370c      	adds	r7, #12
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bc80      	pop	{r7}
 8002b82:	4770      	bx	lr

08002b84 <LL_RCC_SetAHB3Prescaler>:
{
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8002b8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b90:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002b94:	f023 020f 	bic.w	r2, r3, #15
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	091b      	lsrs	r3, r3, #4
 8002b9c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002ba6:	bf00      	nop
 8002ba8:	370c      	adds	r7, #12
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bc80      	pop	{r7}
 8002bae:	4770      	bx	lr

08002bb0 <LL_RCC_SetAPB1Prescaler>:
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b083      	sub	sp, #12
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002bb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002bc2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	608b      	str	r3, [r1, #8]
}
 8002bcc:	bf00      	nop
 8002bce:	370c      	adds	r7, #12
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bc80      	pop	{r7}
 8002bd4:	4770      	bx	lr

08002bd6 <LL_RCC_SetAPB2Prescaler>:
{
 8002bd6:	b480      	push	{r7}
 8002bd8:	b083      	sub	sp, #12
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002bde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002be8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	608b      	str	r3, [r1, #8]
}
 8002bf2:	bf00      	nop
 8002bf4:	370c      	adds	r7, #12
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bc80      	pop	{r7}
 8002bfa:	4770      	bx	lr

08002bfc <LL_RCC_GetAHBPrescaler>:
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002c00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bc80      	pop	{r7}
 8002c10:	4770      	bx	lr

08002c12 <LL_RCC_GetAHB3Prescaler>:
{
 8002c12:	b480      	push	{r7}
 8002c14:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002c16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c1a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002c1e:	011b      	lsls	r3, r3, #4
 8002c20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bc80      	pop	{r7}
 8002c2a:	4770      	bx	lr

08002c2c <LL_RCC_GetAPB1Prescaler>:
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002c30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bc80      	pop	{r7}
 8002c40:	4770      	bx	lr

08002c42 <LL_RCC_GetAPB2Prescaler>:
{
 8002c42:	b480      	push	{r7}
 8002c44:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002c46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bc80      	pop	{r7}
 8002c56:	4770      	bx	lr

08002c58 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002c5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c6a:	6013      	str	r3, [r2, #0]
}
 8002c6c:	bf00      	nop
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bc80      	pop	{r7}
 8002c72:	4770      	bx	lr

08002c74 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8002c74:	b480      	push	{r7}
 8002c76:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002c78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c86:	6013      	str	r3, [r2, #0]
}
 8002c88:	bf00      	nop
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bc80      	pop	{r7}
 8002c8e:	4770      	bx	lr

08002c90 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002c90:	b480      	push	{r7}
 8002c92:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002c94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c9e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002ca2:	d101      	bne.n	8002ca8 <LL_RCC_PLL_IsReady+0x18>
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e000      	b.n	8002caa <LL_RCC_PLL_IsReady+0x1a>
 8002ca8:	2300      	movs	r3, #0
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bc80      	pop	{r7}
 8002cb0:	4770      	bx	lr

08002cb2 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002cb2:	b480      	push	{r7}
 8002cb4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002cb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cba:	68db      	ldr	r3, [r3, #12]
 8002cbc:	0a1b      	lsrs	r3, r3, #8
 8002cbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bc80      	pop	{r7}
 8002cc8:	4770      	bx	lr

08002cca <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002cca:	b480      	push	{r7}
 8002ccc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002cce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bc80      	pop	{r7}
 8002cde:	4770      	bx	lr

08002ce0 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002ce4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ce8:	68db      	ldr	r3, [r3, #12]
 8002cea:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bc80      	pop	{r7}
 8002cf4:	4770      	bx	lr

08002cf6 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002cf6:	b480      	push	{r7}
 8002cf8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002cfa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	f003 0303 	and.w	r3, r3, #3
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bc80      	pop	{r7}
 8002d0a:	4770      	bx	lr

08002d0c <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002d10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d1e:	d101      	bne.n	8002d24 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002d20:	2301      	movs	r3, #1
 8002d22:	e000      	b.n	8002d26 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8002d24:	2300      	movs	r3, #0
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bc80      	pop	{r7}
 8002d2c:	4770      	bx	lr

08002d2e <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8002d2e:	b480      	push	{r7}
 8002d30:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8002d32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d36:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d3e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d42:	d101      	bne.n	8002d48 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8002d44:	2301      	movs	r3, #1
 8002d46:	e000      	b.n	8002d4a <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8002d48:	2300      	movs	r3, #0
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bc80      	pop	{r7}
 8002d50:	4770      	bx	lr

08002d52 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002d52:	b480      	push	{r7}
 8002d54:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002d56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d5a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002d5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d66:	d101      	bne.n	8002d6c <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e000      	b.n	8002d6e <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8002d6c:	2300      	movs	r3, #0
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bc80      	pop	{r7}
 8002d74:	4770      	bx	lr

08002d76 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8002d76:	b480      	push	{r7}
 8002d78:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8002d7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d84:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d88:	d101      	bne.n	8002d8e <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e000      	b.n	8002d90 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8002d8e:	2300      	movs	r3, #0
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bc80      	pop	{r7}
 8002d96:	4770      	bx	lr

08002d98 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002d9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002da6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002daa:	d101      	bne.n	8002db0 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8002dac:	2301      	movs	r3, #1
 8002dae:	e000      	b.n	8002db2 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002db0:	2300      	movs	r3, #0
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bc80      	pop	{r7}
 8002db8:	4770      	bx	lr
	...

08002dbc <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b088      	sub	sp, #32
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d101      	bne.n	8002dce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e36f      	b.n	80034ae <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002dce:	f7ff fea6 	bl	8002b1e <LL_RCC_GetSysClkSource>
 8002dd2:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002dd4:	f7ff ff8f 	bl	8002cf6 <LL_RCC_PLL_GetMainSource>
 8002dd8:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 0320 	and.w	r3, r3, #32
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	f000 80c4 	beq.w	8002f70 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002de8:	69fb      	ldr	r3, [r7, #28]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d005      	beq.n	8002dfa <HAL_RCC_OscConfig+0x3e>
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	2b0c      	cmp	r3, #12
 8002df2:	d176      	bne.n	8002ee2 <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002df4:	69bb      	ldr	r3, [r7, #24]
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d173      	bne.n	8002ee2 <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6a1b      	ldr	r3, [r3, #32]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d101      	bne.n	8002e06 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e353      	b.n	80034ae <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 0308 	and.w	r3, r3, #8
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d005      	beq.n	8002e24 <HAL_RCC_OscConfig+0x68>
 8002e18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e22:	e006      	b.n	8002e32 <HAL_RCC_OscConfig+0x76>
 8002e24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e2c:	091b      	lsrs	r3, r3, #4
 8002e2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d222      	bcs.n	8002e7c <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f000 fd5a 	bl	80038f4 <RCC_SetFlashLatencyFromMSIRange>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d001      	beq.n	8002e4a <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e331      	b.n	80034ae <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e54:	f043 0308 	orr.w	r3, r3, #8
 8002e58:	6013      	str	r3, [r2, #0]
 8002e5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e68:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e74:	4618      	mov	r0, r3
 8002e76:	f7ff fe2b 	bl	8002ad0 <LL_RCC_MSI_SetCalibTrimming>
 8002e7a:	e021      	b.n	8002ec0 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e86:	f043 0308 	orr.w	r3, r3, #8
 8002e8a:	6013      	str	r3, [r2, #0]
 8002e8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e9a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f7ff fe12 	bl	8002ad0 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f000 fd1f 	bl	80038f4 <RCC_SetFlashLatencyFromMSIRange>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d001      	beq.n	8002ec0 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e2f6      	b.n	80034ae <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002ec0:	f000 fce0 	bl	8003884 <HAL_RCC_GetHCLKFreq>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	4aa7      	ldr	r2, [pc, #668]	; (8003164 <HAL_RCC_OscConfig+0x3a8>)
 8002ec8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8002eca:	4ba7      	ldr	r3, [pc, #668]	; (8003168 <HAL_RCC_OscConfig+0x3ac>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f7fd fdfc 	bl	8000acc <HAL_InitTick>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8002ed8:	7cfb      	ldrb	r3, [r7, #19]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d047      	beq.n	8002f6e <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8002ede:	7cfb      	ldrb	r3, [r7, #19]
 8002ee0:	e2e5      	b.n	80034ae <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6a1b      	ldr	r3, [r3, #32]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d02c      	beq.n	8002f44 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002eea:	f7ff fd9e 	bl	8002a2a <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002eee:	f7fd fdf7 	bl	8000ae0 <HAL_GetTick>
 8002ef2:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8002ef4:	e008      	b.n	8002f08 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ef6:	f7fd fdf3 	bl	8000ae0 <HAL_GetTick>
 8002efa:	4602      	mov	r2, r0
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	1ad3      	subs	r3, r2, r3
 8002f00:	2b02      	cmp	r3, #2
 8002f02:	d901      	bls.n	8002f08 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8002f04:	2303      	movs	r3, #3
 8002f06:	e2d2      	b.n	80034ae <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002f08:	f7ff fdab 	bl	8002a62 <LL_RCC_MSI_IsReady>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d0f1      	beq.n	8002ef6 <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f1c:	f043 0308 	orr.w	r3, r3, #8
 8002f20:	6013      	str	r3, [r2, #0]
 8002f22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f30:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f34:	4313      	orrs	r3, r2
 8002f36:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f7ff fdc7 	bl	8002ad0 <LL_RCC_MSI_SetCalibTrimming>
 8002f42:	e015      	b.n	8002f70 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002f44:	f7ff fd7f 	bl	8002a46 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002f48:	f7fd fdca 	bl	8000ae0 <HAL_GetTick>
 8002f4c:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002f4e:	e008      	b.n	8002f62 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f50:	f7fd fdc6 	bl	8000ae0 <HAL_GetTick>
 8002f54:	4602      	mov	r2, r0
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	2b02      	cmp	r3, #2
 8002f5c:	d901      	bls.n	8002f62 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e2a5      	b.n	80034ae <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002f62:	f7ff fd7e 	bl	8002a62 <LL_RCC_MSI_IsReady>
 8002f66:	4603      	mov	r3, r0
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d1f1      	bne.n	8002f50 <HAL_RCC_OscConfig+0x194>
 8002f6c:	e000      	b.n	8002f70 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002f6e:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 0301 	and.w	r3, r3, #1
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d058      	beq.n	800302e <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002f7c:	69fb      	ldr	r3, [r7, #28]
 8002f7e:	2b08      	cmp	r3, #8
 8002f80:	d005      	beq.n	8002f8e <HAL_RCC_OscConfig+0x1d2>
 8002f82:	69fb      	ldr	r3, [r7, #28]
 8002f84:	2b0c      	cmp	r3, #12
 8002f86:	d108      	bne.n	8002f9a <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002f88:	69bb      	ldr	r3, [r7, #24]
 8002f8a:	2b03      	cmp	r3, #3
 8002f8c:	d105      	bne.n	8002f9a <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d14b      	bne.n	800302e <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e289      	b.n	80034ae <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8002f9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002fac:	4313      	orrs	r3, r2
 8002fae:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fb8:	d102      	bne.n	8002fc0 <HAL_RCC_OscConfig+0x204>
 8002fba:	f7ff fc86 	bl	80028ca <LL_RCC_HSE_Enable>
 8002fbe:	e00d      	b.n	8002fdc <HAL_RCC_OscConfig+0x220>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8002fc8:	d104      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x218>
 8002fca:	f7ff fc51 	bl	8002870 <LL_RCC_HSE_EnableTcxo>
 8002fce:	f7ff fc7c 	bl	80028ca <LL_RCC_HSE_Enable>
 8002fd2:	e003      	b.n	8002fdc <HAL_RCC_OscConfig+0x220>
 8002fd4:	f7ff fc87 	bl	80028e6 <LL_RCC_HSE_Disable>
 8002fd8:	f7ff fc58 	bl	800288c <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d012      	beq.n	800300a <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fe4:	f7fd fd7c 	bl	8000ae0 <HAL_GetTick>
 8002fe8:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002fea:	e008      	b.n	8002ffe <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fec:	f7fd fd78 	bl	8000ae0 <HAL_GetTick>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	2b64      	cmp	r3, #100	; 0x64
 8002ff8:	d901      	bls.n	8002ffe <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8002ffa:	2303      	movs	r3, #3
 8002ffc:	e257      	b.n	80034ae <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 8002ffe:	f7ff fc80 	bl	8002902 <LL_RCC_HSE_IsReady>
 8003002:	4603      	mov	r3, r0
 8003004:	2b00      	cmp	r3, #0
 8003006:	d0f1      	beq.n	8002fec <HAL_RCC_OscConfig+0x230>
 8003008:	e011      	b.n	800302e <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800300a:	f7fd fd69 	bl	8000ae0 <HAL_GetTick>
 800300e:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8003010:	e008      	b.n	8003024 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003012:	f7fd fd65 	bl	8000ae0 <HAL_GetTick>
 8003016:	4602      	mov	r2, r0
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	1ad3      	subs	r3, r2, r3
 800301c:	2b64      	cmp	r3, #100	; 0x64
 800301e:	d901      	bls.n	8003024 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8003020:	2303      	movs	r3, #3
 8003022:	e244      	b.n	80034ae <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8003024:	f7ff fc6d 	bl	8002902 <LL_RCC_HSE_IsReady>
 8003028:	4603      	mov	r3, r0
 800302a:	2b00      	cmp	r3, #0
 800302c:	d1f1      	bne.n	8003012 <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 0302 	and.w	r3, r3, #2
 8003036:	2b00      	cmp	r3, #0
 8003038:	d046      	beq.n	80030c8 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	2b04      	cmp	r3, #4
 800303e:	d005      	beq.n	800304c <HAL_RCC_OscConfig+0x290>
 8003040:	69fb      	ldr	r3, [r7, #28]
 8003042:	2b0c      	cmp	r3, #12
 8003044:	d10e      	bne.n	8003064 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003046:	69bb      	ldr	r3, [r7, #24]
 8003048:	2b02      	cmp	r3, #2
 800304a:	d10b      	bne.n	8003064 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	691b      	ldr	r3, [r3, #16]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d101      	bne.n	8003058 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	e22a      	b.n	80034ae <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	695b      	ldr	r3, [r3, #20]
 800305c:	4618      	mov	r0, r3
 800305e:	f7ff fc8e 	bl	800297e <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003062:	e031      	b.n	80030c8 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	691b      	ldr	r3, [r3, #16]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d019      	beq.n	80030a0 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800306c:	f7ff fc5a 	bl	8002924 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003070:	f7fd fd36 	bl	8000ae0 <HAL_GetTick>
 8003074:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8003076:	e008      	b.n	800308a <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003078:	f7fd fd32 	bl	8000ae0 <HAL_GetTick>
 800307c:	4602      	mov	r2, r0
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	2b02      	cmp	r3, #2
 8003084:	d901      	bls.n	800308a <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8003086:	2303      	movs	r3, #3
 8003088:	e211      	b.n	80034ae <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 800308a:	f7ff fc67 	bl	800295c <LL_RCC_HSI_IsReady>
 800308e:	4603      	mov	r3, r0
 8003090:	2b00      	cmp	r3, #0
 8003092:	d0f1      	beq.n	8003078 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	695b      	ldr	r3, [r3, #20]
 8003098:	4618      	mov	r0, r3
 800309a:	f7ff fc70 	bl	800297e <LL_RCC_HSI_SetCalibTrimming>
 800309e:	e013      	b.n	80030c8 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030a0:	f7ff fc4e 	bl	8002940 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030a4:	f7fd fd1c 	bl	8000ae0 <HAL_GetTick>
 80030a8:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80030aa:	e008      	b.n	80030be <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030ac:	f7fd fd18 	bl	8000ae0 <HAL_GetTick>
 80030b0:	4602      	mov	r2, r0
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	2b02      	cmp	r3, #2
 80030b8:	d901      	bls.n	80030be <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 80030ba:	2303      	movs	r3, #3
 80030bc:	e1f7      	b.n	80034ae <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 80030be:	f7ff fc4d 	bl	800295c <LL_RCC_HSI_IsReady>
 80030c2:	4603      	mov	r3, r0
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d1f1      	bne.n	80030ac <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 0308 	and.w	r3, r3, #8
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d06e      	beq.n	80031b2 <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	699b      	ldr	r3, [r3, #24]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d056      	beq.n	800318a <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 80030dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030e4:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	69da      	ldr	r2, [r3, #28]
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	f003 0310 	and.w	r3, r3, #16
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d031      	beq.n	8003158 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f003 0302 	and.w	r3, r3, #2
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d006      	beq.n	800310c <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003104:	2b00      	cmp	r3, #0
 8003106:	d101      	bne.n	800310c <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e1d0      	b.n	80034ae <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	f003 0301 	and.w	r3, r3, #1
 8003112:	2b00      	cmp	r3, #0
 8003114:	d013      	beq.n	800313e <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8003116:	f7ff fc67 	bl	80029e8 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800311a:	f7fd fce1 	bl	8000ae0 <HAL_GetTick>
 800311e:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8003120:	e008      	b.n	8003134 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003122:	f7fd fcdd 	bl	8000ae0 <HAL_GetTick>
 8003126:	4602      	mov	r2, r0
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	1ad3      	subs	r3, r2, r3
 800312c:	2b11      	cmp	r3, #17
 800312e:	d901      	bls.n	8003134 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8003130:	2303      	movs	r3, #3
 8003132:	e1bc      	b.n	80034ae <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8003134:	f7ff fc68 	bl	8002a08 <LL_RCC_LSI_IsReady>
 8003138:	4603      	mov	r3, r0
 800313a:	2b00      	cmp	r3, #0
 800313c:	d1f1      	bne.n	8003122 <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 800313e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003142:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003146:	f023 0210 	bic.w	r2, r3, #16
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	69db      	ldr	r3, [r3, #28]
 800314e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003152:	4313      	orrs	r3, r2
 8003154:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003158:	f7ff fc36 	bl	80029c8 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800315c:	f7fd fcc0 	bl	8000ae0 <HAL_GetTick>
 8003160:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8003162:	e00c      	b.n	800317e <HAL_RCC_OscConfig+0x3c2>
 8003164:	20000000 	.word	0x20000000
 8003168:	20000004 	.word	0x20000004
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800316c:	f7fd fcb8 	bl	8000ae0 <HAL_GetTick>
 8003170:	4602      	mov	r2, r0
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	2b11      	cmp	r3, #17
 8003178:	d901      	bls.n	800317e <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 800317a:	2303      	movs	r3, #3
 800317c:	e197      	b.n	80034ae <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 800317e:	f7ff fc43 	bl	8002a08 <LL_RCC_LSI_IsReady>
 8003182:	4603      	mov	r3, r0
 8003184:	2b00      	cmp	r3, #0
 8003186:	d0f1      	beq.n	800316c <HAL_RCC_OscConfig+0x3b0>
 8003188:	e013      	b.n	80031b2 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800318a:	f7ff fc2d 	bl	80029e8 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800318e:	f7fd fca7 	bl	8000ae0 <HAL_GetTick>
 8003192:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8003194:	e008      	b.n	80031a8 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003196:	f7fd fca3 	bl	8000ae0 <HAL_GetTick>
 800319a:	4602      	mov	r2, r0
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	1ad3      	subs	r3, r2, r3
 80031a0:	2b11      	cmp	r3, #17
 80031a2:	d901      	bls.n	80031a8 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 80031a4:	2303      	movs	r3, #3
 80031a6:	e182      	b.n	80034ae <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 80031a8:	f7ff fc2e 	bl	8002a08 <LL_RCC_LSI_IsReady>
 80031ac:	4603      	mov	r3, r0
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d1f1      	bne.n	8003196 <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 0304 	and.w	r3, r3, #4
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	f000 80d8 	beq.w	8003370 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80031c0:	f7ff fb44 	bl	800284c <LL_PWR_IsEnabledBkUpAccess>
 80031c4:	4603      	mov	r3, r0
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d113      	bne.n	80031f2 <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80031ca:	f7ff fa83 	bl	80026d4 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031ce:	f7fd fc87 	bl	8000ae0 <HAL_GetTick>
 80031d2:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80031d4:	e008      	b.n	80031e8 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031d6:	f7fd fc83 	bl	8000ae0 <HAL_GetTick>
 80031da:	4602      	mov	r2, r0
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	1ad3      	subs	r3, r2, r3
 80031e0:	2b02      	cmp	r3, #2
 80031e2:	d901      	bls.n	80031e8 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 80031e4:	2303      	movs	r3, #3
 80031e6:	e162      	b.n	80034ae <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80031e8:	f7ff fb30 	bl	800284c <LL_PWR_IsEnabledBkUpAccess>
 80031ec:	4603      	mov	r3, r0
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d0f1      	beq.n	80031d6 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	68db      	ldr	r3, [r3, #12]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d07b      	beq.n	80032f2 <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	68db      	ldr	r3, [r3, #12]
 80031fe:	2b85      	cmp	r3, #133	; 0x85
 8003200:	d003      	beq.n	800320a <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	68db      	ldr	r3, [r3, #12]
 8003206:	2b05      	cmp	r3, #5
 8003208:	d109      	bne.n	800321e <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800320a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800320e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003212:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003216:	f043 0304 	orr.w	r3, r3, #4
 800321a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800321e:	f7fd fc5f 	bl	8000ae0 <HAL_GetTick>
 8003222:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003224:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003228:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800322c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003230:	f043 0301 	orr.w	r3, r3, #1
 8003234:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8003238:	e00a      	b.n	8003250 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800323a:	f7fd fc51 	bl	8000ae0 <HAL_GetTick>
 800323e:	4602      	mov	r2, r0
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	f241 3288 	movw	r2, #5000	; 0x1388
 8003248:	4293      	cmp	r3, r2
 800324a:	d901      	bls.n	8003250 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 800324c:	2303      	movs	r3, #3
 800324e:	e12e      	b.n	80034ae <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8003250:	f7ff fba9 	bl	80029a6 <LL_RCC_LSE_IsReady>
 8003254:	4603      	mov	r3, r0
 8003256:	2b00      	cmp	r3, #0
 8003258:	d0ef      	beq.n	800323a <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	68db      	ldr	r3, [r3, #12]
 800325e:	2b81      	cmp	r3, #129	; 0x81
 8003260:	d003      	beq.n	800326a <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	68db      	ldr	r3, [r3, #12]
 8003266:	2b85      	cmp	r3, #133	; 0x85
 8003268:	d121      	bne.n	80032ae <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800326a:	f7fd fc39 	bl	8000ae0 <HAL_GetTick>
 800326e:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003270:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003274:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003278:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800327c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003280:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003284:	e00a      	b.n	800329c <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003286:	f7fd fc2b 	bl	8000ae0 <HAL_GetTick>
 800328a:	4602      	mov	r2, r0
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	1ad3      	subs	r3, r2, r3
 8003290:	f241 3288 	movw	r2, #5000	; 0x1388
 8003294:	4293      	cmp	r3, r2
 8003296:	d901      	bls.n	800329c <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8003298:	2303      	movs	r3, #3
 800329a:	e108      	b.n	80034ae <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800329c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d0ec      	beq.n	8003286 <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80032ac:	e060      	b.n	8003370 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032ae:	f7fd fc17 	bl	8000ae0 <HAL_GetTick>
 80032b2:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80032b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80032c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80032c8:	e00a      	b.n	80032e0 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032ca:	f7fd fc09 	bl	8000ae0 <HAL_GetTick>
 80032ce:	4602      	mov	r2, r0
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80032d8:	4293      	cmp	r3, r2
 80032da:	d901      	bls.n	80032e0 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 80032dc:	2303      	movs	r3, #3
 80032de:	e0e6      	b.n	80034ae <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80032e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d1ec      	bne.n	80032ca <HAL_RCC_OscConfig+0x50e>
 80032f0:	e03e      	b.n	8003370 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032f2:	f7fd fbf5 	bl	8000ae0 <HAL_GetTick>
 80032f6:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80032f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003300:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003304:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003308:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800330c:	e00a      	b.n	8003324 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800330e:	f7fd fbe7 	bl	8000ae0 <HAL_GetTick>
 8003312:	4602      	mov	r2, r0
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	1ad3      	subs	r3, r2, r3
 8003318:	f241 3288 	movw	r2, #5000	; 0x1388
 800331c:	4293      	cmp	r3, r2
 800331e:	d901      	bls.n	8003324 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8003320:	2303      	movs	r3, #3
 8003322:	e0c4      	b.n	80034ae <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003324:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003328:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800332c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003330:	2b00      	cmp	r3, #0
 8003332:	d1ec      	bne.n	800330e <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003334:	f7fd fbd4 	bl	8000ae0 <HAL_GetTick>
 8003338:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800333a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800333e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003342:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003346:	f023 0301 	bic.w	r3, r3, #1
 800334a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800334e:	e00a      	b.n	8003366 <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003350:	f7fd fbc6 	bl	8000ae0 <HAL_GetTick>
 8003354:	4602      	mov	r2, r0
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	f241 3288 	movw	r2, #5000	; 0x1388
 800335e:	4293      	cmp	r3, r2
 8003360:	d901      	bls.n	8003366 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	e0a3      	b.n	80034ae <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8003366:	f7ff fb1e 	bl	80029a6 <LL_RCC_LSE_IsReady>
 800336a:	4603      	mov	r3, r0
 800336c:	2b00      	cmp	r3, #0
 800336e:	d1ef      	bne.n	8003350 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003374:	2b00      	cmp	r3, #0
 8003376:	f000 8099 	beq.w	80034ac <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800337a:	69fb      	ldr	r3, [r7, #28]
 800337c:	2b0c      	cmp	r3, #12
 800337e:	d06c      	beq.n	800345a <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003384:	2b02      	cmp	r3, #2
 8003386:	d14b      	bne.n	8003420 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003388:	f7ff fc74 	bl	8002c74 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800338c:	f7fd fba8 	bl	8000ae0 <HAL_GetTick>
 8003390:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8003392:	e008      	b.n	80033a6 <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003394:	f7fd fba4 	bl	8000ae0 <HAL_GetTick>
 8003398:	4602      	mov	r2, r0
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	1ad3      	subs	r3, r2, r3
 800339e:	2b0a      	cmp	r3, #10
 80033a0:	d901      	bls.n	80033a6 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 80033a2:	2303      	movs	r3, #3
 80033a4:	e083      	b.n	80034ae <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 80033a6:	f7ff fc73 	bl	8002c90 <LL_RCC_PLL_IsReady>
 80033aa:	4603      	mov	r3, r0
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d1f1      	bne.n	8003394 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033b4:	68da      	ldr	r2, [r3, #12]
 80033b6:	4b40      	ldr	r3, [pc, #256]	; (80034b8 <HAL_RCC_OscConfig+0x6fc>)
 80033b8:	4013      	ands	r3, r2
 80033ba:	687a      	ldr	r2, [r7, #4]
 80033bc:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80033be:	687a      	ldr	r2, [r7, #4]
 80033c0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80033c2:	4311      	orrs	r1, r2
 80033c4:	687a      	ldr	r2, [r7, #4]
 80033c6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80033c8:	0212      	lsls	r2, r2, #8
 80033ca:	4311      	orrs	r1, r2
 80033cc:	687a      	ldr	r2, [r7, #4]
 80033ce:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80033d0:	4311      	orrs	r1, r2
 80033d2:	687a      	ldr	r2, [r7, #4]
 80033d4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80033d6:	4311      	orrs	r1, r2
 80033d8:	687a      	ldr	r2, [r7, #4]
 80033da:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80033dc:	430a      	orrs	r2, r1
 80033de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033e2:	4313      	orrs	r3, r2
 80033e4:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033e6:	f7ff fc37 	bl	8002c58 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80033ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80033f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033f8:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033fa:	f7fd fb71 	bl	8000ae0 <HAL_GetTick>
 80033fe:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8003400:	e008      	b.n	8003414 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003402:	f7fd fb6d 	bl	8000ae0 <HAL_GetTick>
 8003406:	4602      	mov	r2, r0
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	1ad3      	subs	r3, r2, r3
 800340c:	2b0a      	cmp	r3, #10
 800340e:	d901      	bls.n	8003414 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8003410:	2303      	movs	r3, #3
 8003412:	e04c      	b.n	80034ae <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8003414:	f7ff fc3c 	bl	8002c90 <LL_RCC_PLL_IsReady>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d0f1      	beq.n	8003402 <HAL_RCC_OscConfig+0x646>
 800341e:	e045      	b.n	80034ac <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003420:	f7ff fc28 	bl	8002c74 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003424:	f7fd fb5c 	bl	8000ae0 <HAL_GetTick>
 8003428:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 800342a:	e008      	b.n	800343e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800342c:	f7fd fb58 	bl	8000ae0 <HAL_GetTick>
 8003430:	4602      	mov	r2, r0
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	1ad3      	subs	r3, r2, r3
 8003436:	2b0a      	cmp	r3, #10
 8003438:	d901      	bls.n	800343e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800343a:	2303      	movs	r3, #3
 800343c:	e037      	b.n	80034ae <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 800343e:	f7ff fc27 	bl	8002c90 <LL_RCC_PLL_IsReady>
 8003442:	4603      	mov	r3, r0
 8003444:	2b00      	cmp	r3, #0
 8003446:	d1f1      	bne.n	800342c <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8003448:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800344c:	68da      	ldr	r2, [r3, #12]
 800344e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003452:	4b1a      	ldr	r3, [pc, #104]	; (80034bc <HAL_RCC_OscConfig+0x700>)
 8003454:	4013      	ands	r3, r2
 8003456:	60cb      	str	r3, [r1, #12]
 8003458:	e028      	b.n	80034ac <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800345e:	2b01      	cmp	r3, #1
 8003460:	d101      	bne.n	8003466 <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e023      	b.n	80034ae <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003466:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 800346e:	69bb      	ldr	r3, [r7, #24]
 8003470:	f003 0203 	and.w	r2, r3, #3
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003478:	429a      	cmp	r2, r3
 800347a:	d115      	bne.n	80034a8 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 800347c:	69bb      	ldr	r3, [r7, #24]
 800347e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003486:	429a      	cmp	r2, r3
 8003488:	d10e      	bne.n	80034a8 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 800348a:	69bb      	ldr	r3, [r7, #24]
 800348c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003494:	021b      	lsls	r3, r3, #8
 8003496:	429a      	cmp	r2, r3
 8003498:	d106      	bne.n	80034a8 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 800349a:	69bb      	ldr	r3, [r7, #24]
 800349c:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d001      	beq.n	80034ac <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	e000      	b.n	80034ae <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 80034ac:	2300      	movs	r3, #0
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3720      	adds	r7, #32
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	bf00      	nop
 80034b8:	11c1808c 	.word	0x11c1808c
 80034bc:	eefefffc 	.word	0xeefefffc

080034c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b084      	sub	sp, #16
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d101      	bne.n	80034d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	e12c      	b.n	800372e <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80034d4:	4b98      	ldr	r3, [pc, #608]	; (8003738 <HAL_RCC_ClockConfig+0x278>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 0307 	and.w	r3, r3, #7
 80034dc:	683a      	ldr	r2, [r7, #0]
 80034de:	429a      	cmp	r2, r3
 80034e0:	d91b      	bls.n	800351a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034e2:	4b95      	ldr	r3, [pc, #596]	; (8003738 <HAL_RCC_ClockConfig+0x278>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f023 0207 	bic.w	r2, r3, #7
 80034ea:	4993      	ldr	r1, [pc, #588]	; (8003738 <HAL_RCC_ClockConfig+0x278>)
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	4313      	orrs	r3, r2
 80034f0:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034f2:	f7fd faf5 	bl	8000ae0 <HAL_GetTick>
 80034f6:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034f8:	e008      	b.n	800350c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80034fa:	f7fd faf1 	bl	8000ae0 <HAL_GetTick>
 80034fe:	4602      	mov	r2, r0
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	1ad3      	subs	r3, r2, r3
 8003504:	2b02      	cmp	r3, #2
 8003506:	d901      	bls.n	800350c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8003508:	2303      	movs	r3, #3
 800350a:	e110      	b.n	800372e <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800350c:	4b8a      	ldr	r3, [pc, #552]	; (8003738 <HAL_RCC_ClockConfig+0x278>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f003 0307 	and.w	r3, r3, #7
 8003514:	683a      	ldr	r2, [r7, #0]
 8003516:	429a      	cmp	r2, r3
 8003518:	d1ef      	bne.n	80034fa <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 0302 	and.w	r3, r3, #2
 8003522:	2b00      	cmp	r3, #0
 8003524:	d016      	beq.n	8003554 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	4618      	mov	r0, r3
 800352c:	f7ff fb02 	bl	8002b34 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003530:	f7fd fad6 	bl	8000ae0 <HAL_GetTick>
 8003534:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003536:	e008      	b.n	800354a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003538:	f7fd fad2 	bl	8000ae0 <HAL_GetTick>
 800353c:	4602      	mov	r2, r0
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	1ad3      	subs	r3, r2, r3
 8003542:	2b02      	cmp	r3, #2
 8003544:	d901      	bls.n	800354a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8003546:	2303      	movs	r3, #3
 8003548:	e0f1      	b.n	800372e <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800354a:	f7ff fbdf 	bl	8002d0c <LL_RCC_IsActiveFlag_HPRE>
 800354e:	4603      	mov	r3, r0
 8003550:	2b00      	cmp	r3, #0
 8003552:	d0f1      	beq.n	8003538 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 0320 	and.w	r3, r3, #32
 800355c:	2b00      	cmp	r3, #0
 800355e:	d016      	beq.n	800358e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	695b      	ldr	r3, [r3, #20]
 8003564:	4618      	mov	r0, r3
 8003566:	f7ff faf8 	bl	8002b5a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800356a:	f7fd fab9 	bl	8000ae0 <HAL_GetTick>
 800356e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003570:	e008      	b.n	8003584 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003572:	f7fd fab5 	bl	8000ae0 <HAL_GetTick>
 8003576:	4602      	mov	r2, r0
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	1ad3      	subs	r3, r2, r3
 800357c:	2b02      	cmp	r3, #2
 800357e:	d901      	bls.n	8003584 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8003580:	2303      	movs	r3, #3
 8003582:	e0d4      	b.n	800372e <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003584:	f7ff fbd3 	bl	8002d2e <LL_RCC_IsActiveFlag_C2HPRE>
 8003588:	4603      	mov	r3, r0
 800358a:	2b00      	cmp	r3, #0
 800358c:	d0f1      	beq.n	8003572 <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003596:	2b00      	cmp	r3, #0
 8003598:	d016      	beq.n	80035c8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	699b      	ldr	r3, [r3, #24]
 800359e:	4618      	mov	r0, r3
 80035a0:	f7ff faf0 	bl	8002b84 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80035a4:	f7fd fa9c 	bl	8000ae0 <HAL_GetTick>
 80035a8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80035aa:	e008      	b.n	80035be <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80035ac:	f7fd fa98 	bl	8000ae0 <HAL_GetTick>
 80035b0:	4602      	mov	r2, r0
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	1ad3      	subs	r3, r2, r3
 80035b6:	2b02      	cmp	r3, #2
 80035b8:	d901      	bls.n	80035be <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80035ba:	2303      	movs	r3, #3
 80035bc:	e0b7      	b.n	800372e <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80035be:	f7ff fbc8 	bl	8002d52 <LL_RCC_IsActiveFlag_SHDHPRE>
 80035c2:	4603      	mov	r3, r0
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d0f1      	beq.n	80035ac <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 0304 	and.w	r3, r3, #4
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d016      	beq.n	8003602 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	4618      	mov	r0, r3
 80035da:	f7ff fae9 	bl	8002bb0 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80035de:	f7fd fa7f 	bl	8000ae0 <HAL_GetTick>
 80035e2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80035e4:	e008      	b.n	80035f8 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80035e6:	f7fd fa7b 	bl	8000ae0 <HAL_GetTick>
 80035ea:	4602      	mov	r2, r0
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	1ad3      	subs	r3, r2, r3
 80035f0:	2b02      	cmp	r3, #2
 80035f2:	d901      	bls.n	80035f8 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80035f4:	2303      	movs	r3, #3
 80035f6:	e09a      	b.n	800372e <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80035f8:	f7ff fbbd 	bl	8002d76 <LL_RCC_IsActiveFlag_PPRE1>
 80035fc:	4603      	mov	r3, r0
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d0f1      	beq.n	80035e6 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 0308 	and.w	r3, r3, #8
 800360a:	2b00      	cmp	r3, #0
 800360c:	d017      	beq.n	800363e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	691b      	ldr	r3, [r3, #16]
 8003612:	00db      	lsls	r3, r3, #3
 8003614:	4618      	mov	r0, r3
 8003616:	f7ff fade 	bl	8002bd6 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800361a:	f7fd fa61 	bl	8000ae0 <HAL_GetTick>
 800361e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003620:	e008      	b.n	8003634 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003622:	f7fd fa5d 	bl	8000ae0 <HAL_GetTick>
 8003626:	4602      	mov	r2, r0
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	1ad3      	subs	r3, r2, r3
 800362c:	2b02      	cmp	r3, #2
 800362e:	d901      	bls.n	8003634 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8003630:	2303      	movs	r3, #3
 8003632:	e07c      	b.n	800372e <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003634:	f7ff fbb0 	bl	8002d98 <LL_RCC_IsActiveFlag_PPRE2>
 8003638:	4603      	mov	r3, r0
 800363a:	2b00      	cmp	r3, #0
 800363c:	d0f1      	beq.n	8003622 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 0301 	and.w	r3, r3, #1
 8003646:	2b00      	cmp	r3, #0
 8003648:	d043      	beq.n	80036d2 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	2b02      	cmp	r3, #2
 8003650:	d106      	bne.n	8003660 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8003652:	f7ff f956 	bl	8002902 <LL_RCC_HSE_IsReady>
 8003656:	4603      	mov	r3, r0
 8003658:	2b00      	cmp	r3, #0
 800365a:	d11e      	bne.n	800369a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	e066      	b.n	800372e <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	2b03      	cmp	r3, #3
 8003666:	d106      	bne.n	8003676 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8003668:	f7ff fb12 	bl	8002c90 <LL_RCC_PLL_IsReady>
 800366c:	4603      	mov	r3, r0
 800366e:	2b00      	cmp	r3, #0
 8003670:	d113      	bne.n	800369a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	e05b      	b.n	800372e <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d106      	bne.n	800368c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800367e:	f7ff f9f0 	bl	8002a62 <LL_RCC_MSI_IsReady>
 8003682:	4603      	mov	r3, r0
 8003684:	2b00      	cmp	r3, #0
 8003686:	d108      	bne.n	800369a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	e050      	b.n	800372e <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800368c:	f7ff f966 	bl	800295c <LL_RCC_HSI_IsReady>
 8003690:	4603      	mov	r3, r0
 8003692:	2b00      	cmp	r3, #0
 8003694:	d101      	bne.n	800369a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e049      	b.n	800372e <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	4618      	mov	r0, r3
 80036a0:	f7ff fa2a 	bl	8002af8 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036a4:	f7fd fa1c 	bl	8000ae0 <HAL_GetTick>
 80036a8:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036aa:	e00a      	b.n	80036c2 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036ac:	f7fd fa18 	bl	8000ae0 <HAL_GetTick>
 80036b0:	4602      	mov	r2, r0
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	1ad3      	subs	r3, r2, r3
 80036b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d901      	bls.n	80036c2 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80036be:	2303      	movs	r3, #3
 80036c0:	e035      	b.n	800372e <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036c2:	f7ff fa2c 	bl	8002b1e <LL_RCC_GetSysClkSource>
 80036c6:	4602      	mov	r2, r0
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	009b      	lsls	r3, r3, #2
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d1ec      	bne.n	80036ac <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80036d2:	4b19      	ldr	r3, [pc, #100]	; (8003738 <HAL_RCC_ClockConfig+0x278>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 0307 	and.w	r3, r3, #7
 80036da:	683a      	ldr	r2, [r7, #0]
 80036dc:	429a      	cmp	r2, r3
 80036de:	d21b      	bcs.n	8003718 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036e0:	4b15      	ldr	r3, [pc, #84]	; (8003738 <HAL_RCC_ClockConfig+0x278>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f023 0207 	bic.w	r2, r3, #7
 80036e8:	4913      	ldr	r1, [pc, #76]	; (8003738 <HAL_RCC_ClockConfig+0x278>)
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	4313      	orrs	r3, r2
 80036ee:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036f0:	f7fd f9f6 	bl	8000ae0 <HAL_GetTick>
 80036f4:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036f6:	e008      	b.n	800370a <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80036f8:	f7fd f9f2 	bl	8000ae0 <HAL_GetTick>
 80036fc:	4602      	mov	r2, r0
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	1ad3      	subs	r3, r2, r3
 8003702:	2b02      	cmp	r3, #2
 8003704:	d901      	bls.n	800370a <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8003706:	2303      	movs	r3, #3
 8003708:	e011      	b.n	800372e <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800370a:	4b0b      	ldr	r3, [pc, #44]	; (8003738 <HAL_RCC_ClockConfig+0x278>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 0307 	and.w	r3, r3, #7
 8003712:	683a      	ldr	r2, [r7, #0]
 8003714:	429a      	cmp	r2, r3
 8003716:	d1ef      	bne.n	80036f8 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003718:	f000 f8b4 	bl	8003884 <HAL_RCC_GetHCLKFreq>
 800371c:	4603      	mov	r3, r0
 800371e:	4a07      	ldr	r2, [pc, #28]	; (800373c <HAL_RCC_ClockConfig+0x27c>)
 8003720:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 8003722:	4b07      	ldr	r3, [pc, #28]	; (8003740 <HAL_RCC_ClockConfig+0x280>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4618      	mov	r0, r3
 8003728:	f7fd f9d0 	bl	8000acc <HAL_InitTick>
 800372c:	4603      	mov	r3, r0
}
 800372e:	4618      	mov	r0, r3
 8003730:	3710      	adds	r7, #16
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
 8003736:	bf00      	nop
 8003738:	58004000 	.word	0x58004000
 800373c:	20000000 	.word	0x20000000
 8003740:	20000004 	.word	0x20000004

08003744 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003744:	b590      	push	{r4, r7, lr}
 8003746:	b087      	sub	sp, #28
 8003748:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 800374a:	2300      	movs	r3, #0
 800374c:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 800374e:	2300      	movs	r3, #0
 8003750:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003752:	f7ff f9e4 	bl	8002b1e <LL_RCC_GetSysClkSource>
 8003756:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003758:	f7ff facd 	bl	8002cf6 <LL_RCC_PLL_GetMainSource>
 800375c:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d005      	beq.n	8003770 <HAL_RCC_GetSysClockFreq+0x2c>
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	2b0c      	cmp	r3, #12
 8003768:	d139      	bne.n	80037de <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2b01      	cmp	r3, #1
 800376e:	d136      	bne.n	80037de <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8003770:	f7ff f987 	bl	8002a82 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003774:	4603      	mov	r3, r0
 8003776:	2b00      	cmp	r3, #0
 8003778:	d115      	bne.n	80037a6 <HAL_RCC_GetSysClockFreq+0x62>
 800377a:	f7ff f982 	bl	8002a82 <LL_RCC_MSI_IsEnabledRangeSelect>
 800377e:	4603      	mov	r3, r0
 8003780:	2b01      	cmp	r3, #1
 8003782:	d106      	bne.n	8003792 <HAL_RCC_GetSysClockFreq+0x4e>
 8003784:	f7ff f98d 	bl	8002aa2 <LL_RCC_MSI_GetRange>
 8003788:	4603      	mov	r3, r0
 800378a:	0a1b      	lsrs	r3, r3, #8
 800378c:	f003 030f 	and.w	r3, r3, #15
 8003790:	e005      	b.n	800379e <HAL_RCC_GetSysClockFreq+0x5a>
 8003792:	f7ff f991 	bl	8002ab8 <LL_RCC_MSI_GetRangeAfterStandby>
 8003796:	4603      	mov	r3, r0
 8003798:	0a1b      	lsrs	r3, r3, #8
 800379a:	f003 030f 	and.w	r3, r3, #15
 800379e:	4a36      	ldr	r2, [pc, #216]	; (8003878 <HAL_RCC_GetSysClockFreq+0x134>)
 80037a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037a4:	e014      	b.n	80037d0 <HAL_RCC_GetSysClockFreq+0x8c>
 80037a6:	f7ff f96c 	bl	8002a82 <LL_RCC_MSI_IsEnabledRangeSelect>
 80037aa:	4603      	mov	r3, r0
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d106      	bne.n	80037be <HAL_RCC_GetSysClockFreq+0x7a>
 80037b0:	f7ff f977 	bl	8002aa2 <LL_RCC_MSI_GetRange>
 80037b4:	4603      	mov	r3, r0
 80037b6:	091b      	lsrs	r3, r3, #4
 80037b8:	f003 030f 	and.w	r3, r3, #15
 80037bc:	e005      	b.n	80037ca <HAL_RCC_GetSysClockFreq+0x86>
 80037be:	f7ff f97b 	bl	8002ab8 <LL_RCC_MSI_GetRangeAfterStandby>
 80037c2:	4603      	mov	r3, r0
 80037c4:	091b      	lsrs	r3, r3, #4
 80037c6:	f003 030f 	and.w	r3, r3, #15
 80037ca:	4a2b      	ldr	r2, [pc, #172]	; (8003878 <HAL_RCC_GetSysClockFreq+0x134>)
 80037cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037d0:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d115      	bne.n	8003804 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80037dc:	e012      	b.n	8003804 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	2b04      	cmp	r3, #4
 80037e2:	d102      	bne.n	80037ea <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80037e4:	4b25      	ldr	r3, [pc, #148]	; (800387c <HAL_RCC_GetSysClockFreq+0x138>)
 80037e6:	617b      	str	r3, [r7, #20]
 80037e8:	e00c      	b.n	8003804 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	2b08      	cmp	r3, #8
 80037ee:	d109      	bne.n	8003804 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80037f0:	f7ff f85a 	bl	80028a8 <LL_RCC_HSE_IsEnabledDiv2>
 80037f4:	4603      	mov	r3, r0
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d102      	bne.n	8003800 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80037fa:	4b20      	ldr	r3, [pc, #128]	; (800387c <HAL_RCC_GetSysClockFreq+0x138>)
 80037fc:	617b      	str	r3, [r7, #20]
 80037fe:	e001      	b.n	8003804 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8003800:	4b1f      	ldr	r3, [pc, #124]	; (8003880 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003802:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003804:	f7ff f98b 	bl	8002b1e <LL_RCC_GetSysClkSource>
 8003808:	4603      	mov	r3, r0
 800380a:	2b0c      	cmp	r3, #12
 800380c:	d12f      	bne.n	800386e <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800380e:	f7ff fa72 	bl	8002cf6 <LL_RCC_PLL_GetMainSource>
 8003812:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2b02      	cmp	r3, #2
 8003818:	d003      	beq.n	8003822 <HAL_RCC_GetSysClockFreq+0xde>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2b03      	cmp	r3, #3
 800381e:	d003      	beq.n	8003828 <HAL_RCC_GetSysClockFreq+0xe4>
 8003820:	e00d      	b.n	800383e <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8003822:	4b16      	ldr	r3, [pc, #88]	; (800387c <HAL_RCC_GetSysClockFreq+0x138>)
 8003824:	60fb      	str	r3, [r7, #12]
        break;
 8003826:	e00d      	b.n	8003844 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003828:	f7ff f83e 	bl	80028a8 <LL_RCC_HSE_IsEnabledDiv2>
 800382c:	4603      	mov	r3, r0
 800382e:	2b01      	cmp	r3, #1
 8003830:	d102      	bne.n	8003838 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8003832:	4b12      	ldr	r3, [pc, #72]	; (800387c <HAL_RCC_GetSysClockFreq+0x138>)
 8003834:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8003836:	e005      	b.n	8003844 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8003838:	4b11      	ldr	r3, [pc, #68]	; (8003880 <HAL_RCC_GetSysClockFreq+0x13c>)
 800383a:	60fb      	str	r3, [r7, #12]
        break;
 800383c:	e002      	b.n	8003844 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	60fb      	str	r3, [r7, #12]
        break;
 8003842:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003844:	f7ff fa35 	bl	8002cb2 <LL_RCC_PLL_GetN>
 8003848:	4602      	mov	r2, r0
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	fb03 f402 	mul.w	r4, r3, r2
 8003850:	f7ff fa46 	bl	8002ce0 <LL_RCC_PLL_GetDivider>
 8003854:	4603      	mov	r3, r0
 8003856:	091b      	lsrs	r3, r3, #4
 8003858:	3301      	adds	r3, #1
 800385a:	fbb4 f4f3 	udiv	r4, r4, r3
 800385e:	f7ff fa34 	bl	8002cca <LL_RCC_PLL_GetR>
 8003862:	4603      	mov	r3, r0
 8003864:	0f5b      	lsrs	r3, r3, #29
 8003866:	3301      	adds	r3, #1
 8003868:	fbb4 f3f3 	udiv	r3, r4, r3
 800386c:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800386e:	697b      	ldr	r3, [r7, #20]
}
 8003870:	4618      	mov	r0, r3
 8003872:	371c      	adds	r7, #28
 8003874:	46bd      	mov	sp, r7
 8003876:	bd90      	pop	{r4, r7, pc}
 8003878:	0800c7dc 	.word	0x0800c7dc
 800387c:	00f42400 	.word	0x00f42400
 8003880:	01e84800 	.word	0x01e84800

08003884 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003884:	b598      	push	{r3, r4, r7, lr}
 8003886:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003888:	f7ff ff5c 	bl	8003744 <HAL_RCC_GetSysClockFreq>
 800388c:	4604      	mov	r4, r0
 800388e:	f7ff f9b5 	bl	8002bfc <LL_RCC_GetAHBPrescaler>
 8003892:	4603      	mov	r3, r0
 8003894:	091b      	lsrs	r3, r3, #4
 8003896:	f003 030f 	and.w	r3, r3, #15
 800389a:	4a03      	ldr	r2, [pc, #12]	; (80038a8 <HAL_RCC_GetHCLKFreq+0x24>)
 800389c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038a0:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	bd98      	pop	{r3, r4, r7, pc}
 80038a8:	0800c77c 	.word	0x0800c77c

080038ac <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038ac:	b598      	push	{r3, r4, r7, lr}
 80038ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80038b0:	f7ff ffe8 	bl	8003884 <HAL_RCC_GetHCLKFreq>
 80038b4:	4604      	mov	r4, r0
 80038b6:	f7ff f9b9 	bl	8002c2c <LL_RCC_GetAPB1Prescaler>
 80038ba:	4603      	mov	r3, r0
 80038bc:	0a1b      	lsrs	r3, r3, #8
 80038be:	4a03      	ldr	r2, [pc, #12]	; (80038cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80038c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038c4:	fa24 f303 	lsr.w	r3, r4, r3
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	bd98      	pop	{r3, r4, r7, pc}
 80038cc:	0800c7bc 	.word	0x0800c7bc

080038d0 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038d0:	b598      	push	{r3, r4, r7, lr}
 80038d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80038d4:	f7ff ffd6 	bl	8003884 <HAL_RCC_GetHCLKFreq>
 80038d8:	4604      	mov	r4, r0
 80038da:	f7ff f9b2 	bl	8002c42 <LL_RCC_GetAPB2Prescaler>
 80038de:	4603      	mov	r3, r0
 80038e0:	0adb      	lsrs	r3, r3, #11
 80038e2:	4a03      	ldr	r2, [pc, #12]	; (80038f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80038e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038e8:	fa24 f303 	lsr.w	r3, r4, r3
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	bd98      	pop	{r3, r4, r7, pc}
 80038f0:	0800c7bc 	.word	0x0800c7bc

080038f4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80038f4:	b590      	push	{r4, r7, lr}
 80038f6:	b085      	sub	sp, #20
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	091b      	lsrs	r3, r3, #4
 8003900:	f003 030f 	and.w	r3, r3, #15
 8003904:	4a10      	ldr	r2, [pc, #64]	; (8003948 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8003906:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800390a:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 800390c:	f7ff f981 	bl	8002c12 <LL_RCC_GetAHB3Prescaler>
 8003910:	4603      	mov	r3, r0
 8003912:	091b      	lsrs	r3, r3, #4
 8003914:	f003 030f 	and.w	r3, r3, #15
 8003918:	4a0c      	ldr	r2, [pc, #48]	; (800394c <RCC_SetFlashLatencyFromMSIRange+0x58>)
 800391a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800391e:	68fa      	ldr	r2, [r7, #12]
 8003920:	fbb2 f3f3 	udiv	r3, r2, r3
 8003924:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	4a09      	ldr	r2, [pc, #36]	; (8003950 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 800392a:	fba2 2303 	umull	r2, r3, r2, r3
 800392e:	0c9c      	lsrs	r4, r3, #18
 8003930:	f7fe ff12 	bl	8002758 <HAL_PWREx_GetVoltageRange>
 8003934:	4603      	mov	r3, r0
 8003936:	4619      	mov	r1, r3
 8003938:	4620      	mov	r0, r4
 800393a:	f000 f80b 	bl	8003954 <RCC_SetFlashLatency>
 800393e:	4603      	mov	r3, r0
}
 8003940:	4618      	mov	r0, r3
 8003942:	3714      	adds	r7, #20
 8003944:	46bd      	mov	sp, r7
 8003946:	bd90      	pop	{r4, r7, pc}
 8003948:	0800c7dc 	.word	0x0800c7dc
 800394c:	0800c77c 	.word	0x0800c77c
 8003950:	431bde83 	.word	0x431bde83

08003954 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b08e      	sub	sp, #56	; 0x38
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
 800395c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 800395e:	4a3a      	ldr	r2, [pc, #232]	; (8003a48 <RCC_SetFlashLatency+0xf4>)
 8003960:	f107 0320 	add.w	r3, r7, #32
 8003964:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003968:	6018      	str	r0, [r3, #0]
 800396a:	3304      	adds	r3, #4
 800396c:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 800396e:	4a37      	ldr	r2, [pc, #220]	; (8003a4c <RCC_SetFlashLatency+0xf8>)
 8003970:	f107 0318 	add.w	r3, r7, #24
 8003974:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003978:	6018      	str	r0, [r3, #0]
 800397a:	3304      	adds	r3, #4
 800397c:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 800397e:	4a34      	ldr	r2, [pc, #208]	; (8003a50 <RCC_SetFlashLatency+0xfc>)
 8003980:	f107 030c 	add.w	r3, r7, #12
 8003984:	ca07      	ldmia	r2, {r0, r1, r2}
 8003986:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800398a:	2300      	movs	r3, #0
 800398c:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003994:	d11b      	bne.n	80039ce <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003996:	2300      	movs	r3, #0
 8003998:	633b      	str	r3, [r7, #48]	; 0x30
 800399a:	e014      	b.n	80039c6 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800399c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800399e:	005b      	lsls	r3, r3, #1
 80039a0:	3338      	adds	r3, #56	; 0x38
 80039a2:	443b      	add	r3, r7
 80039a4:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80039a8:	461a      	mov	r2, r3
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d807      	bhi.n	80039c0 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80039b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	3338      	adds	r3, #56	; 0x38
 80039b6:	443b      	add	r3, r7
 80039b8:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80039bc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80039be:	e021      	b.n	8003a04 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80039c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039c2:	3301      	adds	r3, #1
 80039c4:	633b      	str	r3, [r7, #48]	; 0x30
 80039c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039c8:	2b02      	cmp	r3, #2
 80039ca:	d9e7      	bls.n	800399c <RCC_SetFlashLatency+0x48>
 80039cc:	e01a      	b.n	8003a04 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80039ce:	2300      	movs	r3, #0
 80039d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039d2:	e014      	b.n	80039fe <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80039d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039d6:	005b      	lsls	r3, r3, #1
 80039d8:	3338      	adds	r3, #56	; 0x38
 80039da:	443b      	add	r3, r7
 80039dc:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 80039e0:	461a      	mov	r2, r3
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d807      	bhi.n	80039f8 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80039e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	3338      	adds	r3, #56	; 0x38
 80039ee:	443b      	add	r3, r7
 80039f0:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80039f4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80039f6:	e005      	b.n	8003a04 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80039f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039fa:	3301      	adds	r3, #1
 80039fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a00:	2b02      	cmp	r3, #2
 8003a02:	d9e7      	bls.n	80039d4 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003a04:	4b13      	ldr	r3, [pc, #76]	; (8003a54 <RCC_SetFlashLatency+0x100>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f023 0207 	bic.w	r2, r3, #7
 8003a0c:	4911      	ldr	r1, [pc, #68]	; (8003a54 <RCC_SetFlashLatency+0x100>)
 8003a0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a10:	4313      	orrs	r3, r2
 8003a12:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003a14:	f7fd f864 	bl	8000ae0 <HAL_GetTick>
 8003a18:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003a1a:	e008      	b.n	8003a2e <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003a1c:	f7fd f860 	bl	8000ae0 <HAL_GetTick>
 8003a20:	4602      	mov	r2, r0
 8003a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	2b02      	cmp	r3, #2
 8003a28:	d901      	bls.n	8003a2e <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8003a2a:	2303      	movs	r3, #3
 8003a2c:	e007      	b.n	8003a3e <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003a2e:	4b09      	ldr	r3, [pc, #36]	; (8003a54 <RCC_SetFlashLatency+0x100>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 0307 	and.w	r3, r3, #7
 8003a36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	d1ef      	bne.n	8003a1c <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8003a3c:	2300      	movs	r3, #0
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3738      	adds	r7, #56	; 0x38
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop
 8003a48:	0800c4a4 	.word	0x0800c4a4
 8003a4c:	0800c4ac 	.word	0x0800c4ac
 8003a50:	0800c4b4 	.word	0x0800c4b4
 8003a54:	58004000 	.word	0x58004000

08003a58 <LL_RCC_LSE_IsReady>:
{
 8003a58:	b480      	push	{r7}
 8003a5a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003a5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a64:	f003 0302 	and.w	r3, r3, #2
 8003a68:	2b02      	cmp	r3, #2
 8003a6a:	d101      	bne.n	8003a70 <LL_RCC_LSE_IsReady+0x18>
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	e000      	b.n	8003a72 <LL_RCC_LSE_IsReady+0x1a>
 8003a70:	2300      	movs	r3, #0
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bc80      	pop	{r7}
 8003a78:	4770      	bx	lr

08003a7a <LL_RCC_SetUSARTClockSource>:
{
 8003a7a:	b480      	push	{r7}
 8003a7c:	b083      	sub	sp, #12
 8003a7e:	af00      	add	r7, sp, #0
 8003a80:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8003a82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a86:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	0c1b      	lsrs	r3, r3, #16
 8003a8e:	43db      	mvns	r3, r3
 8003a90:	401a      	ands	r2, r3
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	b29b      	uxth	r3, r3
 8003a96:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003aa0:	bf00      	nop
 8003aa2:	370c      	adds	r7, #12
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bc80      	pop	{r7}
 8003aa8:	4770      	bx	lr

08003aaa <LL_RCC_SetI2SClockSource>:
{
 8003aaa:	b480      	push	{r7}
 8003aac:	b083      	sub	sp, #12
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8003ab2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aba:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003abe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003aca:	bf00      	nop
 8003acc:	370c      	adds	r7, #12
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bc80      	pop	{r7}
 8003ad2:	4770      	bx	lr

08003ad4 <LL_RCC_SetLPUARTClockSource>:
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b083      	sub	sp, #12
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003adc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ae0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ae4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003ae8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	4313      	orrs	r3, r2
 8003af0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003af4:	bf00      	nop
 8003af6:	370c      	adds	r7, #12
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bc80      	pop	{r7}
 8003afc:	4770      	bx	lr

08003afe <LL_RCC_SetI2CClockSource>:
{
 8003afe:	b480      	push	{r7}
 8003b00:	b083      	sub	sp, #12
 8003b02:	af00      	add	r7, sp, #0
 8003b04:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003b06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b0a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	091b      	lsrs	r3, r3, #4
 8003b12:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003b16:	43db      	mvns	r3, r3
 8003b18:	401a      	ands	r2, r3
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	011b      	lsls	r3, r3, #4
 8003b1e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003b22:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b26:	4313      	orrs	r3, r2
 8003b28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003b2c:	bf00      	nop
 8003b2e:	370c      	adds	r7, #12
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bc80      	pop	{r7}
 8003b34:	4770      	bx	lr

08003b36 <LL_RCC_SetLPTIMClockSource>:
{
 8003b36:	b480      	push	{r7}
 8003b38:	b083      	sub	sp, #12
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003b3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b42:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	0c1b      	lsrs	r3, r3, #16
 8003b4a:	041b      	lsls	r3, r3, #16
 8003b4c:	43db      	mvns	r3, r3
 8003b4e:	401a      	ands	r2, r3
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	041b      	lsls	r3, r3, #16
 8003b54:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003b5e:	bf00      	nop
 8003b60:	370c      	adds	r7, #12
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bc80      	pop	{r7}
 8003b66:	4770      	bx	lr

08003b68 <LL_RCC_SetRNGClockSource>:
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b083      	sub	sp, #12
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003b70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b78:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003b7c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	4313      	orrs	r3, r2
 8003b84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003b88:	bf00      	nop
 8003b8a:	370c      	adds	r7, #12
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bc80      	pop	{r7}
 8003b90:	4770      	bx	lr

08003b92 <LL_RCC_SetADCClockSource>:
{
 8003b92:	b480      	push	{r7}
 8003b94:	b083      	sub	sp, #12
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003b9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ba2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003ba6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	4313      	orrs	r3, r2
 8003bae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003bb2:	bf00      	nop
 8003bb4:	370c      	adds	r7, #12
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bc80      	pop	{r7}
 8003bba:	4770      	bx	lr

08003bbc <LL_RCC_SetRTCClockSource>:
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b083      	sub	sp, #12
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003bc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bcc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003bd0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003bdc:	bf00      	nop
 8003bde:	370c      	adds	r7, #12
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bc80      	pop	{r7}
 8003be4:	4770      	bx	lr

08003be6 <LL_RCC_GetRTCClockSource>:
{
 8003be6:	b480      	push	{r7}
 8003be8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003bea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bf2:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bc80      	pop	{r7}
 8003bfc:	4770      	bx	lr

08003bfe <LL_RCC_ForceBackupDomainReset>:
{
 8003bfe:	b480      	push	{r7}
 8003c00:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003c02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c0a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003c16:	bf00      	nop
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bc80      	pop	{r7}
 8003c1c:	4770      	bx	lr

08003c1e <LL_RCC_ReleaseBackupDomainReset>:
{
 8003c1e:	b480      	push	{r7}
 8003c20:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003c22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c2a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c32:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003c36:	bf00      	nop
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bc80      	pop	{r7}
 8003c3c:	4770      	bx	lr
	...

08003c40 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b086      	sub	sp, #24
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003c50:	2300      	movs	r3, #0
 8003c52:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d058      	beq.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8003c60:	f7fe fd38 	bl	80026d4 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003c64:	f7fc ff3c 	bl	8000ae0 <HAL_GetTick>
 8003c68:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8003c6a:	e009      	b.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c6c:	f7fc ff38 	bl	8000ae0 <HAL_GetTick>
 8003c70:	4602      	mov	r2, r0
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	2b02      	cmp	r3, #2
 8003c78:	d902      	bls.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8003c7a:	2303      	movs	r3, #3
 8003c7c:	74fb      	strb	r3, [r7, #19]
        break;
 8003c7e:	e006      	b.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8003c80:	4b7b      	ldr	r3, [pc, #492]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c8c:	d1ee      	bne.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8003c8e:	7cfb      	ldrb	r3, [r7, #19]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d13c      	bne.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8003c94:	f7ff ffa7 	bl	8003be6 <LL_RCC_GetRTCClockSource>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c9e:	429a      	cmp	r2, r3
 8003ca0:	d00f      	beq.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003ca2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003caa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cae:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003cb0:	f7ff ffa5 	bl	8003bfe <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003cb4:	f7ff ffb3 	bl	8003c1e <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003cb8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	f003 0302 	and.w	r3, r3, #2
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d014      	beq.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ccc:	f7fc ff08 	bl	8000ae0 <HAL_GetTick>
 8003cd0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8003cd2:	e00b      	b.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cd4:	f7fc ff04 	bl	8000ae0 <HAL_GetTick>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	1ad3      	subs	r3, r2, r3
 8003cde:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d902      	bls.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	74fb      	strb	r3, [r7, #19]
            break;
 8003cea:	e004      	b.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8003cec:	f7ff feb4 	bl	8003a58 <LL_RCC_LSE_IsReady>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d1ee      	bne.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8003cf6:	7cfb      	ldrb	r3, [r7, #19]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d105      	bne.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d00:	4618      	mov	r0, r3
 8003d02:	f7ff ff5b 	bl	8003bbc <LL_RCC_SetRTCClockSource>
 8003d06:	e004      	b.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003d08:	7cfb      	ldrb	r3, [r7, #19]
 8003d0a:	74bb      	strb	r3, [r7, #18]
 8003d0c:	e001      	b.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d0e:	7cfb      	ldrb	r3, [r7, #19]
 8003d10:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 0301 	and.w	r3, r3, #1
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d004      	beq.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	4618      	mov	r0, r3
 8003d24:	f7ff fea9 	bl	8003a7a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 0302 	and.w	r3, r3, #2
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d004      	beq.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f7ff fe9e 	bl	8003a7a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 0320 	and.w	r3, r3, #32
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d004      	beq.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	691b      	ldr	r3, [r3, #16]
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f7ff fec0 	bl	8003ad4 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d004      	beq.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6a1b      	ldr	r3, [r3, #32]
 8003d64:	4618      	mov	r0, r3
 8003d66:	f7ff fee6 	bl	8003b36 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d004      	beq.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f7ff fedb 	bl	8003b36 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d004      	beq.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d90:	4618      	mov	r0, r3
 8003d92:	f7ff fed0 	bl	8003b36 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d004      	beq.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	695b      	ldr	r3, [r3, #20]
 8003da6:	4618      	mov	r0, r3
 8003da8:	f7ff fea9 	bl	8003afe <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d004      	beq.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	699b      	ldr	r3, [r3, #24]
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f7ff fe9e 	bl	8003afe <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d004      	beq.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	69db      	ldr	r3, [r3, #28]
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f7ff fe93 	bl	8003afe <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 0310 	and.w	r3, r3, #16
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d011      	beq.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	4618      	mov	r0, r3
 8003dea:	f7ff fe5e 	bl	8003aaa <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	68db      	ldr	r3, [r3, #12]
 8003df2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003df6:	d107      	bne.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8003df8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dfc:	68db      	ldr	r3, [r3, #12]
 8003dfe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e06:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d010      	beq.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f7ff fea5 	bl	8003b68 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d107      	bne.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8003e26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e2a:	68db      	ldr	r3, [r3, #12]
 8003e2c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e30:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e34:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d011      	beq.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e46:	4618      	mov	r0, r3
 8003e48:	f7ff fea3 	bl	8003b92 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e54:	d107      	bne.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003e56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e64:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8003e66:	7cbb      	ldrb	r3, [r7, #18]
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3718      	adds	r7, #24
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}
 8003e70:	58000400 	.word	0x58000400

08003e74 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b084      	sub	sp, #16
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d071      	beq.n	8003f6a <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d106      	bne.n	8003ea0 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2200      	movs	r2, #0
 8003e96:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f7fc fc84 	bl	80007a8 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2202      	movs	r2, #2
 8003ea4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8003ea8:	4b32      	ldr	r3, [pc, #200]	; (8003f74 <HAL_RTC_Init+0x100>)
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	f003 0310 	and.w	r3, r3, #16
 8003eb0:	2b10      	cmp	r3, #16
 8003eb2:	d051      	beq.n	8003f58 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003eb4:	4b2f      	ldr	r3, [pc, #188]	; (8003f74 <HAL_RTC_Init+0x100>)
 8003eb6:	22ca      	movs	r2, #202	; 0xca
 8003eb8:	625a      	str	r2, [r3, #36]	; 0x24
 8003eba:	4b2e      	ldr	r3, [pc, #184]	; (8003f74 <HAL_RTC_Init+0x100>)
 8003ebc:	2253      	movs	r2, #83	; 0x53
 8003ebe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	f000 fa11 	bl	80042e8 <RTC_EnterInitMode>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8003eca:	7bfb      	ldrb	r3, [r7, #15]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d13f      	bne.n	8003f50 <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8003ed0:	4b28      	ldr	r3, [pc, #160]	; (8003f74 <HAL_RTC_Init+0x100>)
 8003ed2:	699b      	ldr	r3, [r3, #24]
 8003ed4:	4a27      	ldr	r2, [pc, #156]	; (8003f74 <HAL_RTC_Init+0x100>)
 8003ed6:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8003eda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ede:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8003ee0:	4b24      	ldr	r3, [pc, #144]	; (8003f74 <HAL_RTC_Init+0x100>)
 8003ee2:	699a      	ldr	r2, [r3, #24]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6859      	ldr	r1, [r3, #4]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	691b      	ldr	r3, [r3, #16]
 8003eec:	4319      	orrs	r1, r3
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	699b      	ldr	r3, [r3, #24]
 8003ef2:	430b      	orrs	r3, r1
 8003ef4:	491f      	ldr	r1, [pc, #124]	; (8003f74 <HAL_RTC_Init+0x100>)
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	68da      	ldr	r2, [r3, #12]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	041b      	lsls	r3, r3, #16
 8003f04:	491b      	ldr	r1, [pc, #108]	; (8003f74 <HAL_RTC_Init+0x100>)
 8003f06:	4313      	orrs	r3, r2
 8003f08:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8003f0a:	4b1a      	ldr	r3, [pc, #104]	; (8003f74 <HAL_RTC_Init+0x100>)
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f1a:	430b      	orrs	r3, r1
 8003f1c:	4915      	ldr	r1, [pc, #84]	; (8003f74 <HAL_RTC_Init+0x100>)
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f000 fa14 	bl	8004350 <RTC_ExitInitMode>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 8003f2c:	7bfb      	ldrb	r3, [r7, #15]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d10e      	bne.n	8003f50 <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 8003f32:	4b10      	ldr	r3, [pc, #64]	; (8003f74 <HAL_RTC_Init+0x100>)
 8003f34:	699b      	ldr	r3, [r3, #24]
 8003f36:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6a19      	ldr	r1, [r3, #32]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	69db      	ldr	r3, [r3, #28]
 8003f42:	4319      	orrs	r1, r3
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	695b      	ldr	r3, [r3, #20]
 8003f48:	430b      	orrs	r3, r1
 8003f4a:	490a      	ldr	r1, [pc, #40]	; (8003f74 <HAL_RTC_Init+0x100>)
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	618b      	str	r3, [r1, #24]
                    hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003f50:	4b08      	ldr	r3, [pc, #32]	; (8003f74 <HAL_RTC_Init+0x100>)
 8003f52:	22ff      	movs	r2, #255	; 0xff
 8003f54:	625a      	str	r2, [r3, #36]	; 0x24
 8003f56:	e001      	b.n	8003f5c <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8003f5c:	7bfb      	ldrb	r3, [r7, #15]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d103      	bne.n	8003f6a <HAL_RTC_Init+0xf6>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2201      	movs	r2, #1
 8003f66:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 8003f6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	3710      	adds	r7, #16
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}
 8003f74:	40002800 	.word	0x40002800

08003f78 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8003f78:	b590      	push	{r4, r7, lr}
 8003f7a:	b087      	sub	sp, #28
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	60f8      	str	r0, [r7, #12]
 8003f80:	60b9      	str	r1, [r7, #8]
 8003f82:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8003f84:	2300      	movs	r3, #0
 8003f86:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003f8e:	2b01      	cmp	r3, #1
 8003f90:	d101      	bne.n	8003f96 <HAL_RTC_SetAlarm_IT+0x1e>
 8003f92:	2302      	movs	r3, #2
 8003f94:	e0f3      	b.n	800417e <HAL_RTC_SetAlarm_IT+0x206>
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2201      	movs	r2, #1
 8003f9a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2202      	movs	r2, #2
 8003fa2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 8003fa6:	4b78      	ldr	r3, [pc, #480]	; (8004188 <HAL_RTC_SetAlarm_IT+0x210>)
 8003fa8:	68db      	ldr	r3, [r3, #12]
 8003faa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fae:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fb6:	d06a      	beq.n	800408e <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d13a      	bne.n	8004034 <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8003fbe:	4b72      	ldr	r3, [pc, #456]	; (8004188 <HAL_RTC_SetAlarm_IT+0x210>)
 8003fc0:	699b      	ldr	r3, [r3, #24]
 8003fc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d102      	bne.n	8003fd0 <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	695b      	ldr	r3, [r3, #20]
 8003fd4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	781b      	ldrb	r3, [r3, #0]
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f000 f9f5 	bl	80043cc <RTC_ByteToBcd2>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	785b      	ldrb	r3, [r3, #1]
 8003fea:	4618      	mov	r0, r3
 8003fec:	f000 f9ee 	bl	80043cc <RTC_ByteToBcd2>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003ff4:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	789b      	ldrb	r3, [r3, #2]
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f000 f9e6 	bl	80043cc <RTC_ByteToBcd2>
 8004000:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004002:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	78db      	ldrb	r3, [r3, #3]
 800400a:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800400c:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004016:	4618      	mov	r0, r3
 8004018:	f000 f9d8 	bl	80043cc <RTC_ByteToBcd2>
 800401c:	4603      	mov	r3, r0
 800401e:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004020:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004028:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800402e:	4313      	orrs	r3, r2
 8004030:	617b      	str	r3, [r7, #20]
 8004032:	e02c      	b.n	800408e <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	695b      	ldr	r3, [r3, #20]
 8004038:	f1b3 3f80 	cmp.w	r3, #2155905152	; 0x80808080
 800403c:	d00d      	beq.n	800405a <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	695b      	ldr	r3, [r3, #20]
 8004042:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004046:	d008      	beq.n	800405a <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8004048:	4b4f      	ldr	r3, [pc, #316]	; (8004188 <HAL_RTC_SetAlarm_IT+0x210>)
 800404a:	699b      	ldr	r3, [r3, #24]
 800404c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004050:	2b00      	cmp	r3, #0
 8004052:	d102      	bne.n	800405a <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	2200      	movs	r2, #0
 8004058:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	781b      	ldrb	r3, [r3, #0]
 800405e:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	785b      	ldrb	r3, [r3, #1]
 8004064:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004066:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004068:	68ba      	ldr	r2, [r7, #8]
 800406a:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800406c:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	78db      	ldrb	r3, [r3, #3]
 8004072:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004074:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800407c:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800407e:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004084:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800408a:	4313      	orrs	r3, r2
 800408c:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800408e:	4b3e      	ldr	r3, [pc, #248]	; (8004188 <HAL_RTC_SetAlarm_IT+0x210>)
 8004090:	22ca      	movs	r2, #202	; 0xca
 8004092:	625a      	str	r2, [r3, #36]	; 0x24
 8004094:	4b3c      	ldr	r3, [pc, #240]	; (8004188 <HAL_RTC_SetAlarm_IT+0x210>)
 8004096:	2253      	movs	r2, #83	; 0x53
 8004098:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800409e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040a2:	d12c      	bne.n	80040fe <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80040a4:	4b38      	ldr	r3, [pc, #224]	; (8004188 <HAL_RTC_SetAlarm_IT+0x210>)
 80040a6:	699b      	ldr	r3, [r3, #24]
 80040a8:	4a37      	ldr	r2, [pc, #220]	; (8004188 <HAL_RTC_SetAlarm_IT+0x210>)
 80040aa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80040ae:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80040b0:	4b35      	ldr	r3, [pc, #212]	; (8004188 <HAL_RTC_SetAlarm_IT+0x210>)
 80040b2:	2201      	movs	r2, #1
 80040b4:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040bc:	d107      	bne.n	80040ce <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	699a      	ldr	r2, [r3, #24]
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	69db      	ldr	r3, [r3, #28]
 80040c6:	4930      	ldr	r1, [pc, #192]	; (8004188 <HAL_RTC_SetAlarm_IT+0x210>)
 80040c8:	4313      	orrs	r3, r2
 80040ca:	644b      	str	r3, [r1, #68]	; 0x44
 80040cc:	e006      	b.n	80040dc <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 80040ce:	4a2e      	ldr	r2, [pc, #184]	; (8004188 <HAL_RTC_SetAlarm_IT+0x210>)
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	6413      	str	r3, [r2, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 80040d4:	4a2c      	ldr	r2, [pc, #176]	; (8004188 <HAL_RTC_SetAlarm_IT+0x210>)
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	699b      	ldr	r3, [r3, #24]
 80040da:	6453      	str	r3, [r2, #68]	; 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 80040dc:	4a2a      	ldr	r2, [pc, #168]	; (8004188 <HAL_RTC_SetAlarm_IT+0x210>)
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	6713      	str	r3, [r2, #112]	; 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040e8:	f043 0201 	orr.w	r2, r3, #1
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80040f0:	4b25      	ldr	r3, [pc, #148]	; (8004188 <HAL_RTC_SetAlarm_IT+0x210>)
 80040f2:	699b      	ldr	r3, [r3, #24]
 80040f4:	4a24      	ldr	r2, [pc, #144]	; (8004188 <HAL_RTC_SetAlarm_IT+0x210>)
 80040f6:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 80040fa:	6193      	str	r3, [r2, #24]
 80040fc:	e02b      	b.n	8004156 <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 80040fe:	4b22      	ldr	r3, [pc, #136]	; (8004188 <HAL_RTC_SetAlarm_IT+0x210>)
 8004100:	699b      	ldr	r3, [r3, #24]
 8004102:	4a21      	ldr	r2, [pc, #132]	; (8004188 <HAL_RTC_SetAlarm_IT+0x210>)
 8004104:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 8004108:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 800410a:	4b1f      	ldr	r3, [pc, #124]	; (8004188 <HAL_RTC_SetAlarm_IT+0x210>)
 800410c:	2202      	movs	r2, #2
 800410e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004116:	d107      	bne.n	8004128 <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	699a      	ldr	r2, [r3, #24]
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	69db      	ldr	r3, [r3, #28]
 8004120:	4919      	ldr	r1, [pc, #100]	; (8004188 <HAL_RTC_SetAlarm_IT+0x210>)
 8004122:	4313      	orrs	r3, r2
 8004124:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004126:	e006      	b.n	8004136 <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8004128:	4a17      	ldr	r2, [pc, #92]	; (8004188 <HAL_RTC_SetAlarm_IT+0x210>)
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	6493      	str	r3, [r2, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 800412e:	4a16      	ldr	r2, [pc, #88]	; (8004188 <HAL_RTC_SetAlarm_IT+0x210>)
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	699b      	ldr	r3, [r3, #24]
 8004134:	64d3      	str	r3, [r2, #76]	; 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 8004136:	4a14      	ldr	r2, [pc, #80]	; (8004188 <HAL_RTC_SetAlarm_IT+0x210>)
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	6753      	str	r3, [r2, #116]	; 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004142:	f043 0202 	orr.w	r2, r3, #2
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 800414a:	4b0f      	ldr	r3, [pc, #60]	; (8004188 <HAL_RTC_SetAlarm_IT+0x210>)
 800414c:	699b      	ldr	r3, [r3, #24]
 800414e:	4a0e      	ldr	r2, [pc, #56]	; (8004188 <HAL_RTC_SetAlarm_IT+0x210>)
 8004150:	f443 5308 	orr.w	r3, r3, #8704	; 0x2200
 8004154:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8004156:	4b0d      	ldr	r3, [pc, #52]	; (800418c <HAL_RTC_SetAlarm_IT+0x214>)
 8004158:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800415c:	4a0b      	ldr	r2, [pc, #44]	; (800418c <HAL_RTC_SetAlarm_IT+0x214>)
 800415e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004162:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004166:	4b08      	ldr	r3, [pc, #32]	; (8004188 <HAL_RTC_SetAlarm_IT+0x210>)
 8004168:	22ff      	movs	r2, #255	; 0xff
 800416a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2201      	movs	r2, #1
 8004170:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2200      	movs	r2, #0
 8004178:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800417c:	2300      	movs	r3, #0
}
 800417e:	4618      	mov	r0, r3
 8004180:	371c      	adds	r7, #28
 8004182:	46bd      	mov	sp, r7
 8004184:	bd90      	pop	{r4, r7, pc}
 8004186:	bf00      	nop
 8004188:	40002800 	.word	0x40002800
 800418c:	58000800 	.word	0x58000800

08004190 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8004190:	b480      	push	{r7}
 8004192:	b083      	sub	sp, #12
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
 8004198:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d101      	bne.n	80041a8 <HAL_RTC_DeactivateAlarm+0x18>
 80041a4:	2302      	movs	r3, #2
 80041a6:	e048      	b.n	800423a <HAL_RTC_DeactivateAlarm+0xaa>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2201      	movs	r2, #1
 80041ac:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2202      	movs	r2, #2
 80041b4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80041b8:	4b22      	ldr	r3, [pc, #136]	; (8004244 <HAL_RTC_DeactivateAlarm+0xb4>)
 80041ba:	22ca      	movs	r2, #202	; 0xca
 80041bc:	625a      	str	r2, [r3, #36]	; 0x24
 80041be:	4b21      	ldr	r3, [pc, #132]	; (8004244 <HAL_RTC_DeactivateAlarm+0xb4>)
 80041c0:	2253      	movs	r2, #83	; 0x53
 80041c2:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041ca:	d115      	bne.n	80041f8 <HAL_RTC_DeactivateAlarm+0x68>
  {
    /* AlarmA, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80041cc:	4b1d      	ldr	r3, [pc, #116]	; (8004244 <HAL_RTC_DeactivateAlarm+0xb4>)
 80041ce:	699b      	ldr	r3, [r3, #24]
 80041d0:	4a1c      	ldr	r2, [pc, #112]	; (8004244 <HAL_RTC_DeactivateAlarm+0xb4>)
 80041d2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80041d6:	6193      	str	r3, [r2, #24]

    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 80041d8:	4b1a      	ldr	r3, [pc, #104]	; (8004244 <HAL_RTC_DeactivateAlarm+0xb4>)
 80041da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041dc:	4a19      	ldr	r2, [pc, #100]	; (8004244 <HAL_RTC_DeactivateAlarm+0xb4>)
 80041de:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80041e2:	6453      	str	r3, [r2, #68]	; 0x44

    /* Store in the handle the Alarm A disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041e8:	f023 0201 	bic.w	r2, r3, #1
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmA flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80041f0:	4b14      	ldr	r3, [pc, #80]	; (8004244 <HAL_RTC_DeactivateAlarm+0xb4>)
 80041f2:	2201      	movs	r2, #1
 80041f4:	65da      	str	r2, [r3, #92]	; 0x5c
 80041f6:	e014      	b.n	8004222 <HAL_RTC_DeactivateAlarm+0x92>
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 80041f8:	4b12      	ldr	r3, [pc, #72]	; (8004244 <HAL_RTC_DeactivateAlarm+0xb4>)
 80041fa:	699b      	ldr	r3, [r3, #24]
 80041fc:	4a11      	ldr	r2, [pc, #68]	; (8004244 <HAL_RTC_DeactivateAlarm+0xb4>)
 80041fe:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 8004202:	6193      	str	r3, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 8004204:	4b0f      	ldr	r3, [pc, #60]	; (8004244 <HAL_RTC_DeactivateAlarm+0xb4>)
 8004206:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004208:	4a0e      	ldr	r2, [pc, #56]	; (8004244 <HAL_RTC_DeactivateAlarm+0xb4>)
 800420a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800420e:	64d3      	str	r3, [r2, #76]	; 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004214:	f023 0202 	bic.w	r2, r3, #2
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 800421c:	4b09      	ldr	r3, [pc, #36]	; (8004244 <HAL_RTC_DeactivateAlarm+0xb4>)
 800421e:	2202      	movs	r2, #2
 8004220:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004222:	4b08      	ldr	r3, [pc, #32]	; (8004244 <HAL_RTC_DeactivateAlarm+0xb4>)
 8004224:	22ff      	movs	r2, #255	; 0xff
 8004226:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2201      	movs	r2, #1
 800422c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2200      	movs	r2, #0
 8004234:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8004238:	2300      	movs	r3, #0
}
 800423a:	4618      	mov	r0, r3
 800423c:	370c      	adds	r7, #12
 800423e:	46bd      	mov	sp, r7
 8004240:	bc80      	pop	{r7}
 8004242:	4770      	bx	lr
 8004244:	40002800 	.word	0x40002800

08004248 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b084      	sub	sp, #16
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 8004250:	4b11      	ldr	r3, [pc, #68]	; (8004298 <HAL_RTC_AlarmIRQHandler+0x50>)
 8004252:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004258:	4013      	ands	r3, r2
 800425a:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	f003 0301 	and.w	r3, r3, #1
 8004262:	2b00      	cmp	r3, #0
 8004264:	d005      	beq.n	8004272 <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8004266:	4b0c      	ldr	r3, [pc, #48]	; (8004298 <HAL_RTC_AlarmIRQHandler+0x50>)
 8004268:	2201      	movs	r2, #1
 800426a:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	f7fc fe10 	bl	8000e92 <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	f003 0302 	and.w	r3, r3, #2
 8004278:	2b00      	cmp	r3, #0
 800427a:	d005      	beq.n	8004288 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 800427c:	4b06      	ldr	r3, [pc, #24]	; (8004298 <HAL_RTC_AlarmIRQHandler+0x50>)
 800427e:	2202      	movs	r2, #2
 8004280:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f000 f94a 	bl	800451c <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2201      	movs	r2, #1
 800428c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8004290:	bf00      	nop
 8004292:	3710      	adds	r7, #16
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}
 8004298:	40002800 	.word	0x40002800

0800429c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b084      	sub	sp, #16
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 80042a4:	4b0f      	ldr	r3, [pc, #60]	; (80042e4 <HAL_RTC_WaitForSynchro+0x48>)
 80042a6:	68db      	ldr	r3, [r3, #12]
 80042a8:	4a0e      	ldr	r2, [pc, #56]	; (80042e4 <HAL_RTC_WaitForSynchro+0x48>)
 80042aa:	f023 0320 	bic.w	r3, r3, #32
 80042ae:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 80042b0:	f7fc fc16 	bl	8000ae0 <HAL_GetTick>
 80042b4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80042b6:	e009      	b.n	80042cc <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80042b8:	f7fc fc12 	bl	8000ae0 <HAL_GetTick>
 80042bc:	4602      	mov	r2, r0
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	1ad3      	subs	r3, r2, r3
 80042c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80042c6:	d901      	bls.n	80042cc <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80042c8:	2303      	movs	r3, #3
 80042ca:	e006      	b.n	80042da <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80042cc:	4b05      	ldr	r3, [pc, #20]	; (80042e4 <HAL_RTC_WaitForSynchro+0x48>)
 80042ce:	68db      	ldr	r3, [r3, #12]
 80042d0:	f003 0320 	and.w	r3, r3, #32
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d0ef      	beq.n	80042b8 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80042d8:	2300      	movs	r3, #0
}
 80042da:	4618      	mov	r0, r3
 80042dc:	3710      	adds	r7, #16
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}
 80042e2:	bf00      	nop
 80042e4:	40002800 	.word	0x40002800

080042e8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b084      	sub	sp, #16
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80042f0:	2300      	movs	r3, #0
 80042f2:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 80042f4:	4b15      	ldr	r3, [pc, #84]	; (800434c <RTC_EnterInitMode+0x64>)
 80042f6:	68db      	ldr	r3, [r3, #12]
 80042f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d120      	bne.n	8004342 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8004300:	4b12      	ldr	r3, [pc, #72]	; (800434c <RTC_EnterInitMode+0x64>)
 8004302:	68db      	ldr	r3, [r3, #12]
 8004304:	4a11      	ldr	r2, [pc, #68]	; (800434c <RTC_EnterInitMode+0x64>)
 8004306:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800430a:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 800430c:	f7fc fbe8 	bl	8000ae0 <HAL_GetTick>
 8004310:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004312:	e00d      	b.n	8004330 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004314:	f7fc fbe4 	bl	8000ae0 <HAL_GetTick>
 8004318:	4602      	mov	r2, r0
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	1ad3      	subs	r3, r2, r3
 800431e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004322:	d905      	bls.n	8004330 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8004324:	2303      	movs	r3, #3
 8004326:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2203      	movs	r2, #3
 800432c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004330:	4b06      	ldr	r3, [pc, #24]	; (800434c <RTC_EnterInitMode+0x64>)
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004338:	2b00      	cmp	r3, #0
 800433a:	d102      	bne.n	8004342 <RTC_EnterInitMode+0x5a>
 800433c:	7bfb      	ldrb	r3, [r7, #15]
 800433e:	2b03      	cmp	r3, #3
 8004340:	d1e8      	bne.n	8004314 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8004342:	7bfb      	ldrb	r3, [r7, #15]
}
 8004344:	4618      	mov	r0, r3
 8004346:	3710      	adds	r7, #16
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}
 800434c:	40002800 	.word	0x40002800

08004350 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b084      	sub	sp, #16
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004358:	2300      	movs	r3, #0
 800435a:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800435c:	4b1a      	ldr	r3, [pc, #104]	; (80043c8 <RTC_ExitInitMode+0x78>)
 800435e:	68db      	ldr	r3, [r3, #12]
 8004360:	4a19      	ldr	r2, [pc, #100]	; (80043c8 <RTC_ExitInitMode+0x78>)
 8004362:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004366:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8004368:	4b17      	ldr	r3, [pc, #92]	; (80043c8 <RTC_ExitInitMode+0x78>)
 800436a:	699b      	ldr	r3, [r3, #24]
 800436c:	f003 0320 	and.w	r3, r3, #32
 8004370:	2b00      	cmp	r3, #0
 8004372:	d10c      	bne.n	800438e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004374:	6878      	ldr	r0, [r7, #4]
 8004376:	f7ff ff91 	bl	800429c <HAL_RTC_WaitForSynchro>
 800437a:	4603      	mov	r3, r0
 800437c:	2b00      	cmp	r3, #0
 800437e:	d01e      	beq.n	80043be <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2203      	movs	r2, #3
 8004384:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8004388:	2303      	movs	r3, #3
 800438a:	73fb      	strb	r3, [r7, #15]
 800438c:	e017      	b.n	80043be <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800438e:	4b0e      	ldr	r3, [pc, #56]	; (80043c8 <RTC_ExitInitMode+0x78>)
 8004390:	699b      	ldr	r3, [r3, #24]
 8004392:	4a0d      	ldr	r2, [pc, #52]	; (80043c8 <RTC_ExitInitMode+0x78>)
 8004394:	f023 0320 	bic.w	r3, r3, #32
 8004398:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f7ff ff7e 	bl	800429c <HAL_RTC_WaitForSynchro>
 80043a0:	4603      	mov	r3, r0
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d005      	beq.n	80043b2 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2203      	movs	r2, #3
 80043aa:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 80043ae:	2303      	movs	r3, #3
 80043b0:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80043b2:	4b05      	ldr	r3, [pc, #20]	; (80043c8 <RTC_ExitInitMode+0x78>)
 80043b4:	699b      	ldr	r3, [r3, #24]
 80043b6:	4a04      	ldr	r2, [pc, #16]	; (80043c8 <RTC_ExitInitMode+0x78>)
 80043b8:	f043 0320 	orr.w	r3, r3, #32
 80043bc:	6193      	str	r3, [r2, #24]
  }

  return status;
 80043be:	7bfb      	ldrb	r3, [r7, #15]
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	3710      	adds	r7, #16
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd80      	pop	{r7, pc}
 80043c8:	40002800 	.word	0x40002800

080043cc <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b085      	sub	sp, #20
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	4603      	mov	r3, r0
 80043d4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80043d6:	2300      	movs	r3, #0
 80043d8:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 80043da:	79fb      	ldrb	r3, [r7, #7]
 80043dc:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 80043de:	e005      	b.n	80043ec <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	3301      	adds	r3, #1
 80043e4:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 80043e6:	7afb      	ldrb	r3, [r7, #11]
 80043e8:	3b0a      	subs	r3, #10
 80043ea:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 80043ec:	7afb      	ldrb	r3, [r7, #11]
 80043ee:	2b09      	cmp	r3, #9
 80043f0:	d8f6      	bhi.n	80043e0 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	b2db      	uxtb	r3, r3
 80043f6:	011b      	lsls	r3, r3, #4
 80043f8:	b2da      	uxtb	r2, r3
 80043fa:	7afb      	ldrb	r3, [r7, #11]
 80043fc:	4313      	orrs	r3, r2
 80043fe:	b2db      	uxtb	r3, r3
}
 8004400:	4618      	mov	r0, r3
 8004402:	3714      	adds	r7, #20
 8004404:	46bd      	mov	sp, r7
 8004406:	bc80      	pop	{r7}
 8004408:	4770      	bx	lr
	...

0800440c <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 800440c:	b480      	push	{r7}
 800440e:	b083      	sub	sp, #12
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800441a:	2b01      	cmp	r3, #1
 800441c:	d101      	bne.n	8004422 <HAL_RTCEx_EnableBypassShadow+0x16>
 800441e:	2302      	movs	r3, #2
 8004420:	e01f      	b.n	8004462 <HAL_RTCEx_EnableBypassShadow+0x56>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2201      	movs	r2, #1
 8004426:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2202      	movs	r2, #2
 800442e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004432:	4b0e      	ldr	r3, [pc, #56]	; (800446c <HAL_RTCEx_EnableBypassShadow+0x60>)
 8004434:	22ca      	movs	r2, #202	; 0xca
 8004436:	625a      	str	r2, [r3, #36]	; 0x24
 8004438:	4b0c      	ldr	r3, [pc, #48]	; (800446c <HAL_RTCEx_EnableBypassShadow+0x60>)
 800443a:	2253      	movs	r2, #83	; 0x53
 800443c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800443e:	4b0b      	ldr	r3, [pc, #44]	; (800446c <HAL_RTCEx_EnableBypassShadow+0x60>)
 8004440:	699b      	ldr	r3, [r3, #24]
 8004442:	4a0a      	ldr	r2, [pc, #40]	; (800446c <HAL_RTCEx_EnableBypassShadow+0x60>)
 8004444:	f043 0320 	orr.w	r3, r3, #32
 8004448:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800444a:	4b08      	ldr	r3, [pc, #32]	; (800446c <HAL_RTCEx_EnableBypassShadow+0x60>)
 800444c:	22ff      	movs	r2, #255	; 0xff
 800444e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2201      	movs	r2, #1
 8004454:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2200      	movs	r2, #0
 800445c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8004460:	2300      	movs	r3, #0
}
 8004462:	4618      	mov	r0, r3
 8004464:	370c      	adds	r7, #12
 8004466:	46bd      	mov	sp, r7
 8004468:	bc80      	pop	{r7}
 800446a:	4770      	bx	lr
 800446c:	40002800 	.word	0x40002800

08004470 <HAL_RTCEx_SetSSRU_IT>:
  * @brief  Set SSR Underflow detection with Interrupt.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
 8004470:	b480      	push	{r7}
 8004472:	b083      	sub	sp, #12
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800447e:	2b01      	cmp	r3, #1
 8004480:	d101      	bne.n	8004486 <HAL_RTCEx_SetSSRU_IT+0x16>
 8004482:	2302      	movs	r3, #2
 8004484:	e027      	b.n	80044d6 <HAL_RTCEx_SetSSRU_IT+0x66>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2201      	movs	r2, #1
 800448a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2202      	movs	r2, #2
 8004492:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004496:	4b12      	ldr	r3, [pc, #72]	; (80044e0 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8004498:	22ca      	movs	r2, #202	; 0xca
 800449a:	625a      	str	r2, [r3, #36]	; 0x24
 800449c:	4b10      	ldr	r3, [pc, #64]	; (80044e0 <HAL_RTCEx_SetSSRU_IT+0x70>)
 800449e:	2253      	movs	r2, #83	; 0x53
 80044a0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 80044a2:	4b0f      	ldr	r3, [pc, #60]	; (80044e0 <HAL_RTCEx_SetSSRU_IT+0x70>)
 80044a4:	699b      	ldr	r3, [r3, #24]
 80044a6:	4a0e      	ldr	r2, [pc, #56]	; (80044e0 <HAL_RTCEx_SetSSRU_IT+0x70>)
 80044a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044ac:	6193      	str	r3, [r2, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 80044ae:	4b0d      	ldr	r3, [pc, #52]	; (80044e4 <HAL_RTCEx_SetSSRU_IT+0x74>)
 80044b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80044b4:	4a0b      	ldr	r2, [pc, #44]	; (80044e4 <HAL_RTCEx_SetSSRU_IT+0x74>)
 80044b6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044ba:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80044be:	4b08      	ldr	r3, [pc, #32]	; (80044e0 <HAL_RTCEx_SetSSRU_IT+0x70>)
 80044c0:	22ff      	movs	r2, #255	; 0xff
 80044c2:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2201      	movs	r2, #1
 80044c8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2200      	movs	r2, #0
 80044d0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80044d4:	2300      	movs	r3, #0
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	370c      	adds	r7, #12
 80044da:	46bd      	mov	sp, r7
 80044dc:	bc80      	pop	{r7}
 80044de:	4770      	bx	lr
 80044e0:	40002800 	.word	0x40002800
 80044e4:	58000800 	.word	0x58000800

080044e8 <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b082      	sub	sp, #8
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 80044f0:	4b09      	ldr	r3, [pc, #36]	; (8004518 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 80044f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d005      	beq.n	8004508 <HAL_RTCEx_SSRUIRQHandler+0x20>
  {
    /* Immediately clear flags */
    RTC->SCR = RTC_SCR_CSSRUF;
 80044fc:	4b06      	ldr	r3, [pc, #24]	; (8004518 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 80044fe:	2240      	movs	r2, #64	; 0x40
 8004500:	65da      	str	r2, [r3, #92]	; 0x5c
    /* SSRU callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call SSRUEvent registered Callback */
    hrtc->SSRUEventCallback(hrtc);
#else
    HAL_RTCEx_SSRUEventCallback(hrtc);
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f7fc fccf 	bl	8000ea6 <HAL_RTCEx_SSRUEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2201      	movs	r2, #1
 800450c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8004510:	bf00      	nop
 8004512:	3708      	adds	r7, #8
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}
 8004518:	40002800 	.word	0x40002800

0800451c <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800451c:	b480      	push	{r7}
 800451e:	b083      	sub	sp, #12
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8004524:	bf00      	nop
 8004526:	370c      	adds	r7, #12
 8004528:	46bd      	mov	sp, r7
 800452a:	bc80      	pop	{r7}
 800452c:	4770      	bx	lr
	...

08004530 <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8004530:	b480      	push	{r7}
 8004532:	b087      	sub	sp, #28
 8004534:	af00      	add	r7, sp, #0
 8004536:	60f8      	str	r0, [r7, #12]
 8004538:	60b9      	str	r1, [r7, #8]
 800453a:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 800453c:	4b07      	ldr	r3, [pc, #28]	; (800455c <HAL_RTCEx_BKUPWrite+0x2c>)
 800453e:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	009b      	lsls	r3, r3, #2
 8004544:	697a      	ldr	r2, [r7, #20]
 8004546:	4413      	add	r3, r2
 8004548:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	687a      	ldr	r2, [r7, #4]
 800454e:	601a      	str	r2, [r3, #0]
}
 8004550:	bf00      	nop
 8004552:	371c      	adds	r7, #28
 8004554:	46bd      	mov	sp, r7
 8004556:	bc80      	pop	{r7}
 8004558:	4770      	bx	lr
 800455a:	bf00      	nop
 800455c:	4000b100 	.word	0x4000b100

08004560 <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8004560:	b480      	push	{r7}
 8004562:	b085      	sub	sp, #20
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	6039      	str	r1, [r7, #0]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 800456a:	4b07      	ldr	r3, [pc, #28]	; (8004588 <HAL_RTCEx_BKUPRead+0x28>)
 800456c:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	009b      	lsls	r3, r3, #2
 8004572:	68fa      	ldr	r2, [r7, #12]
 8004574:	4413      	add	r3, r2
 8004576:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
}
 800457c:	4618      	mov	r0, r3
 800457e:	3714      	adds	r7, #20
 8004580:	46bd      	mov	sp, r7
 8004582:	bc80      	pop	{r7}
 8004584:	4770      	bx	lr
 8004586:	bf00      	nop
 8004588:	4000b100 	.word	0x4000b100

0800458c <LL_PWR_SetRadioBusyTrigger>:
{
 800458c:	b480      	push	{r7}
 800458e:	b083      	sub	sp, #12
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8004594:	4b06      	ldr	r3, [pc, #24]	; (80045b0 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800459c:	4904      	ldr	r1, [pc, #16]	; (80045b0 <LL_PWR_SetRadioBusyTrigger+0x24>)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	4313      	orrs	r3, r2
 80045a2:	608b      	str	r3, [r1, #8]
}
 80045a4:	bf00      	nop
 80045a6:	370c      	adds	r7, #12
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bc80      	pop	{r7}
 80045ac:	4770      	bx	lr
 80045ae:	bf00      	nop
 80045b0:	58000400 	.word	0x58000400

080045b4 <LL_PWR_UnselectSUBGHZSPI_NSS>:
{
 80045b4:	b480      	push	{r7}
 80045b6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80045b8:	4b05      	ldr	r3, [pc, #20]	; (80045d0 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 80045ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045be:	4a04      	ldr	r2, [pc, #16]	; (80045d0 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 80045c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80045c8:	bf00      	nop
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bc80      	pop	{r7}
 80045ce:	4770      	bx	lr
 80045d0:	58000400 	.word	0x58000400

080045d4 <LL_PWR_SelectSUBGHZSPI_NSS>:
{
 80045d4:	b480      	push	{r7}
 80045d6:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80045d8:	4b05      	ldr	r3, [pc, #20]	; (80045f0 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 80045da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045de:	4a04      	ldr	r2, [pc, #16]	; (80045f0 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 80045e0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80045e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80045e8:	bf00      	nop
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bc80      	pop	{r7}
 80045ee:	4770      	bx	lr
 80045f0:	58000400 	.word	0x58000400

080045f4 <LL_PWR_ClearFlag_RFBUSY>:
{
 80045f4:	b480      	push	{r7}
 80045f6:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 80045f8:	4b03      	ldr	r3, [pc, #12]	; (8004608 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 80045fa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80045fe:	619a      	str	r2, [r3, #24]
}
 8004600:	bf00      	nop
 8004602:	46bd      	mov	sp, r7
 8004604:	bc80      	pop	{r7}
 8004606:	4770      	bx	lr
 8004608:	58000400 	.word	0x58000400

0800460c <LL_PWR_IsActiveFlag_RFBUSYS>:
{
 800460c:	b480      	push	{r7}
 800460e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8004610:	4b06      	ldr	r3, [pc, #24]	; (800462c <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 8004612:	695b      	ldr	r3, [r3, #20]
 8004614:	f003 0302 	and.w	r3, r3, #2
 8004618:	2b02      	cmp	r3, #2
 800461a:	d101      	bne.n	8004620 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 800461c:	2301      	movs	r3, #1
 800461e:	e000      	b.n	8004622 <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8004620:	2300      	movs	r3, #0
}
 8004622:	4618      	mov	r0, r3
 8004624:	46bd      	mov	sp, r7
 8004626:	bc80      	pop	{r7}
 8004628:	4770      	bx	lr
 800462a:	bf00      	nop
 800462c:	58000400 	.word	0x58000400

08004630 <LL_PWR_IsActiveFlag_RFBUSYMS>:
{
 8004630:	b480      	push	{r7}
 8004632:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8004634:	4b06      	ldr	r3, [pc, #24]	; (8004650 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 8004636:	695b      	ldr	r3, [r3, #20]
 8004638:	f003 0304 	and.w	r3, r3, #4
 800463c:	2b04      	cmp	r3, #4
 800463e:	d101      	bne.n	8004644 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8004640:	2301      	movs	r3, #1
 8004642:	e000      	b.n	8004646 <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8004644:	2300      	movs	r3, #0
}
 8004646:	4618      	mov	r0, r3
 8004648:	46bd      	mov	sp, r7
 800464a:	bc80      	pop	{r7}
 800464c:	4770      	bx	lr
 800464e:	bf00      	nop
 8004650:	58000400 	.word	0x58000400

08004654 <LL_RCC_RF_DisableReset>:
{
 8004654:	b480      	push	{r7}
 8004656:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8004658:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800465c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004660:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004664:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004668:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800466c:	bf00      	nop
 800466e:	46bd      	mov	sp, r7
 8004670:	bc80      	pop	{r7}
 8004672:	4770      	bx	lr

08004674 <LL_RCC_IsRFUnderReset>:
{
 8004674:	b480      	push	{r7}
 8004676:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8004678:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800467c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004680:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004684:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004688:	d101      	bne.n	800468e <LL_RCC_IsRFUnderReset+0x1a>
 800468a:	2301      	movs	r3, #1
 800468c:	e000      	b.n	8004690 <LL_RCC_IsRFUnderReset+0x1c>
 800468e:	2300      	movs	r3, #0
}
 8004690:	4618      	mov	r0, r3
 8004692:	46bd      	mov	sp, r7
 8004694:	bc80      	pop	{r7}
 8004696:	4770      	bx	lr

08004698 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8004698:	b480      	push	{r7}
 800469a:	b083      	sub	sp, #12
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80046a0:	4b06      	ldr	r3, [pc, #24]	; (80046bc <LL_EXTI_EnableIT_32_63+0x24>)
 80046a2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80046a6:	4905      	ldr	r1, [pc, #20]	; (80046bc <LL_EXTI_EnableIT_32_63+0x24>)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	4313      	orrs	r3, r2
 80046ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80046b0:	bf00      	nop
 80046b2:	370c      	adds	r7, #12
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bc80      	pop	{r7}
 80046b8:	4770      	bx	lr
 80046ba:	bf00      	nop
 80046bc:	58000800 	.word	0x58000800

080046c0 <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b084      	sub	sp, #16
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d103      	bne.n	80046d6 <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	73fb      	strb	r3, [r7, #15]
    return status;
 80046d2:	7bfb      	ldrb	r3, [r7, #15]
 80046d4:	e052      	b.n	800477c <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 80046d6:	2300      	movs	r3, #0
 80046d8:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	799b      	ldrb	r3, [r3, #6]
 80046de:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 80046e0:	7bbb      	ldrb	r3, [r7, #14]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d002      	beq.n	80046ec <HAL_SUBGHZ_Init+0x2c>
 80046e6:	7bbb      	ldrb	r3, [r7, #14]
 80046e8:	2b03      	cmp	r3, #3
 80046ea:	d109      	bne.n	8004700 <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2200      	movs	r2, #0
 80046f0:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f7fc f958 	bl	80009a8 <HAL_SUBGHZ_MspInit>
#if defined(CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 80046f8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80046fc:	f7ff ffcc 	bl	8004698 <LL_EXTI_EnableIT_32_63>
#endif /* CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 8004700:	7bbb      	ldrb	r3, [r7, #14]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d126      	bne.n	8004754 <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2202      	movs	r2, #2
 800470a:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 800470c:	f7ff ffa2 	bl	8004654 <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004710:	4b1c      	ldr	r3, [pc, #112]	; (8004784 <HAL_SUBGHZ_Init+0xc4>)
 8004712:	681a      	ldr	r2, [r3, #0]
 8004714:	4613      	mov	r3, r2
 8004716:	00db      	lsls	r3, r3, #3
 8004718:	1a9b      	subs	r3, r3, r2
 800471a:	009b      	lsls	r3, r3, #2
 800471c:	0cdb      	lsrs	r3, r3, #19
 800471e:	2264      	movs	r2, #100	; 0x64
 8004720:	fb02 f303 	mul.w	r3, r2, r3
 8004724:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d105      	bne.n	8004738 <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 800472c:	2301      	movs	r3, #1
 800472e:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2201      	movs	r2, #1
 8004734:	609a      	str	r2, [r3, #8]
        break;
 8004736:	e007      	b.n	8004748 <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	3b01      	subs	r3, #1
 800473c:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 800473e:	f7ff ff99 	bl	8004674 <LL_RCC_IsRFUnderReset>
 8004742:	4603      	mov	r3, r0
 8004744:	2b00      	cmp	r3, #0
 8004746:	d1ee      	bne.n	8004726 <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004748:	f7ff ff34 	bl	80045b4 <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 800474c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004750:	f7ff ff1c 	bl	800458c <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 8004754:	f7ff ff4e 	bl	80045f4 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 8004758:	7bfb      	ldrb	r3, [r7, #15]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d10a      	bne.n	8004774 <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4618      	mov	r0, r3
 8004764:	f000 faac 	bl	8004cc0 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2201      	movs	r2, #1
 800476c:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2200      	movs	r2, #0
 8004772:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2201      	movs	r2, #1
 8004778:	719a      	strb	r2, [r3, #6]

  return status;
 800477a:	7bfb      	ldrb	r3, [r7, #15]
}
 800477c:	4618      	mov	r0, r3
 800477e:	3710      	adds	r7, #16
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}
 8004784:	20000000 	.word	0x20000000

08004788 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b086      	sub	sp, #24
 800478c:	af00      	add	r7, sp, #0
 800478e:	60f8      	str	r0, [r7, #12]
 8004790:	607a      	str	r2, [r7, #4]
 8004792:	461a      	mov	r2, r3
 8004794:	460b      	mov	r3, r1
 8004796:	817b      	strh	r3, [r7, #10]
 8004798:	4613      	mov	r3, r2
 800479a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	799b      	ldrb	r3, [r3, #6]
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	2b01      	cmp	r3, #1
 80047a4:	d14a      	bne.n	800483c <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	795b      	ldrb	r3, [r3, #5]
 80047aa:	2b01      	cmp	r3, #1
 80047ac:	d101      	bne.n	80047b2 <HAL_SUBGHZ_WriteRegisters+0x2a>
 80047ae:	2302      	movs	r3, #2
 80047b0:	e045      	b.n	800483e <HAL_SUBGHZ_WriteRegisters+0xb6>
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	2201      	movs	r2, #1
 80047b6:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2202      	movs	r2, #2
 80047bc:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80047be:	68f8      	ldr	r0, [r7, #12]
 80047c0:	f000 fb4c 	bl	8004e5c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80047c4:	f7ff ff06 	bl	80045d4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 80047c8:	210d      	movs	r1, #13
 80047ca:	68f8      	ldr	r0, [r7, #12]
 80047cc:	f000 fa98 	bl	8004d00 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 80047d0:	897b      	ldrh	r3, [r7, #10]
 80047d2:	0a1b      	lsrs	r3, r3, #8
 80047d4:	b29b      	uxth	r3, r3
 80047d6:	b2db      	uxtb	r3, r3
 80047d8:	4619      	mov	r1, r3
 80047da:	68f8      	ldr	r0, [r7, #12]
 80047dc:	f000 fa90 	bl	8004d00 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 80047e0:	897b      	ldrh	r3, [r7, #10]
 80047e2:	b2db      	uxtb	r3, r3
 80047e4:	4619      	mov	r1, r3
 80047e6:	68f8      	ldr	r0, [r7, #12]
 80047e8:	f000 fa8a 	bl	8004d00 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80047ec:	2300      	movs	r3, #0
 80047ee:	82bb      	strh	r3, [r7, #20]
 80047f0:	e00a      	b.n	8004808 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80047f2:	8abb      	ldrh	r3, [r7, #20]
 80047f4:	687a      	ldr	r2, [r7, #4]
 80047f6:	4413      	add	r3, r2
 80047f8:	781b      	ldrb	r3, [r3, #0]
 80047fa:	4619      	mov	r1, r3
 80047fc:	68f8      	ldr	r0, [r7, #12]
 80047fe:	f000 fa7f 	bl	8004d00 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8004802:	8abb      	ldrh	r3, [r7, #20]
 8004804:	3301      	adds	r3, #1
 8004806:	82bb      	strh	r3, [r7, #20]
 8004808:	8aba      	ldrh	r2, [r7, #20]
 800480a:	893b      	ldrh	r3, [r7, #8]
 800480c:	429a      	cmp	r2, r3
 800480e:	d3f0      	bcc.n	80047f2 <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004810:	f7ff fed0 	bl	80045b4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004814:	68f8      	ldr	r0, [r7, #12]
 8004816:	f000 fb45 	bl	8004ea4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d002      	beq.n	8004828 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	75fb      	strb	r3, [r7, #23]
 8004826:	e001      	b.n	800482c <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 8004828:	2300      	movs	r3, #0
 800482a:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	2201      	movs	r2, #1
 8004830:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2200      	movs	r2, #0
 8004836:	715a      	strb	r2, [r3, #5]

    return status;
 8004838:	7dfb      	ldrb	r3, [r7, #23]
 800483a:	e000      	b.n	800483e <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 800483c:	2302      	movs	r3, #2
  }
}
 800483e:	4618      	mov	r0, r3
 8004840:	3718      	adds	r7, #24
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}

08004846 <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 8004846:	b580      	push	{r7, lr}
 8004848:	b088      	sub	sp, #32
 800484a:	af00      	add	r7, sp, #0
 800484c:	60f8      	str	r0, [r7, #12]
 800484e:	607a      	str	r2, [r7, #4]
 8004850:	461a      	mov	r2, r3
 8004852:	460b      	mov	r3, r1
 8004854:	817b      	strh	r3, [r7, #10]
 8004856:	4613      	mov	r3, r2
 8004858:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	799b      	ldrb	r3, [r3, #6]
 8004862:	b2db      	uxtb	r3, r3
 8004864:	2b01      	cmp	r3, #1
 8004866:	d14a      	bne.n	80048fe <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	795b      	ldrb	r3, [r3, #5]
 800486c:	2b01      	cmp	r3, #1
 800486e:	d101      	bne.n	8004874 <HAL_SUBGHZ_ReadRegisters+0x2e>
 8004870:	2302      	movs	r3, #2
 8004872:	e045      	b.n	8004900 <HAL_SUBGHZ_ReadRegisters+0xba>
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	2201      	movs	r2, #1
 8004878:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800487a:	68f8      	ldr	r0, [r7, #12]
 800487c:	f000 faee 	bl	8004e5c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004880:	f7ff fea8 	bl	80045d4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8004884:	211d      	movs	r1, #29
 8004886:	68f8      	ldr	r0, [r7, #12]
 8004888:	f000 fa3a 	bl	8004d00 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 800488c:	897b      	ldrh	r3, [r7, #10]
 800488e:	0a1b      	lsrs	r3, r3, #8
 8004890:	b29b      	uxth	r3, r3
 8004892:	b2db      	uxtb	r3, r3
 8004894:	4619      	mov	r1, r3
 8004896:	68f8      	ldr	r0, [r7, #12]
 8004898:	f000 fa32 	bl	8004d00 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 800489c:	897b      	ldrh	r3, [r7, #10]
 800489e:	b2db      	uxtb	r3, r3
 80048a0:	4619      	mov	r1, r3
 80048a2:	68f8      	ldr	r0, [r7, #12]
 80048a4:	f000 fa2c 	bl	8004d00 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 80048a8:	2100      	movs	r1, #0
 80048aa:	68f8      	ldr	r0, [r7, #12]
 80048ac:	f000 fa28 	bl	8004d00 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80048b0:	2300      	movs	r3, #0
 80048b2:	82fb      	strh	r3, [r7, #22]
 80048b4:	e009      	b.n	80048ca <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80048b6:	69b9      	ldr	r1, [r7, #24]
 80048b8:	68f8      	ldr	r0, [r7, #12]
 80048ba:	f000 fa77 	bl	8004dac <SUBGHZSPI_Receive>
      pData++;
 80048be:	69bb      	ldr	r3, [r7, #24]
 80048c0:	3301      	adds	r3, #1
 80048c2:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 80048c4:	8afb      	ldrh	r3, [r7, #22]
 80048c6:	3301      	adds	r3, #1
 80048c8:	82fb      	strh	r3, [r7, #22]
 80048ca:	8afa      	ldrh	r2, [r7, #22]
 80048cc:	893b      	ldrh	r3, [r7, #8]
 80048ce:	429a      	cmp	r2, r3
 80048d0:	d3f1      	bcc.n	80048b6 <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80048d2:	f7ff fe6f 	bl	80045b4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80048d6:	68f8      	ldr	r0, [r7, #12]
 80048d8:	f000 fae4 	bl	8004ea4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d002      	beq.n	80048ea <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 80048e4:	2301      	movs	r3, #1
 80048e6:	77fb      	strb	r3, [r7, #31]
 80048e8:	e001      	b.n	80048ee <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 80048ea:	2300      	movs	r3, #0
 80048ec:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2201      	movs	r2, #1
 80048f2:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2200      	movs	r2, #0
 80048f8:	715a      	strb	r2, [r3, #5]

    return status;
 80048fa:	7ffb      	ldrb	r3, [r7, #31]
 80048fc:	e000      	b.n	8004900 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 80048fe:	2302      	movs	r3, #2
  }
}
 8004900:	4618      	mov	r0, r3
 8004902:	3720      	adds	r7, #32
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}

08004908 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b086      	sub	sp, #24
 800490c:	af00      	add	r7, sp, #0
 800490e:	60f8      	str	r0, [r7, #12]
 8004910:	607a      	str	r2, [r7, #4]
 8004912:	461a      	mov	r2, r3
 8004914:	460b      	mov	r3, r1
 8004916:	72fb      	strb	r3, [r7, #11]
 8004918:	4613      	mov	r3, r2
 800491a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	799b      	ldrb	r3, [r3, #6]
 8004920:	b2db      	uxtb	r3, r3
 8004922:	2b01      	cmp	r3, #1
 8004924:	d14a      	bne.n	80049bc <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	795b      	ldrb	r3, [r3, #5]
 800492a:	2b01      	cmp	r3, #1
 800492c:	d101      	bne.n	8004932 <HAL_SUBGHZ_ExecSetCmd+0x2a>
 800492e:	2302      	movs	r3, #2
 8004930:	e045      	b.n	80049be <HAL_SUBGHZ_ExecSetCmd+0xb6>
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2201      	movs	r2, #1
 8004936:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8004938:	68f8      	ldr	r0, [r7, #12]
 800493a:	f000 fa8f 	bl	8004e5c <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 800493e:	7afb      	ldrb	r3, [r7, #11]
 8004940:	2b84      	cmp	r3, #132	; 0x84
 8004942:	d002      	beq.n	800494a <HAL_SUBGHZ_ExecSetCmd+0x42>
 8004944:	7afb      	ldrb	r3, [r7, #11]
 8004946:	2b94      	cmp	r3, #148	; 0x94
 8004948:	d103      	bne.n	8004952 <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2201      	movs	r2, #1
 800494e:	711a      	strb	r2, [r3, #4]
 8004950:	e002      	b.n	8004958 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2200      	movs	r2, #0
 8004956:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004958:	f7ff fe3c 	bl	80045d4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 800495c:	7afb      	ldrb	r3, [r7, #11]
 800495e:	4619      	mov	r1, r3
 8004960:	68f8      	ldr	r0, [r7, #12]
 8004962:	f000 f9cd 	bl	8004d00 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8004966:	2300      	movs	r3, #0
 8004968:	82bb      	strh	r3, [r7, #20]
 800496a:	e00a      	b.n	8004982 <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800496c:	8abb      	ldrh	r3, [r7, #20]
 800496e:	687a      	ldr	r2, [r7, #4]
 8004970:	4413      	add	r3, r2
 8004972:	781b      	ldrb	r3, [r3, #0]
 8004974:	4619      	mov	r1, r3
 8004976:	68f8      	ldr	r0, [r7, #12]
 8004978:	f000 f9c2 	bl	8004d00 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800497c:	8abb      	ldrh	r3, [r7, #20]
 800497e:	3301      	adds	r3, #1
 8004980:	82bb      	strh	r3, [r7, #20]
 8004982:	8aba      	ldrh	r2, [r7, #20]
 8004984:	893b      	ldrh	r3, [r7, #8]
 8004986:	429a      	cmp	r2, r3
 8004988:	d3f0      	bcc.n	800496c <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800498a:	f7ff fe13 	bl	80045b4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 800498e:	7afb      	ldrb	r3, [r7, #11]
 8004990:	2b84      	cmp	r3, #132	; 0x84
 8004992:	d002      	beq.n	800499a <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004994:	68f8      	ldr	r0, [r7, #12]
 8004996:	f000 fa85 	bl	8004ea4 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d002      	beq.n	80049a8 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 80049a2:	2301      	movs	r3, #1
 80049a4:	75fb      	strb	r3, [r7, #23]
 80049a6:	e001      	b.n	80049ac <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 80049a8:	2300      	movs	r3, #0
 80049aa:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2201      	movs	r2, #1
 80049b0:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2200      	movs	r2, #0
 80049b6:	715a      	strb	r2, [r3, #5]

    return status;
 80049b8:	7dfb      	ldrb	r3, [r7, #23]
 80049ba:	e000      	b.n	80049be <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 80049bc:	2302      	movs	r3, #2
  }
}
 80049be:	4618      	mov	r0, r3
 80049c0:	3718      	adds	r7, #24
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}

080049c6 <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 80049c6:	b580      	push	{r7, lr}
 80049c8:	b088      	sub	sp, #32
 80049ca:	af00      	add	r7, sp, #0
 80049cc:	60f8      	str	r0, [r7, #12]
 80049ce:	607a      	str	r2, [r7, #4]
 80049d0:	461a      	mov	r2, r3
 80049d2:	460b      	mov	r3, r1
 80049d4:	72fb      	strb	r3, [r7, #11]
 80049d6:	4613      	mov	r3, r2
 80049d8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	799b      	ldrb	r3, [r3, #6]
 80049e2:	b2db      	uxtb	r3, r3
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	d13d      	bne.n	8004a64 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	795b      	ldrb	r3, [r3, #5]
 80049ec:	2b01      	cmp	r3, #1
 80049ee:	d101      	bne.n	80049f4 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 80049f0:	2302      	movs	r3, #2
 80049f2:	e038      	b.n	8004a66 <HAL_SUBGHZ_ExecGetCmd+0xa0>
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2201      	movs	r2, #1
 80049f8:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80049fa:	68f8      	ldr	r0, [r7, #12]
 80049fc:	f000 fa2e 	bl	8004e5c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004a00:	f7ff fde8 	bl	80045d4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8004a04:	7afb      	ldrb	r3, [r7, #11]
 8004a06:	4619      	mov	r1, r3
 8004a08:	68f8      	ldr	r0, [r7, #12]
 8004a0a:	f000 f979 	bl	8004d00 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8004a0e:	2100      	movs	r1, #0
 8004a10:	68f8      	ldr	r0, [r7, #12]
 8004a12:	f000 f975 	bl	8004d00 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8004a16:	2300      	movs	r3, #0
 8004a18:	82fb      	strh	r3, [r7, #22]
 8004a1a:	e009      	b.n	8004a30 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8004a1c:	69b9      	ldr	r1, [r7, #24]
 8004a1e:	68f8      	ldr	r0, [r7, #12]
 8004a20:	f000 f9c4 	bl	8004dac <SUBGHZSPI_Receive>
      pData++;
 8004a24:	69bb      	ldr	r3, [r7, #24]
 8004a26:	3301      	adds	r3, #1
 8004a28:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8004a2a:	8afb      	ldrh	r3, [r7, #22]
 8004a2c:	3301      	adds	r3, #1
 8004a2e:	82fb      	strh	r3, [r7, #22]
 8004a30:	8afa      	ldrh	r2, [r7, #22]
 8004a32:	893b      	ldrh	r3, [r7, #8]
 8004a34:	429a      	cmp	r2, r3
 8004a36:	d3f1      	bcc.n	8004a1c <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004a38:	f7ff fdbc 	bl	80045b4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004a3c:	68f8      	ldr	r0, [r7, #12]
 8004a3e:	f000 fa31 	bl	8004ea4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d002      	beq.n	8004a50 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	77fb      	strb	r3, [r7, #31]
 8004a4e:	e001      	b.n	8004a54 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8004a50:	2300      	movs	r3, #0
 8004a52:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2201      	movs	r2, #1
 8004a58:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	715a      	strb	r2, [r3, #5]

    return status;
 8004a60:	7ffb      	ldrb	r3, [r7, #31]
 8004a62:	e000      	b.n	8004a66 <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004a64:	2302      	movs	r3, #2
  }
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	3720      	adds	r7, #32
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}

08004a6e <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 8004a6e:	b580      	push	{r7, lr}
 8004a70:	b086      	sub	sp, #24
 8004a72:	af00      	add	r7, sp, #0
 8004a74:	60f8      	str	r0, [r7, #12]
 8004a76:	607a      	str	r2, [r7, #4]
 8004a78:	461a      	mov	r2, r3
 8004a7a:	460b      	mov	r3, r1
 8004a7c:	72fb      	strb	r3, [r7, #11]
 8004a7e:	4613      	mov	r3, r2
 8004a80:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	799b      	ldrb	r3, [r3, #6]
 8004a86:	b2db      	uxtb	r3, r3
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	d13e      	bne.n	8004b0a <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	795b      	ldrb	r3, [r3, #5]
 8004a90:	2b01      	cmp	r3, #1
 8004a92:	d101      	bne.n	8004a98 <HAL_SUBGHZ_WriteBuffer+0x2a>
 8004a94:	2302      	movs	r3, #2
 8004a96:	e039      	b.n	8004b0c <HAL_SUBGHZ_WriteBuffer+0x9e>
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8004a9e:	68f8      	ldr	r0, [r7, #12]
 8004aa0:	f000 f9dc 	bl	8004e5c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004aa4:	f7ff fd96 	bl	80045d4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8004aa8:	210e      	movs	r1, #14
 8004aaa:	68f8      	ldr	r0, [r7, #12]
 8004aac:	f000 f928 	bl	8004d00 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8004ab0:	7afb      	ldrb	r3, [r7, #11]
 8004ab2:	4619      	mov	r1, r3
 8004ab4:	68f8      	ldr	r0, [r7, #12]
 8004ab6:	f000 f923 	bl	8004d00 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8004aba:	2300      	movs	r3, #0
 8004abc:	82bb      	strh	r3, [r7, #20]
 8004abe:	e00a      	b.n	8004ad6 <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8004ac0:	8abb      	ldrh	r3, [r7, #20]
 8004ac2:	687a      	ldr	r2, [r7, #4]
 8004ac4:	4413      	add	r3, r2
 8004ac6:	781b      	ldrb	r3, [r3, #0]
 8004ac8:	4619      	mov	r1, r3
 8004aca:	68f8      	ldr	r0, [r7, #12]
 8004acc:	f000 f918 	bl	8004d00 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8004ad0:	8abb      	ldrh	r3, [r7, #20]
 8004ad2:	3301      	adds	r3, #1
 8004ad4:	82bb      	strh	r3, [r7, #20]
 8004ad6:	8aba      	ldrh	r2, [r7, #20]
 8004ad8:	893b      	ldrh	r3, [r7, #8]
 8004ada:	429a      	cmp	r2, r3
 8004adc:	d3f0      	bcc.n	8004ac0 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004ade:	f7ff fd69 	bl	80045b4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004ae2:	68f8      	ldr	r0, [r7, #12]
 8004ae4:	f000 f9de 	bl	8004ea4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d002      	beq.n	8004af6 <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 8004af0:	2301      	movs	r3, #1
 8004af2:	75fb      	strb	r3, [r7, #23]
 8004af4:	e001      	b.n	8004afa <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 8004af6:	2300      	movs	r3, #0
 8004af8:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2201      	movs	r2, #1
 8004afe:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2200      	movs	r2, #0
 8004b04:	715a      	strb	r2, [r3, #5]

    return status;
 8004b06:	7dfb      	ldrb	r3, [r7, #23]
 8004b08:	e000      	b.n	8004b0c <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8004b0a:	2302      	movs	r3, #2
  }
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	3718      	adds	r7, #24
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}

08004b14 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b088      	sub	sp, #32
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	60f8      	str	r0, [r7, #12]
 8004b1c:	607a      	str	r2, [r7, #4]
 8004b1e:	461a      	mov	r2, r3
 8004b20:	460b      	mov	r3, r1
 8004b22:	72fb      	strb	r3, [r7, #11]
 8004b24:	4613      	mov	r3, r2
 8004b26:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	799b      	ldrb	r3, [r3, #6]
 8004b30:	b2db      	uxtb	r3, r3
 8004b32:	2b01      	cmp	r3, #1
 8004b34:	d141      	bne.n	8004bba <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	795b      	ldrb	r3, [r3, #5]
 8004b3a:	2b01      	cmp	r3, #1
 8004b3c:	d101      	bne.n	8004b42 <HAL_SUBGHZ_ReadBuffer+0x2e>
 8004b3e:	2302      	movs	r3, #2
 8004b40:	e03c      	b.n	8004bbc <HAL_SUBGHZ_ReadBuffer+0xa8>
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2201      	movs	r2, #1
 8004b46:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8004b48:	68f8      	ldr	r0, [r7, #12]
 8004b4a:	f000 f987 	bl	8004e5c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004b4e:	f7ff fd41 	bl	80045d4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8004b52:	211e      	movs	r1, #30
 8004b54:	68f8      	ldr	r0, [r7, #12]
 8004b56:	f000 f8d3 	bl	8004d00 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8004b5a:	7afb      	ldrb	r3, [r7, #11]
 8004b5c:	4619      	mov	r1, r3
 8004b5e:	68f8      	ldr	r0, [r7, #12]
 8004b60:	f000 f8ce 	bl	8004d00 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8004b64:	2100      	movs	r1, #0
 8004b66:	68f8      	ldr	r0, [r7, #12]
 8004b68:	f000 f8ca 	bl	8004d00 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	82fb      	strh	r3, [r7, #22]
 8004b70:	e009      	b.n	8004b86 <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8004b72:	69b9      	ldr	r1, [r7, #24]
 8004b74:	68f8      	ldr	r0, [r7, #12]
 8004b76:	f000 f919 	bl	8004dac <SUBGHZSPI_Receive>
      pData++;
 8004b7a:	69bb      	ldr	r3, [r7, #24]
 8004b7c:	3301      	adds	r3, #1
 8004b7e:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8004b80:	8afb      	ldrh	r3, [r7, #22]
 8004b82:	3301      	adds	r3, #1
 8004b84:	82fb      	strh	r3, [r7, #22]
 8004b86:	8afa      	ldrh	r2, [r7, #22]
 8004b88:	893b      	ldrh	r3, [r7, #8]
 8004b8a:	429a      	cmp	r2, r3
 8004b8c:	d3f1      	bcc.n	8004b72 <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004b8e:	f7ff fd11 	bl	80045b4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004b92:	68f8      	ldr	r0, [r7, #12]
 8004b94:	f000 f986 	bl	8004ea4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d002      	beq.n	8004ba6 <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	77fb      	strb	r3, [r7, #31]
 8004ba4:	e001      	b.n	8004baa <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2201      	movs	r2, #1
 8004bae:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	715a      	strb	r2, [r3, #5]

    return status;
 8004bb6:	7ffb      	ldrb	r3, [r7, #31]
 8004bb8:	e000      	b.n	8004bbc <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8004bba:	2302      	movs	r3, #2
  }
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	3720      	adds	r7, #32
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd80      	pop	{r7, pc}

08004bc4 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b084      	sub	sp, #16
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 8004bcc:	2300      	movs	r3, #0
 8004bce:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8004bd0:	f107 020c 	add.w	r2, r7, #12
 8004bd4:	2302      	movs	r3, #2
 8004bd6:	2112      	movs	r1, #18
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	f7ff fef4 	bl	80049c6 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 8004bde:	7b3b      	ldrb	r3, [r7, #12]
 8004be0:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 8004be2:	89fb      	ldrh	r3, [r7, #14]
 8004be4:	021b      	lsls	r3, r3, #8
 8004be6:	b21a      	sxth	r2, r3
 8004be8:	7b7b      	ldrb	r3, [r7, #13]
 8004bea:	b21b      	sxth	r3, r3
 8004bec:	4313      	orrs	r3, r2
 8004bee:	b21b      	sxth	r3, r3
 8004bf0:	81fb      	strh	r3, [r7, #14]

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 8004bf2:	f107 020c 	add.w	r2, r7, #12
 8004bf6:	2302      	movs	r3, #2
 8004bf8:	2102      	movs	r1, #2
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f7ff fe84 	bl	8004908 <HAL_SUBGHZ_ExecSetCmd>

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8004c00:	89fb      	ldrh	r3, [r7, #14]
 8004c02:	f003 0301 	and.w	r3, r3, #1
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d002      	beq.n	8004c10 <HAL_SUBGHZ_IRQHandler+0x4c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f005 fc44 	bl	800a498 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 8004c10:	89fb      	ldrh	r3, [r7, #14]
 8004c12:	f003 0302 	and.w	r3, r3, #2
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d002      	beq.n	8004c20 <HAL_SUBGHZ_IRQHandler+0x5c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f005 fc4a 	bl	800a4b4 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8004c20:	89fb      	ldrh	r3, [r7, #14]
 8004c22:	f003 0304 	and.w	r3, r3, #4
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d002      	beq.n	8004c30 <HAL_SUBGHZ_IRQHandler+0x6c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f005 fc9a 	bl	800a564 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8004c30:	89fb      	ldrh	r3, [r7, #14]
 8004c32:	f003 0308 	and.w	r3, r3, #8
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d002      	beq.n	8004c40 <HAL_SUBGHZ_IRQHandler+0x7c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f005 fca0 	bl	800a580 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8004c40:	89fb      	ldrh	r3, [r7, #14]
 8004c42:	f003 0310 	and.w	r3, r3, #16
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d002      	beq.n	8004c50 <HAL_SUBGHZ_IRQHandler+0x8c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f005 fca6 	bl	800a59c <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8004c50:	89fb      	ldrh	r3, [r7, #14]
 8004c52:	f003 0320 	and.w	r3, r3, #32
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d002      	beq.n	8004c60 <HAL_SUBGHZ_IRQHandler+0x9c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f005 fc74 	bl	800a548 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8004c60:	89fb      	ldrh	r3, [r7, #14]
 8004c62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d002      	beq.n	8004c70 <HAL_SUBGHZ_IRQHandler+0xac>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f005 fc30 	bl	800a4d0 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8004c70:	89fb      	ldrh	r3, [r7, #14]
 8004c72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d00d      	beq.n	8004c96 <HAL_SUBGHZ_IRQHandler+0xd2>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8004c7a:	89fb      	ldrh	r3, [r7, #14]
 8004c7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d004      	beq.n	8004c8e <HAL_SUBGHZ_IRQHandler+0xca>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8004c84:	2101      	movs	r1, #1
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f005 fc30 	bl	800a4ec <HAL_SUBGHZ_CADStatusCallback>
 8004c8c:	e003      	b.n	8004c96 <HAL_SUBGHZ_IRQHandler+0xd2>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8004c8e:	2100      	movs	r1, #0
 8004c90:	6878      	ldr	r0, [r7, #4]
 8004c92:	f005 fc2b 	bl	800a4ec <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8004c96:	89fb      	ldrh	r3, [r7, #14]
 8004c98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d002      	beq.n	8004ca6 <HAL_SUBGHZ_IRQHandler+0xe2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	f005 fc41 	bl	800a528 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LR_FHSS Hop interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 8004ca6:	89fb      	ldrh	r3, [r7, #14]
 8004ca8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d002      	beq.n	8004cb6 <HAL_SUBGHZ_IRQHandler+0xf2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->LrFhssHopCallback(hsubghz);
#else
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 8004cb0:	6878      	ldr	r0, [r7, #4]
 8004cb2:	f005 fc81 	bl	800a5b8 <HAL_SUBGHZ_LrFhssHopCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }
}
 8004cb6:	bf00      	nop
 8004cb8:	3710      	adds	r7, #16
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}
	...

08004cc0 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b083      	sub	sp, #12
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8004cc8:	4b0c      	ldr	r3, [pc, #48]	; (8004cfc <SUBGHZSPI_Init+0x3c>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a0b      	ldr	r2, [pc, #44]	; (8004cfc <SUBGHZSPI_Init+0x3c>)
 8004cce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cd2:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8004cd4:	4a09      	ldr	r2, [pc, #36]	; (8004cfc <SUBGHZSPI_Init+0x3c>)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 8004cdc:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8004cde:	4b07      	ldr	r3, [pc, #28]	; (8004cfc <SUBGHZSPI_Init+0x3c>)
 8004ce0:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 8004ce4:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8004ce6:	4b05      	ldr	r3, [pc, #20]	; (8004cfc <SUBGHZSPI_Init+0x3c>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a04      	ldr	r2, [pc, #16]	; (8004cfc <SUBGHZSPI_Init+0x3c>)
 8004cec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004cf0:	6013      	str	r3, [r2, #0]
}
 8004cf2:	bf00      	nop
 8004cf4:	370c      	adds	r7, #12
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bc80      	pop	{r7}
 8004cfa:	4770      	bx	lr
 8004cfc:	58010000 	.word	0x58010000

08004d00 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b087      	sub	sp, #28
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
 8004d08:	460b      	mov	r3, r1
 8004d0a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004d10:	4b23      	ldr	r3, [pc, #140]	; (8004da0 <SUBGHZSPI_Transmit+0xa0>)
 8004d12:	681a      	ldr	r2, [r3, #0]
 8004d14:	4613      	mov	r3, r2
 8004d16:	00db      	lsls	r3, r3, #3
 8004d18:	1a9b      	subs	r3, r3, r2
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	0cdb      	lsrs	r3, r3, #19
 8004d1e:	2264      	movs	r2, #100	; 0x64
 8004d20:	fb02 f303 	mul.w	r3, r2, r3
 8004d24:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d105      	bne.n	8004d38 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2201      	movs	r2, #1
 8004d34:	609a      	str	r2, [r3, #8]
      break;
 8004d36:	e008      	b.n	8004d4a <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	3b01      	subs	r3, #1
 8004d3c:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8004d3e:	4b19      	ldr	r3, [pc, #100]	; (8004da4 <SUBGHZSPI_Transmit+0xa4>)
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	f003 0302 	and.w	r3, r3, #2
 8004d46:	2b02      	cmp	r3, #2
 8004d48:	d1ed      	bne.n	8004d26 <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8004d4a:	4b17      	ldr	r3, [pc, #92]	; (8004da8 <SUBGHZSPI_Transmit+0xa8>)
 8004d4c:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	78fa      	ldrb	r2, [r7, #3]
 8004d52:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004d54:	4b12      	ldr	r3, [pc, #72]	; (8004da0 <SUBGHZSPI_Transmit+0xa0>)
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	4613      	mov	r3, r2
 8004d5a:	00db      	lsls	r3, r3, #3
 8004d5c:	1a9b      	subs	r3, r3, r2
 8004d5e:	009b      	lsls	r3, r3, #2
 8004d60:	0cdb      	lsrs	r3, r3, #19
 8004d62:	2264      	movs	r2, #100	; 0x64
 8004d64:	fb02 f303 	mul.w	r3, r2, r3
 8004d68:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d105      	bne.n	8004d7c <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8004d70:	2301      	movs	r3, #1
 8004d72:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2201      	movs	r2, #1
 8004d78:	609a      	str	r2, [r3, #8]
      break;
 8004d7a:	e008      	b.n	8004d8e <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	3b01      	subs	r3, #1
 8004d80:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8004d82:	4b08      	ldr	r3, [pc, #32]	; (8004da4 <SUBGHZSPI_Transmit+0xa4>)
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	f003 0301 	and.w	r3, r3, #1
 8004d8a:	2b01      	cmp	r3, #1
 8004d8c:	d1ed      	bne.n	8004d6a <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8004d8e:	4b05      	ldr	r3, [pc, #20]	; (8004da4 <SUBGHZSPI_Transmit+0xa4>)
 8004d90:	68db      	ldr	r3, [r3, #12]

  return status;
 8004d92:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	371c      	adds	r7, #28
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bc80      	pop	{r7}
 8004d9c:	4770      	bx	lr
 8004d9e:	bf00      	nop
 8004da0:	20000000 	.word	0x20000000
 8004da4:	58010000 	.word	0x58010000
 8004da8:	5801000c 	.word	0x5801000c

08004dac <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b087      	sub	sp, #28
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
 8004db4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004db6:	2300      	movs	r3, #0
 8004db8:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004dba:	4b25      	ldr	r3, [pc, #148]	; (8004e50 <SUBGHZSPI_Receive+0xa4>)
 8004dbc:	681a      	ldr	r2, [r3, #0]
 8004dbe:	4613      	mov	r3, r2
 8004dc0:	00db      	lsls	r3, r3, #3
 8004dc2:	1a9b      	subs	r3, r3, r2
 8004dc4:	009b      	lsls	r3, r3, #2
 8004dc6:	0cdb      	lsrs	r3, r3, #19
 8004dc8:	2264      	movs	r2, #100	; 0x64
 8004dca:	fb02 f303 	mul.w	r3, r2, r3
 8004dce:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d105      	bne.n	8004de2 <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2201      	movs	r2, #1
 8004dde:	609a      	str	r2, [r3, #8]
      break;
 8004de0:	e008      	b.n	8004df4 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	3b01      	subs	r3, #1
 8004de6:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8004de8:	4b1a      	ldr	r3, [pc, #104]	; (8004e54 <SUBGHZSPI_Receive+0xa8>)
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	f003 0302 	and.w	r3, r3, #2
 8004df0:	2b02      	cmp	r3, #2
 8004df2:	d1ed      	bne.n	8004dd0 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8004df4:	4b18      	ldr	r3, [pc, #96]	; (8004e58 <SUBGHZSPI_Receive+0xac>)
 8004df6:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	22ff      	movs	r2, #255	; 0xff
 8004dfc:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004dfe:	4b14      	ldr	r3, [pc, #80]	; (8004e50 <SUBGHZSPI_Receive+0xa4>)
 8004e00:	681a      	ldr	r2, [r3, #0]
 8004e02:	4613      	mov	r3, r2
 8004e04:	00db      	lsls	r3, r3, #3
 8004e06:	1a9b      	subs	r3, r3, r2
 8004e08:	009b      	lsls	r3, r3, #2
 8004e0a:	0cdb      	lsrs	r3, r3, #19
 8004e0c:	2264      	movs	r2, #100	; 0x64
 8004e0e:	fb02 f303 	mul.w	r3, r2, r3
 8004e12:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d105      	bne.n	8004e26 <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2201      	movs	r2, #1
 8004e22:	609a      	str	r2, [r3, #8]
      break;
 8004e24:	e008      	b.n	8004e38 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	3b01      	subs	r3, #1
 8004e2a:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8004e2c:	4b09      	ldr	r3, [pc, #36]	; (8004e54 <SUBGHZSPI_Receive+0xa8>)
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	f003 0301 	and.w	r3, r3, #1
 8004e34:	2b01      	cmp	r3, #1
 8004e36:	d1ed      	bne.n	8004e14 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8004e38:	4b06      	ldr	r3, [pc, #24]	; (8004e54 <SUBGHZSPI_Receive+0xa8>)
 8004e3a:	68db      	ldr	r3, [r3, #12]
 8004e3c:	b2da      	uxtb	r2, r3
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	701a      	strb	r2, [r3, #0]

  return status;
 8004e42:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	371c      	adds	r7, #28
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bc80      	pop	{r7}
 8004e4c:	4770      	bx	lr
 8004e4e:	bf00      	nop
 8004e50:	20000000 	.word	0x20000000
 8004e54:	58010000 	.word	0x58010000
 8004e58:	5801000c 	.word	0x5801000c

08004e5c <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b084      	sub	sp, #16
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	791b      	ldrb	r3, [r3, #4]
 8004e68:	2b01      	cmp	r3, #1
 8004e6a:	d111      	bne.n	8004e90 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8004e6c:	4b0c      	ldr	r3, [pc, #48]	; (8004ea0 <SUBGHZ_CheckDeviceReady+0x44>)
 8004e6e:	681a      	ldr	r2, [r3, #0]
 8004e70:	4613      	mov	r3, r2
 8004e72:	005b      	lsls	r3, r3, #1
 8004e74:	4413      	add	r3, r2
 8004e76:	00db      	lsls	r3, r3, #3
 8004e78:	0c1b      	lsrs	r3, r3, #16
 8004e7a:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004e7c:	f7ff fbaa 	bl	80045d4 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	3b01      	subs	r3, #1
 8004e84:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d1f9      	bne.n	8004e80 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004e8c:	f7ff fb92 	bl	80045b4 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8004e90:	6878      	ldr	r0, [r7, #4]
 8004e92:	f000 f807 	bl	8004ea4 <SUBGHZ_WaitOnBusy>
 8004e96:	4603      	mov	r3, r0
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	3710      	adds	r7, #16
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}
 8004ea0:	20000000 	.word	0x20000000

08004ea4 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b086      	sub	sp, #24
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8004eac:	2300      	movs	r3, #0
 8004eae:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8004eb0:	4b12      	ldr	r3, [pc, #72]	; (8004efc <SUBGHZ_WaitOnBusy+0x58>)
 8004eb2:	681a      	ldr	r2, [r3, #0]
 8004eb4:	4613      	mov	r3, r2
 8004eb6:	005b      	lsls	r3, r3, #1
 8004eb8:	4413      	add	r3, r2
 8004eba:	00db      	lsls	r3, r3, #3
 8004ebc:	0d1b      	lsrs	r3, r3, #20
 8004ebe:	2264      	movs	r2, #100	; 0x64
 8004ec0:	fb02 f303 	mul.w	r3, r2, r3
 8004ec4:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 8004ec6:	f7ff fbb3 	bl	8004630 <LL_PWR_IsActiveFlag_RFBUSYMS>
 8004eca:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d105      	bne.n	8004ede <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2202      	movs	r2, #2
 8004eda:	609a      	str	r2, [r3, #8]
      break;
 8004edc:	e009      	b.n	8004ef2 <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	3b01      	subs	r3, #1
 8004ee2:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8004ee4:	f7ff fb92 	bl	800460c <LL_PWR_IsActiveFlag_RFBUSYS>
 8004ee8:	4602      	mov	r2, r0
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	4013      	ands	r3, r2
 8004eee:	2b01      	cmp	r3, #1
 8004ef0:	d0e9      	beq.n	8004ec6 <SUBGHZ_WaitOnBusy+0x22>

  return status;
 8004ef2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	3718      	adds	r7, #24
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}
 8004efc:	20000000 	.word	0x20000000

08004f00 <LL_RCC_GetUSARTClockSource>:
{
 8004f00:	b480      	push	{r7}
 8004f02:	b083      	sub	sp, #12
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8004f08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f0c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	401a      	ands	r2, r3
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	041b      	lsls	r3, r3, #16
 8004f18:	4313      	orrs	r3, r2
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	370c      	adds	r7, #12
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bc80      	pop	{r7}
 8004f22:	4770      	bx	lr

08004f24 <LL_RCC_GetLPUARTClockSource>:
{
 8004f24:	b480      	push	{r7}
 8004f26:	b083      	sub	sp, #12
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8004f2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f30:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	4013      	ands	r3, r2
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	370c      	adds	r7, #12
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bc80      	pop	{r7}
 8004f40:	4770      	bx	lr

08004f42 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f42:	b580      	push	{r7, lr}
 8004f44:	b082      	sub	sp, #8
 8004f46:	af00      	add	r7, sp, #0
 8004f48:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d101      	bne.n	8004f54 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f50:	2301      	movs	r3, #1
 8004f52:	e042      	b.n	8004fda <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d106      	bne.n	8004f6c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2200      	movs	r2, #0
 8004f62:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f7fc f902 	bl	8001170 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2224      	movs	r2, #36	; 0x24
 8004f70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	681a      	ldr	r2, [r3, #0]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f022 0201 	bic.w	r2, r2, #1
 8004f82:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004f84:	6878      	ldr	r0, [r7, #4]
 8004f86:	f000 fc3b 	bl	8005800 <UART_SetConfig>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	2b01      	cmp	r3, #1
 8004f8e:	d101      	bne.n	8004f94 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004f90:	2301      	movs	r3, #1
 8004f92:	e022      	b.n	8004fda <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d002      	beq.n	8004fa2 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004f9c:	6878      	ldr	r0, [r7, #4]
 8004f9e:	f000 fea3 	bl	8005ce8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	685a      	ldr	r2, [r3, #4]
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004fb0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	689a      	ldr	r2, [r3, #8]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004fc0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f042 0201 	orr.w	r2, r2, #1
 8004fd0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f000 ff29 	bl	8005e2a <UART_CheckIdleState>
 8004fd8:	4603      	mov	r3, r0
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3708      	adds	r7, #8
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}
	...

08004fe4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b08a      	sub	sp, #40	; 0x28
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	60f8      	str	r0, [r7, #12]
 8004fec:	60b9      	str	r1, [r7, #8]
 8004fee:	4613      	mov	r3, r2
 8004ff0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ff8:	2b20      	cmp	r3, #32
 8004ffa:	d137      	bne.n	800506c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d002      	beq.n	8005008 <HAL_UART_Receive_IT+0x24>
 8005002:	88fb      	ldrh	r3, [r7, #6]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d101      	bne.n	800500c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005008:	2301      	movs	r3, #1
 800500a:	e030      	b.n	800506e <HAL_UART_Receive_IT+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	2200      	movs	r2, #0
 8005010:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a18      	ldr	r2, [pc, #96]	; (8005078 <HAL_UART_Receive_IT+0x94>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d01f      	beq.n	800505c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005026:	2b00      	cmp	r3, #0
 8005028:	d018      	beq.n	800505c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	e853 3f00 	ldrex	r3, [r3]
 8005036:	613b      	str	r3, [r7, #16]
   return(result);
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800503e:	627b      	str	r3, [r7, #36]	; 0x24
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	461a      	mov	r2, r3
 8005046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005048:	623b      	str	r3, [r7, #32]
 800504a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800504c:	69f9      	ldr	r1, [r7, #28]
 800504e:	6a3a      	ldr	r2, [r7, #32]
 8005050:	e841 2300 	strex	r3, r2, [r1]
 8005054:	61bb      	str	r3, [r7, #24]
   return(result);
 8005056:	69bb      	ldr	r3, [r7, #24]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d1e6      	bne.n	800502a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800505c:	88fb      	ldrh	r3, [r7, #6]
 800505e:	461a      	mov	r2, r3
 8005060:	68b9      	ldr	r1, [r7, #8]
 8005062:	68f8      	ldr	r0, [r7, #12]
 8005064:	f000 fff8 	bl	8006058 <UART_Start_Receive_IT>
 8005068:	4603      	mov	r3, r0
 800506a:	e000      	b.n	800506e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800506c:	2302      	movs	r3, #2
  }
}
 800506e:	4618      	mov	r0, r3
 8005070:	3728      	adds	r7, #40	; 0x28
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}
 8005076:	bf00      	nop
 8005078:	40008000 	.word	0x40008000

0800507c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b08a      	sub	sp, #40	; 0x28
 8005080:	af00      	add	r7, sp, #0
 8005082:	60f8      	str	r0, [r7, #12]
 8005084:	60b9      	str	r1, [r7, #8]
 8005086:	4613      	mov	r3, r2
 8005088:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005090:	2b20      	cmp	r3, #32
 8005092:	d167      	bne.n	8005164 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d002      	beq.n	80050a0 <HAL_UART_Transmit_DMA+0x24>
 800509a:	88fb      	ldrh	r3, [r7, #6]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d101      	bne.n	80050a4 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80050a0:	2301      	movs	r3, #1
 80050a2:	e060      	b.n	8005166 <HAL_UART_Transmit_DMA+0xea>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->pTxBuffPtr  = pData;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	68ba      	ldr	r2, [r7, #8]
 80050a8:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	88fa      	ldrh	r2, [r7, #6]
 80050ae:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	88fa      	ldrh	r2, [r7, #6]
 80050b6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	2200      	movs	r2, #0
 80050be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	2221      	movs	r2, #33	; 0x21
 80050c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d028      	beq.n	8005124 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80050d6:	4a26      	ldr	r2, [pc, #152]	; (8005170 <HAL_UART_Transmit_DMA+0xf4>)
 80050d8:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80050de:	4a25      	ldr	r2, [pc, #148]	; (8005174 <HAL_UART_Transmit_DMA+0xf8>)
 80050e0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80050e6:	4a24      	ldr	r2, [pc, #144]	; (8005178 <HAL_UART_Transmit_DMA+0xfc>)
 80050e8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80050ee:	2200      	movs	r2, #0
 80050f0:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050fa:	4619      	mov	r1, r3
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	3328      	adds	r3, #40	; 0x28
 8005102:	461a      	mov	r2, r3
 8005104:	88fb      	ldrh	r3, [r7, #6]
 8005106:	f7fc fdad 	bl	8001c64 <HAL_DMA_Start_IT>
 800510a:	4603      	mov	r3, r0
 800510c:	2b00      	cmp	r3, #0
 800510e:	d009      	beq.n	8005124 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	2210      	movs	r2, #16
 8005114:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	2220      	movs	r2, #32
 800511c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 8005120:	2301      	movs	r3, #1
 8005122:	e020      	b.n	8005166 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	2240      	movs	r2, #64	; 0x40
 800512a:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	3308      	adds	r3, #8
 8005132:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	e853 3f00 	ldrex	r3, [r3]
 800513a:	613b      	str	r3, [r7, #16]
   return(result);
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005142:	627b      	str	r3, [r7, #36]	; 0x24
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	3308      	adds	r3, #8
 800514a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800514c:	623a      	str	r2, [r7, #32]
 800514e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005150:	69f9      	ldr	r1, [r7, #28]
 8005152:	6a3a      	ldr	r2, [r7, #32]
 8005154:	e841 2300 	strex	r3, r2, [r1]
 8005158:	61bb      	str	r3, [r7, #24]
   return(result);
 800515a:	69bb      	ldr	r3, [r7, #24]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d1e5      	bne.n	800512c <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8005160:	2300      	movs	r3, #0
 8005162:	e000      	b.n	8005166 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8005164:	2302      	movs	r3, #2
  }
}
 8005166:	4618      	mov	r0, r3
 8005168:	3728      	adds	r7, #40	; 0x28
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}
 800516e:	bf00      	nop
 8005170:	080063e3 	.word	0x080063e3
 8005174:	0800647d 	.word	0x0800647d
 8005178:	08006499 	.word	0x08006499

0800517c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b0ba      	sub	sp, #232	; 0xe8
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	69db      	ldr	r3, [r3, #28]
 800518a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	689b      	ldr	r3, [r3, #8]
 800519e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80051a2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80051a6:	f640 030f 	movw	r3, #2063	; 0x80f
 80051aa:	4013      	ands	r3, r2
 80051ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80051b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d11b      	bne.n	80051f0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80051b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051bc:	f003 0320 	and.w	r3, r3, #32
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d015      	beq.n	80051f0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80051c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051c8:	f003 0320 	and.w	r3, r3, #32
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d105      	bne.n	80051dc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80051d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80051d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d009      	beq.n	80051f0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	f000 82e3 	beq.w	80057ac <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051ea:	6878      	ldr	r0, [r7, #4]
 80051ec:	4798      	blx	r3
      }
      return;
 80051ee:	e2dd      	b.n	80057ac <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80051f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	f000 8123 	beq.w	8005440 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80051fa:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80051fe:	4b8d      	ldr	r3, [pc, #564]	; (8005434 <HAL_UART_IRQHandler+0x2b8>)
 8005200:	4013      	ands	r3, r2
 8005202:	2b00      	cmp	r3, #0
 8005204:	d106      	bne.n	8005214 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005206:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800520a:	4b8b      	ldr	r3, [pc, #556]	; (8005438 <HAL_UART_IRQHandler+0x2bc>)
 800520c:	4013      	ands	r3, r2
 800520e:	2b00      	cmp	r3, #0
 8005210:	f000 8116 	beq.w	8005440 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005214:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005218:	f003 0301 	and.w	r3, r3, #1
 800521c:	2b00      	cmp	r3, #0
 800521e:	d011      	beq.n	8005244 <HAL_UART_IRQHandler+0xc8>
 8005220:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005224:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005228:	2b00      	cmp	r3, #0
 800522a:	d00b      	beq.n	8005244 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	2201      	movs	r2, #1
 8005232:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800523a:	f043 0201 	orr.w	r2, r3, #1
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005244:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005248:	f003 0302 	and.w	r3, r3, #2
 800524c:	2b00      	cmp	r3, #0
 800524e:	d011      	beq.n	8005274 <HAL_UART_IRQHandler+0xf8>
 8005250:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005254:	f003 0301 	and.w	r3, r3, #1
 8005258:	2b00      	cmp	r3, #0
 800525a:	d00b      	beq.n	8005274 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	2202      	movs	r2, #2
 8005262:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800526a:	f043 0204 	orr.w	r2, r3, #4
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005274:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005278:	f003 0304 	and.w	r3, r3, #4
 800527c:	2b00      	cmp	r3, #0
 800527e:	d011      	beq.n	80052a4 <HAL_UART_IRQHandler+0x128>
 8005280:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005284:	f003 0301 	and.w	r3, r3, #1
 8005288:	2b00      	cmp	r3, #0
 800528a:	d00b      	beq.n	80052a4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	2204      	movs	r2, #4
 8005292:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800529a:	f043 0202 	orr.w	r2, r3, #2
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80052a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052a8:	f003 0308 	and.w	r3, r3, #8
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d017      	beq.n	80052e0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80052b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052b4:	f003 0320 	and.w	r3, r3, #32
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d105      	bne.n	80052c8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80052bc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80052c0:	4b5c      	ldr	r3, [pc, #368]	; (8005434 <HAL_UART_IRQHandler+0x2b8>)
 80052c2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d00b      	beq.n	80052e0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	2208      	movs	r2, #8
 80052ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052d6:	f043 0208 	orr.w	r2, r3, #8
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80052e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d012      	beq.n	8005312 <HAL_UART_IRQHandler+0x196>
 80052ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052f0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d00c      	beq.n	8005312 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005300:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005308:	f043 0220 	orr.w	r2, r3, #32
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005318:	2b00      	cmp	r3, #0
 800531a:	f000 8249 	beq.w	80057b0 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800531e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005322:	f003 0320 	and.w	r3, r3, #32
 8005326:	2b00      	cmp	r3, #0
 8005328:	d013      	beq.n	8005352 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800532a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800532e:	f003 0320 	and.w	r3, r3, #32
 8005332:	2b00      	cmp	r3, #0
 8005334:	d105      	bne.n	8005342 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005336:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800533a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800533e:	2b00      	cmp	r3, #0
 8005340:	d007      	beq.n	8005352 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005346:	2b00      	cmp	r3, #0
 8005348:	d003      	beq.n	8005352 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005358:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	689b      	ldr	r3, [r3, #8]
 8005362:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005366:	2b40      	cmp	r3, #64	; 0x40
 8005368:	d005      	beq.n	8005376 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800536a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800536e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005372:	2b00      	cmp	r3, #0
 8005374:	d054      	beq.n	8005420 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f000 ffce 	bl	8006318 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	689b      	ldr	r3, [r3, #8]
 8005382:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005386:	2b40      	cmp	r3, #64	; 0x40
 8005388:	d146      	bne.n	8005418 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	3308      	adds	r3, #8
 8005390:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005394:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005398:	e853 3f00 	ldrex	r3, [r3]
 800539c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80053a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80053a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	3308      	adds	r3, #8
 80053b2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80053b6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80053ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053be:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80053c2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80053c6:	e841 2300 	strex	r3, r2, [r1]
 80053ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80053ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d1d9      	bne.n	800538a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d017      	beq.n	8005410 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80053e6:	4a15      	ldr	r2, [pc, #84]	; (800543c <HAL_UART_IRQHandler+0x2c0>)
 80053e8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80053f0:	4618      	mov	r0, r3
 80053f2:	f7fc fd13 	bl	8001e1c <HAL_DMA_Abort_IT>
 80053f6:	4603      	mov	r3, r0
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d019      	beq.n	8005430 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005404:	687a      	ldr	r2, [r7, #4]
 8005406:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800540a:	4610      	mov	r0, r2
 800540c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800540e:	e00f      	b.n	8005430 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005410:	6878      	ldr	r0, [r7, #4]
 8005412:	f000 f9e0 	bl	80057d6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005416:	e00b      	b.n	8005430 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005418:	6878      	ldr	r0, [r7, #4]
 800541a:	f000 f9dc 	bl	80057d6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800541e:	e007      	b.n	8005430 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005420:	6878      	ldr	r0, [r7, #4]
 8005422:	f000 f9d8 	bl	80057d6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2200      	movs	r2, #0
 800542a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800542e:	e1bf      	b.n	80057b0 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005430:	bf00      	nop
    return;
 8005432:	e1bd      	b.n	80057b0 <HAL_UART_IRQHandler+0x634>
 8005434:	10000001 	.word	0x10000001
 8005438:	04000120 	.word	0x04000120
 800543c:	08006519 	.word	0x08006519

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005444:	2b01      	cmp	r3, #1
 8005446:	f040 8153 	bne.w	80056f0 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800544a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800544e:	f003 0310 	and.w	r3, r3, #16
 8005452:	2b00      	cmp	r3, #0
 8005454:	f000 814c 	beq.w	80056f0 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005458:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800545c:	f003 0310 	and.w	r3, r3, #16
 8005460:	2b00      	cmp	r3, #0
 8005462:	f000 8145 	beq.w	80056f0 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	2210      	movs	r2, #16
 800546c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	689b      	ldr	r3, [r3, #8]
 8005474:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005478:	2b40      	cmp	r3, #64	; 0x40
 800547a:	f040 80bb 	bne.w	80055f4 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800548c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005490:	2b00      	cmp	r3, #0
 8005492:	f000 818f 	beq.w	80057b4 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800549c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80054a0:	429a      	cmp	r2, r3
 80054a2:	f080 8187 	bcs.w	80057b4 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80054ac:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f003 0320 	and.w	r3, r3, #32
 80054be:	2b00      	cmp	r3, #0
 80054c0:	f040 8087 	bne.w	80055d2 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80054d0:	e853 3f00 	ldrex	r3, [r3]
 80054d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80054d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80054dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80054e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	461a      	mov	r2, r3
 80054ea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80054ee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80054f2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054f6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80054fa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80054fe:	e841 2300 	strex	r3, r2, [r1]
 8005502:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005506:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800550a:	2b00      	cmp	r3, #0
 800550c:	d1da      	bne.n	80054c4 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	3308      	adds	r3, #8
 8005514:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005516:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005518:	e853 3f00 	ldrex	r3, [r3]
 800551c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800551e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005520:	f023 0301 	bic.w	r3, r3, #1
 8005524:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	3308      	adds	r3, #8
 800552e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005532:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005536:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005538:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800553a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800553e:	e841 2300 	strex	r3, r2, [r1]
 8005542:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005544:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005546:	2b00      	cmp	r3, #0
 8005548:	d1e1      	bne.n	800550e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	3308      	adds	r3, #8
 8005550:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005552:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005554:	e853 3f00 	ldrex	r3, [r3]
 8005558:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800555a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800555c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005560:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	3308      	adds	r3, #8
 800556a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800556e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005570:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005572:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005574:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005576:	e841 2300 	strex	r3, r2, [r1]
 800557a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800557c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800557e:	2b00      	cmp	r3, #0
 8005580:	d1e3      	bne.n	800554a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2220      	movs	r2, #32
 8005586:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2200      	movs	r2, #0
 800558e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005596:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005598:	e853 3f00 	ldrex	r3, [r3]
 800559c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800559e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055a0:	f023 0310 	bic.w	r3, r3, #16
 80055a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	461a      	mov	r2, r3
 80055ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80055b2:	65bb      	str	r3, [r7, #88]	; 0x58
 80055b4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055b6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80055b8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80055ba:	e841 2300 	strex	r3, r2, [r1]
 80055be:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80055c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d1e4      	bne.n	8005590 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055cc:	4618      	mov	r0, r3
 80055ce:	f7fc fbc7 	bl	8001d60 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2202      	movs	r2, #2
 80055d6:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80055e4:	b29b      	uxth	r3, r3
 80055e6:	1ad3      	subs	r3, r2, r3
 80055e8:	b29b      	uxth	r3, r3
 80055ea:	4619      	mov	r1, r3
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	f000 f8fb 	bl	80057e8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80055f2:	e0df      	b.n	80057b4 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005600:	b29b      	uxth	r3, r3
 8005602:	1ad3      	subs	r3, r2, r3
 8005604:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800560e:	b29b      	uxth	r3, r3
 8005610:	2b00      	cmp	r3, #0
 8005612:	f000 80d1 	beq.w	80057b8 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8005616:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800561a:	2b00      	cmp	r3, #0
 800561c:	f000 80cc 	beq.w	80057b8 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005628:	e853 3f00 	ldrex	r3, [r3]
 800562c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800562e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005630:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005634:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	461a      	mov	r2, r3
 800563e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005642:	647b      	str	r3, [r7, #68]	; 0x44
 8005644:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005646:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005648:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800564a:	e841 2300 	strex	r3, r2, [r1]
 800564e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005650:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005652:	2b00      	cmp	r3, #0
 8005654:	d1e4      	bne.n	8005620 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	3308      	adds	r3, #8
 800565c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800565e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005660:	e853 3f00 	ldrex	r3, [r3]
 8005664:	623b      	str	r3, [r7, #32]
   return(result);
 8005666:	6a3b      	ldr	r3, [r7, #32]
 8005668:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800566c:	f023 0301 	bic.w	r3, r3, #1
 8005670:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	3308      	adds	r3, #8
 800567a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800567e:	633a      	str	r2, [r7, #48]	; 0x30
 8005680:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005682:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005684:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005686:	e841 2300 	strex	r3, r2, [r1]
 800568a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800568c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800568e:	2b00      	cmp	r3, #0
 8005690:	d1e1      	bne.n	8005656 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2220      	movs	r2, #32
 8005696:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2200      	movs	r2, #0
 800569e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2200      	movs	r2, #0
 80056a4:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ac:	693b      	ldr	r3, [r7, #16]
 80056ae:	e853 3f00 	ldrex	r3, [r3]
 80056b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	f023 0310 	bic.w	r3, r3, #16
 80056ba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	461a      	mov	r2, r3
 80056c4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80056c8:	61fb      	str	r3, [r7, #28]
 80056ca:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056cc:	69b9      	ldr	r1, [r7, #24]
 80056ce:	69fa      	ldr	r2, [r7, #28]
 80056d0:	e841 2300 	strex	r3, r2, [r1]
 80056d4:	617b      	str	r3, [r7, #20]
   return(result);
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d1e4      	bne.n	80056a6 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2202      	movs	r2, #2
 80056e0:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80056e2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80056e6:	4619      	mov	r1, r3
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	f000 f87d 	bl	80057e8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80056ee:	e063      	b.n	80057b8 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80056f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d00e      	beq.n	800571a <HAL_UART_IRQHandler+0x59e>
 80056fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005700:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005704:	2b00      	cmp	r3, #0
 8005706:	d008      	beq.n	800571a <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005710:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f001 fc5e 	bl	8006fd4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005718:	e051      	b.n	80057be <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800571a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800571e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005722:	2b00      	cmp	r3, #0
 8005724:	d014      	beq.n	8005750 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005726:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800572a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800572e:	2b00      	cmp	r3, #0
 8005730:	d105      	bne.n	800573e <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005732:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005736:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800573a:	2b00      	cmp	r3, #0
 800573c:	d008      	beq.n	8005750 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005742:	2b00      	cmp	r3, #0
 8005744:	d03a      	beq.n	80057bc <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	4798      	blx	r3
    }
    return;
 800574e:	e035      	b.n	80057bc <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005750:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005754:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005758:	2b00      	cmp	r3, #0
 800575a:	d009      	beq.n	8005770 <HAL_UART_IRQHandler+0x5f4>
 800575c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005760:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005764:	2b00      	cmp	r3, #0
 8005766:	d003      	beq.n	8005770 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8005768:	6878      	ldr	r0, [r7, #4]
 800576a:	f000 feeb 	bl	8006544 <UART_EndTransmit_IT>
    return;
 800576e:	e026      	b.n	80057be <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005770:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005774:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005778:	2b00      	cmp	r3, #0
 800577a:	d009      	beq.n	8005790 <HAL_UART_IRQHandler+0x614>
 800577c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005780:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005784:	2b00      	cmp	r3, #0
 8005786:	d003      	beq.n	8005790 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	f001 fc35 	bl	8006ff8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800578e:	e016      	b.n	80057be <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005790:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005794:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005798:	2b00      	cmp	r3, #0
 800579a:	d010      	beq.n	80057be <HAL_UART_IRQHandler+0x642>
 800579c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	da0c      	bge.n	80057be <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80057a4:	6878      	ldr	r0, [r7, #4]
 80057a6:	f001 fc1e 	bl	8006fe6 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80057aa:	e008      	b.n	80057be <HAL_UART_IRQHandler+0x642>
      return;
 80057ac:	bf00      	nop
 80057ae:	e006      	b.n	80057be <HAL_UART_IRQHandler+0x642>
    return;
 80057b0:	bf00      	nop
 80057b2:	e004      	b.n	80057be <HAL_UART_IRQHandler+0x642>
      return;
 80057b4:	bf00      	nop
 80057b6:	e002      	b.n	80057be <HAL_UART_IRQHandler+0x642>
      return;
 80057b8:	bf00      	nop
 80057ba:	e000      	b.n	80057be <HAL_UART_IRQHandler+0x642>
    return;
 80057bc:	bf00      	nop
  }
}
 80057be:	37e8      	adds	r7, #232	; 0xe8
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bd80      	pop	{r7, pc}

080057c4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80057c4:	b480      	push	{r7}
 80057c6:	b083      	sub	sp, #12
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80057cc:	bf00      	nop
 80057ce:	370c      	adds	r7, #12
 80057d0:	46bd      	mov	sp, r7
 80057d2:	bc80      	pop	{r7}
 80057d4:	4770      	bx	lr

080057d6 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80057d6:	b480      	push	{r7}
 80057d8:	b083      	sub	sp, #12
 80057da:	af00      	add	r7, sp, #0
 80057dc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80057de:	bf00      	nop
 80057e0:	370c      	adds	r7, #12
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bc80      	pop	{r7}
 80057e6:	4770      	bx	lr

080057e8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80057e8:	b480      	push	{r7}
 80057ea:	b083      	sub	sp, #12
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
 80057f0:	460b      	mov	r3, r1
 80057f2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80057f4:	bf00      	nop
 80057f6:	370c      	adds	r7, #12
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bc80      	pop	{r7}
 80057fc:	4770      	bx	lr
	...

08005800 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005800:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005804:	b08c      	sub	sp, #48	; 0x30
 8005806:	af00      	add	r7, sp, #0
 8005808:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800580a:	2300      	movs	r3, #0
 800580c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	689a      	ldr	r2, [r3, #8]
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	691b      	ldr	r3, [r3, #16]
 8005818:	431a      	orrs	r2, r3
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	695b      	ldr	r3, [r3, #20]
 800581e:	431a      	orrs	r2, r3
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	69db      	ldr	r3, [r3, #28]
 8005824:	4313      	orrs	r3, r2
 8005826:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	681a      	ldr	r2, [r3, #0]
 800582e:	4b94      	ldr	r3, [pc, #592]	; (8005a80 <UART_SetConfig+0x280>)
 8005830:	4013      	ands	r3, r2
 8005832:	697a      	ldr	r2, [r7, #20]
 8005834:	6812      	ldr	r2, [r2, #0]
 8005836:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005838:	430b      	orrs	r3, r1
 800583a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	68da      	ldr	r2, [r3, #12]
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	430a      	orrs	r2, r1
 8005850:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	699b      	ldr	r3, [r3, #24]
 8005856:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a89      	ldr	r2, [pc, #548]	; (8005a84 <UART_SetConfig+0x284>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d004      	beq.n	800586c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	6a1b      	ldr	r3, [r3, #32]
 8005866:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005868:	4313      	orrs	r3, r2
 800586a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	689b      	ldr	r3, [r3, #8]
 8005872:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005876:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800587a:	697a      	ldr	r2, [r7, #20]
 800587c:	6812      	ldr	r2, [r2, #0]
 800587e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005880:	430b      	orrs	r3, r1
 8005882:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800588a:	f023 010f 	bic.w	r1, r3, #15
 800588e:	697b      	ldr	r3, [r7, #20]
 8005890:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	430a      	orrs	r2, r1
 8005898:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a7a      	ldr	r2, [pc, #488]	; (8005a88 <UART_SetConfig+0x288>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d127      	bne.n	80058f4 <UART_SetConfig+0xf4>
 80058a4:	2003      	movs	r0, #3
 80058a6:	f7ff fb2b 	bl	8004f00 <LL_RCC_GetUSARTClockSource>
 80058aa:	4603      	mov	r3, r0
 80058ac:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 80058b0:	2b03      	cmp	r3, #3
 80058b2:	d81b      	bhi.n	80058ec <UART_SetConfig+0xec>
 80058b4:	a201      	add	r2, pc, #4	; (adr r2, 80058bc <UART_SetConfig+0xbc>)
 80058b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058ba:	bf00      	nop
 80058bc:	080058cd 	.word	0x080058cd
 80058c0:	080058dd 	.word	0x080058dd
 80058c4:	080058d5 	.word	0x080058d5
 80058c8:	080058e5 	.word	0x080058e5
 80058cc:	2301      	movs	r3, #1
 80058ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058d2:	e080      	b.n	80059d6 <UART_SetConfig+0x1d6>
 80058d4:	2302      	movs	r3, #2
 80058d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058da:	e07c      	b.n	80059d6 <UART_SetConfig+0x1d6>
 80058dc:	2304      	movs	r3, #4
 80058de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058e2:	e078      	b.n	80059d6 <UART_SetConfig+0x1d6>
 80058e4:	2308      	movs	r3, #8
 80058e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058ea:	e074      	b.n	80059d6 <UART_SetConfig+0x1d6>
 80058ec:	2310      	movs	r3, #16
 80058ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058f2:	e070      	b.n	80059d6 <UART_SetConfig+0x1d6>
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a64      	ldr	r2, [pc, #400]	; (8005a8c <UART_SetConfig+0x28c>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d138      	bne.n	8005970 <UART_SetConfig+0x170>
 80058fe:	200c      	movs	r0, #12
 8005900:	f7ff fafe 	bl	8004f00 <LL_RCC_GetUSARTClockSource>
 8005904:	4603      	mov	r3, r0
 8005906:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 800590a:	2b0c      	cmp	r3, #12
 800590c:	d82c      	bhi.n	8005968 <UART_SetConfig+0x168>
 800590e:	a201      	add	r2, pc, #4	; (adr r2, 8005914 <UART_SetConfig+0x114>)
 8005910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005914:	08005949 	.word	0x08005949
 8005918:	08005969 	.word	0x08005969
 800591c:	08005969 	.word	0x08005969
 8005920:	08005969 	.word	0x08005969
 8005924:	08005959 	.word	0x08005959
 8005928:	08005969 	.word	0x08005969
 800592c:	08005969 	.word	0x08005969
 8005930:	08005969 	.word	0x08005969
 8005934:	08005951 	.word	0x08005951
 8005938:	08005969 	.word	0x08005969
 800593c:	08005969 	.word	0x08005969
 8005940:	08005969 	.word	0x08005969
 8005944:	08005961 	.word	0x08005961
 8005948:	2300      	movs	r3, #0
 800594a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800594e:	e042      	b.n	80059d6 <UART_SetConfig+0x1d6>
 8005950:	2302      	movs	r3, #2
 8005952:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005956:	e03e      	b.n	80059d6 <UART_SetConfig+0x1d6>
 8005958:	2304      	movs	r3, #4
 800595a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800595e:	e03a      	b.n	80059d6 <UART_SetConfig+0x1d6>
 8005960:	2308      	movs	r3, #8
 8005962:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005966:	e036      	b.n	80059d6 <UART_SetConfig+0x1d6>
 8005968:	2310      	movs	r3, #16
 800596a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800596e:	e032      	b.n	80059d6 <UART_SetConfig+0x1d6>
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a43      	ldr	r2, [pc, #268]	; (8005a84 <UART_SetConfig+0x284>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d12a      	bne.n	80059d0 <UART_SetConfig+0x1d0>
 800597a:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800597e:	f7ff fad1 	bl	8004f24 <LL_RCC_GetLPUARTClockSource>
 8005982:	4603      	mov	r3, r0
 8005984:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005988:	d01a      	beq.n	80059c0 <UART_SetConfig+0x1c0>
 800598a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800598e:	d81b      	bhi.n	80059c8 <UART_SetConfig+0x1c8>
 8005990:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005994:	d00c      	beq.n	80059b0 <UART_SetConfig+0x1b0>
 8005996:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800599a:	d815      	bhi.n	80059c8 <UART_SetConfig+0x1c8>
 800599c:	2b00      	cmp	r3, #0
 800599e:	d003      	beq.n	80059a8 <UART_SetConfig+0x1a8>
 80059a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059a4:	d008      	beq.n	80059b8 <UART_SetConfig+0x1b8>
 80059a6:	e00f      	b.n	80059c8 <UART_SetConfig+0x1c8>
 80059a8:	2300      	movs	r3, #0
 80059aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059ae:	e012      	b.n	80059d6 <UART_SetConfig+0x1d6>
 80059b0:	2302      	movs	r3, #2
 80059b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059b6:	e00e      	b.n	80059d6 <UART_SetConfig+0x1d6>
 80059b8:	2304      	movs	r3, #4
 80059ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059be:	e00a      	b.n	80059d6 <UART_SetConfig+0x1d6>
 80059c0:	2308      	movs	r3, #8
 80059c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059c6:	e006      	b.n	80059d6 <UART_SetConfig+0x1d6>
 80059c8:	2310      	movs	r3, #16
 80059ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059ce:	e002      	b.n	80059d6 <UART_SetConfig+0x1d6>
 80059d0:	2310      	movs	r3, #16
 80059d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a2a      	ldr	r2, [pc, #168]	; (8005a84 <UART_SetConfig+0x284>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	f040 80a4 	bne.w	8005b2a <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80059e2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80059e6:	2b08      	cmp	r3, #8
 80059e8:	d823      	bhi.n	8005a32 <UART_SetConfig+0x232>
 80059ea:	a201      	add	r2, pc, #4	; (adr r2, 80059f0 <UART_SetConfig+0x1f0>)
 80059ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059f0:	08005a15 	.word	0x08005a15
 80059f4:	08005a33 	.word	0x08005a33
 80059f8:	08005a1d 	.word	0x08005a1d
 80059fc:	08005a33 	.word	0x08005a33
 8005a00:	08005a23 	.word	0x08005a23
 8005a04:	08005a33 	.word	0x08005a33
 8005a08:	08005a33 	.word	0x08005a33
 8005a0c:	08005a33 	.word	0x08005a33
 8005a10:	08005a2b 	.word	0x08005a2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a14:	f7fd ff4a 	bl	80038ac <HAL_RCC_GetPCLK1Freq>
 8005a18:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005a1a:	e010      	b.n	8005a3e <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a1c:	4b1c      	ldr	r3, [pc, #112]	; (8005a90 <UART_SetConfig+0x290>)
 8005a1e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005a20:	e00d      	b.n	8005a3e <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a22:	f7fd fe8f 	bl	8003744 <HAL_RCC_GetSysClockFreq>
 8005a26:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005a28:	e009      	b.n	8005a3e <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a2e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005a30:	e005      	b.n	8005a3e <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8005a32:	2300      	movs	r3, #0
 8005a34:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005a36:	2301      	movs	r3, #1
 8005a38:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005a3c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	f000 8137 	beq.w	8005cb4 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a4a:	4a12      	ldr	r2, [pc, #72]	; (8005a94 <UART_SetConfig+0x294>)
 8005a4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a50:	461a      	mov	r2, r3
 8005a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a54:	fbb3 f3f2 	udiv	r3, r3, r2
 8005a58:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	685a      	ldr	r2, [r3, #4]
 8005a5e:	4613      	mov	r3, r2
 8005a60:	005b      	lsls	r3, r3, #1
 8005a62:	4413      	add	r3, r2
 8005a64:	69ba      	ldr	r2, [r7, #24]
 8005a66:	429a      	cmp	r2, r3
 8005a68:	d305      	bcc.n	8005a76 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005a70:	69ba      	ldr	r2, [r7, #24]
 8005a72:	429a      	cmp	r2, r3
 8005a74:	d910      	bls.n	8005a98 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8005a76:	2301      	movs	r3, #1
 8005a78:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005a7c:	e11a      	b.n	8005cb4 <UART_SetConfig+0x4b4>
 8005a7e:	bf00      	nop
 8005a80:	cfff69f3 	.word	0xcfff69f3
 8005a84:	40008000 	.word	0x40008000
 8005a88:	40013800 	.word	0x40013800
 8005a8c:	40004400 	.word	0x40004400
 8005a90:	00f42400 	.word	0x00f42400
 8005a94:	0800c86c 	.word	0x0800c86c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	60bb      	str	r3, [r7, #8]
 8005a9e:	60fa      	str	r2, [r7, #12]
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa4:	4a8e      	ldr	r2, [pc, #568]	; (8005ce0 <UART_SetConfig+0x4e0>)
 8005aa6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005aaa:	b29b      	uxth	r3, r3
 8005aac:	2200      	movs	r2, #0
 8005aae:	603b      	str	r3, [r7, #0]
 8005ab0:	607a      	str	r2, [r7, #4]
 8005ab2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ab6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005aba:	f7fa fb65 	bl	8000188 <__aeabi_uldivmod>
 8005abe:	4602      	mov	r2, r0
 8005ac0:	460b      	mov	r3, r1
 8005ac2:	4610      	mov	r0, r2
 8005ac4:	4619      	mov	r1, r3
 8005ac6:	f04f 0200 	mov.w	r2, #0
 8005aca:	f04f 0300 	mov.w	r3, #0
 8005ace:	020b      	lsls	r3, r1, #8
 8005ad0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005ad4:	0202      	lsls	r2, r0, #8
 8005ad6:	6979      	ldr	r1, [r7, #20]
 8005ad8:	6849      	ldr	r1, [r1, #4]
 8005ada:	0849      	lsrs	r1, r1, #1
 8005adc:	2000      	movs	r0, #0
 8005ade:	460c      	mov	r4, r1
 8005ae0:	4605      	mov	r5, r0
 8005ae2:	eb12 0804 	adds.w	r8, r2, r4
 8005ae6:	eb43 0905 	adc.w	r9, r3, r5
 8005aea:	697b      	ldr	r3, [r7, #20]
 8005aec:	685b      	ldr	r3, [r3, #4]
 8005aee:	2200      	movs	r2, #0
 8005af0:	469a      	mov	sl, r3
 8005af2:	4693      	mov	fp, r2
 8005af4:	4652      	mov	r2, sl
 8005af6:	465b      	mov	r3, fp
 8005af8:	4640      	mov	r0, r8
 8005afa:	4649      	mov	r1, r9
 8005afc:	f7fa fb44 	bl	8000188 <__aeabi_uldivmod>
 8005b00:	4602      	mov	r2, r0
 8005b02:	460b      	mov	r3, r1
 8005b04:	4613      	mov	r3, r2
 8005b06:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005b08:	6a3b      	ldr	r3, [r7, #32]
 8005b0a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b0e:	d308      	bcc.n	8005b22 <UART_SetConfig+0x322>
 8005b10:	6a3b      	ldr	r3, [r7, #32]
 8005b12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b16:	d204      	bcs.n	8005b22 <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	6a3a      	ldr	r2, [r7, #32]
 8005b1e:	60da      	str	r2, [r3, #12]
 8005b20:	e0c8      	b.n	8005cb4 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8005b22:	2301      	movs	r3, #1
 8005b24:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005b28:	e0c4      	b.n	8005cb4 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	69db      	ldr	r3, [r3, #28]
 8005b2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b32:	d167      	bne.n	8005c04 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8005b34:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005b38:	2b08      	cmp	r3, #8
 8005b3a:	d828      	bhi.n	8005b8e <UART_SetConfig+0x38e>
 8005b3c:	a201      	add	r2, pc, #4	; (adr r2, 8005b44 <UART_SetConfig+0x344>)
 8005b3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b42:	bf00      	nop
 8005b44:	08005b69 	.word	0x08005b69
 8005b48:	08005b71 	.word	0x08005b71
 8005b4c:	08005b79 	.word	0x08005b79
 8005b50:	08005b8f 	.word	0x08005b8f
 8005b54:	08005b7f 	.word	0x08005b7f
 8005b58:	08005b8f 	.word	0x08005b8f
 8005b5c:	08005b8f 	.word	0x08005b8f
 8005b60:	08005b8f 	.word	0x08005b8f
 8005b64:	08005b87 	.word	0x08005b87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b68:	f7fd fea0 	bl	80038ac <HAL_RCC_GetPCLK1Freq>
 8005b6c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005b6e:	e014      	b.n	8005b9a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b70:	f7fd feae 	bl	80038d0 <HAL_RCC_GetPCLK2Freq>
 8005b74:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005b76:	e010      	b.n	8005b9a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b78:	4b5a      	ldr	r3, [pc, #360]	; (8005ce4 <UART_SetConfig+0x4e4>)
 8005b7a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005b7c:	e00d      	b.n	8005b9a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b7e:	f7fd fde1 	bl	8003744 <HAL_RCC_GetSysClockFreq>
 8005b82:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005b84:	e009      	b.n	8005b9a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b8a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005b8c:	e005      	b.n	8005b9a <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005b92:	2301      	movs	r3, #1
 8005b94:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005b98:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	f000 8089 	beq.w	8005cb4 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba6:	4a4e      	ldr	r2, [pc, #312]	; (8005ce0 <UART_SetConfig+0x4e0>)
 8005ba8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005bac:	461a      	mov	r2, r3
 8005bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb0:	fbb3 f3f2 	udiv	r3, r3, r2
 8005bb4:	005a      	lsls	r2, r3, #1
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	085b      	lsrs	r3, r3, #1
 8005bbc:	441a      	add	r2, r3
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	685b      	ldr	r3, [r3, #4]
 8005bc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bc6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005bc8:	6a3b      	ldr	r3, [r7, #32]
 8005bca:	2b0f      	cmp	r3, #15
 8005bcc:	d916      	bls.n	8005bfc <UART_SetConfig+0x3fc>
 8005bce:	6a3b      	ldr	r3, [r7, #32]
 8005bd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bd4:	d212      	bcs.n	8005bfc <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005bd6:	6a3b      	ldr	r3, [r7, #32]
 8005bd8:	b29b      	uxth	r3, r3
 8005bda:	f023 030f 	bic.w	r3, r3, #15
 8005bde:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005be0:	6a3b      	ldr	r3, [r7, #32]
 8005be2:	085b      	lsrs	r3, r3, #1
 8005be4:	b29b      	uxth	r3, r3
 8005be6:	f003 0307 	and.w	r3, r3, #7
 8005bea:	b29a      	uxth	r2, r3
 8005bec:	8bfb      	ldrh	r3, [r7, #30]
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	8bfa      	ldrh	r2, [r7, #30]
 8005bf8:	60da      	str	r2, [r3, #12]
 8005bfa:	e05b      	b.n	8005cb4 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005c02:	e057      	b.n	8005cb4 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005c04:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005c08:	2b08      	cmp	r3, #8
 8005c0a:	d828      	bhi.n	8005c5e <UART_SetConfig+0x45e>
 8005c0c:	a201      	add	r2, pc, #4	; (adr r2, 8005c14 <UART_SetConfig+0x414>)
 8005c0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c12:	bf00      	nop
 8005c14:	08005c39 	.word	0x08005c39
 8005c18:	08005c41 	.word	0x08005c41
 8005c1c:	08005c49 	.word	0x08005c49
 8005c20:	08005c5f 	.word	0x08005c5f
 8005c24:	08005c4f 	.word	0x08005c4f
 8005c28:	08005c5f 	.word	0x08005c5f
 8005c2c:	08005c5f 	.word	0x08005c5f
 8005c30:	08005c5f 	.word	0x08005c5f
 8005c34:	08005c57 	.word	0x08005c57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c38:	f7fd fe38 	bl	80038ac <HAL_RCC_GetPCLK1Freq>
 8005c3c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005c3e:	e014      	b.n	8005c6a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c40:	f7fd fe46 	bl	80038d0 <HAL_RCC_GetPCLK2Freq>
 8005c44:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005c46:	e010      	b.n	8005c6a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c48:	4b26      	ldr	r3, [pc, #152]	; (8005ce4 <UART_SetConfig+0x4e4>)
 8005c4a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005c4c:	e00d      	b.n	8005c6a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c4e:	f7fd fd79 	bl	8003744 <HAL_RCC_GetSysClockFreq>
 8005c52:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005c54:	e009      	b.n	8005c6a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c5a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005c5c:	e005      	b.n	8005c6a <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005c62:	2301      	movs	r3, #1
 8005c64:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005c68:	bf00      	nop
    }

    if (pclk != 0U)
 8005c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d021      	beq.n	8005cb4 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c70:	697b      	ldr	r3, [r7, #20]
 8005c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c74:	4a1a      	ldr	r2, [pc, #104]	; (8005ce0 <UART_SetConfig+0x4e0>)
 8005c76:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c7a:	461a      	mov	r2, r3
 8005c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c7e:	fbb3 f2f2 	udiv	r2, r3, r2
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	085b      	lsrs	r3, r3, #1
 8005c88:	441a      	add	r2, r3
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c92:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c94:	6a3b      	ldr	r3, [r7, #32]
 8005c96:	2b0f      	cmp	r3, #15
 8005c98:	d909      	bls.n	8005cae <UART_SetConfig+0x4ae>
 8005c9a:	6a3b      	ldr	r3, [r7, #32]
 8005c9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ca0:	d205      	bcs.n	8005cae <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005ca2:	6a3b      	ldr	r3, [r7, #32]
 8005ca4:	b29a      	uxth	r2, r3
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	60da      	str	r2, [r3, #12]
 8005cac:	e002      	b.n	8005cb4 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8005cae:	2301      	movs	r3, #1
 8005cb0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005cd0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	3730      	adds	r7, #48	; 0x30
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005cde:	bf00      	nop
 8005ce0:	0800c86c 	.word	0x0800c86c
 8005ce4:	00f42400 	.word	0x00f42400

08005ce8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b083      	sub	sp, #12
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cf4:	f003 0301 	and.w	r3, r3, #1
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d00a      	beq.n	8005d12 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	430a      	orrs	r2, r1
 8005d10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d16:	f003 0302 	and.w	r3, r3, #2
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d00a      	beq.n	8005d34 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	685b      	ldr	r3, [r3, #4]
 8005d24:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	430a      	orrs	r2, r1
 8005d32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d38:	f003 0304 	and.w	r3, r3, #4
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d00a      	beq.n	8005d56 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	685b      	ldr	r3, [r3, #4]
 8005d46:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	430a      	orrs	r2, r1
 8005d54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d5a:	f003 0308 	and.w	r3, r3, #8
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d00a      	beq.n	8005d78 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	430a      	orrs	r2, r1
 8005d76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d7c:	f003 0310 	and.w	r3, r3, #16
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d00a      	beq.n	8005d9a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	689b      	ldr	r3, [r3, #8]
 8005d8a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	430a      	orrs	r2, r1
 8005d98:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d9e:	f003 0320 	and.w	r3, r3, #32
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d00a      	beq.n	8005dbc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	689b      	ldr	r3, [r3, #8]
 8005dac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	430a      	orrs	r2, r1
 8005dba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d01a      	beq.n	8005dfe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	430a      	orrs	r2, r1
 8005ddc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005de2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005de6:	d10a      	bne.n	8005dfe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	685b      	ldr	r3, [r3, #4]
 8005dee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	430a      	orrs	r2, r1
 8005dfc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d00a      	beq.n	8005e20 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	685b      	ldr	r3, [r3, #4]
 8005e10:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	430a      	orrs	r2, r1
 8005e1e:	605a      	str	r2, [r3, #4]
  }
}
 8005e20:	bf00      	nop
 8005e22:	370c      	adds	r7, #12
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bc80      	pop	{r7}
 8005e28:	4770      	bx	lr

08005e2a <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005e2a:	b580      	push	{r7, lr}
 8005e2c:	b086      	sub	sp, #24
 8005e2e:	af02      	add	r7, sp, #8
 8005e30:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2200      	movs	r2, #0
 8005e36:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005e3a:	f7fa fe51 	bl	8000ae0 <HAL_GetTick>
 8005e3e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f003 0308 	and.w	r3, r3, #8
 8005e4a:	2b08      	cmp	r3, #8
 8005e4c:	d10e      	bne.n	8005e6c <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e4e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005e52:	9300      	str	r3, [sp, #0]
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	2200      	movs	r2, #0
 8005e58:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005e5c:	6878      	ldr	r0, [r7, #4]
 8005e5e:	f000 f832 	bl	8005ec6 <UART_WaitOnFlagUntilTimeout>
 8005e62:	4603      	mov	r3, r0
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d001      	beq.n	8005e6c <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e68:	2303      	movs	r3, #3
 8005e6a:	e028      	b.n	8005ebe <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f003 0304 	and.w	r3, r3, #4
 8005e76:	2b04      	cmp	r3, #4
 8005e78:	d10e      	bne.n	8005e98 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e7a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005e7e:	9300      	str	r3, [sp, #0]
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	2200      	movs	r2, #0
 8005e84:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005e88:	6878      	ldr	r0, [r7, #4]
 8005e8a:	f000 f81c 	bl	8005ec6 <UART_WaitOnFlagUntilTimeout>
 8005e8e:	4603      	mov	r3, r0
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d001      	beq.n	8005e98 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e94:	2303      	movs	r3, #3
 8005e96:	e012      	b.n	8005ebe <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2220      	movs	r2, #32
 8005e9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2220      	movs	r2, #32
 8005ea4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005ebc:	2300      	movs	r3, #0
}
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	3710      	adds	r7, #16
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bd80      	pop	{r7, pc}

08005ec6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005ec6:	b580      	push	{r7, lr}
 8005ec8:	b09c      	sub	sp, #112	; 0x70
 8005eca:	af00      	add	r7, sp, #0
 8005ecc:	60f8      	str	r0, [r7, #12]
 8005ece:	60b9      	str	r1, [r7, #8]
 8005ed0:	603b      	str	r3, [r7, #0]
 8005ed2:	4613      	mov	r3, r2
 8005ed4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ed6:	e0a9      	b.n	800602c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ed8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005eda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ede:	f000 80a5 	beq.w	800602c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ee2:	f7fa fdfd 	bl	8000ae0 <HAL_GetTick>
 8005ee6:	4602      	mov	r2, r0
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	1ad3      	subs	r3, r2, r3
 8005eec:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005eee:	429a      	cmp	r2, r3
 8005ef0:	d302      	bcc.n	8005ef8 <UART_WaitOnFlagUntilTimeout+0x32>
 8005ef2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d140      	bne.n	8005f7a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005efe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f00:	e853 3f00 	ldrex	r3, [r3]
 8005f04:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005f06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f08:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005f0c:	667b      	str	r3, [r7, #100]	; 0x64
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	461a      	mov	r2, r3
 8005f14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f16:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005f18:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f1a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005f1c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005f1e:	e841 2300 	strex	r3, r2, [r1]
 8005f22:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005f24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d1e6      	bne.n	8005ef8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	3308      	adds	r3, #8
 8005f30:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f34:	e853 3f00 	ldrex	r3, [r3]
 8005f38:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f3c:	f023 0301 	bic.w	r3, r3, #1
 8005f40:	663b      	str	r3, [r7, #96]	; 0x60
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	3308      	adds	r3, #8
 8005f48:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005f4a:	64ba      	str	r2, [r7, #72]	; 0x48
 8005f4c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f4e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005f50:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f52:	e841 2300 	strex	r3, r2, [r1]
 8005f56:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005f58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d1e5      	bne.n	8005f2a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	2220      	movs	r2, #32
 8005f62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	2220      	movs	r2, #32
 8005f6a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	2200      	movs	r2, #0
 8005f72:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 8005f76:	2303      	movs	r3, #3
 8005f78:	e069      	b.n	800604e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f003 0304 	and.w	r3, r3, #4
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d051      	beq.n	800602c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	69db      	ldr	r3, [r3, #28]
 8005f8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f96:	d149      	bne.n	800602c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005fa0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005faa:	e853 3f00 	ldrex	r3, [r3]
 8005fae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005fb6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	461a      	mov	r2, r3
 8005fbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fc0:	637b      	str	r3, [r7, #52]	; 0x34
 8005fc2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fc4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005fc6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005fc8:	e841 2300 	strex	r3, r2, [r1]
 8005fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d1e6      	bne.n	8005fa2 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	3308      	adds	r3, #8
 8005fda:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	e853 3f00 	ldrex	r3, [r3]
 8005fe2:	613b      	str	r3, [r7, #16]
   return(result);
 8005fe4:	693b      	ldr	r3, [r7, #16]
 8005fe6:	f023 0301 	bic.w	r3, r3, #1
 8005fea:	66bb      	str	r3, [r7, #104]	; 0x68
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	3308      	adds	r3, #8
 8005ff2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005ff4:	623a      	str	r2, [r7, #32]
 8005ff6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ff8:	69f9      	ldr	r1, [r7, #28]
 8005ffa:	6a3a      	ldr	r2, [r7, #32]
 8005ffc:	e841 2300 	strex	r3, r2, [r1]
 8006000:	61bb      	str	r3, [r7, #24]
   return(result);
 8006002:	69bb      	ldr	r3, [r7, #24]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d1e5      	bne.n	8005fd4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	2220      	movs	r2, #32
 800600c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	2220      	movs	r2, #32
 8006014:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	2220      	movs	r2, #32
 800601c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	2200      	movs	r2, #0
 8006024:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8006028:	2303      	movs	r3, #3
 800602a:	e010      	b.n	800604e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	69da      	ldr	r2, [r3, #28]
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	4013      	ands	r3, r2
 8006036:	68ba      	ldr	r2, [r7, #8]
 8006038:	429a      	cmp	r2, r3
 800603a:	bf0c      	ite	eq
 800603c:	2301      	moveq	r3, #1
 800603e:	2300      	movne	r3, #0
 8006040:	b2db      	uxtb	r3, r3
 8006042:	461a      	mov	r2, r3
 8006044:	79fb      	ldrb	r3, [r7, #7]
 8006046:	429a      	cmp	r2, r3
 8006048:	f43f af46 	beq.w	8005ed8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800604c:	2300      	movs	r3, #0
}
 800604e:	4618      	mov	r0, r3
 8006050:	3770      	adds	r7, #112	; 0x70
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}
	...

08006058 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006058:	b480      	push	{r7}
 800605a:	b0a3      	sub	sp, #140	; 0x8c
 800605c:	af00      	add	r7, sp, #0
 800605e:	60f8      	str	r0, [r7, #12]
 8006060:	60b9      	str	r1, [r7, #8]
 8006062:	4613      	mov	r3, r2
 8006064:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	68ba      	ldr	r2, [r7, #8]
 800606a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	88fa      	ldrh	r2, [r7, #6]
 8006070:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	88fa      	ldrh	r2, [r7, #6]
 8006078:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	2200      	movs	r2, #0
 8006080:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	689b      	ldr	r3, [r3, #8]
 8006086:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800608a:	d10e      	bne.n	80060aa <UART_Start_Receive_IT+0x52>
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	691b      	ldr	r3, [r3, #16]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d105      	bne.n	80060a0 <UART_Start_Receive_IT+0x48>
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	f240 12ff 	movw	r2, #511	; 0x1ff
 800609a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800609e:	e02d      	b.n	80060fc <UART_Start_Receive_IT+0xa4>
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	22ff      	movs	r2, #255	; 0xff
 80060a4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80060a8:	e028      	b.n	80060fc <UART_Start_Receive_IT+0xa4>
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	689b      	ldr	r3, [r3, #8]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d10d      	bne.n	80060ce <UART_Start_Receive_IT+0x76>
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	691b      	ldr	r3, [r3, #16]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d104      	bne.n	80060c4 <UART_Start_Receive_IT+0x6c>
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	22ff      	movs	r2, #255	; 0xff
 80060be:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80060c2:	e01b      	b.n	80060fc <UART_Start_Receive_IT+0xa4>
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	227f      	movs	r2, #127	; 0x7f
 80060c8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80060cc:	e016      	b.n	80060fc <UART_Start_Receive_IT+0xa4>
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	689b      	ldr	r3, [r3, #8]
 80060d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80060d6:	d10d      	bne.n	80060f4 <UART_Start_Receive_IT+0x9c>
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	691b      	ldr	r3, [r3, #16]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d104      	bne.n	80060ea <UART_Start_Receive_IT+0x92>
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	227f      	movs	r2, #127	; 0x7f
 80060e4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80060e8:	e008      	b.n	80060fc <UART_Start_Receive_IT+0xa4>
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	223f      	movs	r2, #63	; 0x3f
 80060ee:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80060f2:	e003      	b.n	80060fc <UART_Start_Receive_IT+0xa4>
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	2200      	movs	r2, #0
 80060f8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	2200      	movs	r2, #0
 8006100:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	2222      	movs	r2, #34	; 0x22
 8006108:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	3308      	adds	r3, #8
 8006112:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006114:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006116:	e853 3f00 	ldrex	r3, [r3]
 800611a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800611c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800611e:	f043 0301 	orr.w	r3, r3, #1
 8006122:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	3308      	adds	r3, #8
 800612c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8006130:	673a      	str	r2, [r7, #112]	; 0x70
 8006132:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006134:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8006136:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8006138:	e841 2300 	strex	r3, r2, [r1]
 800613c:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800613e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006140:	2b00      	cmp	r3, #0
 8006142:	d1e3      	bne.n	800610c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006148:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800614c:	d14f      	bne.n	80061ee <UART_Start_Receive_IT+0x196>
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006154:	88fa      	ldrh	r2, [r7, #6]
 8006156:	429a      	cmp	r2, r3
 8006158:	d349      	bcc.n	80061ee <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	689b      	ldr	r3, [r3, #8]
 800615e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006162:	d107      	bne.n	8006174 <UART_Start_Receive_IT+0x11c>
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	691b      	ldr	r3, [r3, #16]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d103      	bne.n	8006174 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	4a46      	ldr	r2, [pc, #280]	; (8006288 <UART_Start_Receive_IT+0x230>)
 8006170:	675a      	str	r2, [r3, #116]	; 0x74
 8006172:	e002      	b.n	800617a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	4a45      	ldr	r2, [pc, #276]	; (800628c <UART_Start_Receive_IT+0x234>)
 8006178:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	691b      	ldr	r3, [r3, #16]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d01a      	beq.n	80061b8 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006188:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800618a:	e853 3f00 	ldrex	r3, [r3]
 800618e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006190:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006192:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006196:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	461a      	mov	r2, r3
 80061a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80061a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80061a6:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061a8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80061aa:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80061ac:	e841 2300 	strex	r3, r2, [r1]
 80061b0:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80061b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d1e4      	bne.n	8006182 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	3308      	adds	r3, #8
 80061be:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061c2:	e853 3f00 	ldrex	r3, [r3]
 80061c6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80061c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061ce:	67fb      	str	r3, [r7, #124]	; 0x7c
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	3308      	adds	r3, #8
 80061d6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80061d8:	64ba      	str	r2, [r7, #72]	; 0x48
 80061da:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061dc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80061de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80061e0:	e841 2300 	strex	r3, r2, [r1]
 80061e4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80061e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d1e5      	bne.n	80061b8 <UART_Start_Receive_IT+0x160>
 80061ec:	e046      	b.n	800627c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	689b      	ldr	r3, [r3, #8]
 80061f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061f6:	d107      	bne.n	8006208 <UART_Start_Receive_IT+0x1b0>
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	691b      	ldr	r3, [r3, #16]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d103      	bne.n	8006208 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	4a23      	ldr	r2, [pc, #140]	; (8006290 <UART_Start_Receive_IT+0x238>)
 8006204:	675a      	str	r2, [r3, #116]	; 0x74
 8006206:	e002      	b.n	800620e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	4a22      	ldr	r2, [pc, #136]	; (8006294 <UART_Start_Receive_IT+0x23c>)
 800620c:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	691b      	ldr	r3, [r3, #16]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d019      	beq.n	800624a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800621c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800621e:	e853 3f00 	ldrex	r3, [r3]
 8006222:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006226:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800622a:	677b      	str	r3, [r7, #116]	; 0x74
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	461a      	mov	r2, r3
 8006232:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006234:	637b      	str	r3, [r7, #52]	; 0x34
 8006236:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006238:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800623a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800623c:	e841 2300 	strex	r3, r2, [r1]
 8006240:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006244:	2b00      	cmp	r3, #0
 8006246:	d1e6      	bne.n	8006216 <UART_Start_Receive_IT+0x1be>
 8006248:	e018      	b.n	800627c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006250:	697b      	ldr	r3, [r7, #20]
 8006252:	e853 3f00 	ldrex	r3, [r3]
 8006256:	613b      	str	r3, [r7, #16]
   return(result);
 8006258:	693b      	ldr	r3, [r7, #16]
 800625a:	f043 0320 	orr.w	r3, r3, #32
 800625e:	67bb      	str	r3, [r7, #120]	; 0x78
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	461a      	mov	r2, r3
 8006266:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006268:	623b      	str	r3, [r7, #32]
 800626a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800626c:	69f9      	ldr	r1, [r7, #28]
 800626e:	6a3a      	ldr	r2, [r7, #32]
 8006270:	e841 2300 	strex	r3, r2, [r1]
 8006274:	61bb      	str	r3, [r7, #24]
   return(result);
 8006276:	69bb      	ldr	r3, [r7, #24]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d1e6      	bne.n	800624a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800627c:	2300      	movs	r3, #0
}
 800627e:	4618      	mov	r0, r3
 8006280:	378c      	adds	r7, #140	; 0x8c
 8006282:	46bd      	mov	sp, r7
 8006284:	bc80      	pop	{r7}
 8006286:	4770      	bx	lr
 8006288:	08006c6d 	.word	0x08006c6d
 800628c:	0800690d 	.word	0x0800690d
 8006290:	08006755 	.word	0x08006755
 8006294:	0800659d 	.word	0x0800659d

08006298 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006298:	b480      	push	{r7}
 800629a:	b08f      	sub	sp, #60	; 0x3c
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062a6:	6a3b      	ldr	r3, [r7, #32]
 80062a8:	e853 3f00 	ldrex	r3, [r3]
 80062ac:	61fb      	str	r3, [r7, #28]
   return(result);
 80062ae:	69fb      	ldr	r3, [r7, #28]
 80062b0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80062b4:	637b      	str	r3, [r7, #52]	; 0x34
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	461a      	mov	r2, r3
 80062bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80062c0:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80062c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80062c6:	e841 2300 	strex	r3, r2, [r1]
 80062ca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80062cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d1e6      	bne.n	80062a0 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	3308      	adds	r3, #8
 80062d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	e853 3f00 	ldrex	r3, [r3]
 80062e0:	60bb      	str	r3, [r7, #8]
   return(result);
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80062e8:	633b      	str	r3, [r7, #48]	; 0x30
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	3308      	adds	r3, #8
 80062f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062f2:	61ba      	str	r2, [r7, #24]
 80062f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062f6:	6979      	ldr	r1, [r7, #20]
 80062f8:	69ba      	ldr	r2, [r7, #24]
 80062fa:	e841 2300 	strex	r3, r2, [r1]
 80062fe:	613b      	str	r3, [r7, #16]
   return(result);
 8006300:	693b      	ldr	r3, [r7, #16]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d1e5      	bne.n	80062d2 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2220      	movs	r2, #32
 800630a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800630e:	bf00      	nop
 8006310:	373c      	adds	r7, #60	; 0x3c
 8006312:	46bd      	mov	sp, r7
 8006314:	bc80      	pop	{r7}
 8006316:	4770      	bx	lr

08006318 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006318:	b480      	push	{r7}
 800631a:	b095      	sub	sp, #84	; 0x54
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006326:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006328:	e853 3f00 	ldrex	r3, [r3]
 800632c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800632e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006330:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006334:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	461a      	mov	r2, r3
 800633c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800633e:	643b      	str	r3, [r7, #64]	; 0x40
 8006340:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006342:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006344:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006346:	e841 2300 	strex	r3, r2, [r1]
 800634a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800634c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800634e:	2b00      	cmp	r3, #0
 8006350:	d1e6      	bne.n	8006320 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	3308      	adds	r3, #8
 8006358:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800635a:	6a3b      	ldr	r3, [r7, #32]
 800635c:	e853 3f00 	ldrex	r3, [r3]
 8006360:	61fb      	str	r3, [r7, #28]
   return(result);
 8006362:	69fb      	ldr	r3, [r7, #28]
 8006364:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006368:	f023 0301 	bic.w	r3, r3, #1
 800636c:	64bb      	str	r3, [r7, #72]	; 0x48
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	3308      	adds	r3, #8
 8006374:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006376:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006378:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800637a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800637c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800637e:	e841 2300 	strex	r3, r2, [r1]
 8006382:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006386:	2b00      	cmp	r3, #0
 8006388:	d1e3      	bne.n	8006352 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800638e:	2b01      	cmp	r3, #1
 8006390:	d118      	bne.n	80063c4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	e853 3f00 	ldrex	r3, [r3]
 800639e:	60bb      	str	r3, [r7, #8]
   return(result);
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	f023 0310 	bic.w	r3, r3, #16
 80063a6:	647b      	str	r3, [r7, #68]	; 0x44
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	461a      	mov	r2, r3
 80063ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063b0:	61bb      	str	r3, [r7, #24]
 80063b2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063b4:	6979      	ldr	r1, [r7, #20]
 80063b6:	69ba      	ldr	r2, [r7, #24]
 80063b8:	e841 2300 	strex	r3, r2, [r1]
 80063bc:	613b      	str	r3, [r7, #16]
   return(result);
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d1e6      	bne.n	8006392 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2220      	movs	r2, #32
 80063c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2200      	movs	r2, #0
 80063d0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2200      	movs	r2, #0
 80063d6:	675a      	str	r2, [r3, #116]	; 0x74
}
 80063d8:	bf00      	nop
 80063da:	3754      	adds	r7, #84	; 0x54
 80063dc:	46bd      	mov	sp, r7
 80063de:	bc80      	pop	{r7}
 80063e0:	4770      	bx	lr

080063e2 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80063e2:	b580      	push	{r7, lr}
 80063e4:	b090      	sub	sp, #64	; 0x40
 80063e6:	af00      	add	r7, sp, #0
 80063e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063ee:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f003 0320 	and.w	r3, r3, #32
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d137      	bne.n	800646e <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 80063fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006400:	2200      	movs	r2, #0
 8006402:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006406:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	3308      	adds	r3, #8
 800640c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800640e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006410:	e853 3f00 	ldrex	r3, [r3]
 8006414:	623b      	str	r3, [r7, #32]
   return(result);
 8006416:	6a3b      	ldr	r3, [r7, #32]
 8006418:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800641c:	63bb      	str	r3, [r7, #56]	; 0x38
 800641e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	3308      	adds	r3, #8
 8006424:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006426:	633a      	str	r2, [r7, #48]	; 0x30
 8006428:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800642a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800642c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800642e:	e841 2300 	strex	r3, r2, [r1]
 8006432:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006436:	2b00      	cmp	r3, #0
 8006438:	d1e5      	bne.n	8006406 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800643a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006440:	693b      	ldr	r3, [r7, #16]
 8006442:	e853 3f00 	ldrex	r3, [r3]
 8006446:	60fb      	str	r3, [r7, #12]
   return(result);
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800644e:	637b      	str	r3, [r7, #52]	; 0x34
 8006450:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	461a      	mov	r2, r3
 8006456:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006458:	61fb      	str	r3, [r7, #28]
 800645a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800645c:	69b9      	ldr	r1, [r7, #24]
 800645e:	69fa      	ldr	r2, [r7, #28]
 8006460:	e841 2300 	strex	r3, r2, [r1]
 8006464:	617b      	str	r3, [r7, #20]
   return(result);
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d1e6      	bne.n	800643a <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800646c:	e002      	b.n	8006474 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800646e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006470:	f7fa fff0 	bl	8001454 <HAL_UART_TxCpltCallback>
}
 8006474:	bf00      	nop
 8006476:	3740      	adds	r7, #64	; 0x40
 8006478:	46bd      	mov	sp, r7
 800647a:	bd80      	pop	{r7, pc}

0800647c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b084      	sub	sp, #16
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006488:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800648a:	68f8      	ldr	r0, [r7, #12]
 800648c:	f7ff f99a 	bl	80057c4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006490:	bf00      	nop
 8006492:	3710      	adds	r7, #16
 8006494:	46bd      	mov	sp, r7
 8006496:	bd80      	pop	{r7, pc}

08006498 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b086      	sub	sp, #24
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064a4:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064ac:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80064ae:	697b      	ldr	r3, [r7, #20]
 80064b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80064b4:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	689b      	ldr	r3, [r3, #8]
 80064bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064c0:	2b80      	cmp	r3, #128	; 0x80
 80064c2:	d109      	bne.n	80064d8 <UART_DMAError+0x40>
 80064c4:	693b      	ldr	r3, [r7, #16]
 80064c6:	2b21      	cmp	r3, #33	; 0x21
 80064c8:	d106      	bne.n	80064d8 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80064ca:	697b      	ldr	r3, [r7, #20]
 80064cc:	2200      	movs	r2, #0
 80064ce:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 80064d2:	6978      	ldr	r0, [r7, #20]
 80064d4:	f7ff fee0 	bl	8006298 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80064d8:	697b      	ldr	r3, [r7, #20]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	689b      	ldr	r3, [r3, #8]
 80064de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064e2:	2b40      	cmp	r3, #64	; 0x40
 80064e4:	d109      	bne.n	80064fa <UART_DMAError+0x62>
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	2b22      	cmp	r3, #34	; 0x22
 80064ea:	d106      	bne.n	80064fa <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80064ec:	697b      	ldr	r3, [r7, #20]
 80064ee:	2200      	movs	r2, #0
 80064f0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 80064f4:	6978      	ldr	r0, [r7, #20]
 80064f6:	f7ff ff0f 	bl	8006318 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006500:	f043 0210 	orr.w	r2, r3, #16
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800650a:	6978      	ldr	r0, [r7, #20]
 800650c:	f7ff f963 	bl	80057d6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006510:	bf00      	nop
 8006512:	3718      	adds	r7, #24
 8006514:	46bd      	mov	sp, r7
 8006516:	bd80      	pop	{r7, pc}

08006518 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b084      	sub	sp, #16
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006524:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	2200      	movs	r2, #0
 800652a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	2200      	movs	r2, #0
 8006532:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006536:	68f8      	ldr	r0, [r7, #12]
 8006538:	f7ff f94d 	bl	80057d6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800653c:	bf00      	nop
 800653e:	3710      	adds	r7, #16
 8006540:	46bd      	mov	sp, r7
 8006542:	bd80      	pop	{r7, pc}

08006544 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b088      	sub	sp, #32
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	e853 3f00 	ldrex	r3, [r3]
 8006558:	60bb      	str	r3, [r7, #8]
   return(result);
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006560:	61fb      	str	r3, [r7, #28]
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	461a      	mov	r2, r3
 8006568:	69fb      	ldr	r3, [r7, #28]
 800656a:	61bb      	str	r3, [r7, #24]
 800656c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800656e:	6979      	ldr	r1, [r7, #20]
 8006570:	69ba      	ldr	r2, [r7, #24]
 8006572:	e841 2300 	strex	r3, r2, [r1]
 8006576:	613b      	str	r3, [r7, #16]
   return(result);
 8006578:	693b      	ldr	r3, [r7, #16]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d1e6      	bne.n	800654c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2220      	movs	r2, #32
 8006582:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2200      	movs	r2, #0
 800658a:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f7fa ff61 	bl	8001454 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006592:	bf00      	nop
 8006594:	3720      	adds	r7, #32
 8006596:	46bd      	mov	sp, r7
 8006598:	bd80      	pop	{r7, pc}
	...

0800659c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b09c      	sub	sp, #112	; 0x70
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80065aa:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80065b4:	2b22      	cmp	r3, #34	; 0x22
 80065b6:	f040 80be 	bne.w	8006736 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065c0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80065c4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80065c8:	b2d9      	uxtb	r1, r3
 80065ca:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80065ce:	b2da      	uxtb	r2, r3
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065d4:	400a      	ands	r2, r1
 80065d6:	b2d2      	uxtb	r2, r2
 80065d8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065de:	1c5a      	adds	r2, r3, #1
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80065ea:	b29b      	uxth	r3, r3
 80065ec:	3b01      	subs	r3, #1
 80065ee:	b29a      	uxth	r2, r3
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80065fc:	b29b      	uxth	r3, r3
 80065fe:	2b00      	cmp	r3, #0
 8006600:	f040 80a1 	bne.w	8006746 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800660a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800660c:	e853 3f00 	ldrex	r3, [r3]
 8006610:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006612:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006614:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006618:	66bb      	str	r3, [r7, #104]	; 0x68
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	461a      	mov	r2, r3
 8006620:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006622:	65bb      	str	r3, [r7, #88]	; 0x58
 8006624:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006626:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006628:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800662a:	e841 2300 	strex	r3, r2, [r1]
 800662e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006630:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006632:	2b00      	cmp	r3, #0
 8006634:	d1e6      	bne.n	8006604 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	3308      	adds	r3, #8
 800663c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800663e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006640:	e853 3f00 	ldrex	r3, [r3]
 8006644:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006646:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006648:	f023 0301 	bic.w	r3, r3, #1
 800664c:	667b      	str	r3, [r7, #100]	; 0x64
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	3308      	adds	r3, #8
 8006654:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006656:	647a      	str	r2, [r7, #68]	; 0x44
 8006658:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800665a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800665c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800665e:	e841 2300 	strex	r3, r2, [r1]
 8006662:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006664:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006666:	2b00      	cmp	r3, #0
 8006668:	d1e5      	bne.n	8006636 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2220      	movs	r2, #32
 800666e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2200      	movs	r2, #0
 8006676:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2200      	movs	r2, #0
 800667c:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4a33      	ldr	r2, [pc, #204]	; (8006750 <UART_RxISR_8BIT+0x1b4>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d01f      	beq.n	80066c8 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	685b      	ldr	r3, [r3, #4]
 800668e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006692:	2b00      	cmp	r3, #0
 8006694:	d018      	beq.n	80066c8 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800669c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800669e:	e853 3f00 	ldrex	r3, [r3]
 80066a2:	623b      	str	r3, [r7, #32]
   return(result);
 80066a4:	6a3b      	ldr	r3, [r7, #32]
 80066a6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80066aa:	663b      	str	r3, [r7, #96]	; 0x60
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	461a      	mov	r2, r3
 80066b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80066b4:	633b      	str	r3, [r7, #48]	; 0x30
 80066b6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066b8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80066ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066bc:	e841 2300 	strex	r3, r2, [r1]
 80066c0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80066c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d1e6      	bne.n	8006696 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066cc:	2b01      	cmp	r3, #1
 80066ce:	d12e      	bne.n	800672e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2200      	movs	r2, #0
 80066d4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066dc:	693b      	ldr	r3, [r7, #16]
 80066de:	e853 3f00 	ldrex	r3, [r3]
 80066e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	f023 0310 	bic.w	r3, r3, #16
 80066ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	461a      	mov	r2, r3
 80066f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80066f4:	61fb      	str	r3, [r7, #28]
 80066f6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066f8:	69b9      	ldr	r1, [r7, #24]
 80066fa:	69fa      	ldr	r2, [r7, #28]
 80066fc:	e841 2300 	strex	r3, r2, [r1]
 8006700:	617b      	str	r3, [r7, #20]
   return(result);
 8006702:	697b      	ldr	r3, [r7, #20]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d1e6      	bne.n	80066d6 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	69db      	ldr	r3, [r3, #28]
 800670e:	f003 0310 	and.w	r3, r3, #16
 8006712:	2b10      	cmp	r3, #16
 8006714:	d103      	bne.n	800671e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	2210      	movs	r2, #16
 800671c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006724:	4619      	mov	r1, r3
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	f7ff f85e 	bl	80057e8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800672c:	e00b      	b.n	8006746 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	f7fa fea6 	bl	8001480 <HAL_UART_RxCpltCallback>
}
 8006734:	e007      	b.n	8006746 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	699a      	ldr	r2, [r3, #24]
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f042 0208 	orr.w	r2, r2, #8
 8006744:	619a      	str	r2, [r3, #24]
}
 8006746:	bf00      	nop
 8006748:	3770      	adds	r7, #112	; 0x70
 800674a:	46bd      	mov	sp, r7
 800674c:	bd80      	pop	{r7, pc}
 800674e:	bf00      	nop
 8006750:	40008000 	.word	0x40008000

08006754 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b09c      	sub	sp, #112	; 0x70
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006762:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800676c:	2b22      	cmp	r3, #34	; 0x22
 800676e:	f040 80be 	bne.w	80068ee <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006778:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006780:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8006782:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8006786:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800678a:	4013      	ands	r3, r2
 800678c:	b29a      	uxth	r2, r3
 800678e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006790:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006796:	1c9a      	adds	r2, r3, #2
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80067a2:	b29b      	uxth	r3, r3
 80067a4:	3b01      	subs	r3, #1
 80067a6:	b29a      	uxth	r2, r3
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80067b4:	b29b      	uxth	r3, r3
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	f040 80a1 	bne.w	80068fe <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067c4:	e853 3f00 	ldrex	r3, [r3]
 80067c8:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80067ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80067cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80067d0:	667b      	str	r3, [r7, #100]	; 0x64
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	461a      	mov	r2, r3
 80067d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80067da:	657b      	str	r3, [r7, #84]	; 0x54
 80067dc:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067de:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80067e0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80067e2:	e841 2300 	strex	r3, r2, [r1]
 80067e6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80067e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d1e6      	bne.n	80067bc <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	3308      	adds	r3, #8
 80067f4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067f8:	e853 3f00 	ldrex	r3, [r3]
 80067fc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80067fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006800:	f023 0301 	bic.w	r3, r3, #1
 8006804:	663b      	str	r3, [r7, #96]	; 0x60
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	3308      	adds	r3, #8
 800680c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800680e:	643a      	str	r2, [r7, #64]	; 0x40
 8006810:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006812:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006814:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006816:	e841 2300 	strex	r3, r2, [r1]
 800681a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800681c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800681e:	2b00      	cmp	r3, #0
 8006820:	d1e5      	bne.n	80067ee <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2220      	movs	r2, #32
 8006826:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2200      	movs	r2, #0
 800682e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2200      	movs	r2, #0
 8006834:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	4a33      	ldr	r2, [pc, #204]	; (8006908 <UART_RxISR_16BIT+0x1b4>)
 800683c:	4293      	cmp	r3, r2
 800683e:	d01f      	beq.n	8006880 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	685b      	ldr	r3, [r3, #4]
 8006846:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800684a:	2b00      	cmp	r3, #0
 800684c:	d018      	beq.n	8006880 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006854:	6a3b      	ldr	r3, [r7, #32]
 8006856:	e853 3f00 	ldrex	r3, [r3]
 800685a:	61fb      	str	r3, [r7, #28]
   return(result);
 800685c:	69fb      	ldr	r3, [r7, #28]
 800685e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006862:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	461a      	mov	r2, r3
 800686a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800686c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800686e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006870:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006872:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006874:	e841 2300 	strex	r3, r2, [r1]
 8006878:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800687a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800687c:	2b00      	cmp	r3, #0
 800687e:	d1e6      	bne.n	800684e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006884:	2b01      	cmp	r3, #1
 8006886:	d12e      	bne.n	80068e6 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2200      	movs	r2, #0
 800688c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	e853 3f00 	ldrex	r3, [r3]
 800689a:	60bb      	str	r3, [r7, #8]
   return(result);
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	f023 0310 	bic.w	r3, r3, #16
 80068a2:	65bb      	str	r3, [r7, #88]	; 0x58
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	461a      	mov	r2, r3
 80068aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80068ac:	61bb      	str	r3, [r7, #24]
 80068ae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068b0:	6979      	ldr	r1, [r7, #20]
 80068b2:	69ba      	ldr	r2, [r7, #24]
 80068b4:	e841 2300 	strex	r3, r2, [r1]
 80068b8:	613b      	str	r3, [r7, #16]
   return(result);
 80068ba:	693b      	ldr	r3, [r7, #16]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d1e6      	bne.n	800688e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	69db      	ldr	r3, [r3, #28]
 80068c6:	f003 0310 	and.w	r3, r3, #16
 80068ca:	2b10      	cmp	r3, #16
 80068cc:	d103      	bne.n	80068d6 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	2210      	movs	r2, #16
 80068d4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80068dc:	4619      	mov	r1, r3
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	f7fe ff82 	bl	80057e8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80068e4:	e00b      	b.n	80068fe <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80068e6:	6878      	ldr	r0, [r7, #4]
 80068e8:	f7fa fdca 	bl	8001480 <HAL_UART_RxCpltCallback>
}
 80068ec:	e007      	b.n	80068fe <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	699a      	ldr	r2, [r3, #24]
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f042 0208 	orr.w	r2, r2, #8
 80068fc:	619a      	str	r2, [r3, #24]
}
 80068fe:	bf00      	nop
 8006900:	3770      	adds	r7, #112	; 0x70
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}
 8006906:	bf00      	nop
 8006908:	40008000 	.word	0x40008000

0800690c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b0ac      	sub	sp, #176	; 0xb0
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800691a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	69db      	ldr	r3, [r3, #28]
 8006924:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	689b      	ldr	r3, [r3, #8]
 8006938:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006942:	2b22      	cmp	r3, #34	; 0x22
 8006944:	f040 8182 	bne.w	8006c4c <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800694e:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006952:	e125      	b.n	8006ba0 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800695a:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800695e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8006962:	b2d9      	uxtb	r1, r3
 8006964:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006968:	b2da      	uxtb	r2, r3
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800696e:	400a      	ands	r2, r1
 8006970:	b2d2      	uxtb	r2, r2
 8006972:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006978:	1c5a      	adds	r2, r3, #1
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006984:	b29b      	uxth	r3, r3
 8006986:	3b01      	subs	r3, #1
 8006988:	b29a      	uxth	r2, r3
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	69db      	ldr	r3, [r3, #28]
 8006996:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800699a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800699e:	f003 0307 	and.w	r3, r3, #7
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d053      	beq.n	8006a4e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80069a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80069aa:	f003 0301 	and.w	r3, r3, #1
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d011      	beq.n	80069d6 <UART_RxISR_8BIT_FIFOEN+0xca>
 80069b2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80069b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d00b      	beq.n	80069d6 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	2201      	movs	r2, #1
 80069c4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069cc:	f043 0201 	orr.w	r2, r3, #1
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80069d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80069da:	f003 0302 	and.w	r3, r3, #2
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d011      	beq.n	8006a06 <UART_RxISR_8BIT_FIFOEN+0xfa>
 80069e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80069e6:	f003 0301 	and.w	r3, r3, #1
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d00b      	beq.n	8006a06 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	2202      	movs	r2, #2
 80069f4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069fc:	f043 0204 	orr.w	r2, r3, #4
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006a06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006a0a:	f003 0304 	and.w	r3, r3, #4
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d011      	beq.n	8006a36 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8006a12:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006a16:	f003 0301 	and.w	r3, r3, #1
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d00b      	beq.n	8006a36 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	2204      	movs	r2, #4
 8006a24:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a2c:	f043 0202 	orr.w	r2, r3, #2
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d006      	beq.n	8006a4e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006a40:	6878      	ldr	r0, [r7, #4]
 8006a42:	f7fe fec8 	bl	80057d6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006a54:	b29b      	uxth	r3, r3
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	f040 80a2 	bne.w	8006ba0 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a62:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006a64:	e853 3f00 	ldrex	r3, [r3]
 8006a68:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8006a6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a70:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	461a      	mov	r2, r3
 8006a7a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006a7e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006a80:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a82:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8006a84:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8006a86:	e841 2300 	strex	r3, r2, [r1]
 8006a8a:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8006a8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d1e4      	bne.n	8006a5c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	3308      	adds	r3, #8
 8006a98:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a9c:	e853 3f00 	ldrex	r3, [r3]
 8006aa0:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8006aa2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006aa4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006aa8:	f023 0301 	bic.w	r3, r3, #1
 8006aac:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	3308      	adds	r3, #8
 8006ab6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006aba:	66ba      	str	r2, [r7, #104]	; 0x68
 8006abc:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006abe:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8006ac0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006ac2:	e841 2300 	strex	r3, r2, [r1]
 8006ac6:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8006ac8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d1e1      	bne.n	8006a92 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2220      	movs	r2, #32
 8006ad2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2200      	movs	r2, #0
 8006ada:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4a5f      	ldr	r2, [pc, #380]	; (8006c64 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d021      	beq.n	8006b30 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	685b      	ldr	r3, [r3, #4]
 8006af2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d01a      	beq.n	8006b30 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b02:	e853 3f00 	ldrex	r3, [r3]
 8006b06:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006b08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b0a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006b0e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	461a      	mov	r2, r3
 8006b18:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006b1c:	657b      	str	r3, [r7, #84]	; 0x54
 8006b1e:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b20:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006b22:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006b24:	e841 2300 	strex	r3, r2, [r1]
 8006b28:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006b2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d1e4      	bne.n	8006afa <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b34:	2b01      	cmp	r3, #1
 8006b36:	d130      	bne.n	8006b9a <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b46:	e853 3f00 	ldrex	r3, [r3]
 8006b4a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b4e:	f023 0310 	bic.w	r3, r3, #16
 8006b52:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	461a      	mov	r2, r3
 8006b5c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006b60:	643b      	str	r3, [r7, #64]	; 0x40
 8006b62:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b64:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006b66:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006b68:	e841 2300 	strex	r3, r2, [r1]
 8006b6c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d1e4      	bne.n	8006b3e <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	69db      	ldr	r3, [r3, #28]
 8006b7a:	f003 0310 	and.w	r3, r3, #16
 8006b7e:	2b10      	cmp	r3, #16
 8006b80:	d103      	bne.n	8006b8a <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	2210      	movs	r2, #16
 8006b88:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006b90:	4619      	mov	r1, r3
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	f7fe fe28 	bl	80057e8 <HAL_UARTEx_RxEventCallback>
 8006b98:	e002      	b.n	8006ba0 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	f7fa fc70 	bl	8001480 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006ba0:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d006      	beq.n	8006bb6 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8006ba8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006bac:	f003 0320 	and.w	r3, r3, #32
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	f47f aecf 	bne.w	8006954 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006bbc:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006bc0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d049      	beq.n	8006c5c <UART_RxISR_8BIT_FIFOEN+0x350>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006bce:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8006bd2:	429a      	cmp	r2, r3
 8006bd4:	d242      	bcs.n	8006c5c <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	3308      	adds	r3, #8
 8006bdc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bde:	6a3b      	ldr	r3, [r7, #32]
 8006be0:	e853 3f00 	ldrex	r3, [r3]
 8006be4:	61fb      	str	r3, [r7, #28]
   return(result);
 8006be6:	69fb      	ldr	r3, [r7, #28]
 8006be8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006bec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	3308      	adds	r3, #8
 8006bf6:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8006bfa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006bfc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bfe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006c00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c02:	e841 2300 	strex	r3, r2, [r1]
 8006c06:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d1e3      	bne.n	8006bd6 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	4a15      	ldr	r2, [pc, #84]	; (8006c68 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8006c12:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	e853 3f00 	ldrex	r3, [r3]
 8006c20:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	f043 0320 	orr.w	r3, r3, #32
 8006c28:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	461a      	mov	r2, r3
 8006c32:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006c36:	61bb      	str	r3, [r7, #24]
 8006c38:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c3a:	6979      	ldr	r1, [r7, #20]
 8006c3c:	69ba      	ldr	r2, [r7, #24]
 8006c3e:	e841 2300 	strex	r3, r2, [r1]
 8006c42:	613b      	str	r3, [r7, #16]
   return(result);
 8006c44:	693b      	ldr	r3, [r7, #16]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d1e4      	bne.n	8006c14 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006c4a:	e007      	b.n	8006c5c <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	699a      	ldr	r2, [r3, #24]
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f042 0208 	orr.w	r2, r2, #8
 8006c5a:	619a      	str	r2, [r3, #24]
}
 8006c5c:	bf00      	nop
 8006c5e:	37b0      	adds	r7, #176	; 0xb0
 8006c60:	46bd      	mov	sp, r7
 8006c62:	bd80      	pop	{r7, pc}
 8006c64:	40008000 	.word	0x40008000
 8006c68:	0800659d 	.word	0x0800659d

08006c6c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b0ae      	sub	sp, #184	; 0xb8
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006c7a:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	69db      	ldr	r3, [r3, #28]
 8006c84:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	689b      	ldr	r3, [r3, #8]
 8006c98:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ca2:	2b22      	cmp	r3, #34	; 0x22
 8006ca4:	f040 8186 	bne.w	8006fb4 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006cae:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006cb2:	e129      	b.n	8006f08 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cba:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cc2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8006cc6:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8006cca:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8006cce:	4013      	ands	r3, r2
 8006cd0:	b29a      	uxth	r2, r3
 8006cd2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006cd6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cdc:	1c9a      	adds	r2, r3, #2
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006ce8:	b29b      	uxth	r3, r3
 8006cea:	3b01      	subs	r3, #1
 8006cec:	b29a      	uxth	r2, r3
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	69db      	ldr	r3, [r3, #28]
 8006cfa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006cfe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006d02:	f003 0307 	and.w	r3, r3, #7
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d053      	beq.n	8006db2 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006d0a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006d0e:	f003 0301 	and.w	r3, r3, #1
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d011      	beq.n	8006d3a <UART_RxISR_16BIT_FIFOEN+0xce>
 8006d16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006d1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d00b      	beq.n	8006d3a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	2201      	movs	r2, #1
 8006d28:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d30:	f043 0201 	orr.w	r2, r3, #1
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006d3a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006d3e:	f003 0302 	and.w	r3, r3, #2
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d011      	beq.n	8006d6a <UART_RxISR_16BIT_FIFOEN+0xfe>
 8006d46:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006d4a:	f003 0301 	and.w	r3, r3, #1
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d00b      	beq.n	8006d6a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	2202      	movs	r2, #2
 8006d58:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d60:	f043 0204 	orr.w	r2, r3, #4
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006d6a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006d6e:	f003 0304 	and.w	r3, r3, #4
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d011      	beq.n	8006d9a <UART_RxISR_16BIT_FIFOEN+0x12e>
 8006d76:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006d7a:	f003 0301 	and.w	r3, r3, #1
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d00b      	beq.n	8006d9a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	2204      	movs	r2, #4
 8006d88:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d90:	f043 0202 	orr.w	r2, r3, #2
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d006      	beq.n	8006db2 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006da4:	6878      	ldr	r0, [r7, #4]
 8006da6:	f7fe fd16 	bl	80057d6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2200      	movs	r2, #0
 8006dae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006db8:	b29b      	uxth	r3, r3
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	f040 80a4 	bne.w	8006f08 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dc6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006dc8:	e853 3f00 	ldrex	r3, [r3]
 8006dcc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006dce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006dd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006dd4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	461a      	mov	r2, r3
 8006dde:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006de2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006de6:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006de8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006dea:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006dee:	e841 2300 	strex	r3, r2, [r1]
 8006df2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006df4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d1e2      	bne.n	8006dc0 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	3308      	adds	r3, #8
 8006e00:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006e04:	e853 3f00 	ldrex	r3, [r3]
 8006e08:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006e0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006e0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e10:	f023 0301 	bic.w	r3, r3, #1
 8006e14:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	3308      	adds	r3, #8
 8006e1e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8006e22:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006e24:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e26:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006e28:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006e2a:	e841 2300 	strex	r3, r2, [r1]
 8006e2e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006e30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d1e1      	bne.n	8006dfa <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2220      	movs	r2, #32
 8006e3a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2200      	movs	r2, #0
 8006e42:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2200      	movs	r2, #0
 8006e48:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	4a5f      	ldr	r2, [pc, #380]	; (8006fcc <UART_RxISR_16BIT_FIFOEN+0x360>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d021      	beq.n	8006e98 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	685b      	ldr	r3, [r3, #4]
 8006e5a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d01a      	beq.n	8006e98 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e6a:	e853 3f00 	ldrex	r3, [r3]
 8006e6e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006e70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e72:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006e76:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	461a      	mov	r2, r3
 8006e80:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006e84:	65bb      	str	r3, [r7, #88]	; 0x58
 8006e86:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e88:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006e8a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006e8c:	e841 2300 	strex	r3, r2, [r1]
 8006e90:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006e92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d1e4      	bne.n	8006e62 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e9c:	2b01      	cmp	r3, #1
 8006e9e:	d130      	bne.n	8006f02 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eae:	e853 3f00 	ldrex	r3, [r3]
 8006eb2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006eb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006eb6:	f023 0310 	bic.w	r3, r3, #16
 8006eba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	461a      	mov	r2, r3
 8006ec4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006ec8:	647b      	str	r3, [r7, #68]	; 0x44
 8006eca:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ecc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006ece:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006ed0:	e841 2300 	strex	r3, r2, [r1]
 8006ed4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006ed6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d1e4      	bne.n	8006ea6 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	69db      	ldr	r3, [r3, #28]
 8006ee2:	f003 0310 	and.w	r3, r3, #16
 8006ee6:	2b10      	cmp	r3, #16
 8006ee8:	d103      	bne.n	8006ef2 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	2210      	movs	r2, #16
 8006ef0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006ef8:	4619      	mov	r1, r3
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f7fe fc74 	bl	80057e8 <HAL_UARTEx_RxEventCallback>
 8006f00:	e002      	b.n	8006f08 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	f7fa fabc 	bl	8001480 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006f08:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d006      	beq.n	8006f1e <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8006f10:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006f14:	f003 0320 	and.w	r3, r3, #32
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	f47f aecb 	bne.w	8006cb4 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006f24:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006f28:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d049      	beq.n	8006fc4 <UART_RxISR_16BIT_FIFOEN+0x358>
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006f36:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8006f3a:	429a      	cmp	r2, r3
 8006f3c:	d242      	bcs.n	8006fc4 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	3308      	adds	r3, #8
 8006f44:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f48:	e853 3f00 	ldrex	r3, [r3]
 8006f4c:	623b      	str	r3, [r7, #32]
   return(result);
 8006f4e:	6a3b      	ldr	r3, [r7, #32]
 8006f50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006f54:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	3308      	adds	r3, #8
 8006f5e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8006f62:	633a      	str	r2, [r7, #48]	; 0x30
 8006f64:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f66:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006f68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f6a:	e841 2300 	strex	r3, r2, [r1]
 8006f6e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d1e3      	bne.n	8006f3e <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	4a15      	ldr	r2, [pc, #84]	; (8006fd0 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8006f7a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f82:	693b      	ldr	r3, [r7, #16]
 8006f84:	e853 3f00 	ldrex	r3, [r3]
 8006f88:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	f043 0320 	orr.w	r3, r3, #32
 8006f90:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	461a      	mov	r2, r3
 8006f9a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006f9e:	61fb      	str	r3, [r7, #28]
 8006fa0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fa2:	69b9      	ldr	r1, [r7, #24]
 8006fa4:	69fa      	ldr	r2, [r7, #28]
 8006fa6:	e841 2300 	strex	r3, r2, [r1]
 8006faa:	617b      	str	r3, [r7, #20]
   return(result);
 8006fac:	697b      	ldr	r3, [r7, #20]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d1e4      	bne.n	8006f7c <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006fb2:	e007      	b.n	8006fc4 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	699a      	ldr	r2, [r3, #24]
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f042 0208 	orr.w	r2, r2, #8
 8006fc2:	619a      	str	r2, [r3, #24]
}
 8006fc4:	bf00      	nop
 8006fc6:	37b8      	adds	r7, #184	; 0xb8
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	bd80      	pop	{r7, pc}
 8006fcc:	40008000 	.word	0x40008000
 8006fd0:	08006755 	.word	0x08006755

08006fd4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006fd4:	b480      	push	{r7}
 8006fd6:	b083      	sub	sp, #12
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006fdc:	bf00      	nop
 8006fde:	370c      	adds	r7, #12
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	bc80      	pop	{r7}
 8006fe4:	4770      	bx	lr

08006fe6 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006fe6:	b480      	push	{r7}
 8006fe8:	b083      	sub	sp, #12
 8006fea:	af00      	add	r7, sp, #0
 8006fec:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006fee:	bf00      	nop
 8006ff0:	370c      	adds	r7, #12
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bc80      	pop	{r7}
 8006ff6:	4770      	bx	lr

08006ff8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	b083      	sub	sp, #12
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007000:	bf00      	nop
 8007002:	370c      	adds	r7, #12
 8007004:	46bd      	mov	sp, r7
 8007006:	bc80      	pop	{r7}
 8007008:	4770      	bx	lr

0800700a <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800700a:	b580      	push	{r7, lr}
 800700c:	b088      	sub	sp, #32
 800700e:	af02      	add	r7, sp, #8
 8007010:	60f8      	str	r0, [r7, #12]
 8007012:	1d3b      	adds	r3, r7, #4
 8007014:	e883 0006 	stmia.w	r3, {r1, r2}
  HAL_StatusTypeDef status = HAL_OK;
 8007018:	2300      	movs	r3, #0
 800701a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007022:	2b01      	cmp	r3, #1
 8007024:	d101      	bne.n	800702a <HAL_UARTEx_StopModeWakeUpSourceConfig+0x20>
 8007026:	2302      	movs	r3, #2
 8007028:	e046      	b.n	80070b8 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	2201      	movs	r2, #1
 800702e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	2224      	movs	r2, #36	; 0x24
 8007036:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	681a      	ldr	r2, [r3, #0]
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f022 0201 	bic.w	r2, r2, #1
 8007048:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	689b      	ldr	r3, [r3, #8]
 8007050:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8007054:	687a      	ldr	r2, [r7, #4]
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	430a      	orrs	r2, r1
 800705c:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d105      	bne.n	8007070 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 8007064:	1d3b      	adds	r3, r7, #4
 8007066:	e893 0006 	ldmia.w	r3, {r1, r2}
 800706a:	68f8      	ldr	r0, [r7, #12]
 800706c:	f000 f911 	bl	8007292 <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	681a      	ldr	r2, [r3, #0]
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f042 0201 	orr.w	r2, r2, #1
 800707e:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007080:	f7f9 fd2e 	bl	8000ae0 <HAL_GetTick>
 8007084:	6138      	str	r0, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007086:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800708a:	9300      	str	r3, [sp, #0]
 800708c:	693b      	ldr	r3, [r7, #16]
 800708e:	2200      	movs	r2, #0
 8007090:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007094:	68f8      	ldr	r0, [r7, #12]
 8007096:	f7fe ff16 	bl	8005ec6 <UART_WaitOnFlagUntilTimeout>
 800709a:	4603      	mov	r3, r0
 800709c:	2b00      	cmp	r3, #0
 800709e:	d002      	beq.n	80070a6 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x9c>
  {
    status = HAL_TIMEOUT;
 80070a0:	2303      	movs	r3, #3
 80070a2:	75fb      	strb	r3, [r7, #23]
 80070a4:	e003      	b.n	80070ae <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa4>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	2220      	movs	r2, #32
 80070aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	2200      	movs	r2, #0
 80070b2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return status;
 80070b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80070b8:	4618      	mov	r0, r3
 80070ba:	3718      	adds	r7, #24
 80070bc:	46bd      	mov	sp, r7
 80070be:	bd80      	pop	{r7, pc}

080070c0 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 80070c0:	b480      	push	{r7}
 80070c2:	b089      	sub	sp, #36	; 0x24
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80070ce:	2b01      	cmp	r3, #1
 80070d0:	d101      	bne.n	80070d6 <HAL_UARTEx_EnableStopMode+0x16>
 80070d2:	2302      	movs	r3, #2
 80070d4:	e021      	b.n	800711a <HAL_UARTEx_EnableStopMode+0x5a>
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2201      	movs	r2, #1
 80070da:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	e853 3f00 	ldrex	r3, [r3]
 80070ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	f043 0302 	orr.w	r3, r3, #2
 80070f2:	61fb      	str	r3, [r7, #28]
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	461a      	mov	r2, r3
 80070fa:	69fb      	ldr	r3, [r7, #28]
 80070fc:	61bb      	str	r3, [r7, #24]
 80070fe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007100:	6979      	ldr	r1, [r7, #20]
 8007102:	69ba      	ldr	r2, [r7, #24]
 8007104:	e841 2300 	strex	r3, r2, [r1]
 8007108:	613b      	str	r3, [r7, #16]
   return(result);
 800710a:	693b      	ldr	r3, [r7, #16]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d1e6      	bne.n	80070de <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2200      	movs	r2, #0
 8007114:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007118:	2300      	movs	r3, #0
}
 800711a:	4618      	mov	r0, r3
 800711c:	3724      	adds	r7, #36	; 0x24
 800711e:	46bd      	mov	sp, r7
 8007120:	bc80      	pop	{r7}
 8007122:	4770      	bx	lr

08007124 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b084      	sub	sp, #16
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007132:	2b01      	cmp	r3, #1
 8007134:	d101      	bne.n	800713a <HAL_UARTEx_EnableFifoMode+0x16>
 8007136:	2302      	movs	r3, #2
 8007138:	e02b      	b.n	8007192 <HAL_UARTEx_EnableFifoMode+0x6e>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2201      	movs	r2, #1
 800713e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2224      	movs	r2, #36	; 0x24
 8007146:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	681a      	ldr	r2, [r3, #0]
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f022 0201 	bic.w	r2, r2, #1
 8007160:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007168:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8007170:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	68fa      	ldr	r2, [r7, #12]
 8007178:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f000 f8ac 	bl	80072d8 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2220      	movs	r2, #32
 8007184:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2200      	movs	r2, #0
 800718c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007190:	2300      	movs	r3, #0
}
 8007192:	4618      	mov	r0, r3
 8007194:	3710      	adds	r7, #16
 8007196:	46bd      	mov	sp, r7
 8007198:	bd80      	pop	{r7, pc}

0800719a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800719a:	b580      	push	{r7, lr}
 800719c:	b084      	sub	sp, #16
 800719e:	af00      	add	r7, sp, #0
 80071a0:	6078      	str	r0, [r7, #4]
 80071a2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80071aa:	2b01      	cmp	r3, #1
 80071ac:	d101      	bne.n	80071b2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80071ae:	2302      	movs	r3, #2
 80071b0:	e02d      	b.n	800720e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2201      	movs	r2, #1
 80071b6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2224      	movs	r2, #36	; 0x24
 80071be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	681a      	ldr	r2, [r3, #0]
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f022 0201 	bic.w	r2, r2, #1
 80071d8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	689b      	ldr	r3, [r3, #8]
 80071e0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	683a      	ldr	r2, [r7, #0]
 80071ea:	430a      	orrs	r2, r1
 80071ec:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f000 f872 	bl	80072d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	68fa      	ldr	r2, [r7, #12]
 80071fa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2220      	movs	r2, #32
 8007200:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2200      	movs	r2, #0
 8007208:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800720c:	2300      	movs	r3, #0
}
 800720e:	4618      	mov	r0, r3
 8007210:	3710      	adds	r7, #16
 8007212:	46bd      	mov	sp, r7
 8007214:	bd80      	pop	{r7, pc}

08007216 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007216:	b580      	push	{r7, lr}
 8007218:	b084      	sub	sp, #16
 800721a:	af00      	add	r7, sp, #0
 800721c:	6078      	str	r0, [r7, #4]
 800721e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007226:	2b01      	cmp	r3, #1
 8007228:	d101      	bne.n	800722e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800722a:	2302      	movs	r3, #2
 800722c:	e02d      	b.n	800728a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2201      	movs	r2, #1
 8007232:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2224      	movs	r2, #36	; 0x24
 800723a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	681a      	ldr	r2, [r3, #0]
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f022 0201 	bic.w	r2, r2, #1
 8007254:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	689b      	ldr	r3, [r3, #8]
 800725c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	683a      	ldr	r2, [r7, #0]
 8007266:	430a      	orrs	r2, r1
 8007268:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f000 f834 	bl	80072d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	68fa      	ldr	r2, [r7, #12]
 8007276:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2220      	movs	r2, #32
 800727c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2200      	movs	r2, #0
 8007284:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007288:	2300      	movs	r3, #0
}
 800728a:	4618      	mov	r0, r3
 800728c:	3710      	adds	r7, #16
 800728e:	46bd      	mov	sp, r7
 8007290:	bd80      	pop	{r7, pc}

08007292 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8007292:	b480      	push	{r7}
 8007294:	b085      	sub	sp, #20
 8007296:	af00      	add	r7, sp, #0
 8007298:	60f8      	str	r0, [r7, #12]
 800729a:	1d3b      	adds	r3, r7, #4
 800729c:	e883 0006 	stmia.w	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	685b      	ldr	r3, [r3, #4]
 80072a6:	f023 0210 	bic.w	r2, r3, #16
 80072aa:	893b      	ldrh	r3, [r7, #8]
 80072ac:	4619      	mov	r1, r3
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	430a      	orrs	r2, r1
 80072b4:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	685b      	ldr	r3, [r3, #4]
 80072bc:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
 80072c0:	7abb      	ldrb	r3, [r7, #10]
 80072c2:	061a      	lsls	r2, r3, #24
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	430a      	orrs	r2, r1
 80072ca:	605a      	str	r2, [r3, #4]
}
 80072cc:	bf00      	nop
 80072ce:	3714      	adds	r7, #20
 80072d0:	46bd      	mov	sp, r7
 80072d2:	bc80      	pop	{r7}
 80072d4:	4770      	bx	lr
	...

080072d8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80072d8:	b480      	push	{r7}
 80072da:	b085      	sub	sp, #20
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d108      	bne.n	80072fa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2201      	movs	r2, #1
 80072ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2201      	movs	r2, #1
 80072f4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80072f8:	e031      	b.n	800735e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80072fa:	2308      	movs	r3, #8
 80072fc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80072fe:	2308      	movs	r3, #8
 8007300:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	689b      	ldr	r3, [r3, #8]
 8007308:	0e5b      	lsrs	r3, r3, #25
 800730a:	b2db      	uxtb	r3, r3
 800730c:	f003 0307 	and.w	r3, r3, #7
 8007310:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	689b      	ldr	r3, [r3, #8]
 8007318:	0f5b      	lsrs	r3, r3, #29
 800731a:	b2db      	uxtb	r3, r3
 800731c:	f003 0307 	and.w	r3, r3, #7
 8007320:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007322:	7bbb      	ldrb	r3, [r7, #14]
 8007324:	7b3a      	ldrb	r2, [r7, #12]
 8007326:	4910      	ldr	r1, [pc, #64]	; (8007368 <UARTEx_SetNbDataToProcess+0x90>)
 8007328:	5c8a      	ldrb	r2, [r1, r2]
 800732a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800732e:	7b3a      	ldrb	r2, [r7, #12]
 8007330:	490e      	ldr	r1, [pc, #56]	; (800736c <UARTEx_SetNbDataToProcess+0x94>)
 8007332:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007334:	fb93 f3f2 	sdiv	r3, r3, r2
 8007338:	b29a      	uxth	r2, r3
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007340:	7bfb      	ldrb	r3, [r7, #15]
 8007342:	7b7a      	ldrb	r2, [r7, #13]
 8007344:	4908      	ldr	r1, [pc, #32]	; (8007368 <UARTEx_SetNbDataToProcess+0x90>)
 8007346:	5c8a      	ldrb	r2, [r1, r2]
 8007348:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800734c:	7b7a      	ldrb	r2, [r7, #13]
 800734e:	4907      	ldr	r1, [pc, #28]	; (800736c <UARTEx_SetNbDataToProcess+0x94>)
 8007350:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007352:	fb93 f3f2 	sdiv	r3, r3, r2
 8007356:	b29a      	uxth	r2, r3
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800735e:	bf00      	nop
 8007360:	3714      	adds	r7, #20
 8007362:	46bd      	mov	sp, r7
 8007364:	bc80      	pop	{r7}
 8007366:	4770      	bx	lr
 8007368:	0800c884 	.word	0x0800c884
 800736c:	0800c88c 	.word	0x0800c88c

08007370 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8007370:	b480      	push	{r7}
 8007372:	b083      	sub	sp, #12
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
 8007378:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	683a      	ldr	r2, [r7, #0]
 800737e:	619a      	str	r2, [r3, #24]
}
 8007380:	bf00      	nop
 8007382:	370c      	adds	r7, #12
 8007384:	46bd      	mov	sp, r7
 8007386:	bc80      	pop	{r7}
 8007388:	4770      	bx	lr

0800738a <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800738a:	b480      	push	{r7}
 800738c:	b083      	sub	sp, #12
 800738e:	af00      	add	r7, sp, #0
 8007390:	6078      	str	r0, [r7, #4]
 8007392:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	683a      	ldr	r2, [r7, #0]
 8007398:	629a      	str	r2, [r3, #40]	; 0x28
}
 800739a:	bf00      	nop
 800739c:	370c      	adds	r7, #12
 800739e:	46bd      	mov	sp, r7
 80073a0:	bc80      	pop	{r7}
 80073a2:	4770      	bx	lr

080073a4 <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b084      	sub	sp, #16
 80073a8:	af02      	add	r7, sp, #8
 80073aa:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 80073ac:	4a24      	ldr	r2, [pc, #144]	; (8007440 <RadioInit+0x9c>)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 80073b2:	4b24      	ldr	r3, [pc, #144]	; (8007444 <RadioInit+0xa0>)
 80073b4:	2200      	movs	r2, #0
 80073b6:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 80073b8:	4b22      	ldr	r3, [pc, #136]	; (8007444 <RadioInit+0xa0>)
 80073ba:	2200      	movs	r2, #0
 80073bc:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 80073be:	4b21      	ldr	r3, [pc, #132]	; (8007444 <RadioInit+0xa0>)
 80073c0:	2200      	movs	r2, #0
 80073c2:	609a      	str	r2, [r3, #8]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 80073c4:	4b1f      	ldr	r3, [pc, #124]	; (8007444 <RadioInit+0xa0>)
 80073c6:	2200      	movs	r2, #0
 80073c8:	659a      	str	r2, [r3, #88]	; 0x58
#if( RADIO_LR_FHSS_IS_ON == 1 )
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    SUBGRF_Init( RadioOnDioIrq );
 80073ca:	481f      	ldr	r0, [pc, #124]	; (8007448 <RadioInit+0xa4>)
 80073cc:	f001 fff6 	bl	80093bc <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    SubgRf.PublicNetwork.Current = false;
 80073d0:	4b1c      	ldr	r3, [pc, #112]	; (8007444 <RadioInit+0xa0>)
 80073d2:	2200      	movs	r2, #0
 80073d4:	735a      	strb	r2, [r3, #13]
    SubgRf.PublicNetwork.Previous = false;
 80073d6:	4b1b      	ldr	r3, [pc, #108]	; (8007444 <RadioInit+0xa0>)
 80073d8:	2200      	movs	r2, #0
 80073da:	731a      	strb	r2, [r3, #12]

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode( );
 80073dc:	f002 fa8a 	bl	80098f4 <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 80073e0:	2100      	movs	r1, #0
 80073e2:	2000      	movs	r0, #0
 80073e4:	f002 fe56 	bl	800a094 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 80073e8:	2204      	movs	r2, #4
 80073ea:	2100      	movs	r1, #0
 80073ec:	2001      	movs	r0, #1
 80073ee:	f002 fc13 	bl	8009c18 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 80073f2:	2300      	movs	r3, #0
 80073f4:	2200      	movs	r2, #0
 80073f6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80073fa:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80073fe:	f002 fb43 	bl	8009a88 <SUBGRF_SetDioIrqParams>

    RadioSleep();
 8007402:	f000 fe9f 	bl	8008144 <RadioSleep>
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 8007406:	2300      	movs	r3, #0
 8007408:	9300      	str	r3, [sp, #0]
 800740a:	4b10      	ldr	r3, [pc, #64]	; (800744c <RadioInit+0xa8>)
 800740c:	2200      	movs	r2, #0
 800740e:	f04f 31ff 	mov.w	r1, #4294967295
 8007412:	480f      	ldr	r0, [pc, #60]	; (8007450 <RadioInit+0xac>)
 8007414:	f004 fad4 	bl	800b9c0 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 8007418:	2300      	movs	r3, #0
 800741a:	9300      	str	r3, [sp, #0]
 800741c:	4b0d      	ldr	r3, [pc, #52]	; (8007454 <RadioInit+0xb0>)
 800741e:	2200      	movs	r2, #0
 8007420:	f04f 31ff 	mov.w	r1, #4294967295
 8007424:	480c      	ldr	r0, [pc, #48]	; (8007458 <RadioInit+0xb4>)
 8007426:	f004 facb 	bl	800b9c0 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 800742a:	4809      	ldr	r0, [pc, #36]	; (8007450 <RadioInit+0xac>)
 800742c:	f004 fb6c 	bl	800bb08 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 8007430:	4809      	ldr	r0, [pc, #36]	; (8007458 <RadioInit+0xb4>)
 8007432:	f004 fb69 	bl	800bb08 <UTIL_TIMER_Stop>
}
 8007436:	bf00      	nop
 8007438:	3708      	adds	r7, #8
 800743a:	46bd      	mov	sp, r7
 800743c:	bd80      	pop	{r7, pc}
 800743e:	bf00      	nop
 8007440:	20000284 	.word	0x20000284
 8007444:	20000288 	.word	0x20000288
 8007448:	0800856d 	.word	0x0800856d
 800744c:	080084dd 	.word	0x080084dd
 8007450:	200002e4 	.word	0x200002e4
 8007454:	080084f1 	.word	0x080084f1
 8007458:	200002fc 	.word	0x200002fc

0800745c <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 800745c:	b580      	push	{r7, lr}
 800745e:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 8007460:	f001 fff4 	bl	800944c <SUBGRF_GetOperatingMode>
 8007464:	4603      	mov	r3, r0
 8007466:	2b07      	cmp	r3, #7
 8007468:	d00a      	beq.n	8007480 <RadioGetStatus+0x24>
 800746a:	2b07      	cmp	r3, #7
 800746c:	dc0a      	bgt.n	8007484 <RadioGetStatus+0x28>
 800746e:	2b04      	cmp	r3, #4
 8007470:	d002      	beq.n	8007478 <RadioGetStatus+0x1c>
 8007472:	2b05      	cmp	r3, #5
 8007474:	d002      	beq.n	800747c <RadioGetStatus+0x20>
 8007476:	e005      	b.n	8007484 <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 8007478:	2302      	movs	r3, #2
 800747a:	e004      	b.n	8007486 <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 800747c:	2301      	movs	r3, #1
 800747e:	e002      	b.n	8007486 <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 8007480:	2303      	movs	r3, #3
 8007482:	e000      	b.n	8007486 <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 8007484:	2300      	movs	r3, #0
    }
}
 8007486:	4618      	mov	r0, r3
 8007488:	bd80      	pop	{r7, pc}
	...

0800748c <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b082      	sub	sp, #8
 8007490:	af00      	add	r7, sp, #0
 8007492:	4603      	mov	r3, r0
 8007494:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 8007496:	4a2a      	ldr	r2, [pc, #168]	; (8007540 <RadioSetModem+0xb4>)
 8007498:	79fb      	ldrb	r3, [r7, #7]
 800749a:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem( modem );
 800749c:	79fb      	ldrb	r3, [r7, #7]
 800749e:	4618      	mov	r0, r3
 80074a0:	f003 f9cb 	bl	800a83a <RFW_SetRadioModem>
    switch( modem )
 80074a4:	79fb      	ldrb	r3, [r7, #7]
 80074a6:	2b05      	cmp	r3, #5
 80074a8:	d80e      	bhi.n	80074c8 <RadioSetModem+0x3c>
 80074aa:	a201      	add	r2, pc, #4	; (adr r2, 80074b0 <RadioSetModem+0x24>)
 80074ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074b0:	080074d7 	.word	0x080074d7
 80074b4:	080074e5 	.word	0x080074e5
 80074b8:	080074c9 	.word	0x080074c9
 80074bc:	0800750b 	.word	0x0800750b
 80074c0:	08007519 	.word	0x08007519
 80074c4:	08007527 	.word	0x08007527
    {
    default:
    case MODEM_MSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 80074c8:	2003      	movs	r0, #3
 80074ca:	f002 fb7f 	bl	8009bcc <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80074ce:	4b1c      	ldr	r3, [pc, #112]	; (8007540 <RadioSetModem+0xb4>)
 80074d0:	2200      	movs	r2, #0
 80074d2:	735a      	strb	r2, [r3, #13]
        break;
 80074d4:	e02f      	b.n	8007536 <RadioSetModem+0xaa>
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 80074d6:	2000      	movs	r0, #0
 80074d8:	f002 fb78 	bl	8009bcc <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80074dc:	4b18      	ldr	r3, [pc, #96]	; (8007540 <RadioSetModem+0xb4>)
 80074de:	2200      	movs	r2, #0
 80074e0:	735a      	strb	r2, [r3, #13]
        break;
 80074e2:	e028      	b.n	8007536 <RadioSetModem+0xaa>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 80074e4:	2001      	movs	r0, #1
 80074e6:	f002 fb71 	bl	8009bcc <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 80074ea:	4b15      	ldr	r3, [pc, #84]	; (8007540 <RadioSetModem+0xb4>)
 80074ec:	7b5a      	ldrb	r2, [r3, #13]
 80074ee:	4b14      	ldr	r3, [pc, #80]	; (8007540 <RadioSetModem+0xb4>)
 80074f0:	7b1b      	ldrb	r3, [r3, #12]
 80074f2:	429a      	cmp	r2, r3
 80074f4:	d01e      	beq.n	8007534 <RadioSetModem+0xa8>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 80074f6:	4b12      	ldr	r3, [pc, #72]	; (8007540 <RadioSetModem+0xb4>)
 80074f8:	7b1a      	ldrb	r2, [r3, #12]
 80074fa:	4b11      	ldr	r3, [pc, #68]	; (8007540 <RadioSetModem+0xb4>)
 80074fc:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 80074fe:	4b10      	ldr	r3, [pc, #64]	; (8007540 <RadioSetModem+0xb4>)
 8007500:	7b5b      	ldrb	r3, [r3, #13]
 8007502:	4618      	mov	r0, r3
 8007504:	f000 ffb4 	bl	8008470 <RadioSetPublicNetwork>
        }
        break;
 8007508:	e014      	b.n	8007534 <RadioSetModem+0xa8>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 800750a:	2002      	movs	r0, #2
 800750c:	f002 fb5e 	bl	8009bcc <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8007510:	4b0b      	ldr	r3, [pc, #44]	; (8007540 <RadioSetModem+0xb4>)
 8007512:	2200      	movs	r2, #0
 8007514:	735a      	strb	r2, [r3, #13]
        break;
 8007516:	e00e      	b.n	8007536 <RadioSetModem+0xaa>
#if (RADIO_SIGFOX_ENABLE == 1)
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8007518:	2002      	movs	r0, #2
 800751a:	f002 fb57 	bl	8009bcc <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 800751e:	4b08      	ldr	r3, [pc, #32]	; (8007540 <RadioSetModem+0xb4>)
 8007520:	2200      	movs	r2, #0
 8007522:	735a      	strb	r2, [r3, #13]
        break;
 8007524:	e007      	b.n	8007536 <RadioSetModem+0xaa>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8007526:	2000      	movs	r0, #0
 8007528:	f002 fb50 	bl	8009bcc <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 800752c:	4b04      	ldr	r3, [pc, #16]	; (8007540 <RadioSetModem+0xb4>)
 800752e:	2200      	movs	r2, #0
 8007530:	735a      	strb	r2, [r3, #13]
        break;
 8007532:	e000      	b.n	8007536 <RadioSetModem+0xaa>
        break;
 8007534:	bf00      	nop
#endif /*RADIO_SIGFOX_ENABLE == 1*/
    }
}
 8007536:	bf00      	nop
 8007538:	3708      	adds	r7, #8
 800753a:	46bd      	mov	sp, r7
 800753c:	bd80      	pop	{r7, pc}
 800753e:	bf00      	nop
 8007540:	20000288 	.word	0x20000288

08007544 <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 8007544:	b580      	push	{r7, lr}
 8007546:	b082      	sub	sp, #8
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 800754c:	6878      	ldr	r0, [r7, #4]
 800754e:	f002 faf7 	bl	8009b40 <SUBGRF_SetRfFrequency>
}
 8007552:	bf00      	nop
 8007554:	3708      	adds	r7, #8
 8007556:	46bd      	mov	sp, r7
 8007558:	bd80      	pop	{r7, pc}

0800755a <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 800755a:	b580      	push	{r7, lr}
 800755c:	b090      	sub	sp, #64	; 0x40
 800755e:	af0a      	add	r7, sp, #40	; 0x28
 8007560:	60f8      	str	r0, [r7, #12]
 8007562:	60b9      	str	r1, [r7, #8]
 8007564:	603b      	str	r3, [r7, #0]
 8007566:	4613      	mov	r3, r2
 8007568:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 800756a:	2301      	movs	r3, #1
 800756c:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 800756e:	2300      	movs	r3, #0
 8007570:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 8007572:	2300      	movs	r3, #0
 8007574:	613b      	str	r3, [r7, #16]

    RadioStandby( );
 8007576:	f000 fdf8 	bl	800816a <RadioStandby>

    RadioSetModem( MODEM_FSK );
 800757a:	2000      	movs	r0, #0
 800757c:	f7ff ff86 	bl	800748c <RadioSetModem>

    RadioSetChannel( freq );
 8007580:	68f8      	ldr	r0, [r7, #12]
 8007582:	f7ff ffdf 	bl	8007544 <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 8007586:	2301      	movs	r3, #1
 8007588:	9309      	str	r3, [sp, #36]	; 0x24
 800758a:	2300      	movs	r3, #0
 800758c:	9308      	str	r3, [sp, #32]
 800758e:	2300      	movs	r3, #0
 8007590:	9307      	str	r3, [sp, #28]
 8007592:	2300      	movs	r3, #0
 8007594:	9306      	str	r3, [sp, #24]
 8007596:	2300      	movs	r3, #0
 8007598:	9305      	str	r3, [sp, #20]
 800759a:	2300      	movs	r3, #0
 800759c:	9304      	str	r3, [sp, #16]
 800759e:	2300      	movs	r3, #0
 80075a0:	9303      	str	r3, [sp, #12]
 80075a2:	2300      	movs	r3, #0
 80075a4:	9302      	str	r3, [sp, #8]
 80075a6:	2303      	movs	r3, #3
 80075a8:	9301      	str	r3, [sp, #4]
 80075aa:	68bb      	ldr	r3, [r7, #8]
 80075ac:	9300      	str	r3, [sp, #0]
 80075ae:	2300      	movs	r3, #0
 80075b0:	f44f 7216 	mov.w	r2, #600	; 0x258
 80075b4:	68b9      	ldr	r1, [r7, #8]
 80075b6:	2000      	movs	r0, #0
 80075b8:	f000 f83c 	bl	8007634 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 80075bc:	2000      	movs	r0, #0
 80075be:	f000 fddb 	bl	8008178 <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 80075c2:	f000 ff83 	bl	80084cc <RadioGetWakeupTime>
 80075c6:	4603      	mov	r3, r0
 80075c8:	4618      	mov	r0, r3
 80075ca:	f7f9 fa9d 	bl	8000b08 <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 80075ce:	f004 fbb5 	bl	800bd3c <UTIL_TIMER_GetCurrentTime>
 80075d2:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 80075d4:	e00d      	b.n	80075f2 <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 80075d6:	2000      	movs	r0, #0
 80075d8:	f000 fec8 	bl	800836c <RadioRssi>
 80075dc:	4603      	mov	r3, r0
 80075de:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 80075e0:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80075e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80075e8:	429a      	cmp	r2, r3
 80075ea:	dd02      	ble.n	80075f2 <RadioIsChannelFree+0x98>
        {
            status = false;
 80075ec:	2300      	movs	r3, #0
 80075ee:	75fb      	strb	r3, [r7, #23]
            break;
 80075f0:	e006      	b.n	8007600 <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 80075f2:	6938      	ldr	r0, [r7, #16]
 80075f4:	f004 fbb4 	bl	800bd60 <UTIL_TIMER_GetElapsedTime>
 80075f8:	4602      	mov	r2, r0
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	4293      	cmp	r3, r2
 80075fe:	d8ea      	bhi.n	80075d6 <RadioIsChannelFree+0x7c>
        }
    }
    RadioStandby( );
 8007600:	f000 fdb3 	bl	800816a <RadioStandby>

    return status;
 8007604:	7dfb      	ldrb	r3, [r7, #23]
}
 8007606:	4618      	mov	r0, r3
 8007608:	3718      	adds	r7, #24
 800760a:	46bd      	mov	sp, r7
 800760c:	bd80      	pop	{r7, pc}

0800760e <RadioRandom>:

static uint32_t RadioRandom( void )
{
 800760e:	b580      	push	{r7, lr}
 8007610:	b082      	sub	sp, #8
 8007612:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 8007614:	2300      	movs	r3, #0
 8007616:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Disable modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8007618:	2300      	movs	r3, #0
 800761a:	2200      	movs	r2, #0
 800761c:	2100      	movs	r1, #0
 800761e:	2000      	movs	r0, #0
 8007620:	f002 fa32 	bl	8009a88 <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 8007624:	f001 ffe3 	bl	80095ee <SUBGRF_GetRandom>
 8007628:	6078      	str	r0, [r7, #4]

    return rnd;
 800762a:	687b      	ldr	r3, [r7, #4]
}
 800762c:	4618      	mov	r0, r3
 800762e:	3708      	adds	r7, #8
 8007630:	46bd      	mov	sp, r7
 8007632:	bd80      	pop	{r7, pc}

08007634 <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b08a      	sub	sp, #40	; 0x28
 8007638:	af00      	add	r7, sp, #0
 800763a:	60b9      	str	r1, [r7, #8]
 800763c:	607a      	str	r2, [r7, #4]
 800763e:	461a      	mov	r2, r3
 8007640:	4603      	mov	r3, r0
 8007642:	73fb      	strb	r3, [r7, #15]
 8007644:	4613      	mov	r3, r2
 8007646:	73bb      	strb	r3, [r7, #14]
#if (RADIO_SIGFOX_ENABLE == 1)
    uint8_t modReg;
#endif
    SubgRf.RxContinuous = rxContinuous;
 8007648:	4ab9      	ldr	r2, [pc, #740]	; (8007930 <RadioSetRxConfig+0x2fc>)
 800764a:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800764e:	7053      	strb	r3, [r2, #1]
    RFW_DeInit();
 8007650:	f003 f8b1 	bl	800a7b6 <RFW_DeInit>
    if( rxContinuous == true )
 8007654:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8007658:	2b00      	cmp	r3, #0
 800765a:	d001      	beq.n	8007660 <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 800765c:	2300      	movs	r3, #0
 800765e:	873b      	strh	r3, [r7, #56]	; 0x38
    }
    if( fixLen == true )
 8007660:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8007664:	2b00      	cmp	r3, #0
 8007666:	d004      	beq.n	8007672 <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 8007668:	4ab2      	ldr	r2, [pc, #712]	; (8007934 <RadioSetRxConfig+0x300>)
 800766a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800766e:	7013      	strb	r3, [r2, #0]
 8007670:	e002      	b.n	8007678 <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 8007672:	4bb0      	ldr	r3, [pc, #704]	; (8007934 <RadioSetRxConfig+0x300>)
 8007674:	22ff      	movs	r2, #255	; 0xff
 8007676:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 8007678:	7bfb      	ldrb	r3, [r7, #15]
 800767a:	2b05      	cmp	r3, #5
 800767c:	d009      	beq.n	8007692 <RadioSetRxConfig+0x5e>
 800767e:	2b05      	cmp	r3, #5
 8007680:	f300 81d7 	bgt.w	8007a32 <RadioSetRxConfig+0x3fe>
 8007684:	2b00      	cmp	r3, #0
 8007686:	f000 80bf 	beq.w	8007808 <RadioSetRxConfig+0x1d4>
 800768a:	2b01      	cmp	r3, #1
 800768c:	f000 8124 	beq.w	80078d8 <RadioSetRxConfig+0x2a4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 8007690:	e1cf      	b.n	8007a32 <RadioSetRxConfig+0x3fe>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 8007692:	2001      	movs	r0, #1
 8007694:	f002 f8f0 	bl	8009878 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8007698:	4ba5      	ldr	r3, [pc, #660]	; (8007930 <RadioSetRxConfig+0x2fc>)
 800769a:	2200      	movs	r2, #0
 800769c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 80076a0:	4aa3      	ldr	r2, [pc, #652]	; (8007930 <RadioSetRxConfig+0x2fc>)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 80076a6:	4ba2      	ldr	r3, [pc, #648]	; (8007930 <RadioSetRxConfig+0x2fc>)
 80076a8:	2209      	movs	r2, #9
 80076aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 80076ae:	4ba0      	ldr	r3, [pc, #640]	; (8007930 <RadioSetRxConfig+0x2fc>)
 80076b0:	f44f 7248 	mov.w	r2, #800	; 0x320
 80076b4:	641a      	str	r2, [r3, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 80076b6:	68b8      	ldr	r0, [r7, #8]
 80076b8:	f002 ffb0 	bl	800a61c <SUBGRF_GetFskBandwidthRegValue>
 80076bc:	4603      	mov	r3, r0
 80076be:	461a      	mov	r2, r3
 80076c0:	4b9b      	ldr	r3, [pc, #620]	; (8007930 <RadioSetRxConfig+0x2fc>)
 80076c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80076c6:	4b9a      	ldr	r3, [pc, #616]	; (8007930 <RadioSetRxConfig+0x2fc>)
 80076c8:	2200      	movs	r2, #0
 80076ca:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 80076cc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80076ce:	00db      	lsls	r3, r3, #3
 80076d0:	b29a      	uxth	r2, r3
 80076d2:	4b97      	ldr	r3, [pc, #604]	; (8007930 <RadioSetRxConfig+0x2fc>)
 80076d4:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 80076d6:	4b96      	ldr	r3, [pc, #600]	; (8007930 <RadioSetRxConfig+0x2fc>)
 80076d8:	2200      	movs	r2, #0
 80076da:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 80076dc:	4b94      	ldr	r3, [pc, #592]	; (8007930 <RadioSetRxConfig+0x2fc>)
 80076de:	2210      	movs	r2, #16
 80076e0:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80076e2:	4b93      	ldr	r3, [pc, #588]	; (8007930 <RadioSetRxConfig+0x2fc>)
 80076e4:	2200      	movs	r2, #0
 80076e6:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 80076e8:	4b91      	ldr	r3, [pc, #580]	; (8007930 <RadioSetRxConfig+0x2fc>)
 80076ea:	2200      	movs	r2, #0
 80076ec:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 80076ee:	4b91      	ldr	r3, [pc, #580]	; (8007934 <RadioSetRxConfig+0x300>)
 80076f0:	781a      	ldrb	r2, [r3, #0]
 80076f2:	4b8f      	ldr	r3, [pc, #572]	; (8007930 <RadioSetRxConfig+0x2fc>)
 80076f4:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80076f6:	4b8e      	ldr	r3, [pc, #568]	; (8007930 <RadioSetRxConfig+0x2fc>)
 80076f8:	2201      	movs	r2, #1
 80076fa:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 80076fc:	4b8c      	ldr	r3, [pc, #560]	; (8007930 <RadioSetRxConfig+0x2fc>)
 80076fe:	2200      	movs	r2, #0
 8007700:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 8007702:	2005      	movs	r0, #5
 8007704:	f7ff fec2 	bl	800748c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8007708:	488b      	ldr	r0, [pc, #556]	; (8007938 <RadioSetRxConfig+0x304>)
 800770a:	f002 fb53 	bl	8009db4 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800770e:	488b      	ldr	r0, [pc, #556]	; (800793c <RadioSetRxConfig+0x308>)
 8007710:	f002 fc22 	bl	8009f58 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8007714:	4a8a      	ldr	r2, [pc, #552]	; (8007940 <RadioSetRxConfig+0x30c>)
 8007716:	f107 031c 	add.w	r3, r7, #28
 800771a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800771e:	e883 0003 	stmia.w	r3, {r0, r1}
 8007722:	f107 031c 	add.w	r3, r7, #28
 8007726:	4618      	mov	r0, r3
 8007728:	f001 fedf 	bl	80094ea <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 800772c:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007730:	f001 ff2a 	bl	8009588 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 8007734:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8007738:	f000 fe37 	bl	80083aa <RadioRead>
 800773c:	4603      	mov	r3, r0
 800773e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=RADIO_BIT_MASK(4);
 8007742:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007746:	f023 0310 	bic.w	r3, r3, #16
 800774a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 800774e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007752:	4619      	mov	r1, r3
 8007754:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8007758:	f000 fe15 	bl	8008386 <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 800775c:	2104      	movs	r1, #4
 800775e:	f640 00b9 	movw	r0, #2233	; 0x8b9
 8007762:	f000 fe10 	bl	8008386 <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 8007766:	f640 009b 	movw	r0, #2203	; 0x89b
 800776a:	f000 fe1e 	bl	80083aa <RadioRead>
 800776e:	4603      	mov	r3, r0
 8007770:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8007774:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007778:	f023 031c 	bic.w	r3, r3, #28
 800777c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 8007780:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007784:	f043 0308 	orr.w	r3, r3, #8
 8007788:	b2db      	uxtb	r3, r3
 800778a:	4619      	mov	r1, r3
 800778c:	f640 009b 	movw	r0, #2203	; 0x89b
 8007790:	f000 fdf9 	bl	8008386 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 8007794:	f240 60d1 	movw	r0, #1745	; 0x6d1
 8007798:	f000 fe07 	bl	80083aa <RadioRead>
 800779c:	4603      	mov	r3, r0
 800779e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 80077a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80077a6:	f023 0318 	bic.w	r3, r3, #24
 80077aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 80077ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80077b2:	f043 0318 	orr.w	r3, r3, #24
 80077b6:	b2db      	uxtb	r3, r3
 80077b8:	4619      	mov	r1, r3
 80077ba:	f240 60d1 	movw	r0, #1745	; 0x6d1
 80077be:	f000 fde2 	bl	8008386 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 80077c2:	f240 60ac 	movw	r0, #1708	; 0x6ac
 80077c6:	f000 fdf0 	bl	80083aa <RadioRead>
 80077ca:	4603      	mov	r3, r0
 80077cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 80077d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80077d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 80077dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80077e0:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 80077e4:	b2db      	uxtb	r3, r3
 80077e6:	4619      	mov	r1, r3
 80077e8:	f240 60ac 	movw	r0, #1708	; 0x6ac
 80077ec:	f000 fdcb 	bl	8008386 <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 80077f0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80077f2:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80077f6:	fb02 f303 	mul.w	r3, r2, r3
 80077fa:	461a      	mov	r2, r3
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8007802:	4a4b      	ldr	r2, [pc, #300]	; (8007930 <RadioSetRxConfig+0x2fc>)
 8007804:	6093      	str	r3, [r2, #8]
            break;
 8007806:	e115      	b.n	8007a34 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8007808:	2000      	movs	r0, #0
 800780a:	f002 f835 	bl	8009878 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800780e:	4b48      	ldr	r3, [pc, #288]	; (8007930 <RadioSetRxConfig+0x2fc>)
 8007810:	2200      	movs	r2, #0
 8007812:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8007816:	4a46      	ldr	r2, [pc, #280]	; (8007930 <RadioSetRxConfig+0x2fc>)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 800781c:	4b44      	ldr	r3, [pc, #272]	; (8007930 <RadioSetRxConfig+0x2fc>)
 800781e:	220b      	movs	r2, #11
 8007820:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8007824:	68b8      	ldr	r0, [r7, #8]
 8007826:	f002 fef9 	bl	800a61c <SUBGRF_GetFskBandwidthRegValue>
 800782a:	4603      	mov	r3, r0
 800782c:	461a      	mov	r2, r3
 800782e:	4b40      	ldr	r3, [pc, #256]	; (8007930 <RadioSetRxConfig+0x2fc>)
 8007830:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8007834:	4b3e      	ldr	r3, [pc, #248]	; (8007930 <RadioSetRxConfig+0x2fc>)
 8007836:	2200      	movs	r2, #0
 8007838:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 800783a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800783c:	00db      	lsls	r3, r3, #3
 800783e:	b29a      	uxth	r2, r3
 8007840:	4b3b      	ldr	r3, [pc, #236]	; (8007930 <RadioSetRxConfig+0x2fc>)
 8007842:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8007844:	4b3a      	ldr	r3, [pc, #232]	; (8007930 <RadioSetRxConfig+0x2fc>)
 8007846:	2204      	movs	r2, #4
 8007848:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 800784a:	4b39      	ldr	r3, [pc, #228]	; (8007930 <RadioSetRxConfig+0x2fc>)
 800784c:	2218      	movs	r2, #24
 800784e:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8007850:	4b37      	ldr	r3, [pc, #220]	; (8007930 <RadioSetRxConfig+0x2fc>)
 8007852:	2200      	movs	r2, #0
 8007854:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8007856:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800785a:	f083 0301 	eor.w	r3, r3, #1
 800785e:	b2db      	uxtb	r3, r3
 8007860:	461a      	mov	r2, r3
 8007862:	4b33      	ldr	r3, [pc, #204]	; (8007930 <RadioSetRxConfig+0x2fc>)
 8007864:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8007866:	4b33      	ldr	r3, [pc, #204]	; (8007934 <RadioSetRxConfig+0x300>)
 8007868:	781a      	ldrb	r2, [r3, #0]
 800786a:	4b31      	ldr	r3, [pc, #196]	; (8007930 <RadioSetRxConfig+0x2fc>)
 800786c:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 800786e:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8007872:	2b00      	cmp	r3, #0
 8007874:	d003      	beq.n	800787e <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8007876:	4b2e      	ldr	r3, [pc, #184]	; (8007930 <RadioSetRxConfig+0x2fc>)
 8007878:	22f2      	movs	r2, #242	; 0xf2
 800787a:	75da      	strb	r2, [r3, #23]
 800787c:	e002      	b.n	8007884 <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 800787e:	4b2c      	ldr	r3, [pc, #176]	; (8007930 <RadioSetRxConfig+0x2fc>)
 8007880:	2201      	movs	r2, #1
 8007882:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8007884:	4b2a      	ldr	r3, [pc, #168]	; (8007930 <RadioSetRxConfig+0x2fc>)
 8007886:	2201      	movs	r2, #1
 8007888:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 800788a:	f000 fc6e 	bl	800816a <RadioStandby>
            RadioSetModem( MODEM_FSK );
 800788e:	2000      	movs	r0, #0
 8007890:	f7ff fdfc 	bl	800748c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8007894:	4828      	ldr	r0, [pc, #160]	; (8007938 <RadioSetRxConfig+0x304>)
 8007896:	f002 fa8d 	bl	8009db4 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800789a:	4828      	ldr	r0, [pc, #160]	; (800793c <RadioSetRxConfig+0x308>)
 800789c:	f002 fb5c 	bl	8009f58 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80078a0:	4a28      	ldr	r2, [pc, #160]	; (8007944 <RadioSetRxConfig+0x310>)
 80078a2:	f107 0314 	add.w	r3, r7, #20
 80078a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80078aa:	e883 0003 	stmia.w	r3, {r0, r1}
 80078ae:	f107 0314 	add.w	r3, r7, #20
 80078b2:	4618      	mov	r0, r3
 80078b4:	f001 fe19 	bl	80094ea <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 80078b8:	f240 10ff 	movw	r0, #511	; 0x1ff
 80078bc:	f001 fe64 	bl	8009588 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 80078c0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80078c2:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80078c6:	fb02 f303 	mul.w	r3, r2, r3
 80078ca:	461a      	mov	r2, r3
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80078d2:	4a17      	ldr	r2, [pc, #92]	; (8007930 <RadioSetRxConfig+0x2fc>)
 80078d4:	6093      	str	r3, [r2, #8]
            break;
 80078d6:	e0ad      	b.n	8007a34 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 80078d8:	2000      	movs	r0, #0
 80078da:	f001 ffcd 	bl	8009878 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80078de:	4b14      	ldr	r3, [pc, #80]	; (8007930 <RadioSetRxConfig+0x2fc>)
 80078e0:	2201      	movs	r2, #1
 80078e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	b2da      	uxtb	r2, r3
 80078ea:	4b11      	ldr	r3, [pc, #68]	; (8007930 <RadioSetRxConfig+0x2fc>)
 80078ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 80078f0:	4a15      	ldr	r2, [pc, #84]	; (8007948 <RadioSetRxConfig+0x314>)
 80078f2:	68bb      	ldr	r3, [r7, #8]
 80078f4:	4413      	add	r3, r2
 80078f6:	781a      	ldrb	r2, [r3, #0]
 80078f8:	4b0d      	ldr	r3, [pc, #52]	; (8007930 <RadioSetRxConfig+0x2fc>)
 80078fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 80078fe:	4a0c      	ldr	r2, [pc, #48]	; (8007930 <RadioSetRxConfig+0x2fc>)
 8007900:	7bbb      	ldrb	r3, [r7, #14]
 8007902:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8007906:	68bb      	ldr	r3, [r7, #8]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d105      	bne.n	8007918 <RadioSetRxConfig+0x2e4>
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2b0b      	cmp	r3, #11
 8007910:	d008      	beq.n	8007924 <RadioSetRxConfig+0x2f0>
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2b0c      	cmp	r3, #12
 8007916:	d005      	beq.n	8007924 <RadioSetRxConfig+0x2f0>
 8007918:	68bb      	ldr	r3, [r7, #8]
 800791a:	2b01      	cmp	r3, #1
 800791c:	d116      	bne.n	800794c <RadioSetRxConfig+0x318>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2b0c      	cmp	r3, #12
 8007922:	d113      	bne.n	800794c <RadioSetRxConfig+0x318>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8007924:	4b02      	ldr	r3, [pc, #8]	; (8007930 <RadioSetRxConfig+0x2fc>)
 8007926:	2201      	movs	r2, #1
 8007928:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 800792c:	e012      	b.n	8007954 <RadioSetRxConfig+0x320>
 800792e:	bf00      	nop
 8007930:	20000288 	.word	0x20000288
 8007934:	20000008 	.word	0x20000008
 8007938:	200002c0 	.word	0x200002c0
 800793c:	20000296 	.word	0x20000296
 8007940:	0800c4c0 	.word	0x0800c4c0
 8007944:	0800c4c8 	.word	0x0800c4c8
 8007948:	0800c920 	.word	0x0800c920
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 800794c:	4b3b      	ldr	r3, [pc, #236]	; (8007a3c <RadioSetRxConfig+0x408>)
 800794e:	2200      	movs	r2, #0
 8007950:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8007954:	4b39      	ldr	r3, [pc, #228]	; (8007a3c <RadioSetRxConfig+0x408>)
 8007956:	2201      	movs	r2, #1
 8007958:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800795a:	4b38      	ldr	r3, [pc, #224]	; (8007a3c <RadioSetRxConfig+0x408>)
 800795c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007960:	2b05      	cmp	r3, #5
 8007962:	d004      	beq.n	800796e <RadioSetRxConfig+0x33a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8007964:	4b35      	ldr	r3, [pc, #212]	; (8007a3c <RadioSetRxConfig+0x408>)
 8007966:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800796a:	2b06      	cmp	r3, #6
 800796c:	d10a      	bne.n	8007984 <RadioSetRxConfig+0x350>
                if( preambleLen < 12 )
 800796e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007970:	2b0b      	cmp	r3, #11
 8007972:	d803      	bhi.n	800797c <RadioSetRxConfig+0x348>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8007974:	4b31      	ldr	r3, [pc, #196]	; (8007a3c <RadioSetRxConfig+0x408>)
 8007976:	220c      	movs	r2, #12
 8007978:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 800797a:	e006      	b.n	800798a <RadioSetRxConfig+0x356>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800797c:	4a2f      	ldr	r2, [pc, #188]	; (8007a3c <RadioSetRxConfig+0x408>)
 800797e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007980:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8007982:	e002      	b.n	800798a <RadioSetRxConfig+0x356>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8007984:	4a2d      	ldr	r2, [pc, #180]	; (8007a3c <RadioSetRxConfig+0x408>)
 8007986:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007988:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 800798a:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 800798e:	4b2b      	ldr	r3, [pc, #172]	; (8007a3c <RadioSetRxConfig+0x408>)
 8007990:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8007992:	4b2b      	ldr	r3, [pc, #172]	; (8007a40 <RadioSetRxConfig+0x40c>)
 8007994:	781a      	ldrb	r2, [r3, #0]
 8007996:	4b29      	ldr	r3, [pc, #164]	; (8007a3c <RadioSetRxConfig+0x408>)
 8007998:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 800799a:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 800799e:	4b27      	ldr	r3, [pc, #156]	; (8007a3c <RadioSetRxConfig+0x408>)
 80079a0:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 80079a4:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 80079a8:	4b24      	ldr	r3, [pc, #144]	; (8007a3c <RadioSetRxConfig+0x408>)
 80079aa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 80079ae:	f000 fbdc 	bl	800816a <RadioStandby>
            RadioSetModem( MODEM_LORA );
 80079b2:	2001      	movs	r0, #1
 80079b4:	f7ff fd6a 	bl	800748c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80079b8:	4822      	ldr	r0, [pc, #136]	; (8007a44 <RadioSetRxConfig+0x410>)
 80079ba:	f002 f9fb 	bl	8009db4 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80079be:	4822      	ldr	r0, [pc, #136]	; (8007a48 <RadioSetRxConfig+0x414>)
 80079c0:	f002 faca 	bl	8009f58 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 80079c4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80079c6:	b2db      	uxtb	r3, r3
 80079c8:	4618      	mov	r0, r3
 80079ca:	f001 ff64 	bl	8009896 <SUBGRF_SetLoRaSymbNumTimeout>
            SUBGRF_WriteRegister(SUBGHZ_AGCCFG,SUBGRF_ReadRegister(SUBGHZ_AGCCFG)&0x1);
 80079ce:	f640 00a3 	movw	r0, #2211	; 0x8a3
 80079d2:	f002 fc1d 	bl	800a210 <SUBGRF_ReadRegister>
 80079d6:	4603      	mov	r3, r0
 80079d8:	f003 0301 	and.w	r3, r3, #1
 80079dc:	b2db      	uxtb	r3, r3
 80079de:	4619      	mov	r1, r3
 80079e0:	f640 00a3 	movw	r0, #2211	; 0x8a3
 80079e4:	f002 fc00 	bl	800a1e8 <SUBGRF_WriteRegister>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 80079e8:	4b14      	ldr	r3, [pc, #80]	; (8007a3c <RadioSetRxConfig+0x408>)
 80079ea:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80079ee:	2b01      	cmp	r3, #1
 80079f0:	d10d      	bne.n	8007a0e <RadioSetRxConfig+0x3da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 80079f2:	f240 7036 	movw	r0, #1846	; 0x736
 80079f6:	f002 fc0b 	bl	800a210 <SUBGRF_ReadRegister>
 80079fa:	4603      	mov	r3, r0
 80079fc:	f023 0304 	bic.w	r3, r3, #4
 8007a00:	b2db      	uxtb	r3, r3
 8007a02:	4619      	mov	r1, r3
 8007a04:	f240 7036 	movw	r0, #1846	; 0x736
 8007a08:	f002 fbee 	bl	800a1e8 <SUBGRF_WriteRegister>
 8007a0c:	e00c      	b.n	8007a28 <RadioSetRxConfig+0x3f4>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8007a0e:	f240 7036 	movw	r0, #1846	; 0x736
 8007a12:	f002 fbfd 	bl	800a210 <SUBGRF_ReadRegister>
 8007a16:	4603      	mov	r3, r0
 8007a18:	f043 0304 	orr.w	r3, r3, #4
 8007a1c:	b2db      	uxtb	r3, r3
 8007a1e:	4619      	mov	r1, r3
 8007a20:	f240 7036 	movw	r0, #1846	; 0x736
 8007a24:	f002 fbe0 	bl	800a1e8 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 8007a28:	4b04      	ldr	r3, [pc, #16]	; (8007a3c <RadioSetRxConfig+0x408>)
 8007a2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007a2e:	609a      	str	r2, [r3, #8]
            break;
 8007a30:	e000      	b.n	8007a34 <RadioSetRxConfig+0x400>
            break;
 8007a32:	bf00      	nop
    }
}
 8007a34:	bf00      	nop
 8007a36:	3728      	adds	r7, #40	; 0x28
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	bd80      	pop	{r7, pc}
 8007a3c:	20000288 	.word	0x20000288
 8007a40:	20000008 	.word	0x20000008
 8007a44:	200002c0 	.word	0x200002c0
 8007a48:	20000296 	.word	0x20000296

08007a4c <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b086      	sub	sp, #24
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	60ba      	str	r2, [r7, #8]
 8007a54:	607b      	str	r3, [r7, #4]
 8007a56:	4603      	mov	r3, r0
 8007a58:	73fb      	strb	r3, [r7, #15]
 8007a5a:	460b      	mov	r3, r1
 8007a5c:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    RFW_DeInit();
 8007a5e:	f002 feaa 	bl	800a7b6 <RFW_DeInit>
    switch( modem )
 8007a62:	7bfb      	ldrb	r3, [r7, #15]
 8007a64:	2b04      	cmp	r3, #4
 8007a66:	f000 80c7 	beq.w	8007bf8 <RadioSetTxConfig+0x1ac>
 8007a6a:	2b04      	cmp	r3, #4
 8007a6c:	f300 80d6 	bgt.w	8007c1c <RadioSetTxConfig+0x1d0>
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d002      	beq.n	8007a7a <RadioSetTxConfig+0x2e>
 8007a74:	2b01      	cmp	r3, #1
 8007a76:	d059      	beq.n	8007b2c <RadioSetTxConfig+0xe0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 8007a78:	e0d0      	b.n	8007c1c <RadioSetTxConfig+0x1d0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8007a7a:	4b77      	ldr	r3, [pc, #476]	; (8007c58 <RadioSetTxConfig+0x20c>)
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8007a82:	4a75      	ldr	r2, [pc, #468]	; (8007c58 <RadioSetTxConfig+0x20c>)
 8007a84:	6a3b      	ldr	r3, [r7, #32]
 8007a86:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8007a88:	4b73      	ldr	r3, [pc, #460]	; (8007c58 <RadioSetTxConfig+0x20c>)
 8007a8a:	220b      	movs	r2, #11
 8007a8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	f002 fdc3 	bl	800a61c <SUBGRF_GetFskBandwidthRegValue>
 8007a96:	4603      	mov	r3, r0
 8007a98:	461a      	mov	r2, r3
 8007a9a:	4b6f      	ldr	r3, [pc, #444]	; (8007c58 <RadioSetTxConfig+0x20c>)
 8007a9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 8007aa0:	4a6d      	ldr	r2, [pc, #436]	; (8007c58 <RadioSetTxConfig+0x20c>)
 8007aa2:	68bb      	ldr	r3, [r7, #8]
 8007aa4:	6413      	str	r3, [r2, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8007aa6:	4b6c      	ldr	r3, [pc, #432]	; (8007c58 <RadioSetTxConfig+0x20c>)
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8007aac:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007aae:	00db      	lsls	r3, r3, #3
 8007ab0:	b29a      	uxth	r2, r3
 8007ab2:	4b69      	ldr	r3, [pc, #420]	; (8007c58 <RadioSetTxConfig+0x20c>)
 8007ab4:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8007ab6:	4b68      	ldr	r3, [pc, #416]	; (8007c58 <RadioSetTxConfig+0x20c>)
 8007ab8:	2204      	movs	r2, #4
 8007aba:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 8007abc:	4b66      	ldr	r3, [pc, #408]	; (8007c58 <RadioSetTxConfig+0x20c>)
 8007abe:	2218      	movs	r2, #24
 8007ac0:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8007ac2:	4b65      	ldr	r3, [pc, #404]	; (8007c58 <RadioSetTxConfig+0x20c>)
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8007ac8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007acc:	f083 0301 	eor.w	r3, r3, #1
 8007ad0:	b2db      	uxtb	r3, r3
 8007ad2:	461a      	mov	r2, r3
 8007ad4:	4b60      	ldr	r3, [pc, #384]	; (8007c58 <RadioSetTxConfig+0x20c>)
 8007ad6:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 8007ad8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d003      	beq.n	8007ae8 <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8007ae0:	4b5d      	ldr	r3, [pc, #372]	; (8007c58 <RadioSetTxConfig+0x20c>)
 8007ae2:	22f2      	movs	r2, #242	; 0xf2
 8007ae4:	75da      	strb	r2, [r3, #23]
 8007ae6:	e002      	b.n	8007aee <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8007ae8:	4b5b      	ldr	r3, [pc, #364]	; (8007c58 <RadioSetTxConfig+0x20c>)
 8007aea:	2201      	movs	r2, #1
 8007aec:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8007aee:	4b5a      	ldr	r3, [pc, #360]	; (8007c58 <RadioSetTxConfig+0x20c>)
 8007af0:	2201      	movs	r2, #1
 8007af2:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8007af4:	f000 fb39 	bl	800816a <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 8007af8:	2000      	movs	r0, #0
 8007afa:	f7ff fcc7 	bl	800748c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8007afe:	4857      	ldr	r0, [pc, #348]	; (8007c5c <RadioSetTxConfig+0x210>)
 8007b00:	f002 f958 	bl	8009db4 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007b04:	4856      	ldr	r0, [pc, #344]	; (8007c60 <RadioSetTxConfig+0x214>)
 8007b06:	f002 fa27 	bl	8009f58 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8007b0a:	4a56      	ldr	r2, [pc, #344]	; (8007c64 <RadioSetTxConfig+0x218>)
 8007b0c:	f107 0310 	add.w	r3, r7, #16
 8007b10:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007b14:	e883 0003 	stmia.w	r3, {r0, r1}
 8007b18:	f107 0310 	add.w	r3, r7, #16
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	f001 fce4 	bl	80094ea <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8007b22:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007b26:	f001 fd2f 	bl	8009588 <SUBGRF_SetWhiteningSeed>
            break;
 8007b2a:	e078      	b.n	8007c1e <RadioSetTxConfig+0x1d2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8007b2c:	4b4a      	ldr	r3, [pc, #296]	; (8007c58 <RadioSetTxConfig+0x20c>)
 8007b2e:	2201      	movs	r2, #1
 8007b30:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 8007b34:	6a3b      	ldr	r3, [r7, #32]
 8007b36:	b2da      	uxtb	r2, r3
 8007b38:	4b47      	ldr	r3, [pc, #284]	; (8007c58 <RadioSetTxConfig+0x20c>)
 8007b3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 8007b3e:	4a4a      	ldr	r2, [pc, #296]	; (8007c68 <RadioSetTxConfig+0x21c>)
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	4413      	add	r3, r2
 8007b44:	781a      	ldrb	r2, [r3, #0]
 8007b46:	4b44      	ldr	r3, [pc, #272]	; (8007c58 <RadioSetTxConfig+0x20c>)
 8007b48:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 8007b4c:	4a42      	ldr	r2, [pc, #264]	; (8007c58 <RadioSetTxConfig+0x20c>)
 8007b4e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007b52:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d105      	bne.n	8007b68 <RadioSetTxConfig+0x11c>
 8007b5c:	6a3b      	ldr	r3, [r7, #32]
 8007b5e:	2b0b      	cmp	r3, #11
 8007b60:	d008      	beq.n	8007b74 <RadioSetTxConfig+0x128>
 8007b62:	6a3b      	ldr	r3, [r7, #32]
 8007b64:	2b0c      	cmp	r3, #12
 8007b66:	d005      	beq.n	8007b74 <RadioSetTxConfig+0x128>
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2b01      	cmp	r3, #1
 8007b6c:	d107      	bne.n	8007b7e <RadioSetTxConfig+0x132>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8007b6e:	6a3b      	ldr	r3, [r7, #32]
 8007b70:	2b0c      	cmp	r3, #12
 8007b72:	d104      	bne.n	8007b7e <RadioSetTxConfig+0x132>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8007b74:	4b38      	ldr	r3, [pc, #224]	; (8007c58 <RadioSetTxConfig+0x20c>)
 8007b76:	2201      	movs	r2, #1
 8007b78:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8007b7c:	e003      	b.n	8007b86 <RadioSetTxConfig+0x13a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8007b7e:	4b36      	ldr	r3, [pc, #216]	; (8007c58 <RadioSetTxConfig+0x20c>)
 8007b80:	2200      	movs	r2, #0
 8007b82:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8007b86:	4b34      	ldr	r3, [pc, #208]	; (8007c58 <RadioSetTxConfig+0x20c>)
 8007b88:	2201      	movs	r2, #1
 8007b8a:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8007b8c:	4b32      	ldr	r3, [pc, #200]	; (8007c58 <RadioSetTxConfig+0x20c>)
 8007b8e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007b92:	2b05      	cmp	r3, #5
 8007b94:	d004      	beq.n	8007ba0 <RadioSetTxConfig+0x154>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8007b96:	4b30      	ldr	r3, [pc, #192]	; (8007c58 <RadioSetTxConfig+0x20c>)
 8007b98:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8007b9c:	2b06      	cmp	r3, #6
 8007b9e:	d10a      	bne.n	8007bb6 <RadioSetTxConfig+0x16a>
                if( preambleLen < 12 )
 8007ba0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007ba2:	2b0b      	cmp	r3, #11
 8007ba4:	d803      	bhi.n	8007bae <RadioSetTxConfig+0x162>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8007ba6:	4b2c      	ldr	r3, [pc, #176]	; (8007c58 <RadioSetTxConfig+0x20c>)
 8007ba8:	220c      	movs	r2, #12
 8007baa:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8007bac:	e006      	b.n	8007bbc <RadioSetTxConfig+0x170>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8007bae:	4a2a      	ldr	r2, [pc, #168]	; (8007c58 <RadioSetTxConfig+0x20c>)
 8007bb0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007bb2:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8007bb4:	e002      	b.n	8007bbc <RadioSetTxConfig+0x170>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8007bb6:	4a28      	ldr	r2, [pc, #160]	; (8007c58 <RadioSetTxConfig+0x20c>)
 8007bb8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007bba:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8007bbc:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8007bc0:	4b25      	ldr	r3, [pc, #148]	; (8007c58 <RadioSetTxConfig+0x20c>)
 8007bc2:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8007bc4:	4b29      	ldr	r3, [pc, #164]	; (8007c6c <RadioSetTxConfig+0x220>)
 8007bc6:	781a      	ldrb	r2, [r3, #0]
 8007bc8:	4b23      	ldr	r3, [pc, #140]	; (8007c58 <RadioSetTxConfig+0x20c>)
 8007bca:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8007bcc:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8007bd0:	4b21      	ldr	r3, [pc, #132]	; (8007c58 <RadioSetTxConfig+0x20c>)
 8007bd2:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8007bd6:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8007bda:	4b1f      	ldr	r3, [pc, #124]	; (8007c58 <RadioSetTxConfig+0x20c>)
 8007bdc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 8007be0:	f000 fac3 	bl	800816a <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8007be4:	2001      	movs	r0, #1
 8007be6:	f7ff fc51 	bl	800748c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8007bea:	481c      	ldr	r0, [pc, #112]	; (8007c5c <RadioSetTxConfig+0x210>)
 8007bec:	f002 f8e2 	bl	8009db4 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007bf0:	481b      	ldr	r0, [pc, #108]	; (8007c60 <RadioSetTxConfig+0x214>)
 8007bf2:	f002 f9b1 	bl	8009f58 <SUBGRF_SetPacketParams>
            break;
 8007bf6:	e012      	b.n	8007c1e <RadioSetTxConfig+0x1d2>
            RadioSetModem(MODEM_SIGFOX_TX);
 8007bf8:	2004      	movs	r0, #4
 8007bfa:	f7ff fc47 	bl	800748c <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8007bfe:	4b16      	ldr	r3, [pc, #88]	; (8007c58 <RadioSetTxConfig+0x20c>)
 8007c00:	2202      	movs	r2, #2
 8007c02:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 8007c06:	4a14      	ldr	r2, [pc, #80]	; (8007c58 <RadioSetTxConfig+0x20c>)
 8007c08:	6a3b      	ldr	r3, [r7, #32]
 8007c0a:	6493      	str	r3, [r2, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8007c0c:	4b12      	ldr	r3, [pc, #72]	; (8007c58 <RadioSetTxConfig+0x20c>)
 8007c0e:	2216      	movs	r2, #22
 8007c10:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8007c14:	4811      	ldr	r0, [pc, #68]	; (8007c5c <RadioSetTxConfig+0x210>)
 8007c16:	f002 f8cd 	bl	8009db4 <SUBGRF_SetModulationParams>
            break;
 8007c1a:	e000      	b.n	8007c1e <RadioSetTxConfig+0x1d2>
            break;
 8007c1c:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8007c1e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007c22:	4618      	mov	r0, r3
 8007c24:	f002 fbfc 	bl	800a420 <SUBGRF_SetRfTxPower>
 8007c28:	4603      	mov	r3, r0
 8007c2a:	461a      	mov	r2, r3
 8007c2c:	4b0a      	ldr	r3, [pc, #40]	; (8007c58 <RadioSetTxConfig+0x20c>)
 8007c2e:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8007c32:	210e      	movs	r1, #14
 8007c34:	f640 101f 	movw	r0, #2335	; 0x91f
 8007c38:	f002 fad6 	bl	800a1e8 <SUBGRF_WriteRegister>
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 8007c3c:	4b06      	ldr	r3, [pc, #24]	; (8007c58 <RadioSetTxConfig+0x20c>)
 8007c3e:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8007c42:	4618      	mov	r0, r3
 8007c44:	f002 fdcb 	bl	800a7de <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8007c48:	4a03      	ldr	r2, [pc, #12]	; (8007c58 <RadioSetTxConfig+0x20c>)
 8007c4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c4c:	6053      	str	r3, [r2, #4]
}
 8007c4e:	bf00      	nop
 8007c50:	3718      	adds	r7, #24
 8007c52:	46bd      	mov	sp, r7
 8007c54:	bd80      	pop	{r7, pc}
 8007c56:	bf00      	nop
 8007c58:	20000288 	.word	0x20000288
 8007c5c:	200002c0 	.word	0x200002c0
 8007c60:	20000296 	.word	0x20000296
 8007c64:	0800c4c8 	.word	0x0800c4c8
 8007c68:	0800c920 	.word	0x0800c920
 8007c6c:	20000008 	.word	0x20000008

08007c70 <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 8007c70:	b480      	push	{r7}
 8007c72:	b083      	sub	sp, #12
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
    return true;
 8007c78:	2301      	movs	r3, #1
}
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	370c      	adds	r7, #12
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	bc80      	pop	{r7}
 8007c82:	4770      	bx	lr

08007c84 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 8007c84:	b480      	push	{r7}
 8007c86:	b085      	sub	sp, #20
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 8007c8e:	2300      	movs	r3, #0
 8007c90:	60fb      	str	r3, [r7, #12]

    switch( bw )
 8007c92:	79fb      	ldrb	r3, [r7, #7]
 8007c94:	2b0a      	cmp	r3, #10
 8007c96:	d83e      	bhi.n	8007d16 <RadioGetLoRaBandwidthInHz+0x92>
 8007c98:	a201      	add	r2, pc, #4	; (adr r2, 8007ca0 <RadioGetLoRaBandwidthInHz+0x1c>)
 8007c9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c9e:	bf00      	nop
 8007ca0:	08007ccd 	.word	0x08007ccd
 8007ca4:	08007cdd 	.word	0x08007cdd
 8007ca8:	08007ced 	.word	0x08007ced
 8007cac:	08007cfd 	.word	0x08007cfd
 8007cb0:	08007d05 	.word	0x08007d05
 8007cb4:	08007d0b 	.word	0x08007d0b
 8007cb8:	08007d11 	.word	0x08007d11
 8007cbc:	08007d17 	.word	0x08007d17
 8007cc0:	08007cd5 	.word	0x08007cd5
 8007cc4:	08007ce5 	.word	0x08007ce5
 8007cc8:	08007cf5 	.word	0x08007cf5
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 8007ccc:	f641 6384 	movw	r3, #7812	; 0x1e84
 8007cd0:	60fb      	str	r3, [r7, #12]
        break;
 8007cd2:	e020      	b.n	8007d16 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 8007cd4:	f642 03b1 	movw	r3, #10417	; 0x28b1
 8007cd8:	60fb      	str	r3, [r7, #12]
        break;
 8007cda:	e01c      	b.n	8007d16 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 8007cdc:	f643 5309 	movw	r3, #15625	; 0x3d09
 8007ce0:	60fb      	str	r3, [r7, #12]
        break;
 8007ce2:	e018      	b.n	8007d16 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 8007ce4:	f245 1361 	movw	r3, #20833	; 0x5161
 8007ce8:	60fb      	str	r3, [r7, #12]
        break;
 8007cea:	e014      	b.n	8007d16 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 8007cec:	f647 2312 	movw	r3, #31250	; 0x7a12
 8007cf0:	60fb      	str	r3, [r7, #12]
        break;
 8007cf2:	e010      	b.n	8007d16 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 8007cf4:	f24a 23c3 	movw	r3, #41667	; 0xa2c3
 8007cf8:	60fb      	str	r3, [r7, #12]
        break;
 8007cfa:	e00c      	b.n	8007d16 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 8007cfc:	f24f 4324 	movw	r3, #62500	; 0xf424
 8007d00:	60fb      	str	r3, [r7, #12]
        break;
 8007d02:	e008      	b.n	8007d16 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 8007d04:	4b07      	ldr	r3, [pc, #28]	; (8007d24 <RadioGetLoRaBandwidthInHz+0xa0>)
 8007d06:	60fb      	str	r3, [r7, #12]
        break;
 8007d08:	e005      	b.n	8007d16 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 8007d0a:	4b07      	ldr	r3, [pc, #28]	; (8007d28 <RadioGetLoRaBandwidthInHz+0xa4>)
 8007d0c:	60fb      	str	r3, [r7, #12]
        break;
 8007d0e:	e002      	b.n	8007d16 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 8007d10:	4b06      	ldr	r3, [pc, #24]	; (8007d2c <RadioGetLoRaBandwidthInHz+0xa8>)
 8007d12:	60fb      	str	r3, [r7, #12]
        break;
 8007d14:	bf00      	nop
    }

    return bandwidthInHz;
 8007d16:	68fb      	ldr	r3, [r7, #12]
}
 8007d18:	4618      	mov	r0, r3
 8007d1a:	3714      	adds	r7, #20
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	bc80      	pop	{r7}
 8007d20:	4770      	bx	lr
 8007d22:	bf00      	nop
 8007d24:	0001e848 	.word	0x0001e848
 8007d28:	0003d090 	.word	0x0003d090
 8007d2c:	0007a120 	.word	0x0007a120

08007d30 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8007d30:	b480      	push	{r7}
 8007d32:	b083      	sub	sp, #12
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
 8007d38:	4608      	mov	r0, r1
 8007d3a:	4611      	mov	r1, r2
 8007d3c:	461a      	mov	r2, r3
 8007d3e:	4603      	mov	r3, r0
 8007d40:	70fb      	strb	r3, [r7, #3]
 8007d42:	460b      	mov	r3, r1
 8007d44:	803b      	strh	r3, [r7, #0]
 8007d46:	4613      	mov	r3, r2
 8007d48:	70bb      	strb	r3, [r7, #2]
    return ( preambleLen << 3 ) +
 8007d4a:	883b      	ldrh	r3, [r7, #0]
 8007d4c:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8007d4e:	78ba      	ldrb	r2, [r7, #2]
 8007d50:	f082 0201 	eor.w	r2, r2, #1
 8007d54:	b2d2      	uxtb	r2, r2
 8007d56:	2a00      	cmp	r2, #0
 8007d58:	d001      	beq.n	8007d5e <RadioGetGfskTimeOnAirNumerator+0x2e>
 8007d5a:	2208      	movs	r2, #8
 8007d5c:	e000      	b.n	8007d60 <RadioGetGfskTimeOnAirNumerator+0x30>
 8007d5e:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 8007d60:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8007d62:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 8007d66:	7c3b      	ldrb	r3, [r7, #16]
 8007d68:	7d39      	ldrb	r1, [r7, #20]
 8007d6a:	2900      	cmp	r1, #0
 8007d6c:	d001      	beq.n	8007d72 <RadioGetGfskTimeOnAirNumerator+0x42>
 8007d6e:	2102      	movs	r1, #2
 8007d70:	e000      	b.n	8007d74 <RadioGetGfskTimeOnAirNumerator+0x44>
 8007d72:	2100      	movs	r1, #0
 8007d74:	440b      	add	r3, r1
 8007d76:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8007d78:	4413      	add	r3, r2
}
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	370c      	adds	r7, #12
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	bc80      	pop	{r7}
 8007d82:	4770      	bx	lr

08007d84 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8007d84:	b480      	push	{r7}
 8007d86:	b08b      	sub	sp, #44	; 0x2c
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	60f8      	str	r0, [r7, #12]
 8007d8c:	60b9      	str	r1, [r7, #8]
 8007d8e:	4611      	mov	r1, r2
 8007d90:	461a      	mov	r2, r3
 8007d92:	460b      	mov	r3, r1
 8007d94:	71fb      	strb	r3, [r7, #7]
 8007d96:	4613      	mov	r3, r2
 8007d98:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 8007d9a:	79fb      	ldrb	r3, [r7, #7]
 8007d9c:	3304      	adds	r3, #4
 8007d9e:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 8007da0:	2300      	movs	r3, #0
 8007da2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 8007da6:	68bb      	ldr	r3, [r7, #8]
 8007da8:	2b05      	cmp	r3, #5
 8007daa:	d002      	beq.n	8007db2 <RadioGetLoRaTimeOnAirNumerator+0x2e>
 8007dac:	68bb      	ldr	r3, [r7, #8]
 8007dae:	2b06      	cmp	r3, #6
 8007db0:	d104      	bne.n	8007dbc <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 8007db2:	88bb      	ldrh	r3, [r7, #4]
 8007db4:	2b0b      	cmp	r3, #11
 8007db6:	d801      	bhi.n	8007dbc <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 8007db8:	230c      	movs	r3, #12
 8007dba:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d105      	bne.n	8007dce <RadioGetLoRaTimeOnAirNumerator+0x4a>
 8007dc2:	68bb      	ldr	r3, [r7, #8]
 8007dc4:	2b0b      	cmp	r3, #11
 8007dc6:	d008      	beq.n	8007dda <RadioGetLoRaTimeOnAirNumerator+0x56>
 8007dc8:	68bb      	ldr	r3, [r7, #8]
 8007dca:	2b0c      	cmp	r3, #12
 8007dcc:	d005      	beq.n	8007dda <RadioGetLoRaTimeOnAirNumerator+0x56>
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	2b01      	cmp	r3, #1
 8007dd2:	d105      	bne.n	8007de0 <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8007dd4:	68bb      	ldr	r3, [r7, #8]
 8007dd6:	2b0c      	cmp	r3, #12
 8007dd8:	d102      	bne.n	8007de0 <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 8007dda:	2301      	movs	r3, #1
 8007ddc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8007de0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8007de4:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 8007de6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007dea:	2a00      	cmp	r2, #0
 8007dec:	d001      	beq.n	8007df2 <RadioGetLoRaTimeOnAirNumerator+0x6e>
 8007dee:	2210      	movs	r2, #16
 8007df0:	e000      	b.n	8007df4 <RadioGetLoRaTimeOnAirNumerator+0x70>
 8007df2:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8007df4:	4413      	add	r3, r2
 8007df6:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 8007df8:	68bb      	ldr	r3, [r7, #8]
 8007dfa:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 8007dfc:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 8007dfe:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8007e02:	2a00      	cmp	r2, #0
 8007e04:	d001      	beq.n	8007e0a <RadioGetLoRaTimeOnAirNumerator+0x86>
 8007e06:	2200      	movs	r2, #0
 8007e08:	e000      	b.n	8007e0c <RadioGetLoRaTimeOnAirNumerator+0x88>
 8007e0a:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 8007e0c:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8007e0e:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 8007e10:	68bb      	ldr	r3, [r7, #8]
 8007e12:	2b06      	cmp	r3, #6
 8007e14:	d803      	bhi.n	8007e1e <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 8007e16:	68bb      	ldr	r3, [r7, #8]
 8007e18:	009b      	lsls	r3, r3, #2
 8007e1a:	623b      	str	r3, [r7, #32]
 8007e1c:	e00e      	b.n	8007e3c <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 8007e1e:	69fb      	ldr	r3, [r7, #28]
 8007e20:	3308      	adds	r3, #8
 8007e22:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 8007e24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d004      	beq.n	8007e36 <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 8007e2c:	68bb      	ldr	r3, [r7, #8]
 8007e2e:	3b02      	subs	r3, #2
 8007e30:	009b      	lsls	r3, r3, #2
 8007e32:	623b      	str	r3, [r7, #32]
 8007e34:	e002      	b.n	8007e3c <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 8007e36:	68bb      	ldr	r3, [r7, #8]
 8007e38:	009b      	lsls	r3, r3, #2
 8007e3a:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 8007e3c:	69fb      	ldr	r3, [r7, #28]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	da01      	bge.n	8007e46 <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 8007e42:	2300      	movs	r3, #0
 8007e44:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 8007e46:	69fa      	ldr	r2, [r7, #28]
 8007e48:	6a3b      	ldr	r3, [r7, #32]
 8007e4a:	4413      	add	r3, r2
 8007e4c:	1e5a      	subs	r2, r3, #1
 8007e4e:	6a3b      	ldr	r3, [r7, #32]
 8007e50:	fb92 f3f3 	sdiv	r3, r2, r3
 8007e54:	697a      	ldr	r2, [r7, #20]
 8007e56:	fb03 f202 	mul.w	r2, r3, r2
 8007e5a:	88bb      	ldrh	r3, [r7, #4]
 8007e5c:	4413      	add	r3, r2
    int32_t intermediate =
 8007e5e:	330c      	adds	r3, #12
 8007e60:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 8007e62:	68bb      	ldr	r3, [r7, #8]
 8007e64:	2b06      	cmp	r3, #6
 8007e66:	d802      	bhi.n	8007e6e <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 8007e68:	69bb      	ldr	r3, [r7, #24]
 8007e6a:	3302      	adds	r3, #2
 8007e6c:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8007e6e:	69bb      	ldr	r3, [r7, #24]
 8007e70:	009b      	lsls	r3, r3, #2
 8007e72:	1c5a      	adds	r2, r3, #1
 8007e74:	68bb      	ldr	r3, [r7, #8]
 8007e76:	3b02      	subs	r3, #2
 8007e78:	fa02 f303 	lsl.w	r3, r2, r3
}
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	372c      	adds	r7, #44	; 0x2c
 8007e80:	46bd      	mov	sp, r7
 8007e82:	bc80      	pop	{r7}
 8007e84:	4770      	bx	lr
	...

08007e88 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b08a      	sub	sp, #40	; 0x28
 8007e8c:	af04      	add	r7, sp, #16
 8007e8e:	60b9      	str	r1, [r7, #8]
 8007e90:	607a      	str	r2, [r7, #4]
 8007e92:	461a      	mov	r2, r3
 8007e94:	4603      	mov	r3, r0
 8007e96:	73fb      	strb	r3, [r7, #15]
 8007e98:	4613      	mov	r3, r2
 8007e9a:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 8007ea0:	2301      	movs	r3, #1
 8007ea2:	613b      	str	r3, [r7, #16]

    switch( modem )
 8007ea4:	7bfb      	ldrb	r3, [r7, #15]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d002      	beq.n	8007eb0 <RadioTimeOnAir+0x28>
 8007eaa:	2b01      	cmp	r3, #1
 8007eac:	d017      	beq.n	8007ede <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 8007eae:	e035      	b.n	8007f1c <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 8007eb0:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 8007eb4:	8c3a      	ldrh	r2, [r7, #32]
 8007eb6:	7bb9      	ldrb	r1, [r7, #14]
 8007eb8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007ebc:	9301      	str	r3, [sp, #4]
 8007ebe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007ec2:	9300      	str	r3, [sp, #0]
 8007ec4:	4603      	mov	r3, r0
 8007ec6:	6878      	ldr	r0, [r7, #4]
 8007ec8:	f7ff ff32 	bl	8007d30 <RadioGetGfskTimeOnAirNumerator>
 8007ecc:	4603      	mov	r3, r0
 8007ece:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007ed2:	fb02 f303 	mul.w	r3, r2, r3
 8007ed6:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	613b      	str	r3, [r7, #16]
        break;
 8007edc:	e01e      	b.n	8007f1c <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 8007ede:	8c39      	ldrh	r1, [r7, #32]
 8007ee0:	7bba      	ldrb	r2, [r7, #14]
 8007ee2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007ee6:	9302      	str	r3, [sp, #8]
 8007ee8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007eec:	9301      	str	r3, [sp, #4]
 8007eee:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007ef2:	9300      	str	r3, [sp, #0]
 8007ef4:	460b      	mov	r3, r1
 8007ef6:	6879      	ldr	r1, [r7, #4]
 8007ef8:	68b8      	ldr	r0, [r7, #8]
 8007efa:	f7ff ff43 	bl	8007d84 <RadioGetLoRaTimeOnAirNumerator>
 8007efe:	4603      	mov	r3, r0
 8007f00:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007f04:	fb02 f303 	mul.w	r3, r2, r3
 8007f08:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 8007f0a:	4a0a      	ldr	r2, [pc, #40]	; (8007f34 <RadioTimeOnAir+0xac>)
 8007f0c:	68bb      	ldr	r3, [r7, #8]
 8007f0e:	4413      	add	r3, r2
 8007f10:	781b      	ldrb	r3, [r3, #0]
 8007f12:	4618      	mov	r0, r3
 8007f14:	f7ff feb6 	bl	8007c84 <RadioGetLoRaBandwidthInHz>
 8007f18:	6138      	str	r0, [r7, #16]
        break;
 8007f1a:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator );
 8007f1c:	697a      	ldr	r2, [r7, #20]
 8007f1e:	693b      	ldr	r3, [r7, #16]
 8007f20:	4413      	add	r3, r2
 8007f22:	1e5a      	subs	r2, r3, #1
 8007f24:	693b      	ldr	r3, [r7, #16]
 8007f26:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	3718      	adds	r7, #24
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	bd80      	pop	{r7, pc}
 8007f32:	bf00      	nop
 8007f34:	0800c920 	.word	0x0800c920

08007f38 <RadioSend>:

static radio_status_t RadioSend( uint8_t *buffer, uint8_t size )
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b084      	sub	sp, #16
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
 8007f40:	460b      	mov	r3, r1
 8007f42:	70fb      	strb	r3, [r7, #3]
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 8007f44:	2300      	movs	r3, #0
 8007f46:	2200      	movs	r2, #0
 8007f48:	f240 2101 	movw	r1, #513	; 0x201
 8007f4c:	f240 2001 	movw	r0, #513	; 0x201
 8007f50:	f001 fd9a 	bl	8009a88 <SUBGRF_SetDioIrqParams>
                            IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );

    /* Set DBG pin */
    DBG_GPIO_RADIO_TX( SET );
 8007f54:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007f58:	4874      	ldr	r0, [pc, #464]	; (800812c <RadioSend+0x1f4>)
 8007f5a:	f7ff fa09 	bl	8007370 <LL_GPIO_SetOutputPin>

    /* Set RF switch */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8007f5e:	4b74      	ldr	r3, [pc, #464]	; (8008130 <RadioSend+0x1f8>)
 8007f60:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8007f64:	2101      	movs	r1, #1
 8007f66:	4618      	mov	r0, r3
 8007f68:	f002 fa32 	bl	800a3d0 <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 8007f6c:	4b70      	ldr	r3, [pc, #448]	; (8008130 <RadioSend+0x1f8>)
 8007f6e:	781b      	ldrb	r3, [r3, #0]
 8007f70:	2b01      	cmp	r3, #1
 8007f72:	d112      	bne.n	8007f9a <RadioSend+0x62>
 8007f74:	4b6e      	ldr	r3, [pc, #440]	; (8008130 <RadioSend+0x1f8>)
 8007f76:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007f7a:	2b06      	cmp	r3, #6
 8007f7c:	d10d      	bne.n	8007f9a <RadioSend+0x62>
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8007f7e:	f640 0089 	movw	r0, #2185	; 0x889
 8007f82:	f002 f945 	bl	800a210 <SUBGRF_ReadRegister>
 8007f86:	4603      	mov	r3, r0
 8007f88:	f023 0304 	bic.w	r3, r3, #4
 8007f8c:	b2db      	uxtb	r3, r3
 8007f8e:	4619      	mov	r1, r3
 8007f90:	f640 0089 	movw	r0, #2185	; 0x889
 8007f94:	f002 f928 	bl	800a1e8 <SUBGRF_WriteRegister>
 8007f98:	e00c      	b.n	8007fb4 <RadioSend+0x7c>
    }
    else
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8007f9a:	f640 0089 	movw	r0, #2185	; 0x889
 8007f9e:	f002 f937 	bl	800a210 <SUBGRF_ReadRegister>
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	f043 0304 	orr.w	r3, r3, #4
 8007fa8:	b2db      	uxtb	r3, r3
 8007faa:	4619      	mov	r1, r3
 8007fac:	f640 0089 	movw	r0, #2185	; 0x889
 8007fb0:	f002 f91a 	bl	800a1e8 <SUBGRF_WriteRegister>
    }
    else
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    {
        /* WORKAROUND END */
        switch( SubgRf.Modem )
 8007fb4:	4b5e      	ldr	r3, [pc, #376]	; (8008130 <RadioSend+0x1f8>)
 8007fb6:	781b      	ldrb	r3, [r3, #0]
 8007fb8:	2b04      	cmp	r3, #4
 8007fba:	f200 80a7 	bhi.w	800810c <RadioSend+0x1d4>
 8007fbe:	a201      	add	r2, pc, #4	; (adr r2, 8007fc4 <RadioSend+0x8c>)
 8007fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fc4:	08007ff3 	.word	0x08007ff3
 8007fc8:	08007fd9 	.word	0x08007fd9
 8007fcc:	08007ff3 	.word	0x08007ff3
 8007fd0:	08008055 	.word	0x08008055
 8007fd4:	08008075 	.word	0x08008075
        {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 8007fd8:	4a55      	ldr	r2, [pc, #340]	; (8008130 <RadioSend+0x1f8>)
 8007fda:	78fb      	ldrb	r3, [r7, #3]
 8007fdc:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007fde:	4855      	ldr	r0, [pc, #340]	; (8008134 <RadioSend+0x1fc>)
 8007fe0:	f001 ffba 	bl	8009f58 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8007fe4:	78fb      	ldrb	r3, [r7, #3]
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	4619      	mov	r1, r3
 8007fea:	6878      	ldr	r0, [r7, #4]
 8007fec:	f001 fa6a 	bl	80094c4 <SUBGRF_SendPayload>
            break;
 8007ff0:	e08d      	b.n	800810e <RadioSend+0x1d6>
        }
        case MODEM_MSK:
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 8007ff2:	f002 fbe6 	bl	800a7c2 <RFW_Is_Init>
 8007ff6:	4603      	mov	r3, r0
 8007ff8:	2b01      	cmp	r3, #1
 8007ffa:	d11e      	bne.n	800803a <RadioSend+0x102>
            {
                uint8_t outsize;
                if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 8007ffc:	f107 020d 	add.w	r2, r7, #13
 8008000:	78fb      	ldrb	r3, [r7, #3]
 8008002:	4619      	mov	r1, r3
 8008004:	6878      	ldr	r0, [r7, #4]
 8008006:	f002 fbf4 	bl	800a7f2 <RFW_TransmitInit>
 800800a:	4603      	mov	r3, r0
 800800c:	2b00      	cmp	r3, #0
 800800e:	d10c      	bne.n	800802a <RadioSend+0xf2>
                {
                    SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 8008010:	7b7a      	ldrb	r2, [r7, #13]
 8008012:	4b47      	ldr	r3, [pc, #284]	; (8008130 <RadioSend+0x1f8>)
 8008014:	759a      	strb	r2, [r3, #22]
                    SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008016:	4847      	ldr	r0, [pc, #284]	; (8008134 <RadioSend+0x1fc>)
 8008018:	f001 ff9e 	bl	8009f58 <SUBGRF_SetPacketParams>
                    SUBGRF_SendPayload( buffer, outsize, 0 );
 800801c:	7b7b      	ldrb	r3, [r7, #13]
 800801e:	2200      	movs	r2, #0
 8008020:	4619      	mov	r1, r3
 8008022:	6878      	ldr	r0, [r7, #4]
 8008024:	f001 fa4e 	bl	80094c4 <SUBGRF_SendPayload>
            {
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
                SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 8008028:	e071      	b.n	800810e <RadioSend+0x1d6>
                    MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n" );
 800802a:	4b43      	ldr	r3, [pc, #268]	; (8008138 <RadioSend+0x200>)
 800802c:	2201      	movs	r2, #1
 800802e:	2100      	movs	r1, #0
 8008030:	2002      	movs	r0, #2
 8008032:	f003 ff61 	bl	800bef8 <UTIL_ADV_TRACE_COND_FSend>
                    return RADIO_STATUS_ERROR;
 8008036:	2303      	movs	r3, #3
 8008038:	e073      	b.n	8008122 <RadioSend+0x1ea>
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 800803a:	4a3d      	ldr	r2, [pc, #244]	; (8008130 <RadioSend+0x1f8>)
 800803c:	78fb      	ldrb	r3, [r7, #3]
 800803e:	7593      	strb	r3, [r2, #22]
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008040:	483c      	ldr	r0, [pc, #240]	; (8008134 <RadioSend+0x1fc>)
 8008042:	f001 ff89 	bl	8009f58 <SUBGRF_SetPacketParams>
                SUBGRF_SendPayload( buffer, size, 0 );
 8008046:	78fb      	ldrb	r3, [r7, #3]
 8008048:	2200      	movs	r2, #0
 800804a:	4619      	mov	r1, r3
 800804c:	6878      	ldr	r0, [r7, #4]
 800804e:	f001 fa39 	bl	80094c4 <SUBGRF_SendPayload>
            break;
 8008052:	e05c      	b.n	800810e <RadioSend+0x1d6>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8008054:	4b36      	ldr	r3, [pc, #216]	; (8008130 <RadioSend+0x1f8>)
 8008056:	2202      	movs	r2, #2
 8008058:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 800805a:	4a35      	ldr	r2, [pc, #212]	; (8008130 <RadioSend+0x1f8>)
 800805c:	78fb      	ldrb	r3, [r7, #3]
 800805e:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008060:	4834      	ldr	r0, [pc, #208]	; (8008134 <RadioSend+0x1fc>)
 8008062:	f001 ff79 	bl	8009f58 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8008066:	78fb      	ldrb	r3, [r7, #3]
 8008068:	2200      	movs	r2, #0
 800806a:	4619      	mov	r1, r3
 800806c:	6878      	ldr	r0, [r7, #4]
 800806e:	f001 fa29 	bl	80094c4 <SUBGRF_SendPayload>
            break;
 8008072:	e04c      	b.n	800810e <RadioSend+0x1d6>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 8008074:	78fb      	ldrb	r3, [r7, #3]
 8008076:	461a      	mov	r2, r3
 8008078:	6879      	ldr	r1, [r7, #4]
 800807a:	4830      	ldr	r0, [pc, #192]	; (800813c <RadioSend+0x204>)
 800807c:	f000 fcfc 	bl	8008a78 <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8008080:	4b2b      	ldr	r3, [pc, #172]	; (8008130 <RadioSend+0x1f8>)
 8008082:	2202      	movs	r2, #2
 8008084:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 8008086:	78fb      	ldrb	r3, [r7, #3]
 8008088:	3301      	adds	r3, #1
 800808a:	b2da      	uxtb	r2, r3
 800808c:	4b28      	ldr	r3, [pc, #160]	; (8008130 <RadioSend+0x1f8>)
 800808e:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008090:	4828      	ldr	r0, [pc, #160]	; (8008134 <RadioSend+0x1fc>)
 8008092:	f001 ff61 	bl	8009f58 <SUBGRF_SetPacketParams>

            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 8008096:	2100      	movs	r1, #0
 8008098:	20f1      	movs	r0, #241	; 0xf1
 800809a:	f000 f974 	bl	8008386 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 800809e:	2100      	movs	r1, #0
 80080a0:	20f0      	movs	r0, #240	; 0xf0
 80080a2:	f000 f970 	bl	8008386 <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 80080a6:	4b22      	ldr	r3, [pc, #136]	; (8008130 <RadioSend+0x1f8>)
 80080a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80080aa:	2b64      	cmp	r3, #100	; 0x64
 80080ac:	d108      	bne.n	80080c0 <RadioSend+0x188>
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 80080ae:	2170      	movs	r1, #112	; 0x70
 80080b0:	20f3      	movs	r0, #243	; 0xf3
 80080b2:	f000 f968 	bl	8008386 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 80080b6:	211d      	movs	r1, #29
 80080b8:	20f2      	movs	r0, #242	; 0xf2
 80080ba:	f000 f964 	bl	8008386 <RadioWrite>
 80080be:	e007      	b.n	80080d0 <RadioSend+0x198>
            }
            else // 600 bps
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 80080c0:	21e1      	movs	r1, #225	; 0xe1
 80080c2:	20f3      	movs	r0, #243	; 0xf3
 80080c4:	f000 f95f 	bl	8008386 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 80080c8:	2104      	movs	r1, #4
 80080ca:	20f2      	movs	r0, #242	; 0xf2
 80080cc:	f000 f95b 	bl	8008386 <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 80080d0:	78fb      	ldrb	r3, [r7, #3]
 80080d2:	b29b      	uxth	r3, r3
 80080d4:	00db      	lsls	r3, r3, #3
 80080d6:	b29b      	uxth	r3, r3
 80080d8:	3302      	adds	r3, #2
 80080da:	81fb      	strh	r3, [r7, #14]
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 80080dc:	89fb      	ldrh	r3, [r7, #14]
 80080de:	0a1b      	lsrs	r3, r3, #8
 80080e0:	b29b      	uxth	r3, r3
 80080e2:	b2db      	uxtb	r3, r3
 80080e4:	4619      	mov	r1, r3
 80080e6:	20f4      	movs	r0, #244	; 0xf4
 80080e8:	f000 f94d 	bl	8008386 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 80080ec:	89fb      	ldrh	r3, [r7, #14]
 80080ee:	b2db      	uxtb	r3, r3
 80080f0:	4619      	mov	r1, r3
 80080f2:	20f5      	movs	r0, #245	; 0xf5
 80080f4:	f000 f947 	bl	8008386 <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size + 1, 0xFFFFFF );
 80080f8:	78fb      	ldrb	r3, [r7, #3]
 80080fa:	3301      	adds	r3, #1
 80080fc:	b2db      	uxtb	r3, r3
 80080fe:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8008102:	4619      	mov	r1, r3
 8008104:	480d      	ldr	r0, [pc, #52]	; (800813c <RadioSend+0x204>)
 8008106:	f001 f9dd 	bl	80094c4 <SUBGRF_SendPayload>
            break;
 800810a:	e000      	b.n	800810e <RadioSend+0x1d6>
        }
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 800810c:	bf00      	nop
        }

        TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 800810e:	4b08      	ldr	r3, [pc, #32]	; (8008130 <RadioSend+0x1f8>)
 8008110:	685b      	ldr	r3, [r3, #4]
 8008112:	4619      	mov	r1, r3
 8008114:	480a      	ldr	r0, [pc, #40]	; (8008140 <RadioSend+0x208>)
 8008116:	f003 fd67 	bl	800bbe8 <UTIL_TIMER_SetPeriod>
        TimerStart( &TxTimeoutTimer );
 800811a:	4809      	ldr	r0, [pc, #36]	; (8008140 <RadioSend+0x208>)
 800811c:	f003 fc86 	bl	800ba2c <UTIL_TIMER_Start>
    }

    return RADIO_STATUS_OK;
 8008120:	2300      	movs	r3, #0
}
 8008122:	4618      	mov	r0, r3
 8008124:	3710      	adds	r7, #16
 8008126:	46bd      	mov	sp, r7
 8008128:	bd80      	pop	{r7, pc}
 800812a:	bf00      	nop
 800812c:	48000400 	.word	0x48000400
 8008130:	20000288 	.word	0x20000288
 8008134:	20000296 	.word	0x20000296
 8008138:	0800c4d0 	.word	0x0800c4d0
 800813c:	20000184 	.word	0x20000184
 8008140:	200002e4 	.word	0x200002e4

08008144 <RadioSleep>:

static void RadioSleep( void )
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b082      	sub	sp, #8
 8008148:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 800814a:	2300      	movs	r3, #0
 800814c:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 800814e:	793b      	ldrb	r3, [r7, #4]
 8008150:	f043 0304 	orr.w	r3, r3, #4
 8008154:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 8008156:	7938      	ldrb	r0, [r7, #4]
 8008158:	f001 fa90 	bl	800967c <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 800815c:	2002      	movs	r0, #2
 800815e:	f7f8 fcd3 	bl	8000b08 <HAL_Delay>
}
 8008162:	bf00      	nop
 8008164:	3708      	adds	r7, #8
 8008166:	46bd      	mov	sp, r7
 8008168:	bd80      	pop	{r7, pc}

0800816a <RadioStandby>:

static void RadioStandby( void )
{
 800816a:	b580      	push	{r7, lr}
 800816c:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 800816e:	2000      	movs	r0, #0
 8008170:	f001 fab6 	bl	80096e0 <SUBGRF_SetStandby>
}
 8008174:	bf00      	nop
 8008176:	bd80      	pop	{r7, pc}

08008178 <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b082      	sub	sp, #8
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init( ) )
 8008180:	f002 fb1f 	bl	800a7c2 <RFW_Is_Init>
 8008184:	4603      	mov	r3, r0
 8008186:	2b01      	cmp	r3, #1
 8008188:	d102      	bne.n	8008190 <RadioRx+0x18>
    {
        RFW_ReceiveInit( );
 800818a:	f002 fb42 	bl	800a812 <RFW_ReceiveInit>
 800818e:	e007      	b.n	80081a0 <RadioRx+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8008190:	2300      	movs	r3, #0
 8008192:	2200      	movs	r2, #0
 8008194:	f240 2162 	movw	r1, #610	; 0x262
 8008198:	f240 2062 	movw	r0, #610	; 0x262
 800819c:	f001 fc74 	bl	8009a88 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d006      	beq.n	80081b4 <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 80081a6:	6879      	ldr	r1, [r7, #4]
 80081a8:	4813      	ldr	r0, [pc, #76]	; (80081f8 <RadioRx+0x80>)
 80081aa:	f003 fd1d 	bl	800bbe8 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 80081ae:	4812      	ldr	r0, [pc, #72]	; (80081f8 <RadioRx+0x80>)
 80081b0:	f003 fc3c 	bl	800ba2c <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 80081b4:	4b11      	ldr	r3, [pc, #68]	; (80081fc <RadioRx+0x84>)
 80081b6:	2200      	movs	r2, #0
 80081b8:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
 80081ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80081be:	4810      	ldr	r0, [pc, #64]	; (8008200 <RadioRx+0x88>)
 80081c0:	f7ff f8d6 	bl	8007370 <LL_GPIO_SetOutputPin>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 80081c4:	4b0d      	ldr	r3, [pc, #52]	; (80081fc <RadioRx+0x84>)
 80081c6:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80081ca:	2100      	movs	r1, #0
 80081cc:	4618      	mov	r0, r3
 80081ce:	f002 f8ff 	bl	800a3d0 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 80081d2:	4b0a      	ldr	r3, [pc, #40]	; (80081fc <RadioRx+0x84>)
 80081d4:	785b      	ldrb	r3, [r3, #1]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d004      	beq.n	80081e4 <RadioRx+0x6c>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 80081da:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80081de:	f001 fabb 	bl	8009758 <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 80081e2:	e005      	b.n	80081f0 <RadioRx+0x78>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 80081e4:	4b05      	ldr	r3, [pc, #20]	; (80081fc <RadioRx+0x84>)
 80081e6:	689b      	ldr	r3, [r3, #8]
 80081e8:	019b      	lsls	r3, r3, #6
 80081ea:	4618      	mov	r0, r3
 80081ec:	f001 fab4 	bl	8009758 <SUBGRF_SetRx>
}
 80081f0:	bf00      	nop
 80081f2:	3708      	adds	r7, #8
 80081f4:	46bd      	mov	sp, r7
 80081f6:	bd80      	pop	{r7, pc}
 80081f8:	200002fc 	.word	0x200002fc
 80081fc:	20000288 	.word	0x20000288
 8008200:	48000400 	.word	0x48000400

08008204 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b082      	sub	sp, #8
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init() )
 800820c:	f002 fad9 	bl	800a7c2 <RFW_Is_Init>
 8008210:	4603      	mov	r3, r0
 8008212:	2b01      	cmp	r3, #1
 8008214:	d102      	bne.n	800821c <RadioRxBoosted+0x18>
    {
        RFW_ReceiveInit();
 8008216:	f002 fafc 	bl	800a812 <RFW_ReceiveInit>
 800821a:	e007      	b.n	800822c <RadioRxBoosted+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 800821c:	2300      	movs	r3, #0
 800821e:	2200      	movs	r2, #0
 8008220:	f240 2162 	movw	r1, #610	; 0x262
 8008224:	f240 2062 	movw	r0, #610	; 0x262
 8008228:	f001 fc2e 	bl	8009a88 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d006      	beq.n	8008240 <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8008232:	6879      	ldr	r1, [r7, #4]
 8008234:	4813      	ldr	r0, [pc, #76]	; (8008284 <RadioRxBoosted+0x80>)
 8008236:	f003 fcd7 	bl	800bbe8 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 800823a:	4812      	ldr	r0, [pc, #72]	; (8008284 <RadioRxBoosted+0x80>)
 800823c:	f003 fbf6 	bl	800ba2c <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8008240:	4b11      	ldr	r3, [pc, #68]	; (8008288 <RadioRxBoosted+0x84>)
 8008242:	2200      	movs	r2, #0
 8008244:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
 8008246:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800824a:	4810      	ldr	r0, [pc, #64]	; (800828c <RadioRxBoosted+0x88>)
 800824c:	f7ff f890 	bl	8007370 <LL_GPIO_SetOutputPin>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8008250:	4b0d      	ldr	r3, [pc, #52]	; (8008288 <RadioRxBoosted+0x84>)
 8008252:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8008256:	2100      	movs	r1, #0
 8008258:	4618      	mov	r0, r3
 800825a:	f002 f8b9 	bl	800a3d0 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 800825e:	4b0a      	ldr	r3, [pc, #40]	; (8008288 <RadioRxBoosted+0x84>)
 8008260:	785b      	ldrb	r3, [r3, #1]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d004      	beq.n	8008270 <RadioRxBoosted+0x6c>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 8008266:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800826a:	f001 fa95 	bl	8009798 <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 800826e:	e005      	b.n	800827c <RadioRxBoosted+0x78>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 8008270:	4b05      	ldr	r3, [pc, #20]	; (8008288 <RadioRxBoosted+0x84>)
 8008272:	689b      	ldr	r3, [r3, #8]
 8008274:	019b      	lsls	r3, r3, #6
 8008276:	4618      	mov	r0, r3
 8008278:	f001 fa8e 	bl	8009798 <SUBGRF_SetRxBoosted>
}
 800827c:	bf00      	nop
 800827e:	3708      	adds	r7, #8
 8008280:	46bd      	mov	sp, r7
 8008282:	bd80      	pop	{r7, pc}
 8008284:	200002fc 	.word	0x200002fc
 8008288:	20000288 	.word	0x20000288
 800828c:	48000400 	.word	0x48000400

08008290 <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8008290:	b580      	push	{r7, lr}
 8008292:	b082      	sub	sp, #8
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
 8008298:	6039      	str	r1, [r7, #0]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	005a      	lsls	r2, r3, #1
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	4413      	add	r3, r2
 80082a2:	4a0c      	ldr	r2, [pc, #48]	; (80082d4 <RadioSetRxDutyCycle+0x44>)
 80082a4:	6593      	str	r3, [r2, #88]	; 0x58
    /*Enable also the IRQ_PREAMBLE_DETECTED*/
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 80082a6:	2300      	movs	r3, #0
 80082a8:	2200      	movs	r2, #0
 80082aa:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80082ae:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80082b2:	f001 fbe9 	bl	8009a88 <SUBGRF_SetDioIrqParams>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 80082b6:	4b07      	ldr	r3, [pc, #28]	; (80082d4 <RadioSetRxDutyCycle+0x44>)
 80082b8:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80082bc:	2100      	movs	r1, #0
 80082be:	4618      	mov	r0, r3
 80082c0:	f002 f886 	bl	800a3d0 <SUBGRF_SetSwitch>
    /* Start Rx DutyCycle*/
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 80082c4:	6839      	ldr	r1, [r7, #0]
 80082c6:	6878      	ldr	r0, [r7, #4]
 80082c8:	f001 fa8a 	bl	80097e0 <SUBGRF_SetRxDutyCycle>
}
 80082cc:	bf00      	nop
 80082ce:	3708      	adds	r7, #8
 80082d0:	46bd      	mov	sp, r7
 80082d2:	bd80      	pop	{r7, pc}
 80082d4:	20000288 	.word	0x20000288

080082d8 <RadioStartCad>:

static void RadioStartCad( void )
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 80082dc:	4b09      	ldr	r3, [pc, #36]	; (8008304 <RadioStartCad+0x2c>)
 80082de:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80082e2:	2100      	movs	r1, #0
 80082e4:	4618      	mov	r0, r3
 80082e6:	f002 f873 	bl	800a3d0 <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 80082ea:	2300      	movs	r3, #0
 80082ec:	2200      	movs	r2, #0
 80082ee:	f44f 71c0 	mov.w	r1, #384	; 0x180
 80082f2:	f44f 70c0 	mov.w	r0, #384	; 0x180
 80082f6:	f001 fbc7 	bl	8009a88 <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 80082fa:	f001 fa9d 	bl	8009838 <SUBGRF_SetCad>
}
 80082fe:	bf00      	nop
 8008300:	bd80      	pop	{r7, pc}
 8008302:	bf00      	nop
 8008304:	20000288 	.word	0x20000288

08008308 <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b084      	sub	sp, #16
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
 8008310:	460b      	mov	r3, r1
 8008312:	70fb      	strb	r3, [r7, #3]
 8008314:	4613      	mov	r3, r2
 8008316:	803b      	strh	r3, [r7, #0]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    uint32_t timeout = ( uint32_t )time * 1000;
 8008318:	883b      	ldrh	r3, [r7, #0]
 800831a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800831e:	fb02 f303 	mul.w	r3, r2, r3
 8008322:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 8008324:	6878      	ldr	r0, [r7, #4]
 8008326:	f001 fc0b 	bl	8009b40 <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 800832a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800832e:	4618      	mov	r0, r3
 8008330:	f002 f876 	bl	800a420 <SUBGRF_SetRfTxPower>
 8008334:	4603      	mov	r3, r0
 8008336:	72fb      	strb	r3, [r7, #11]

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8008338:	210e      	movs	r1, #14
 800833a:	f640 101f 	movw	r0, #2335	; 0x91f
 800833e:	f001 ff53 	bl	800a1e8 <SUBGRF_WriteRegister>

    /* Set RF switch */
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 8008342:	7afb      	ldrb	r3, [r7, #11]
 8008344:	2101      	movs	r1, #1
 8008346:	4618      	mov	r0, r3
 8008348:	f002 f842 	bl	800a3d0 <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 800834c:	f001 fa82 	bl	8009854 <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 8008350:	68f9      	ldr	r1, [r7, #12]
 8008352:	4805      	ldr	r0, [pc, #20]	; (8008368 <RadioSetTxContinuousWave+0x60>)
 8008354:	f003 fc48 	bl	800bbe8 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8008358:	4803      	ldr	r0, [pc, #12]	; (8008368 <RadioSetTxContinuousWave+0x60>)
 800835a:	f003 fb67 	bl	800ba2c <UTIL_TIMER_Start>
}
 800835e:	bf00      	nop
 8008360:	3710      	adds	r7, #16
 8008362:	46bd      	mov	sp, r7
 8008364:	bd80      	pop	{r7, pc}
 8008366:	bf00      	nop
 8008368:	200002e4 	.word	0x200002e4

0800836c <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b082      	sub	sp, #8
 8008370:	af00      	add	r7, sp, #0
 8008372:	4603      	mov	r3, r0
 8008374:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 8008376:	f001 fea4 	bl	800a0c2 <SUBGRF_GetRssiInst>
 800837a:	4603      	mov	r3, r0
 800837c:	b21b      	sxth	r3, r3
}
 800837e:	4618      	mov	r0, r3
 8008380:	3708      	adds	r7, #8
 8008382:	46bd      	mov	sp, r7
 8008384:	bd80      	pop	{r7, pc}

08008386 <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 8008386:	b580      	push	{r7, lr}
 8008388:	b082      	sub	sp, #8
 800838a:	af00      	add	r7, sp, #0
 800838c:	4603      	mov	r3, r0
 800838e:	460a      	mov	r2, r1
 8008390:	80fb      	strh	r3, [r7, #6]
 8008392:	4613      	mov	r3, r2
 8008394:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister( addr, data );
 8008396:	797a      	ldrb	r2, [r7, #5]
 8008398:	88fb      	ldrh	r3, [r7, #6]
 800839a:	4611      	mov	r1, r2
 800839c:	4618      	mov	r0, r3
 800839e:	f001 ff23 	bl	800a1e8 <SUBGRF_WriteRegister>
}
 80083a2:	bf00      	nop
 80083a4:	3708      	adds	r7, #8
 80083a6:	46bd      	mov	sp, r7
 80083a8:	bd80      	pop	{r7, pc}

080083aa <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 80083aa:	b580      	push	{r7, lr}
 80083ac:	b082      	sub	sp, #8
 80083ae:	af00      	add	r7, sp, #0
 80083b0:	4603      	mov	r3, r0
 80083b2:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister( addr );
 80083b4:	88fb      	ldrh	r3, [r7, #6]
 80083b6:	4618      	mov	r0, r3
 80083b8:	f001 ff2a 	bl	800a210 <SUBGRF_ReadRegister>
 80083bc:	4603      	mov	r3, r0
}
 80083be:	4618      	mov	r0, r3
 80083c0:	3708      	adds	r7, #8
 80083c2:	46bd      	mov	sp, r7
 80083c4:	bd80      	pop	{r7, pc}

080083c6 <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 80083c6:	b580      	push	{r7, lr}
 80083c8:	b082      	sub	sp, #8
 80083ca:	af00      	add	r7, sp, #0
 80083cc:	4603      	mov	r3, r0
 80083ce:	6039      	str	r1, [r7, #0]
 80083d0:	80fb      	strh	r3, [r7, #6]
 80083d2:	4613      	mov	r3, r2
 80083d4:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 80083d6:	797b      	ldrb	r3, [r7, #5]
 80083d8:	b29a      	uxth	r2, r3
 80083da:	88fb      	ldrh	r3, [r7, #6]
 80083dc:	6839      	ldr	r1, [r7, #0]
 80083de:	4618      	mov	r0, r3
 80083e0:	f001 ff2a 	bl	800a238 <SUBGRF_WriteRegisters>
}
 80083e4:	bf00      	nop
 80083e6:	3708      	adds	r7, #8
 80083e8:	46bd      	mov	sp, r7
 80083ea:	bd80      	pop	{r7, pc}

080083ec <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b082      	sub	sp, #8
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	4603      	mov	r3, r0
 80083f4:	6039      	str	r1, [r7, #0]
 80083f6:	80fb      	strh	r3, [r7, #6]
 80083f8:	4613      	mov	r3, r2
 80083fa:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 80083fc:	797b      	ldrb	r3, [r7, #5]
 80083fe:	b29a      	uxth	r2, r3
 8008400:	88fb      	ldrh	r3, [r7, #6]
 8008402:	6839      	ldr	r1, [r7, #0]
 8008404:	4618      	mov	r0, r3
 8008406:	f001 ff39 	bl	800a27c <SUBGRF_ReadRegisters>
}
 800840a:	bf00      	nop
 800840c:	3708      	adds	r7, #8
 800840e:	46bd      	mov	sp, r7
 8008410:	bd80      	pop	{r7, pc}
	...

08008414 <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b082      	sub	sp, #8
 8008418:	af00      	add	r7, sp, #0
 800841a:	4603      	mov	r3, r0
 800841c:	460a      	mov	r2, r1
 800841e:	71fb      	strb	r3, [r7, #7]
 8008420:	4613      	mov	r3, r2
 8008422:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 8008424:	79fb      	ldrb	r3, [r7, #7]
 8008426:	2b01      	cmp	r3, #1
 8008428:	d10a      	bne.n	8008440 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 800842a:	4a0e      	ldr	r2, [pc, #56]	; (8008464 <RadioSetMaxPayloadLength+0x50>)
 800842c:	79bb      	ldrb	r3, [r7, #6]
 800842e:	7013      	strb	r3, [r2, #0]
 8008430:	4b0c      	ldr	r3, [pc, #48]	; (8008464 <RadioSetMaxPayloadLength+0x50>)
 8008432:	781a      	ldrb	r2, [r3, #0]
 8008434:	4b0c      	ldr	r3, [pc, #48]	; (8008468 <RadioSetMaxPayloadLength+0x54>)
 8008436:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008438:	480c      	ldr	r0, [pc, #48]	; (800846c <RadioSetMaxPayloadLength+0x58>)
 800843a:	f001 fd8d 	bl	8009f58 <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 800843e:	e00d      	b.n	800845c <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 8008440:	4b09      	ldr	r3, [pc, #36]	; (8008468 <RadioSetMaxPayloadLength+0x54>)
 8008442:	7d5b      	ldrb	r3, [r3, #21]
 8008444:	2b01      	cmp	r3, #1
 8008446:	d109      	bne.n	800845c <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 8008448:	4a06      	ldr	r2, [pc, #24]	; (8008464 <RadioSetMaxPayloadLength+0x50>)
 800844a:	79bb      	ldrb	r3, [r7, #6]
 800844c:	7013      	strb	r3, [r2, #0]
 800844e:	4b05      	ldr	r3, [pc, #20]	; (8008464 <RadioSetMaxPayloadLength+0x50>)
 8008450:	781a      	ldrb	r2, [r3, #0]
 8008452:	4b05      	ldr	r3, [pc, #20]	; (8008468 <RadioSetMaxPayloadLength+0x54>)
 8008454:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008456:	4805      	ldr	r0, [pc, #20]	; (800846c <RadioSetMaxPayloadLength+0x58>)
 8008458:	f001 fd7e 	bl	8009f58 <SUBGRF_SetPacketParams>
}
 800845c:	bf00      	nop
 800845e:	3708      	adds	r7, #8
 8008460:	46bd      	mov	sp, r7
 8008462:	bd80      	pop	{r7, pc}
 8008464:	20000008 	.word	0x20000008
 8008468:	20000288 	.word	0x20000288
 800846c:	20000296 	.word	0x20000296

08008470 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b082      	sub	sp, #8
 8008474:	af00      	add	r7, sp, #0
 8008476:	4603      	mov	r3, r0
 8008478:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 800847a:	4a13      	ldr	r2, [pc, #76]	; (80084c8 <RadioSetPublicNetwork+0x58>)
 800847c:	79fb      	ldrb	r3, [r7, #7]
 800847e:	7313      	strb	r3, [r2, #12]
 8008480:	4b11      	ldr	r3, [pc, #68]	; (80084c8 <RadioSetPublicNetwork+0x58>)
 8008482:	7b1a      	ldrb	r2, [r3, #12]
 8008484:	4b10      	ldr	r3, [pc, #64]	; (80084c8 <RadioSetPublicNetwork+0x58>)
 8008486:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 8008488:	2001      	movs	r0, #1
 800848a:	f7fe ffff 	bl	800748c <RadioSetModem>
    if( enable == true )
 800848e:	79fb      	ldrb	r3, [r7, #7]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d00a      	beq.n	80084aa <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 8008494:	2134      	movs	r1, #52	; 0x34
 8008496:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 800849a:	f001 fea5 	bl	800a1e8 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 800849e:	2144      	movs	r1, #68	; 0x44
 80084a0:	f240 7041 	movw	r0, #1857	; 0x741
 80084a4:	f001 fea0 	bl	800a1e8 <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 80084a8:	e009      	b.n	80084be <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 80084aa:	2114      	movs	r1, #20
 80084ac:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 80084b0:	f001 fe9a 	bl	800a1e8 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 80084b4:	2124      	movs	r1, #36	; 0x24
 80084b6:	f240 7041 	movw	r0, #1857	; 0x741
 80084ba:	f001 fe95 	bl	800a1e8 <SUBGRF_WriteRegister>
}
 80084be:	bf00      	nop
 80084c0:	3708      	adds	r7, #8
 80084c2:	46bd      	mov	sp, r7
 80084c4:	bd80      	pop	{r7, pc}
 80084c6:	bf00      	nop
 80084c8:	20000288 	.word	0x20000288

080084cc <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 80084d0:	f001 ffda 	bl	800a488 <SUBGRF_GetRadioWakeUpTime>
 80084d4:	4603      	mov	r3, r0
 80084d6:	3303      	adds	r3, #3
}
 80084d8:	4618      	mov	r0, r3
 80084da:	bd80      	pop	{r7, pc}

080084dc <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void *context )
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	b082      	sub	sp, #8
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 80084e4:	f000 f80e 	bl	8008504 <RadioOnTxTimeoutProcess>
}
 80084e8:	bf00      	nop
 80084ea:	3708      	adds	r7, #8
 80084ec:	46bd      	mov	sp, r7
 80084ee:	bd80      	pop	{r7, pc}

080084f0 <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void *context )
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b082      	sub	sp, #8
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 80084f8:	f000 f81e 	bl	8008538 <RadioOnRxTimeoutProcess>
}
 80084fc:	bf00      	nop
 80084fe:	3708      	adds	r7, #8
 8008500:	46bd      	mov	sp, r7
 8008502:	bd80      	pop	{r7, pc}

08008504 <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 8008504:	b580      	push	{r7, lr}
 8008506:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_TX( RST );
 8008508:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800850c:	4808      	ldr	r0, [pc, #32]	; (8008530 <RadioOnTxTimeoutProcess+0x2c>)
 800850e:	f7fe ff3c 	bl	800738a <LL_GPIO_ResetOutputPin>

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8008512:	4b08      	ldr	r3, [pc, #32]	; (8008534 <RadioOnTxTimeoutProcess+0x30>)
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d008      	beq.n	800852c <RadioOnTxTimeoutProcess+0x28>
 800851a:	4b06      	ldr	r3, [pc, #24]	; (8008534 <RadioOnTxTimeoutProcess+0x30>)
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	685b      	ldr	r3, [r3, #4]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d003      	beq.n	800852c <RadioOnTxTimeoutProcess+0x28>
    {
        RadioEvents->TxTimeout( );
 8008524:	4b03      	ldr	r3, [pc, #12]	; (8008534 <RadioOnTxTimeoutProcess+0x30>)
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	685b      	ldr	r3, [r3, #4]
 800852a:	4798      	blx	r3
    }
}
 800852c:	bf00      	nop
 800852e:	bd80      	pop	{r7, pc}
 8008530:	48000400 	.word	0x48000400
 8008534:	20000284 	.word	0x20000284

08008538 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 8008538:	b580      	push	{r7, lr}
 800853a:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_RX( RST );
 800853c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008540:	4808      	ldr	r0, [pc, #32]	; (8008564 <RadioOnRxTimeoutProcess+0x2c>)
 8008542:	f7fe ff22 	bl	800738a <LL_GPIO_ResetOutputPin>

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8008546:	4b08      	ldr	r3, [pc, #32]	; (8008568 <RadioOnRxTimeoutProcess+0x30>)
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d008      	beq.n	8008560 <RadioOnRxTimeoutProcess+0x28>
 800854e:	4b06      	ldr	r3, [pc, #24]	; (8008568 <RadioOnRxTimeoutProcess+0x30>)
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	68db      	ldr	r3, [r3, #12]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d003      	beq.n	8008560 <RadioOnRxTimeoutProcess+0x28>
    {
        RadioEvents->RxTimeout( );
 8008558:	4b03      	ldr	r3, [pc, #12]	; (8008568 <RadioOnRxTimeoutProcess+0x30>)
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	68db      	ldr	r3, [r3, #12]
 800855e:	4798      	blx	r3
    }
}
 8008560:	bf00      	nop
 8008562:	bd80      	pop	{r7, pc}
 8008564:	48000400 	.word	0x48000400
 8008568:	20000284 	.word	0x20000284

0800856c <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b082      	sub	sp, #8
 8008570:	af00      	add	r7, sp, #0
 8008572:	4603      	mov	r3, r0
 8008574:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 8008576:	4a05      	ldr	r2, [pc, #20]	; (800858c <RadioOnDioIrq+0x20>)
 8008578:	88fb      	ldrh	r3, [r7, #6]
 800857a:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

    RADIO_IRQ_PROCESS();
 800857e:	f000 f807 	bl	8008590 <RadioIrqProcess>
}
 8008582:	bf00      	nop
 8008584:	3708      	adds	r7, #8
 8008586:	46bd      	mov	sp, r7
 8008588:	bd80      	pop	{r7, pc}
 800858a:	bf00      	nop
 800858c:	20000288 	.word	0x20000288

08008590 <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 8008590:	b5b0      	push	{r4, r5, r7, lr}
 8008592:	b082      	sub	sp, #8
 8008594:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 8008596:	2300      	movs	r3, #0
 8008598:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 800859a:	2300      	movs	r3, #0
 800859c:	603b      	str	r3, [r7, #0]

    switch( SubgRf.RadioIrq )
 800859e:	4bb2      	ldr	r3, [pc, #712]	; (8008868 <RadioIrqProcess+0x2d8>)
 80085a0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80085a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80085a8:	f000 8117 	beq.w	80087da <RadioIrqProcess+0x24a>
 80085ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80085b0:	f300 81fe 	bgt.w	80089b0 <RadioIrqProcess+0x420>
 80085b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80085b8:	f000 80fb 	beq.w	80087b2 <RadioIrqProcess+0x222>
 80085bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80085c0:	f300 81f6 	bgt.w	80089b0 <RadioIrqProcess+0x420>
 80085c4:	2b80      	cmp	r3, #128	; 0x80
 80085c6:	f000 80e0 	beq.w	800878a <RadioIrqProcess+0x1fa>
 80085ca:	2b80      	cmp	r3, #128	; 0x80
 80085cc:	f300 81f0 	bgt.w	80089b0 <RadioIrqProcess+0x420>
 80085d0:	2b20      	cmp	r3, #32
 80085d2:	dc49      	bgt.n	8008668 <RadioIrqProcess+0xd8>
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	f340 81eb 	ble.w	80089b0 <RadioIrqProcess+0x420>
 80085da:	3b01      	subs	r3, #1
 80085dc:	2b1f      	cmp	r3, #31
 80085de:	f200 81e7 	bhi.w	80089b0 <RadioIrqProcess+0x420>
 80085e2:	a201      	add	r2, pc, #4	; (adr r2, 80085e8 <RadioIrqProcess+0x58>)
 80085e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085e8:	08008671 	.word	0x08008671
 80085ec:	080086b5 	.word	0x080086b5
 80085f0:	080089b1 	.word	0x080089b1
 80085f4:	0800888d 	.word	0x0800888d
 80085f8:	080089b1 	.word	0x080089b1
 80085fc:	080089b1 	.word	0x080089b1
 8008600:	080089b1 	.word	0x080089b1
 8008604:	08008909 	.word	0x08008909
 8008608:	080089b1 	.word	0x080089b1
 800860c:	080089b1 	.word	0x080089b1
 8008610:	080089b1 	.word	0x080089b1
 8008614:	080089b1 	.word	0x080089b1
 8008618:	080089b1 	.word	0x080089b1
 800861c:	080089b1 	.word	0x080089b1
 8008620:	080089b1 	.word	0x080089b1
 8008624:	08008925 	.word	0x08008925
 8008628:	080089b1 	.word	0x080089b1
 800862c:	080089b1 	.word	0x080089b1
 8008630:	080089b1 	.word	0x080089b1
 8008634:	080089b1 	.word	0x080089b1
 8008638:	080089b1 	.word	0x080089b1
 800863c:	080089b1 	.word	0x080089b1
 8008640:	080089b1 	.word	0x080089b1
 8008644:	080089b1 	.word	0x080089b1
 8008648:	080089b1 	.word	0x080089b1
 800864c:	080089b1 	.word	0x080089b1
 8008650:	080089b1 	.word	0x080089b1
 8008654:	080089b1 	.word	0x080089b1
 8008658:	080089b1 	.word	0x080089b1
 800865c:	080089b1 	.word	0x080089b1
 8008660:	080089b1 	.word	0x080089b1
 8008664:	08008933 	.word	0x08008933
 8008668:	2b40      	cmp	r3, #64	; 0x40
 800866a:	f000 8183 	beq.w	8008974 <RadioIrqProcess+0x3e4>
        MW_LOG( TS_ON, VLEVEL_M,  "HOP\r\n" );
        break;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    default:
        break;
 800866e:	e19f      	b.n	80089b0 <RadioIrqProcess+0x420>
        DBG_GPIO_RADIO_TX( RST );
 8008670:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008674:	487d      	ldr	r0, [pc, #500]	; (800886c <RadioIrqProcess+0x2dc>)
 8008676:	f7fe fe88 	bl	800738a <LL_GPIO_ResetOutputPin>
        TimerStop( &TxTimeoutTimer );
 800867a:	487d      	ldr	r0, [pc, #500]	; (8008870 <RadioIrqProcess+0x2e0>)
 800867c:	f003 fa44 	bl	800bb08 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 8008680:	2000      	movs	r0, #0
 8008682:	f001 f82d 	bl	80096e0 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 8008686:	f002 f8a3 	bl	800a7d0 <RFW_Is_LongPacketModeEnabled>
 800868a:	4603      	mov	r3, r0
 800868c:	2b01      	cmp	r3, #1
 800868e:	d101      	bne.n	8008694 <RadioIrqProcess+0x104>
            RFW_DeInit_TxLongPacket( );
 8008690:	f002 f8c7 	bl	800a822 <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8008694:	4b77      	ldr	r3, [pc, #476]	; (8008874 <RadioIrqProcess+0x2e4>)
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	2b00      	cmp	r3, #0
 800869a:	f000 818b 	beq.w	80089b4 <RadioIrqProcess+0x424>
 800869e:	4b75      	ldr	r3, [pc, #468]	; (8008874 <RadioIrqProcess+0x2e4>)
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	f000 8185 	beq.w	80089b4 <RadioIrqProcess+0x424>
            RadioEvents->TxDone( );
 80086aa:	4b72      	ldr	r3, [pc, #456]	; (8008874 <RadioIrqProcess+0x2e4>)
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	4798      	blx	r3
        break;
 80086b2:	e17f      	b.n	80089b4 <RadioIrqProcess+0x424>
        DBG_GPIO_RADIO_RX( RST );
 80086b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80086b8:	486c      	ldr	r0, [pc, #432]	; (800886c <RadioIrqProcess+0x2dc>)
 80086ba:	f7fe fe66 	bl	800738a <LL_GPIO_ResetOutputPin>
        TimerStop( &RxTimeoutTimer );
 80086be:	486e      	ldr	r0, [pc, #440]	; (8008878 <RadioIrqProcess+0x2e8>)
 80086c0:	f003 fa22 	bl	800bb08 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 80086c4:	4b68      	ldr	r3, [pc, #416]	; (8008868 <RadioIrqProcess+0x2d8>)
 80086c6:	785b      	ldrb	r3, [r3, #1]
 80086c8:	f083 0301 	eor.w	r3, r3, #1
 80086cc:	b2db      	uxtb	r3, r3
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d014      	beq.n	80086fc <RadioIrqProcess+0x16c>
            SUBGRF_SetStandby( STDBY_RC );
 80086d2:	2000      	movs	r0, #0
 80086d4:	f001 f804 	bl	80096e0 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 80086d8:	2100      	movs	r1, #0
 80086da:	f640 1002 	movw	r0, #2306	; 0x902
 80086de:	f001 fd83 	bl	800a1e8 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 80086e2:	f640 1044 	movw	r0, #2372	; 0x944
 80086e6:	f001 fd93 	bl	800a210 <SUBGRF_ReadRegister>
 80086ea:	4603      	mov	r3, r0
 80086ec:	f043 0302 	orr.w	r3, r3, #2
 80086f0:	b2db      	uxtb	r3, r3
 80086f2:	4619      	mov	r1, r3
 80086f4:	f640 1044 	movw	r0, #2372	; 0x944
 80086f8:	f001 fd76 	bl	800a1e8 <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 80086fc:	1dfb      	adds	r3, r7, #7
 80086fe:	22ff      	movs	r2, #255	; 0xff
 8008700:	4619      	mov	r1, r3
 8008702:	485e      	ldr	r0, [pc, #376]	; (800887c <RadioIrqProcess+0x2ec>)
 8008704:	f000 febc 	bl	8009480 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 8008708:	485d      	ldr	r0, [pc, #372]	; (8008880 <RadioIrqProcess+0x2f0>)
 800870a:	f001 fd1b 	bl	800a144 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 800870e:	4b59      	ldr	r3, [pc, #356]	; (8008874 <RadioIrqProcess+0x2e4>)
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	2b00      	cmp	r3, #0
 8008714:	f000 8150 	beq.w	80089b8 <RadioIrqProcess+0x428>
 8008718:	4b56      	ldr	r3, [pc, #344]	; (8008874 <RadioIrqProcess+0x2e4>)
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	689b      	ldr	r3, [r3, #8]
 800871e:	2b00      	cmp	r3, #0
 8008720:	f000 814a 	beq.w	80089b8 <RadioIrqProcess+0x428>
            switch( SubgRf.PacketStatus.packetType )
 8008724:	4b50      	ldr	r3, [pc, #320]	; (8008868 <RadioIrqProcess+0x2d8>)
 8008726:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800872a:	2b01      	cmp	r3, #1
 800872c:	d10e      	bne.n	800874c <RadioIrqProcess+0x1bc>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt,
 800872e:	4b51      	ldr	r3, [pc, #324]	; (8008874 <RadioIrqProcess+0x2e4>)
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	689c      	ldr	r4, [r3, #8]
 8008734:	79fb      	ldrb	r3, [r7, #7]
 8008736:	b299      	uxth	r1, r3
 8008738:	4b4b      	ldr	r3, [pc, #300]	; (8008868 <RadioIrqProcess+0x2d8>)
 800873a:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 800873e:	b21a      	sxth	r2, r3
 8008740:	4b49      	ldr	r3, [pc, #292]	; (8008868 <RadioIrqProcess+0x2d8>)
 8008742:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 8008746:	484d      	ldr	r0, [pc, #308]	; (800887c <RadioIrqProcess+0x2ec>)
 8008748:	47a0      	blx	r4
                break;
 800874a:	e01d      	b.n	8008788 <RadioIrqProcess+0x1f8>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 800874c:	4b46      	ldr	r3, [pc, #280]	; (8008868 <RadioIrqProcess+0x2d8>)
 800874e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008750:	463a      	mov	r2, r7
 8008752:	4611      	mov	r1, r2
 8008754:	4618      	mov	r0, r3
 8008756:	f001 ff89 	bl	800a66c <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, ( int8_t ) DIVR( cfo, 1000 ) );
 800875a:	4b46      	ldr	r3, [pc, #280]	; (8008874 <RadioIrqProcess+0x2e4>)
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	689c      	ldr	r4, [r3, #8]
 8008760:	79fb      	ldrb	r3, [r7, #7]
 8008762:	b299      	uxth	r1, r3
 8008764:	4b40      	ldr	r3, [pc, #256]	; (8008868 <RadioIrqProcess+0x2d8>)
 8008766:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 800876a:	b218      	sxth	r0, r3
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008772:	4a44      	ldr	r2, [pc, #272]	; (8008884 <RadioIrqProcess+0x2f4>)
 8008774:	fb82 5203 	smull	r5, r2, r2, r3
 8008778:	1192      	asrs	r2, r2, #6
 800877a:	17db      	asrs	r3, r3, #31
 800877c:	1ad3      	subs	r3, r2, r3
 800877e:	b25b      	sxtb	r3, r3
 8008780:	4602      	mov	r2, r0
 8008782:	483e      	ldr	r0, [pc, #248]	; (800887c <RadioIrqProcess+0x2ec>)
 8008784:	47a0      	blx	r4
                break;
 8008786:	bf00      	nop
        break;
 8008788:	e116      	b.n	80089b8 <RadioIrqProcess+0x428>
        SUBGRF_SetStandby( STDBY_RC );
 800878a:	2000      	movs	r0, #0
 800878c:	f000 ffa8 	bl	80096e0 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8008790:	4b38      	ldr	r3, [pc, #224]	; (8008874 <RadioIrqProcess+0x2e4>)
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	2b00      	cmp	r3, #0
 8008796:	f000 8111 	beq.w	80089bc <RadioIrqProcess+0x42c>
 800879a:	4b36      	ldr	r3, [pc, #216]	; (8008874 <RadioIrqProcess+0x2e4>)
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	699b      	ldr	r3, [r3, #24]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	f000 810b 	beq.w	80089bc <RadioIrqProcess+0x42c>
            RadioEvents->CadDone( false );
 80087a6:	4b33      	ldr	r3, [pc, #204]	; (8008874 <RadioIrqProcess+0x2e4>)
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	699b      	ldr	r3, [r3, #24]
 80087ac:	2000      	movs	r0, #0
 80087ae:	4798      	blx	r3
        break;
 80087b0:	e104      	b.n	80089bc <RadioIrqProcess+0x42c>
        SUBGRF_SetStandby( STDBY_RC );
 80087b2:	2000      	movs	r0, #0
 80087b4:	f000 ff94 	bl	80096e0 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 80087b8:	4b2e      	ldr	r3, [pc, #184]	; (8008874 <RadioIrqProcess+0x2e4>)
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	f000 80ff 	beq.w	80089c0 <RadioIrqProcess+0x430>
 80087c2:	4b2c      	ldr	r3, [pc, #176]	; (8008874 <RadioIrqProcess+0x2e4>)
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	699b      	ldr	r3, [r3, #24]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	f000 80f9 	beq.w	80089c0 <RadioIrqProcess+0x430>
            RadioEvents->CadDone( true );
 80087ce:	4b29      	ldr	r3, [pc, #164]	; (8008874 <RadioIrqProcess+0x2e4>)
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	699b      	ldr	r3, [r3, #24]
 80087d4:	2001      	movs	r0, #1
 80087d6:	4798      	blx	r3
        break;
 80087d8:	e0f2      	b.n	80089c0 <RadioIrqProcess+0x430>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 80087da:	4b2b      	ldr	r3, [pc, #172]	; (8008888 <RadioIrqProcess+0x2f8>)
 80087dc:	2201      	movs	r2, #1
 80087de:	2100      	movs	r1, #0
 80087e0:	2002      	movs	r0, #2
 80087e2:	f003 fb89 	bl	800bef8 <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 80087e6:	f000 fe31 	bl	800944c <SUBGRF_GetOperatingMode>
 80087ea:	4603      	mov	r3, r0
 80087ec:	2b04      	cmp	r3, #4
 80087ee:	d11a      	bne.n	8008826 <RadioIrqProcess+0x296>
            DBG_GPIO_RADIO_TX( RST );
 80087f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80087f4:	481d      	ldr	r0, [pc, #116]	; (800886c <RadioIrqProcess+0x2dc>)
 80087f6:	f7fe fdc8 	bl	800738a <LL_GPIO_ResetOutputPin>
            TimerStop( &TxTimeoutTimer );
 80087fa:	481d      	ldr	r0, [pc, #116]	; (8008870 <RadioIrqProcess+0x2e0>)
 80087fc:	f003 f984 	bl	800bb08 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8008800:	2000      	movs	r0, #0
 8008802:	f000 ff6d 	bl	80096e0 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8008806:	4b1b      	ldr	r3, [pc, #108]	; (8008874 <RadioIrqProcess+0x2e4>)
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	2b00      	cmp	r3, #0
 800880c:	f000 80da 	beq.w	80089c4 <RadioIrqProcess+0x434>
 8008810:	4b18      	ldr	r3, [pc, #96]	; (8008874 <RadioIrqProcess+0x2e4>)
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	685b      	ldr	r3, [r3, #4]
 8008816:	2b00      	cmp	r3, #0
 8008818:	f000 80d4 	beq.w	80089c4 <RadioIrqProcess+0x434>
                RadioEvents->TxTimeout( );
 800881c:	4b15      	ldr	r3, [pc, #84]	; (8008874 <RadioIrqProcess+0x2e4>)
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	685b      	ldr	r3, [r3, #4]
 8008822:	4798      	blx	r3
        break;
 8008824:	e0ce      	b.n	80089c4 <RadioIrqProcess+0x434>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 8008826:	f000 fe11 	bl	800944c <SUBGRF_GetOperatingMode>
 800882a:	4603      	mov	r3, r0
 800882c:	2b05      	cmp	r3, #5
 800882e:	f040 80c9 	bne.w	80089c4 <RadioIrqProcess+0x434>
            DBG_GPIO_RADIO_RX( RST );
 8008832:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008836:	480d      	ldr	r0, [pc, #52]	; (800886c <RadioIrqProcess+0x2dc>)
 8008838:	f7fe fda7 	bl	800738a <LL_GPIO_ResetOutputPin>
            TimerStop( &RxTimeoutTimer );
 800883c:	480e      	ldr	r0, [pc, #56]	; (8008878 <RadioIrqProcess+0x2e8>)
 800883e:	f003 f963 	bl	800bb08 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8008842:	2000      	movs	r0, #0
 8008844:	f000 ff4c 	bl	80096e0 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8008848:	4b0a      	ldr	r3, [pc, #40]	; (8008874 <RadioIrqProcess+0x2e4>)
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	2b00      	cmp	r3, #0
 800884e:	f000 80b9 	beq.w	80089c4 <RadioIrqProcess+0x434>
 8008852:	4b08      	ldr	r3, [pc, #32]	; (8008874 <RadioIrqProcess+0x2e4>)
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	68db      	ldr	r3, [r3, #12]
 8008858:	2b00      	cmp	r3, #0
 800885a:	f000 80b3 	beq.w	80089c4 <RadioIrqProcess+0x434>
                RadioEvents->RxTimeout( );
 800885e:	4b05      	ldr	r3, [pc, #20]	; (8008874 <RadioIrqProcess+0x2e4>)
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	68db      	ldr	r3, [r3, #12]
 8008864:	4798      	blx	r3
        break;
 8008866:	e0ad      	b.n	80089c4 <RadioIrqProcess+0x434>
 8008868:	20000288 	.word	0x20000288
 800886c:	48000400 	.word	0x48000400
 8008870:	200002e4 	.word	0x200002e4
 8008874:	20000284 	.word	0x20000284
 8008878:	200002fc 	.word	0x200002fc
 800887c:	20000184 	.word	0x20000184
 8008880:	200002ac 	.word	0x200002ac
 8008884:	10624dd3 	.word	0x10624dd3
 8008888:	0800c4e8 	.word	0x0800c4e8
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 800888c:	4b54      	ldr	r3, [pc, #336]	; (80089e0 <RadioIrqProcess+0x450>)
 800888e:	2201      	movs	r2, #1
 8008890:	2100      	movs	r1, #0
 8008892:	2002      	movs	r0, #2
 8008894:	f003 fb30 	bl	800bef8 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 8008898:	4b52      	ldr	r3, [pc, #328]	; (80089e4 <RadioIrqProcess+0x454>)
 800889a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800889c:	2b00      	cmp	r3, #0
 800889e:	f000 8093 	beq.w	80089c8 <RadioIrqProcess+0x438>
            Radio.Write( SUBGHZ_RTCPRDR2, ( SubgRf.RxDcPreambleDetectTimeout >> 16 ) & 0xFF ); /*Update Radio RTC Period MSB*/
 80088a2:	4a51      	ldr	r2, [pc, #324]	; (80089e8 <RadioIrqProcess+0x458>)
 80088a4:	4b4f      	ldr	r3, [pc, #316]	; (80089e4 <RadioIrqProcess+0x454>)
 80088a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088a8:	0c1b      	lsrs	r3, r3, #16
 80088aa:	b2db      	uxtb	r3, r3
 80088ac:	4619      	mov	r1, r3
 80088ae:	f640 1003 	movw	r0, #2307	; 0x903
 80088b2:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR1, ( SubgRf.RxDcPreambleDetectTimeout >> 8 ) & 0xFF ); /*Update Radio RTC Period MidByte*/
 80088b4:	4a4c      	ldr	r2, [pc, #304]	; (80089e8 <RadioIrqProcess+0x458>)
 80088b6:	4b4b      	ldr	r3, [pc, #300]	; (80089e4 <RadioIrqProcess+0x454>)
 80088b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088ba:	0a1b      	lsrs	r3, r3, #8
 80088bc:	b2db      	uxtb	r3, r3
 80088be:	4619      	mov	r1, r3
 80088c0:	f640 1004 	movw	r0, #2308	; 0x904
 80088c4:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR0, ( SubgRf.RxDcPreambleDetectTimeout ) & 0xFF ); /*Update Radio RTC Period lsb*/
 80088c6:	4a48      	ldr	r2, [pc, #288]	; (80089e8 <RadioIrqProcess+0x458>)
 80088c8:	4b46      	ldr	r3, [pc, #280]	; (80089e4 <RadioIrqProcess+0x454>)
 80088ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088cc:	b2db      	uxtb	r3, r3
 80088ce:	4619      	mov	r1, r3
 80088d0:	f640 1005 	movw	r0, #2309	; 0x905
 80088d4:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCCTLR, Radio.Read( SUBGHZ_RTCCTLR ) | 0x1 ); /*restart Radio RTC*/
 80088d6:	4c44      	ldr	r4, [pc, #272]	; (80089e8 <RadioIrqProcess+0x458>)
 80088d8:	4b44      	ldr	r3, [pc, #272]	; (80089ec <RadioIrqProcess+0x45c>)
 80088da:	f640 1002 	movw	r0, #2306	; 0x902
 80088de:	4798      	blx	r3
 80088e0:	4603      	mov	r3, r0
 80088e2:	f043 0301 	orr.w	r3, r3, #1
 80088e6:	b2db      	uxtb	r3, r3
 80088e8:	4619      	mov	r1, r3
 80088ea:	f640 1002 	movw	r0, #2306	; 0x902
 80088ee:	47a0      	blx	r4
            SubgRf.RxDcPreambleDetectTimeout = 0;
 80088f0:	4b3c      	ldr	r3, [pc, #240]	; (80089e4 <RadioIrqProcess+0x454>)
 80088f2:	2200      	movs	r2, #0
 80088f4:	659a      	str	r2, [r3, #88]	; 0x58
            SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 80088f6:	2300      	movs	r3, #0
 80088f8:	2200      	movs	r2, #0
 80088fa:	f240 2162 	movw	r1, #610	; 0x262
 80088fe:	f240 2062 	movw	r0, #610	; 0x262
 8008902:	f001 f8c1 	bl	8009a88 <SUBGRF_SetDioIrqParams>
        break;
 8008906:	e05f      	b.n	80089c8 <RadioIrqProcess+0x438>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 8008908:	4b39      	ldr	r3, [pc, #228]	; (80089f0 <RadioIrqProcess+0x460>)
 800890a:	2201      	movs	r2, #1
 800890c:	2100      	movs	r1, #0
 800890e:	2002      	movs	r0, #2
 8008910:	f003 faf2 	bl	800bef8 <UTIL_ADV_TRACE_COND_FSend>
        if( 1UL == RFW_Is_Init( ) )
 8008914:	f001 ff55 	bl	800a7c2 <RFW_Is_Init>
 8008918:	4603      	mov	r3, r0
 800891a:	2b01      	cmp	r3, #1
 800891c:	d156      	bne.n	80089cc <RadioIrqProcess+0x43c>
            RFW_ReceivePayload( );
 800891e:	f001 ff86 	bl	800a82e <RFW_ReceivePayload>
        break;
 8008922:	e053      	b.n	80089cc <RadioIrqProcess+0x43c>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 8008924:	4b33      	ldr	r3, [pc, #204]	; (80089f4 <RadioIrqProcess+0x464>)
 8008926:	2201      	movs	r2, #1
 8008928:	2100      	movs	r1, #0
 800892a:	2002      	movs	r0, #2
 800892c:	f003 fae4 	bl	800bef8 <UTIL_ADV_TRACE_COND_FSend>
        break;
 8008930:	e051      	b.n	80089d6 <RadioIrqProcess+0x446>
        TimerStop( &RxTimeoutTimer );
 8008932:	4831      	ldr	r0, [pc, #196]	; (80089f8 <RadioIrqProcess+0x468>)
 8008934:	f003 f8e8 	bl	800bb08 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8008938:	4b2a      	ldr	r3, [pc, #168]	; (80089e4 <RadioIrqProcess+0x454>)
 800893a:	785b      	ldrb	r3, [r3, #1]
 800893c:	f083 0301 	eor.w	r3, r3, #1
 8008940:	b2db      	uxtb	r3, r3
 8008942:	2b00      	cmp	r3, #0
 8008944:	d002      	beq.n	800894c <RadioIrqProcess+0x3bc>
            SUBGRF_SetStandby( STDBY_RC );
 8008946:	2000      	movs	r0, #0
 8008948:	f000 feca 	bl	80096e0 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800894c:	4b2b      	ldr	r3, [pc, #172]	; (80089fc <RadioIrqProcess+0x46c>)
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d03d      	beq.n	80089d0 <RadioIrqProcess+0x440>
 8008954:	4b29      	ldr	r3, [pc, #164]	; (80089fc <RadioIrqProcess+0x46c>)
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	68db      	ldr	r3, [r3, #12]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d038      	beq.n	80089d0 <RadioIrqProcess+0x440>
            RadioEvents->RxTimeout( );
 800895e:	4b27      	ldr	r3, [pc, #156]	; (80089fc <RadioIrqProcess+0x46c>)
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	68db      	ldr	r3, [r3, #12]
 8008964:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 8008966:	4b26      	ldr	r3, [pc, #152]	; (8008a00 <RadioIrqProcess+0x470>)
 8008968:	2201      	movs	r2, #1
 800896a:	2100      	movs	r1, #0
 800896c:	2002      	movs	r0, #2
 800896e:	f003 fac3 	bl	800bef8 <UTIL_ADV_TRACE_COND_FSend>
        break;
 8008972:	e02d      	b.n	80089d0 <RadioIrqProcess+0x440>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 8008974:	4b23      	ldr	r3, [pc, #140]	; (8008a04 <RadioIrqProcess+0x474>)
 8008976:	2201      	movs	r2, #1
 8008978:	2100      	movs	r1, #0
 800897a:	2002      	movs	r0, #2
 800897c:	f003 fabc 	bl	800bef8 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 8008980:	4b18      	ldr	r3, [pc, #96]	; (80089e4 <RadioIrqProcess+0x454>)
 8008982:	785b      	ldrb	r3, [r3, #1]
 8008984:	f083 0301 	eor.w	r3, r3, #1
 8008988:	b2db      	uxtb	r3, r3
 800898a:	2b00      	cmp	r3, #0
 800898c:	d002      	beq.n	8008994 <RadioIrqProcess+0x404>
            SUBGRF_SetStandby( STDBY_RC );
 800898e:	2000      	movs	r0, #0
 8008990:	f000 fea6 	bl	80096e0 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 8008994:	4b19      	ldr	r3, [pc, #100]	; (80089fc <RadioIrqProcess+0x46c>)
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d01b      	beq.n	80089d4 <RadioIrqProcess+0x444>
 800899c:	4b17      	ldr	r3, [pc, #92]	; (80089fc <RadioIrqProcess+0x46c>)
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	691b      	ldr	r3, [r3, #16]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d016      	beq.n	80089d4 <RadioIrqProcess+0x444>
            RadioEvents->RxError( );
 80089a6:	4b15      	ldr	r3, [pc, #84]	; (80089fc <RadioIrqProcess+0x46c>)
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	691b      	ldr	r3, [r3, #16]
 80089ac:	4798      	blx	r3
        break;
 80089ae:	e011      	b.n	80089d4 <RadioIrqProcess+0x444>
        break;
 80089b0:	bf00      	nop
 80089b2:	e010      	b.n	80089d6 <RadioIrqProcess+0x446>
        break;
 80089b4:	bf00      	nop
 80089b6:	e00e      	b.n	80089d6 <RadioIrqProcess+0x446>
        break;
 80089b8:	bf00      	nop
 80089ba:	e00c      	b.n	80089d6 <RadioIrqProcess+0x446>
        break;
 80089bc:	bf00      	nop
 80089be:	e00a      	b.n	80089d6 <RadioIrqProcess+0x446>
        break;
 80089c0:	bf00      	nop
 80089c2:	e008      	b.n	80089d6 <RadioIrqProcess+0x446>
        break;
 80089c4:	bf00      	nop
 80089c6:	e006      	b.n	80089d6 <RadioIrqProcess+0x446>
        break;
 80089c8:	bf00      	nop
 80089ca:	e004      	b.n	80089d6 <RadioIrqProcess+0x446>
        break;
 80089cc:	bf00      	nop
 80089ce:	e002      	b.n	80089d6 <RadioIrqProcess+0x446>
        break;
 80089d0:	bf00      	nop
 80089d2:	e000      	b.n	80089d6 <RadioIrqProcess+0x446>
        break;
 80089d4:	bf00      	nop
    }
}
 80089d6:	bf00      	nop
 80089d8:	3708      	adds	r7, #8
 80089da:	46bd      	mov	sp, r7
 80089dc:	bdb0      	pop	{r4, r5, r7, pc}
 80089de:	bf00      	nop
 80089e0:	0800c4fc 	.word	0x0800c4fc
 80089e4:	20000288 	.word	0x20000288
 80089e8:	08008387 	.word	0x08008387
 80089ec:	080083ab 	.word	0x080083ab
 80089f0:	0800c508 	.word	0x0800c508
 80089f4:	0800c514 	.word	0x0800c514
 80089f8:	200002fc 	.word	0x200002fc
 80089fc:	20000284 	.word	0x20000284
 8008a00:	0800c520 	.word	0x0800c520
 8008a04:	0800c52c 	.word	0x0800c52c

08008a08 <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8008a0c:	4b09      	ldr	r3, [pc, #36]	; (8008a34 <RadioTxPrbs+0x2c>)
 8008a0e:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8008a12:	2101      	movs	r1, #1
 8008a14:	4618      	mov	r0, r3
 8008a16:	f001 fcdb 	bl	800a3d0 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 8008a1a:	4b07      	ldr	r3, [pc, #28]	; (8008a38 <RadioTxPrbs+0x30>)
 8008a1c:	212d      	movs	r1, #45	; 0x2d
 8008a1e:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8008a22:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 8008a24:	f000 ff1f 	bl	8009866 <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 8008a28:	4804      	ldr	r0, [pc, #16]	; (8008a3c <RadioTxPrbs+0x34>)
 8008a2a:	f000 fe75 	bl	8009718 <SUBGRF_SetTx>
}
 8008a2e:	bf00      	nop
 8008a30:	bd80      	pop	{r7, pc}
 8008a32:	bf00      	nop
 8008a34:	20000288 	.word	0x20000288
 8008a38:	08008387 	.word	0x08008387
 8008a3c:	000fffff 	.word	0x000fffff

08008a40 <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b084      	sub	sp, #16
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	4603      	mov	r3, r0
 8008a48:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 8008a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008a4e:	4618      	mov	r0, r3
 8008a50:	f001 fce6 	bl	800a420 <SUBGRF_SetRfTxPower>
 8008a54:	4603      	mov	r3, r0
 8008a56:	73fb      	strb	r3, [r7, #15]
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8008a58:	210e      	movs	r1, #14
 8008a5a:	f640 101f 	movw	r0, #2335	; 0x91f
 8008a5e:	f001 fbc3 	bl	800a1e8 <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 8008a62:	7bfb      	ldrb	r3, [r7, #15]
 8008a64:	2101      	movs	r1, #1
 8008a66:	4618      	mov	r0, r3
 8008a68:	f001 fcb2 	bl	800a3d0 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 8008a6c:	f000 fef2 	bl	8009854 <SUBGRF_SetTxContinuousWave>
}
 8008a70:	bf00      	nop
 8008a72:	3710      	adds	r7, #16
 8008a74:	46bd      	mov	sp, r7
 8008a76:	bd80      	pop	{r7, pc}

08008a78 <payload_integration>:

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 8008a78:	b480      	push	{r7}
 8008a7a:	b089      	sub	sp, #36	; 0x24
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	60f8      	str	r0, [r7, #12]
 8008a80:	60b9      	str	r1, [r7, #8]
 8008a82:	4613      	mov	r3, r2
 8008a84:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 8008a86:	2300      	movs	r3, #0
 8008a88:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < size; i++ )
 8008a8e:	2300      	movs	r3, #0
 8008a90:	61bb      	str	r3, [r7, #24]
 8008a92:	e011      	b.n	8008ab8 <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 8008a94:	69bb      	ldr	r3, [r7, #24]
 8008a96:	68ba      	ldr	r2, [r7, #8]
 8008a98:	4413      	add	r3, r2
 8008a9a:	781a      	ldrb	r2, [r3, #0]
 8008a9c:	69bb      	ldr	r3, [r7, #24]
 8008a9e:	68b9      	ldr	r1, [r7, #8]
 8008aa0:	440b      	add	r3, r1
 8008aa2:	43d2      	mvns	r2, r2
 8008aa4:	b2d2      	uxtb	r2, r2
 8008aa6:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 8008aa8:	69bb      	ldr	r3, [r7, #24]
 8008aaa:	68fa      	ldr	r2, [r7, #12]
 8008aac:	4413      	add	r3, r2
 8008aae:	2200      	movs	r2, #0
 8008ab0:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 8008ab2:	69bb      	ldr	r3, [r7, #24]
 8008ab4:	3301      	adds	r3, #1
 8008ab6:	61bb      	str	r3, [r7, #24]
 8008ab8:	79fb      	ldrb	r3, [r7, #7]
 8008aba:	69ba      	ldr	r2, [r7, #24]
 8008abc:	429a      	cmp	r2, r3
 8008abe:	dbe9      	blt.n	8008a94 <payload_integration+0x1c>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	61bb      	str	r3, [r7, #24]
 8008ac4:	e049      	b.n	8008b5a <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 8008ac6:	69bb      	ldr	r3, [r7, #24]
 8008ac8:	425a      	negs	r2, r3
 8008aca:	f003 0307 	and.w	r3, r3, #7
 8008ace:	f002 0207 	and.w	r2, r2, #7
 8008ad2:	bf58      	it	pl
 8008ad4:	4253      	negpl	r3, r2
 8008ad6:	b2db      	uxtb	r3, r3
 8008ad8:	f1c3 0307 	rsb	r3, r3, #7
 8008adc:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 8008ade:	69bb      	ldr	r3, [r7, #24]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	da00      	bge.n	8008ae6 <payload_integration+0x6e>
 8008ae4:	3307      	adds	r3, #7
 8008ae6:	10db      	asrs	r3, r3, #3
 8008ae8:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 8008aea:	69bb      	ldr	r3, [r7, #24]
 8008aec:	3301      	adds	r3, #1
 8008aee:	425a      	negs	r2, r3
 8008af0:	f003 0307 	and.w	r3, r3, #7
 8008af4:	f002 0207 	and.w	r2, r2, #7
 8008af8:	bf58      	it	pl
 8008afa:	4253      	negpl	r3, r2
 8008afc:	b2db      	uxtb	r3, r3
 8008afe:	f1c3 0307 	rsb	r3, r3, #7
 8008b02:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 8008b04:	69bb      	ldr	r3, [r7, #24]
 8008b06:	3301      	adds	r3, #1
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	da00      	bge.n	8008b0e <payload_integration+0x96>
 8008b0c:	3307      	adds	r3, #7
 8008b0e:	10db      	asrs	r3, r3, #3
 8008b10:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 8008b12:	7dbb      	ldrb	r3, [r7, #22]
 8008b14:	68ba      	ldr	r2, [r7, #8]
 8008b16:	4413      	add	r3, r2
 8008b18:	781b      	ldrb	r3, [r3, #0]
 8008b1a:	461a      	mov	r2, r3
 8008b1c:	7dfb      	ldrb	r3, [r7, #23]
 8008b1e:	fa42 f303 	asr.w	r3, r2, r3
 8008b22:	b2db      	uxtb	r3, r3
 8008b24:	f003 0301 	and.w	r3, r3, #1
 8008b28:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 8008b2a:	7ffa      	ldrb	r2, [r7, #31]
 8008b2c:	7cfb      	ldrb	r3, [r7, #19]
 8008b2e:	4053      	eors	r3, r2
 8008b30:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 8008b32:	7d3b      	ldrb	r3, [r7, #20]
 8008b34:	68fa      	ldr	r2, [r7, #12]
 8008b36:	4413      	add	r3, r2
 8008b38:	781b      	ldrb	r3, [r3, #0]
 8008b3a:	b25a      	sxtb	r2, r3
 8008b3c:	7ff9      	ldrb	r1, [r7, #31]
 8008b3e:	7d7b      	ldrb	r3, [r7, #21]
 8008b40:	fa01 f303 	lsl.w	r3, r1, r3
 8008b44:	b25b      	sxtb	r3, r3
 8008b46:	4313      	orrs	r3, r2
 8008b48:	b259      	sxtb	r1, r3
 8008b4a:	7d3b      	ldrb	r3, [r7, #20]
 8008b4c:	68fa      	ldr	r2, [r7, #12]
 8008b4e:	4413      	add	r3, r2
 8008b50:	b2ca      	uxtb	r2, r1
 8008b52:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < ( size * 8 ); i++ )
 8008b54:	69bb      	ldr	r3, [r7, #24]
 8008b56:	3301      	adds	r3, #1
 8008b58:	61bb      	str	r3, [r7, #24]
 8008b5a:	79fb      	ldrb	r3, [r7, #7]
 8008b5c:	00db      	lsls	r3, r3, #3
 8008b5e:	69ba      	ldr	r2, [r7, #24]
 8008b60:	429a      	cmp	r2, r3
 8008b62:	dbb0      	blt.n	8008ac6 <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 8008b64:	7ffb      	ldrb	r3, [r7, #31]
 8008b66:	01db      	lsls	r3, r3, #7
 8008b68:	b25a      	sxtb	r2, r3
 8008b6a:	7ffb      	ldrb	r3, [r7, #31]
 8008b6c:	019b      	lsls	r3, r3, #6
 8008b6e:	b25b      	sxtb	r3, r3
 8008b70:	4313      	orrs	r3, r2
 8008b72:	b25b      	sxtb	r3, r3
 8008b74:	7ffa      	ldrb	r2, [r7, #31]
 8008b76:	2a00      	cmp	r2, #0
 8008b78:	d101      	bne.n	8008b7e <payload_integration+0x106>
 8008b7a:	2220      	movs	r2, #32
 8008b7c:	e000      	b.n	8008b80 <payload_integration+0x108>
 8008b7e:	2200      	movs	r2, #0
 8008b80:	4313      	orrs	r3, r2
 8008b82:	b259      	sxtb	r1, r3
 8008b84:	79fb      	ldrb	r3, [r7, #7]
 8008b86:	68fa      	ldr	r2, [r7, #12]
 8008b88:	4413      	add	r3, r2
 8008b8a:	b2ca      	uxtb	r2, r1
 8008b8c:	701a      	strb	r2, [r3, #0]
}
 8008b8e:	bf00      	nop
 8008b90:	3724      	adds	r7, #36	; 0x24
 8008b92:	46bd      	mov	sp, r7
 8008b94:	bc80      	pop	{r7}
 8008b96:	4770      	bx	lr

08008b98 <RadioSetRxGenericConfig>:
#endif /*RADIO_SIGFOX_ENABLE == 1*/

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t *config, uint32_t rxContinuous,
                                        uint32_t symbTimeout )
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b08c      	sub	sp, #48	; 0x30
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	60b9      	str	r1, [r7, #8]
 8008ba0:	607a      	str	r2, [r7, #4]
 8008ba2:	603b      	str	r3, [r7, #0]
 8008ba4:	4603      	mov	r3, r0
 8008ba6:	73fb      	strb	r3, [r7, #15]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    int32_t status = 0;
 8008ba8:	2300      	movs	r3, #0
 8008baa:	62bb      	str	r3, [r7, #40]	; 0x28
    uint8_t syncword[8] = {0};
 8008bac:	2300      	movs	r3, #0
 8008bae:	623b      	str	r3, [r7, #32]
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8008bb4:	f001 fdff 	bl	800a7b6 <RFW_DeInit>

    if( rxContinuous != 0 )
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d001      	beq.n	8008bc2 <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	bf14      	ite	ne
 8008bc8:	2301      	movne	r3, #1
 8008bca:	2300      	moveq	r3, #0
 8008bcc:	b2da      	uxtb	r2, r3
 8008bce:	4ba3      	ldr	r3, [pc, #652]	; (8008e5c <RadioSetRxGenericConfig+0x2c4>)
 8008bd0:	705a      	strb	r2, [r3, #1]

    switch( modem )
 8008bd2:	7bfb      	ldrb	r3, [r7, #15]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d003      	beq.n	8008be0 <RadioSetRxGenericConfig+0x48>
 8008bd8:	2b01      	cmp	r3, #1
 8008bda:	f000 80dc 	beq.w	8008d96 <RadioSetRxGenericConfig+0x1fe>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 8008bde:	e194      	b.n	8008f0a <RadioSetRxGenericConfig+0x372>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 8008be0:	68bb      	ldr	r3, [r7, #8]
 8008be2:	689b      	ldr	r3, [r3, #8]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d003      	beq.n	8008bf0 <RadioSetRxGenericConfig+0x58>
 8008be8:	68bb      	ldr	r3, [r7, #8]
 8008bea:	68db      	ldr	r3, [r3, #12]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d102      	bne.n	8008bf6 <RadioSetRxGenericConfig+0x5e>
            return -1;
 8008bf0:	f04f 33ff 	mov.w	r3, #4294967295
 8008bf4:	e18a      	b.n	8008f0c <RadioSetRxGenericConfig+0x374>
        if( config->fsk.SyncWordLength > 8 )
 8008bf6:	68bb      	ldr	r3, [r7, #8]
 8008bf8:	7f9b      	ldrb	r3, [r3, #30]
 8008bfa:	2b08      	cmp	r3, #8
 8008bfc:	d902      	bls.n	8008c04 <RadioSetRxGenericConfig+0x6c>
            return -1;
 8008bfe:	f04f 33ff 	mov.w	r3, #4294967295
 8008c02:	e183      	b.n	8008f0c <RadioSetRxGenericConfig+0x374>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 8008c04:	68bb      	ldr	r3, [r7, #8]
 8008c06:	6919      	ldr	r1, [r3, #16]
 8008c08:	68bb      	ldr	r3, [r7, #8]
 8008c0a:	7f9b      	ldrb	r3, [r3, #30]
 8008c0c:	b29a      	uxth	r2, r3
 8008c0e:	f107 0320 	add.w	r3, r7, #32
 8008c12:	4618      	mov	r0, r3
 8008c14:	f002 fa22 	bl	800b05c <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8008c18:	68bb      	ldr	r3, [r7, #8]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	bf14      	ite	ne
 8008c20:	2301      	movne	r3, #1
 8008c22:	2300      	moveq	r3, #0
 8008c24:	b2db      	uxtb	r3, r3
 8008c26:	4618      	mov	r0, r3
 8008c28:	f000 fe26 	bl	8009878 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8008c2c:	4b8b      	ldr	r3, [pc, #556]	; (8008e5c <RadioSetRxGenericConfig+0x2c4>)
 8008c2e:	2200      	movs	r2, #0
 8008c30:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8008c34:	68bb      	ldr	r3, [r7, #8]
 8008c36:	689b      	ldr	r3, [r3, #8]
 8008c38:	4a88      	ldr	r2, [pc, #544]	; (8008e5c <RadioSetRxGenericConfig+0x2c4>)
 8008c3a:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 8008c3c:	68bb      	ldr	r3, [r7, #8]
 8008c3e:	f893 2020 	ldrb.w	r2, [r3, #32]
 8008c42:	4b86      	ldr	r3, [pc, #536]	; (8008e5c <RadioSetRxGenericConfig+0x2c4>)
 8008c44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 8008c48:	68bb      	ldr	r3, [r7, #8]
 8008c4a:	685b      	ldr	r3, [r3, #4]
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	f001 fce5 	bl	800a61c <SUBGRF_GetFskBandwidthRegValue>
 8008c52:	4603      	mov	r3, r0
 8008c54:	461a      	mov	r2, r3
 8008c56:	4b81      	ldr	r3, [pc, #516]	; (8008e5c <RadioSetRxGenericConfig+0x2c4>)
 8008c58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8008c5c:	4b7f      	ldr	r3, [pc, #508]	; (8008e5c <RadioSetRxGenericConfig+0x2c4>)
 8008c5e:	2200      	movs	r2, #0
 8008c60:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 8008c62:	68bb      	ldr	r3, [r7, #8]
 8008c64:	68db      	ldr	r3, [r3, #12]
 8008c66:	b29b      	uxth	r3, r3
 8008c68:	00db      	lsls	r3, r3, #3
 8008c6a:	b29a      	uxth	r2, r3
 8008c6c:	4b7b      	ldr	r3, [pc, #492]	; (8008e5c <RadioSetRxGenericConfig+0x2c4>)
 8008c6e:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 8008c70:	68bb      	ldr	r3, [r7, #8]
 8008c72:	7fda      	ldrb	r2, [r3, #31]
 8008c74:	4b79      	ldr	r3, [pc, #484]	; (8008e5c <RadioSetRxGenericConfig+0x2c4>)
 8008c76:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8008c78:	68bb      	ldr	r3, [r7, #8]
 8008c7a:	7f9b      	ldrb	r3, [r3, #30]
 8008c7c:	00db      	lsls	r3, r3, #3
 8008c7e:	b2da      	uxtb	r2, r3
 8008c80:	4b76      	ldr	r3, [pc, #472]	; (8008e5c <RadioSetRxGenericConfig+0x2c4>)
 8008c82:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 8008c84:	68bb      	ldr	r3, [r7, #8]
 8008c86:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8008c8a:	4b74      	ldr	r3, [pc, #464]	; (8008e5c <RadioSetRxGenericConfig+0x2c4>)
 8008c8c:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 8008c8e:	68bb      	ldr	r3, [r7, #8]
 8008c90:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d105      	bne.n	8008ca4 <RadioSetRxGenericConfig+0x10c>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 8008c98:	68bb      	ldr	r3, [r7, #8]
 8008c9a:	695b      	ldr	r3, [r3, #20]
 8008c9c:	b2da      	uxtb	r2, r3
 8008c9e:	4b6f      	ldr	r3, [pc, #444]	; (8008e5c <RadioSetRxGenericConfig+0x2c4>)
 8008ca0:	759a      	strb	r2, [r3, #22]
 8008ca2:	e00b      	b.n	8008cbc <RadioSetRxGenericConfig+0x124>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 8008ca4:	68bb      	ldr	r3, [r7, #8]
 8008ca6:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8008caa:	2b02      	cmp	r3, #2
 8008cac:	d103      	bne.n	8008cb6 <RadioSetRxGenericConfig+0x11e>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8008cae:	4b6b      	ldr	r3, [pc, #428]	; (8008e5c <RadioSetRxGenericConfig+0x2c4>)
 8008cb0:	22ff      	movs	r2, #255	; 0xff
 8008cb2:	759a      	strb	r2, [r3, #22]
 8008cb4:	e002      	b.n	8008cbc <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8008cb6:	4b69      	ldr	r3, [pc, #420]	; (8008e5c <RadioSetRxGenericConfig+0x2c4>)
 8008cb8:	22ff      	movs	r2, #255	; 0xff
 8008cba:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 8008cbc:	68bb      	ldr	r3, [r7, #8]
 8008cbe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008cc2:	2b02      	cmp	r3, #2
 8008cc4:	d004      	beq.n	8008cd0 <RadioSetRxGenericConfig+0x138>
            || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8008cc6:	68bb      	ldr	r3, [r7, #8]
 8008cc8:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8008ccc:	2b02      	cmp	r3, #2
 8008cce:	d12d      	bne.n	8008d2c <RadioSetRxGenericConfig+0x194>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 8008cd0:	68bb      	ldr	r3, [r7, #8]
 8008cd2:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8008cd6:	2bf1      	cmp	r3, #241	; 0xf1
 8008cd8:	d00c      	beq.n	8008cf4 <RadioSetRxGenericConfig+0x15c>
 8008cda:	68bb      	ldr	r3, [r7, #8]
 8008cdc:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8008ce0:	2bf2      	cmp	r3, #242	; 0xf2
 8008ce2:	d007      	beq.n	8008cf4 <RadioSetRxGenericConfig+0x15c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8008ce4:	68bb      	ldr	r3, [r7, #8]
 8008ce6:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8008cea:	2b01      	cmp	r3, #1
 8008cec:	d002      	beq.n	8008cf4 <RadioSetRxGenericConfig+0x15c>
                return -1;
 8008cee:	f04f 33ff 	mov.w	r3, #4294967295
 8008cf2:	e10b      	b.n	8008f0c <RadioSetRxGenericConfig+0x374>
            ConfigGeneric.rtx = CONFIG_RX;
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.RxConfig = config;
 8008cf8:	68bb      	ldr	r3, [r7, #8]
 8008cfa:	61bb      	str	r3, [r7, #24]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 8008cfc:	4b58      	ldr	r3, [pc, #352]	; (8008e60 <RadioSetRxGenericConfig+0x2c8>)
 8008cfe:	6819      	ldr	r1, [r3, #0]
 8008d00:	f107 0314 	add.w	r3, r7, #20
 8008d04:	4a57      	ldr	r2, [pc, #348]	; (8008e64 <RadioSetRxGenericConfig+0x2cc>)
 8008d06:	4618      	mov	r0, r3
 8008d08:	f001 fd48 	bl	800a79c <RFW_Init>
 8008d0c:	4603      	mov	r3, r0
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d002      	beq.n	8008d18 <RadioSetRxGenericConfig+0x180>
                return -1;
 8008d12:	f04f 33ff 	mov.w	r3, #4294967295
 8008d16:	e0f9      	b.n	8008f0c <RadioSetRxGenericConfig+0x374>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8008d18:	4b50      	ldr	r3, [pc, #320]	; (8008e5c <RadioSetRxGenericConfig+0x2c4>)
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8008d1e:	4b4f      	ldr	r3, [pc, #316]	; (8008e5c <RadioSetRxGenericConfig+0x2c4>)
 8008d20:	2201      	movs	r2, #1
 8008d22:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8008d24:	4b4d      	ldr	r3, [pc, #308]	; (8008e5c <RadioSetRxGenericConfig+0x2c4>)
 8008d26:	2200      	movs	r2, #0
 8008d28:	755a      	strb	r2, [r3, #21]
        {
 8008d2a:	e00e      	b.n	8008d4a <RadioSetRxGenericConfig+0x1b2>
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8008d2c:	68bb      	ldr	r3, [r7, #8]
 8008d2e:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8008d32:	4b4a      	ldr	r3, [pc, #296]	; (8008e5c <RadioSetRxGenericConfig+0x2c4>)
 8008d34:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8008d36:	68bb      	ldr	r3, [r7, #8]
 8008d38:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8008d3c:	4b47      	ldr	r3, [pc, #284]	; (8008e5c <RadioSetRxGenericConfig+0x2c4>)
 8008d3e:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 8008d40:	68bb      	ldr	r3, [r7, #8]
 8008d42:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8008d46:	4b45      	ldr	r3, [pc, #276]	; (8008e5c <RadioSetRxGenericConfig+0x2c4>)
 8008d48:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 8008d4a:	f7ff fa0e 	bl	800816a <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8008d4e:	2000      	movs	r0, #0
 8008d50:	f7fe fb9c 	bl	800748c <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8008d54:	4844      	ldr	r0, [pc, #272]	; (8008e68 <RadioSetRxGenericConfig+0x2d0>)
 8008d56:	f001 f82d 	bl	8009db4 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008d5a:	4844      	ldr	r0, [pc, #272]	; (8008e6c <RadioSetRxGenericConfig+0x2d4>)
 8008d5c:	f001 f8fc 	bl	8009f58 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8008d60:	f107 0320 	add.w	r3, r7, #32
 8008d64:	4618      	mov	r0, r3
 8008d66:	f000 fbc0 	bl	80094ea <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8008d6a:	68bb      	ldr	r3, [r7, #8]
 8008d6c:	8b9b      	ldrh	r3, [r3, #28]
 8008d6e:	4618      	mov	r0, r3
 8008d70:	f000 fc0a 	bl	8009588 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 8008d74:	68bb      	ldr	r3, [r7, #8]
 8008d76:	8b1b      	ldrh	r3, [r3, #24]
 8008d78:	4618      	mov	r0, r3
 8008d7a:	f000 fbe5 	bl	8009548 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8008d84:	fb03 f202 	mul.w	r2, r3, r2
 8008d88:	68bb      	ldr	r3, [r7, #8]
 8008d8a:	689b      	ldr	r3, [r3, #8]
 8008d8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d90:	4a32      	ldr	r2, [pc, #200]	; (8008e5c <RadioSetRxGenericConfig+0x2c4>)
 8008d92:	6093      	str	r3, [r2, #8]
        break;
 8008d94:	e0b9      	b.n	8008f0a <RadioSetRxGenericConfig+0x372>
        if( config->lora.PreambleLen == 0 )
 8008d96:	68bb      	ldr	r3, [r7, #8]
 8008d98:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d102      	bne.n	8008da4 <RadioSetRxGenericConfig+0x20c>
            return -1;
 8008d9e:	f04f 33ff 	mov.w	r3, #4294967295
 8008da2:	e0b3      	b.n	8008f0c <RadioSetRxGenericConfig+0x374>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 8008da4:	68bb      	ldr	r3, [r7, #8]
 8008da6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8008daa:	2b01      	cmp	r3, #1
 8008dac:	d104      	bne.n	8008db8 <RadioSetRxGenericConfig+0x220>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 8008dae:	68bb      	ldr	r3, [r7, #8]
 8008db0:	695b      	ldr	r3, [r3, #20]
 8008db2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008db6:	e002      	b.n	8008dbe <RadioSetRxGenericConfig+0x226>
            MaxPayloadLength = 0xFF;
 8008db8:	23ff      	movs	r3, #255	; 0xff
 8008dba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8008dbe:	68bb      	ldr	r3, [r7, #8]
 8008dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	bf14      	ite	ne
 8008dc6:	2301      	movne	r3, #1
 8008dc8:	2300      	moveq	r3, #0
 8008dca:	b2db      	uxtb	r3, r3
 8008dcc:	4618      	mov	r0, r3
 8008dce:	f000 fd53 	bl	8009878 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8008dd2:	683b      	ldr	r3, [r7, #0]
 8008dd4:	b2db      	uxtb	r3, r3
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	f000 fd5d 	bl	8009896 <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8008ddc:	4b1f      	ldr	r3, [pc, #124]	; (8008e5c <RadioSetRxGenericConfig+0x2c4>)
 8008dde:	2201      	movs	r2, #1
 8008de0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8008de4:	68bb      	ldr	r3, [r7, #8]
 8008de6:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8008dea:	4b1c      	ldr	r3, [pc, #112]	; (8008e5c <RadioSetRxGenericConfig+0x2c4>)
 8008dec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 8008df0:	68bb      	ldr	r3, [r7, #8]
 8008df2:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 8008df6:	4b19      	ldr	r3, [pc, #100]	; (8008e5c <RadioSetRxGenericConfig+0x2c4>)
 8008df8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8008dfc:	68bb      	ldr	r3, [r7, #8]
 8008dfe:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8008e02:	4b16      	ldr	r3, [pc, #88]	; (8008e5c <RadioSetRxGenericConfig+0x2c4>)
 8008e04:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 8008e08:	68bb      	ldr	r3, [r7, #8]
 8008e0a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008e0e:	2b02      	cmp	r3, #2
 8008e10:	d010      	beq.n	8008e34 <RadioSetRxGenericConfig+0x29c>
 8008e12:	2b02      	cmp	r3, #2
 8008e14:	dc2c      	bgt.n	8008e70 <RadioSetRxGenericConfig+0x2d8>
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d002      	beq.n	8008e20 <RadioSetRxGenericConfig+0x288>
 8008e1a:	2b01      	cmp	r3, #1
 8008e1c:	d005      	beq.n	8008e2a <RadioSetRxGenericConfig+0x292>
            break;
 8008e1e:	e027      	b.n	8008e70 <RadioSetRxGenericConfig+0x2d8>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8008e20:	4b0e      	ldr	r3, [pc, #56]	; (8008e5c <RadioSetRxGenericConfig+0x2c4>)
 8008e22:	2200      	movs	r2, #0
 8008e24:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8008e28:	e023      	b.n	8008e72 <RadioSetRxGenericConfig+0x2da>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8008e2a:	4b0c      	ldr	r3, [pc, #48]	; (8008e5c <RadioSetRxGenericConfig+0x2c4>)
 8008e2c:	2201      	movs	r2, #1
 8008e2e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8008e32:	e01e      	b.n	8008e72 <RadioSetRxGenericConfig+0x2da>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8008e34:	68bb      	ldr	r3, [r7, #8]
 8008e36:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008e3a:	2b0b      	cmp	r3, #11
 8008e3c:	d004      	beq.n	8008e48 <RadioSetRxGenericConfig+0x2b0>
 8008e3e:	68bb      	ldr	r3, [r7, #8]
 8008e40:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008e44:	2b0c      	cmp	r3, #12
 8008e46:	d104      	bne.n	8008e52 <RadioSetRxGenericConfig+0x2ba>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8008e48:	4b04      	ldr	r3, [pc, #16]	; (8008e5c <RadioSetRxGenericConfig+0x2c4>)
 8008e4a:	2201      	movs	r2, #1
 8008e4c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8008e50:	e00f      	b.n	8008e72 <RadioSetRxGenericConfig+0x2da>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8008e52:	4b02      	ldr	r3, [pc, #8]	; (8008e5c <RadioSetRxGenericConfig+0x2c4>)
 8008e54:	2200      	movs	r2, #0
 8008e56:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8008e5a:	e00a      	b.n	8008e72 <RadioSetRxGenericConfig+0x2da>
 8008e5c:	20000288 	.word	0x20000288
 8008e60:	20000284 	.word	0x20000284
 8008e64:	200002fc 	.word	0x200002fc
 8008e68:	200002c0 	.word	0x200002c0
 8008e6c:	20000296 	.word	0x20000296
            break;
 8008e70:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8008e72:	4b28      	ldr	r3, [pc, #160]	; (8008f14 <RadioSetRxGenericConfig+0x37c>)
 8008e74:	2201      	movs	r2, #1
 8008e76:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8008e78:	68bb      	ldr	r3, [r7, #8]
 8008e7a:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 8008e7c:	4b25      	ldr	r3, [pc, #148]	; (8008f14 <RadioSetRxGenericConfig+0x37c>)
 8008e7e:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8008e80:	68bb      	ldr	r3, [r7, #8]
 8008e82:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 8008e86:	4b23      	ldr	r3, [pc, #140]	; (8008f14 <RadioSetRxGenericConfig+0x37c>)
 8008e88:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8008e8a:	4a22      	ldr	r2, [pc, #136]	; (8008f14 <RadioSetRxGenericConfig+0x37c>)
 8008e8c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008e90:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8008e92:	68bb      	ldr	r3, [r7, #8]
 8008e94:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8008e98:	4b1e      	ldr	r3, [pc, #120]	; (8008f14 <RadioSetRxGenericConfig+0x37c>)
 8008e9a:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 8008e9e:	68bb      	ldr	r3, [r7, #8]
 8008ea0:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 8008ea4:	4b1b      	ldr	r3, [pc, #108]	; (8008f14 <RadioSetRxGenericConfig+0x37c>)
 8008ea6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 8008eaa:	f7ff f95e 	bl	800816a <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8008eae:	2001      	movs	r0, #1
 8008eb0:	f7fe faec 	bl	800748c <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8008eb4:	4818      	ldr	r0, [pc, #96]	; (8008f18 <RadioSetRxGenericConfig+0x380>)
 8008eb6:	f000 ff7d 	bl	8009db4 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008eba:	4818      	ldr	r0, [pc, #96]	; (8008f1c <RadioSetRxGenericConfig+0x384>)
 8008ebc:	f001 f84c 	bl	8009f58 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8008ec0:	4b14      	ldr	r3, [pc, #80]	; (8008f14 <RadioSetRxGenericConfig+0x37c>)
 8008ec2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008ec6:	2b01      	cmp	r3, #1
 8008ec8:	d10d      	bne.n	8008ee6 <RadioSetRxGenericConfig+0x34e>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 8008eca:	f240 7036 	movw	r0, #1846	; 0x736
 8008ece:	f001 f99f 	bl	800a210 <SUBGRF_ReadRegister>
 8008ed2:	4603      	mov	r3, r0
 8008ed4:	f023 0304 	bic.w	r3, r3, #4
 8008ed8:	b2db      	uxtb	r3, r3
 8008eda:	4619      	mov	r1, r3
 8008edc:	f240 7036 	movw	r0, #1846	; 0x736
 8008ee0:	f001 f982 	bl	800a1e8 <SUBGRF_WriteRegister>
 8008ee4:	e00c      	b.n	8008f00 <RadioSetRxGenericConfig+0x368>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8008ee6:	f240 7036 	movw	r0, #1846	; 0x736
 8008eea:	f001 f991 	bl	800a210 <SUBGRF_ReadRegister>
 8008eee:	4603      	mov	r3, r0
 8008ef0:	f043 0304 	orr.w	r3, r3, #4
 8008ef4:	b2db      	uxtb	r3, r3
 8008ef6:	4619      	mov	r1, r3
 8008ef8:	f240 7036 	movw	r0, #1846	; 0x736
 8008efc:	f001 f974 	bl	800a1e8 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 8008f00:	4b04      	ldr	r3, [pc, #16]	; (8008f14 <RadioSetRxGenericConfig+0x37c>)
 8008f02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008f06:	609a      	str	r2, [r3, #8]
        break;
 8008f08:	bf00      	nop
    }
    return status;
 8008f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	3730      	adds	r7, #48	; 0x30
 8008f10:	46bd      	mov	sp, r7
 8008f12:	bd80      	pop	{r7, pc}
 8008f14:	20000288 	.word	0x20000288
 8008f18:	200002c0 	.word	0x200002c0
 8008f1c:	20000296 	.word	0x20000296

08008f20 <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t *config, int8_t power,
                                        uint32_t timeout )
{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b08e      	sub	sp, #56	; 0x38
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	60b9      	str	r1, [r7, #8]
 8008f28:	607b      	str	r3, [r7, #4]
 8008f2a:	4603      	mov	r3, r0
 8008f2c:	73fb      	strb	r3, [r7, #15]
 8008f2e:	4613      	mov	r3, r2
 8008f30:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    uint8_t syncword[8] = {0};
 8008f32:	2300      	movs	r3, #0
 8008f34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008f36:	2300      	movs	r3, #0
 8008f38:	633b      	str	r3, [r7, #48]	; 0x30
    RadioModems_t radio_modem;
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8008f3a:	f001 fc3c 	bl	800a7b6 <RFW_DeInit>
    switch( modem )
 8008f3e:	7bfb      	ldrb	r3, [r7, #15]
 8008f40:	2b03      	cmp	r3, #3
 8008f42:	f200 8204 	bhi.w	800934e <RadioSetTxGenericConfig+0x42e>
 8008f46:	a201      	add	r2, pc, #4	; (adr r2, 8008f4c <RadioSetTxGenericConfig+0x2c>)
 8008f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f4c:	080090d1 	.word	0x080090d1
 8008f50:	08009219 	.word	0x08009219
 8008f54:	08009311 	.word	0x08009311
 8008f58:	08008f5d 	.word	0x08008f5d
    {
    case GENERIC_MSK:
        if( config->msk.SyncWordLength > 8 )
 8008f5c:	68bb      	ldr	r3, [r7, #8]
 8008f5e:	7c9b      	ldrb	r3, [r3, #18]
 8008f60:	2b08      	cmp	r3, #8
 8008f62:	d902      	bls.n	8008f6a <RadioSetTxGenericConfig+0x4a>
        {
            return -1;
 8008f64:	f04f 33ff 	mov.w	r3, #4294967295
 8008f68:	e206      	b.n	8009378 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->msk.SyncWord, config->msk.SyncWordLength );
 8008f6a:	68bb      	ldr	r3, [r7, #8]
 8008f6c:	6899      	ldr	r1, [r3, #8]
 8008f6e:	68bb      	ldr	r3, [r7, #8]
 8008f70:	7c9b      	ldrb	r3, [r3, #18]
 8008f72:	b29a      	uxth	r2, r3
 8008f74:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008f78:	4618      	mov	r0, r3
 8008f7a:	f002 f86f 	bl	800b05c <UTIL_MEM_cpy_8>
        }
        if( ( config->msk.BitRate == 0 ) )
 8008f7e:	68bb      	ldr	r3, [r7, #8]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d102      	bne.n	8008f8c <RadioSetTxGenericConfig+0x6c>
        {
            return -1;
 8008f86:	f04f 33ff 	mov.w	r3, #4294967295
 8008f8a:	e1f5      	b.n	8009378 <RadioSetTxGenericConfig+0x458>
        }
        else if( config->msk.BitRate <= 10000 )
 8008f8c:	68bb      	ldr	r3, [r7, #8]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	f242 7210 	movw	r2, #10000	; 0x2710
 8008f94:	4293      	cmp	r3, r2
 8008f96:	d813      	bhi.n	8008fc0 <RadioSetTxGenericConfig+0xa0>
        {
            /*max msk modulator datarate is 10kbps*/
            radio_modem = MODEM_MSK;
 8008f98:	2302      	movs	r3, #2
 8008f9a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 8008f9e:	4b99      	ldr	r3, [pc, #612]	; (8009204 <RadioSetTxGenericConfig+0x2e4>)
 8008fa0:	2203      	movs	r2, #3
 8008fa2:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 8008fa4:	4b97      	ldr	r3, [pc, #604]	; (8009204 <RadioSetTxGenericConfig+0x2e4>)
 8008fa6:	2203      	movs	r2, #3
 8008fa8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 8008fac:	68bb      	ldr	r3, [r7, #8]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	4a94      	ldr	r2, [pc, #592]	; (8009204 <RadioSetTxGenericConfig+0x2e4>)
 8008fb2:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 8008fb4:	68bb      	ldr	r3, [r7, #8]
 8008fb6:	7cda      	ldrb	r2, [r3, #19]
 8008fb8:	4b92      	ldr	r3, [pc, #584]	; (8009204 <RadioSetTxGenericConfig+0x2e4>)
 8008fba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008fbe:	e017      	b.n	8008ff0 <RadioSetTxGenericConfig+0xd0>
        }
        else
        {
            radio_modem = MODEM_FSK;
 8008fc0:	2300      	movs	r3, #0
 8008fc2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8008fc6:	4b8f      	ldr	r3, [pc, #572]	; (8009204 <RadioSetTxGenericConfig+0x2e4>)
 8008fc8:	2200      	movs	r2, #0
 8008fca:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8008fcc:	4b8d      	ldr	r3, [pc, #564]	; (8009204 <RadioSetTxGenericConfig+0x2e4>)
 8008fce:	2200      	movs	r2, #0
 8008fd0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 8008fd4:	68bb      	ldr	r3, [r7, #8]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	4a8a      	ldr	r2, [pc, #552]	; (8009204 <RadioSetTxGenericConfig+0x2e4>)
 8008fda:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 8008fdc:	68bb      	ldr	r3, [r7, #8]
 8008fde:	7cda      	ldrb	r2, [r3, #19]
 8008fe0:	4b88      	ldr	r3, [pc, #544]	; (8009204 <RadioSetTxGenericConfig+0x2e4>)
 8008fe2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            /*do msk with gfsk modulator*/
            SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate / 4;
 8008fe6:	68bb      	ldr	r3, [r7, #8]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	089b      	lsrs	r3, r3, #2
 8008fec:	4a85      	ldr	r2, [pc, #532]	; (8009204 <RadioSetTxGenericConfig+0x2e4>)
 8008fee:	6413      	str	r3, [r2, #64]	; 0x40
        }

        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 8008ff0:	68bb      	ldr	r3, [r7, #8]
 8008ff2:	685b      	ldr	r3, [r3, #4]
 8008ff4:	b29b      	uxth	r3, r3
 8008ff6:	00db      	lsls	r3, r3, #3
 8008ff8:	b29a      	uxth	r2, r3
 8008ffa:	4b82      	ldr	r3, [pc, #520]	; (8009204 <RadioSetTxGenericConfig+0x2e4>)
 8008ffc:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 8008ffe:	4b81      	ldr	r3, [pc, #516]	; (8009204 <RadioSetTxGenericConfig+0x2e4>)
 8009000:	2204      	movs	r2, #4
 8009002:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 8009004:	68bb      	ldr	r3, [r7, #8]
 8009006:	7c9b      	ldrb	r3, [r3, #18]
 8009008:	00db      	lsls	r3, r3, #3
 800900a:	b2da      	uxtb	r2, r3
 800900c:	4b7d      	ldr	r3, [pc, #500]	; (8009204 <RadioSetTxGenericConfig+0x2e4>)
 800900e:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 8009010:	4b7c      	ldr	r3, [pc, #496]	; (8009204 <RadioSetTxGenericConfig+0x2e4>)
 8009012:	2200      	movs	r2, #0
 8009014:	751a      	strb	r2, [r3, #20]

        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 8009016:	68bb      	ldr	r3, [r7, #8]
 8009018:	7d9b      	ldrb	r3, [r3, #22]
 800901a:	2b02      	cmp	r3, #2
 800901c:	d003      	beq.n	8009026 <RadioSetTxGenericConfig+0x106>
            || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 800901e:	68bb      	ldr	r3, [r7, #8]
 8009020:	7d1b      	ldrb	r3, [r3, #20]
 8009022:	2b02      	cmp	r3, #2
 8009024:	d12b      	bne.n	800907e <RadioSetTxGenericConfig+0x15e>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 8009026:	68bb      	ldr	r3, [r7, #8]
 8009028:	7d5b      	ldrb	r3, [r3, #21]
 800902a:	2bf1      	cmp	r3, #241	; 0xf1
 800902c:	d00a      	beq.n	8009044 <RadioSetTxGenericConfig+0x124>
 800902e:	68bb      	ldr	r3, [r7, #8]
 8009030:	7d5b      	ldrb	r3, [r3, #21]
 8009032:	2bf2      	cmp	r3, #242	; 0xf2
 8009034:	d006      	beq.n	8009044 <RadioSetTxGenericConfig+0x124>
                && ( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8009036:	68bb      	ldr	r3, [r7, #8]
 8009038:	7d5b      	ldrb	r3, [r3, #21]
 800903a:	2b01      	cmp	r3, #1
 800903c:	d002      	beq.n	8009044 <RadioSetTxGenericConfig+0x124>
            {
                return -1;
 800903e:	f04f 33ff 	mov.w	r3, #4294967295
 8009042:	e199      	b.n	8009378 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            /*msk and fsk are union, no need for copy as fsk/msk struct are on same address*/
            ConfigGeneric.TxConfig = config;
 8009044:	68bb      	ldr	r3, [r7, #8]
 8009046:	623b      	str	r3, [r7, #32]
            ConfigGeneric.rtx = CONFIG_TX;
 8009048:	2301      	movs	r3, #1
 800904a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 800904e:	4b6e      	ldr	r3, [pc, #440]	; (8009208 <RadioSetTxGenericConfig+0x2e8>)
 8009050:	6819      	ldr	r1, [r3, #0]
 8009052:	f107 0320 	add.w	r3, r7, #32
 8009056:	4a6d      	ldr	r2, [pc, #436]	; (800920c <RadioSetTxGenericConfig+0x2ec>)
 8009058:	4618      	mov	r0, r3
 800905a:	f001 fb9f 	bl	800a79c <RFW_Init>
 800905e:	4603      	mov	r3, r0
 8009060:	2b00      	cmp	r3, #0
 8009062:	d002      	beq.n	800906a <RadioSetTxGenericConfig+0x14a>
            {
                return -1;
 8009064:	f04f 33ff 	mov.w	r3, #4294967295
 8009068:	e186      	b.n	8009378 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 800906a:	4b66      	ldr	r3, [pc, #408]	; (8009204 <RadioSetTxGenericConfig+0x2e4>)
 800906c:	2200      	movs	r2, #0
 800906e:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8009070:	4b64      	ldr	r3, [pc, #400]	; (8009204 <RadioSetTxGenericConfig+0x2e4>)
 8009072:	2201      	movs	r2, #1
 8009074:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8009076:	4b63      	ldr	r3, [pc, #396]	; (8009204 <RadioSetTxGenericConfig+0x2e4>)
 8009078:	2200      	movs	r2, #0
 800907a:	755a      	strb	r2, [r3, #21]
        {
 800907c:	e00b      	b.n	8009096 <RadioSetTxGenericConfig+0x176>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 800907e:	68bb      	ldr	r3, [r7, #8]
 8009080:	7d5a      	ldrb	r2, [r3, #21]
 8009082:	4b60      	ldr	r3, [pc, #384]	; (8009204 <RadioSetTxGenericConfig+0x2e4>)
 8009084:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 8009086:	68bb      	ldr	r3, [r7, #8]
 8009088:	7d9a      	ldrb	r2, [r3, #22]
 800908a:	4b5e      	ldr	r3, [pc, #376]	; (8009204 <RadioSetTxGenericConfig+0x2e4>)
 800908c:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 800908e:	68bb      	ldr	r3, [r7, #8]
 8009090:	7d1a      	ldrb	r2, [r3, #20]
 8009092:	4b5c      	ldr	r3, [pc, #368]	; (8009204 <RadioSetTxGenericConfig+0x2e4>)
 8009094:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 8009096:	f7ff f868 	bl	800816a <RadioStandby>
        RadioSetModem( radio_modem );
 800909a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800909e:	4618      	mov	r0, r3
 80090a0:	f7fe f9f4 	bl	800748c <RadioSetModem>

        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80090a4:	485a      	ldr	r0, [pc, #360]	; (8009210 <RadioSetTxGenericConfig+0x2f0>)
 80090a6:	f000 fe85 	bl	8009db4 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80090aa:	485a      	ldr	r0, [pc, #360]	; (8009214 <RadioSetTxGenericConfig+0x2f4>)
 80090ac:	f000 ff54 	bl	8009f58 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 80090b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80090b4:	4618      	mov	r0, r3
 80090b6:	f000 fa18 	bl	80094ea <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 80090ba:	68bb      	ldr	r3, [r7, #8]
 80090bc:	8a1b      	ldrh	r3, [r3, #16]
 80090be:	4618      	mov	r0, r3
 80090c0:	f000 fa62 	bl	8009588 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->msk.CrcPolynomial );
 80090c4:	68bb      	ldr	r3, [r7, #8]
 80090c6:	899b      	ldrh	r3, [r3, #12]
 80090c8:	4618      	mov	r0, r3
 80090ca:	f000 fa3d 	bl	8009548 <SUBGRF_SetCrcPolynomial>
        break;
 80090ce:	e13f      	b.n	8009350 <RadioSetTxGenericConfig+0x430>
    case GENERIC_FSK:
        if( config->fsk.BitRate == 0 )
 80090d0:	68bb      	ldr	r3, [r7, #8]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d102      	bne.n	80090de <RadioSetTxGenericConfig+0x1be>
        {
            return -1;
 80090d8:	f04f 33ff 	mov.w	r3, #4294967295
 80090dc:	e14c      	b.n	8009378 <RadioSetTxGenericConfig+0x458>
        }
        if( config->fsk.SyncWordLength > 8 )
 80090de:	68bb      	ldr	r3, [r7, #8]
 80090e0:	7c9b      	ldrb	r3, [r3, #18]
 80090e2:	2b08      	cmp	r3, #8
 80090e4:	d902      	bls.n	80090ec <RadioSetTxGenericConfig+0x1cc>
        {
            return -1;
 80090e6:	f04f 33ff 	mov.w	r3, #4294967295
 80090ea:	e145      	b.n	8009378 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 80090ec:	68bb      	ldr	r3, [r7, #8]
 80090ee:	6899      	ldr	r1, [r3, #8]
 80090f0:	68bb      	ldr	r3, [r7, #8]
 80090f2:	7c9b      	ldrb	r3, [r3, #18]
 80090f4:	b29a      	uxth	r2, r3
 80090f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80090fa:	4618      	mov	r0, r3
 80090fc:	f001 ffae 	bl	800b05c <UTIL_MEM_cpy_8>
        }
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8009100:	4b40      	ldr	r3, [pc, #256]	; (8009204 <RadioSetTxGenericConfig+0x2e4>)
 8009102:	2200      	movs	r2, #0
 8009104:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8009108:	68bb      	ldr	r3, [r7, #8]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	4a3d      	ldr	r2, [pc, #244]	; (8009204 <RadioSetTxGenericConfig+0x2e4>)
 800910e:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 8009110:	68bb      	ldr	r3, [r7, #8]
 8009112:	7cda      	ldrb	r2, [r3, #19]
 8009114:	4b3b      	ldr	r3, [pc, #236]	; (8009204 <RadioSetTxGenericConfig+0x2e4>)
 8009116:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 800911a:	68bb      	ldr	r3, [r7, #8]
 800911c:	699b      	ldr	r3, [r3, #24]
 800911e:	4a39      	ldr	r2, [pc, #228]	; (8009204 <RadioSetTxGenericConfig+0x2e4>)
 8009120:	6413      	str	r3, [r2, #64]	; 0x40

        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8009122:	4b38      	ldr	r3, [pc, #224]	; (8009204 <RadioSetTxGenericConfig+0x2e4>)
 8009124:	2200      	movs	r2, #0
 8009126:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 8009128:	68bb      	ldr	r3, [r7, #8]
 800912a:	685b      	ldr	r3, [r3, #4]
 800912c:	b29b      	uxth	r3, r3
 800912e:	00db      	lsls	r3, r3, #3
 8009130:	b29a      	uxth	r2, r3
 8009132:	4b34      	ldr	r3, [pc, #208]	; (8009204 <RadioSetTxGenericConfig+0x2e4>)
 8009134:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 8009136:	4b33      	ldr	r3, [pc, #204]	; (8009204 <RadioSetTxGenericConfig+0x2e4>)
 8009138:	2204      	movs	r2, #4
 800913a:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 800913c:	68bb      	ldr	r3, [r7, #8]
 800913e:	7c9b      	ldrb	r3, [r3, #18]
 8009140:	00db      	lsls	r3, r3, #3
 8009142:	b2da      	uxtb	r2, r3
 8009144:	4b2f      	ldr	r3, [pc, #188]	; (8009204 <RadioSetTxGenericConfig+0x2e4>)
 8009146:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 8009148:	4b2e      	ldr	r3, [pc, #184]	; (8009204 <RadioSetTxGenericConfig+0x2e4>)
 800914a:	2200      	movs	r2, #0
 800914c:	751a      	strb	r2, [r3, #20]

        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 800914e:	68bb      	ldr	r3, [r7, #8]
 8009150:	7d9b      	ldrb	r3, [r3, #22]
 8009152:	2b02      	cmp	r3, #2
 8009154:	d003      	beq.n	800915e <RadioSetTxGenericConfig+0x23e>
            || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8009156:	68bb      	ldr	r3, [r7, #8]
 8009158:	7d1b      	ldrb	r3, [r3, #20]
 800915a:	2b02      	cmp	r3, #2
 800915c:	d12a      	bne.n	80091b4 <RadioSetTxGenericConfig+0x294>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 800915e:	68bb      	ldr	r3, [r7, #8]
 8009160:	7d5b      	ldrb	r3, [r3, #21]
 8009162:	2bf1      	cmp	r3, #241	; 0xf1
 8009164:	d00a      	beq.n	800917c <RadioSetTxGenericConfig+0x25c>
 8009166:	68bb      	ldr	r3, [r7, #8]
 8009168:	7d5b      	ldrb	r3, [r3, #21]
 800916a:	2bf2      	cmp	r3, #242	; 0xf2
 800916c:	d006      	beq.n	800917c <RadioSetTxGenericConfig+0x25c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 800916e:	68bb      	ldr	r3, [r7, #8]
 8009170:	7d5b      	ldrb	r3, [r3, #21]
 8009172:	2b01      	cmp	r3, #1
 8009174:	d002      	beq.n	800917c <RadioSetTxGenericConfig+0x25c>
            {
                return -1;
 8009176:	f04f 33ff 	mov.w	r3, #4294967295
 800917a:	e0fd      	b.n	8009378 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            ConfigGeneric.rtx = CONFIG_TX;
 800917c:	2301      	movs	r3, #1
 800917e:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.TxConfig = config;
 8009180:	68bb      	ldr	r3, [r7, #8]
 8009182:	617b      	str	r3, [r7, #20]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 8009184:	4b20      	ldr	r3, [pc, #128]	; (8009208 <RadioSetTxGenericConfig+0x2e8>)
 8009186:	6819      	ldr	r1, [r3, #0]
 8009188:	f107 0314 	add.w	r3, r7, #20
 800918c:	4a1f      	ldr	r2, [pc, #124]	; (800920c <RadioSetTxGenericConfig+0x2ec>)
 800918e:	4618      	mov	r0, r3
 8009190:	f001 fb04 	bl	800a79c <RFW_Init>
 8009194:	4603      	mov	r3, r0
 8009196:	2b00      	cmp	r3, #0
 8009198:	d002      	beq.n	80091a0 <RadioSetTxGenericConfig+0x280>
            {
                return -1;
 800919a:	f04f 33ff 	mov.w	r3, #4294967295
 800919e:	e0eb      	b.n	8009378 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 80091a0:	4b18      	ldr	r3, [pc, #96]	; (8009204 <RadioSetTxGenericConfig+0x2e4>)
 80091a2:	2200      	movs	r2, #0
 80091a4:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 80091a6:	4b17      	ldr	r3, [pc, #92]	; (8009204 <RadioSetTxGenericConfig+0x2e4>)
 80091a8:	2201      	movs	r2, #1
 80091aa:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 80091ac:	4b15      	ldr	r3, [pc, #84]	; (8009204 <RadioSetTxGenericConfig+0x2e4>)
 80091ae:	2200      	movs	r2, #0
 80091b0:	755a      	strb	r2, [r3, #21]
        {
 80091b2:	e00b      	b.n	80091cc <RadioSetTxGenericConfig+0x2ac>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 80091b4:	68bb      	ldr	r3, [r7, #8]
 80091b6:	7d5a      	ldrb	r2, [r3, #21]
 80091b8:	4b12      	ldr	r3, [pc, #72]	; (8009204 <RadioSetTxGenericConfig+0x2e4>)
 80091ba:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 80091bc:	68bb      	ldr	r3, [r7, #8]
 80091be:	7d9a      	ldrb	r2, [r3, #22]
 80091c0:	4b10      	ldr	r3, [pc, #64]	; (8009204 <RadioSetTxGenericConfig+0x2e4>)
 80091c2:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 80091c4:	68bb      	ldr	r3, [r7, #8]
 80091c6:	7d1a      	ldrb	r2, [r3, #20]
 80091c8:	4b0e      	ldr	r3, [pc, #56]	; (8009204 <RadioSetTxGenericConfig+0x2e4>)
 80091ca:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 80091cc:	f7fe ffcd 	bl	800816a <RadioStandby>
        RadioSetModem( MODEM_FSK );
 80091d0:	2000      	movs	r0, #0
 80091d2:	f7fe f95b 	bl	800748c <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80091d6:	480e      	ldr	r0, [pc, #56]	; (8009210 <RadioSetTxGenericConfig+0x2f0>)
 80091d8:	f000 fdec 	bl	8009db4 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80091dc:	480d      	ldr	r0, [pc, #52]	; (8009214 <RadioSetTxGenericConfig+0x2f4>)
 80091de:	f000 febb 	bl	8009f58 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 80091e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80091e6:	4618      	mov	r0, r3
 80091e8:	f000 f97f 	bl	80094ea <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 80091ec:	68bb      	ldr	r3, [r7, #8]
 80091ee:	8a1b      	ldrh	r3, [r3, #16]
 80091f0:	4618      	mov	r0, r3
 80091f2:	f000 f9c9 	bl	8009588 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 80091f6:	68bb      	ldr	r3, [r7, #8]
 80091f8:	899b      	ldrh	r3, [r3, #12]
 80091fa:	4618      	mov	r0, r3
 80091fc:	f000 f9a4 	bl	8009548 <SUBGRF_SetCrcPolynomial>
        break;
 8009200:	e0a6      	b.n	8009350 <RadioSetTxGenericConfig+0x430>
 8009202:	bf00      	nop
 8009204:	20000288 	.word	0x20000288
 8009208:	20000284 	.word	0x20000284
 800920c:	200002e4 	.word	0x200002e4
 8009210:	200002c0 	.word	0x200002c0
 8009214:	20000296 	.word	0x20000296
    case GENERIC_LORA:
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8009218:	4b59      	ldr	r3, [pc, #356]	; (8009380 <RadioSetTxGenericConfig+0x460>)
 800921a:	2201      	movs	r2, #1
 800921c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8009220:	68bb      	ldr	r3, [r7, #8]
 8009222:	781a      	ldrb	r2, [r3, #0]
 8009224:	4b56      	ldr	r3, [pc, #344]	; (8009380 <RadioSetTxGenericConfig+0x460>)
 8009226:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 800922a:	68bb      	ldr	r3, [r7, #8]
 800922c:	785a      	ldrb	r2, [r3, #1]
 800922e:	4b54      	ldr	r3, [pc, #336]	; (8009380 <RadioSetTxGenericConfig+0x460>)
 8009230:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8009234:	68bb      	ldr	r3, [r7, #8]
 8009236:	789a      	ldrb	r2, [r3, #2]
 8009238:	4b51      	ldr	r3, [pc, #324]	; (8009380 <RadioSetTxGenericConfig+0x460>)
 800923a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 800923e:	68bb      	ldr	r3, [r7, #8]
 8009240:	78db      	ldrb	r3, [r3, #3]
 8009242:	2b02      	cmp	r3, #2
 8009244:	d010      	beq.n	8009268 <RadioSetTxGenericConfig+0x348>
 8009246:	2b02      	cmp	r3, #2
 8009248:	dc20      	bgt.n	800928c <RadioSetTxGenericConfig+0x36c>
 800924a:	2b00      	cmp	r3, #0
 800924c:	d002      	beq.n	8009254 <RadioSetTxGenericConfig+0x334>
 800924e:	2b01      	cmp	r3, #1
 8009250:	d005      	beq.n	800925e <RadioSetTxGenericConfig+0x33e>
            {
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
            }
            break;
        default:
            break;
 8009252:	e01b      	b.n	800928c <RadioSetTxGenericConfig+0x36c>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8009254:	4b4a      	ldr	r3, [pc, #296]	; (8009380 <RadioSetTxGenericConfig+0x460>)
 8009256:	2200      	movs	r2, #0
 8009258:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800925c:	e017      	b.n	800928e <RadioSetTxGenericConfig+0x36e>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800925e:	4b48      	ldr	r3, [pc, #288]	; (8009380 <RadioSetTxGenericConfig+0x460>)
 8009260:	2201      	movs	r2, #1
 8009262:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8009266:	e012      	b.n	800928e <RadioSetTxGenericConfig+0x36e>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8009268:	68bb      	ldr	r3, [r7, #8]
 800926a:	781b      	ldrb	r3, [r3, #0]
 800926c:	2b0b      	cmp	r3, #11
 800926e:	d003      	beq.n	8009278 <RadioSetTxGenericConfig+0x358>
 8009270:	68bb      	ldr	r3, [r7, #8]
 8009272:	781b      	ldrb	r3, [r3, #0]
 8009274:	2b0c      	cmp	r3, #12
 8009276:	d104      	bne.n	8009282 <RadioSetTxGenericConfig+0x362>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8009278:	4b41      	ldr	r3, [pc, #260]	; (8009380 <RadioSetTxGenericConfig+0x460>)
 800927a:	2201      	movs	r2, #1
 800927c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8009280:	e005      	b.n	800928e <RadioSetTxGenericConfig+0x36e>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8009282:	4b3f      	ldr	r3, [pc, #252]	; (8009380 <RadioSetTxGenericConfig+0x460>)
 8009284:	2200      	movs	r2, #0
 8009286:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800928a:	e000      	b.n	800928e <RadioSetTxGenericConfig+0x36e>
            break;
 800928c:	bf00      	nop
        }

        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800928e:	4b3c      	ldr	r3, [pc, #240]	; (8009380 <RadioSetTxGenericConfig+0x460>)
 8009290:	2201      	movs	r2, #1
 8009292:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8009294:	68bb      	ldr	r3, [r7, #8]
 8009296:	889a      	ldrh	r2, [r3, #4]
 8009298:	4b39      	ldr	r3, [pc, #228]	; (8009380 <RadioSetTxGenericConfig+0x460>)
 800929a:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 800929c:	68bb      	ldr	r3, [r7, #8]
 800929e:	799a      	ldrb	r2, [r3, #6]
 80092a0:	4b37      	ldr	r3, [pc, #220]	; (8009380 <RadioSetTxGenericConfig+0x460>)
 80092a2:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 80092a4:	68bb      	ldr	r3, [r7, #8]
 80092a6:	79da      	ldrb	r2, [r3, #7]
 80092a8:	4b35      	ldr	r3, [pc, #212]	; (8009380 <RadioSetTxGenericConfig+0x460>)
 80092aa:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 80092ae:	68bb      	ldr	r3, [r7, #8]
 80092b0:	7a1a      	ldrb	r2, [r3, #8]
 80092b2:	4b33      	ldr	r3, [pc, #204]	; (8009380 <RadioSetTxGenericConfig+0x460>)
 80092b4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        RadioStandby( );
 80092b8:	f7fe ff57 	bl	800816a <RadioStandby>
        RadioSetModem( MODEM_LORA );
 80092bc:	2001      	movs	r0, #1
 80092be:	f7fe f8e5 	bl	800748c <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80092c2:	4830      	ldr	r0, [pc, #192]	; (8009384 <RadioSetTxGenericConfig+0x464>)
 80092c4:	f000 fd76 	bl	8009db4 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80092c8:	482f      	ldr	r0, [pc, #188]	; (8009388 <RadioSetTxGenericConfig+0x468>)
 80092ca:	f000 fe45 	bl	8009f58 <SUBGRF_SetPacketParams>

        /* WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see STM32WL Erratasheet */
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 80092ce:	4b2c      	ldr	r3, [pc, #176]	; (8009380 <RadioSetTxGenericConfig+0x460>)
 80092d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80092d4:	2b06      	cmp	r3, #6
 80092d6:	d10d      	bne.n	80092f4 <RadioSetTxGenericConfig+0x3d4>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 80092d8:	f640 0089 	movw	r0, #2185	; 0x889
 80092dc:	f000 ff98 	bl	800a210 <SUBGRF_ReadRegister>
 80092e0:	4603      	mov	r3, r0
 80092e2:	f023 0304 	bic.w	r3, r3, #4
 80092e6:	b2db      	uxtb	r3, r3
 80092e8:	4619      	mov	r1, r3
 80092ea:	f640 0089 	movw	r0, #2185	; 0x889
 80092ee:	f000 ff7b 	bl	800a1e8 <SUBGRF_WriteRegister>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
        }
        /* WORKAROUND END */
        break;
 80092f2:	e02d      	b.n	8009350 <RadioSetTxGenericConfig+0x430>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 80092f4:	f640 0089 	movw	r0, #2185	; 0x889
 80092f8:	f000 ff8a 	bl	800a210 <SUBGRF_ReadRegister>
 80092fc:	4603      	mov	r3, r0
 80092fe:	f043 0304 	orr.w	r3, r3, #4
 8009302:	b2db      	uxtb	r3, r3
 8009304:	4619      	mov	r1, r3
 8009306:	f640 0089 	movw	r0, #2185	; 0x889
 800930a:	f000 ff6d 	bl	800a1e8 <SUBGRF_WriteRegister>
        break;
 800930e:	e01f      	b.n	8009350 <RadioSetTxGenericConfig+0x430>
    case GENERIC_BPSK:
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 8009310:	68bb      	ldr	r3, [r7, #8]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d004      	beq.n	8009322 <RadioSetTxGenericConfig+0x402>
 8009318:	68bb      	ldr	r3, [r7, #8]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009320:	d902      	bls.n	8009328 <RadioSetTxGenericConfig+0x408>
        {
            return -1;
 8009322:	f04f 33ff 	mov.w	r3, #4294967295
 8009326:	e027      	b.n	8009378 <RadioSetTxGenericConfig+0x458>
        }
        RadioSetModem( MODEM_BPSK );
 8009328:	2003      	movs	r0, #3
 800932a:	f7fe f8af 	bl	800748c <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 800932e:	4b14      	ldr	r3, [pc, #80]	; (8009380 <RadioSetTxGenericConfig+0x460>)
 8009330:	2202      	movs	r2, #2
 8009332:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 8009336:	68bb      	ldr	r3, [r7, #8]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	4a11      	ldr	r2, [pc, #68]	; (8009380 <RadioSetTxGenericConfig+0x460>)
 800933c:	6493      	str	r3, [r2, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 800933e:	4b10      	ldr	r3, [pc, #64]	; (8009380 <RadioSetTxGenericConfig+0x460>)
 8009340:	2216      	movs	r2, #22
 8009342:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8009346:	480f      	ldr	r0, [pc, #60]	; (8009384 <RadioSetTxGenericConfig+0x464>)
 8009348:	f000 fd34 	bl	8009db4 <SUBGRF_SetModulationParams>
        break;
 800934c:	e000      	b.n	8009350 <RadioSetTxGenericConfig+0x430>
    default:
        break;
 800934e:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8009350:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009354:	4618      	mov	r0, r3
 8009356:	f001 f863 	bl	800a420 <SUBGRF_SetRfTxPower>
 800935a:	4603      	mov	r3, r0
 800935c:	461a      	mov	r2, r3
 800935e:	4b08      	ldr	r3, [pc, #32]	; (8009380 <RadioSetTxGenericConfig+0x460>)
 8009360:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 8009364:	4b06      	ldr	r3, [pc, #24]	; (8009380 <RadioSetTxGenericConfig+0x460>)
 8009366:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800936a:	4618      	mov	r0, r3
 800936c:	f001 fa37 	bl	800a7de <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8009370:	4a03      	ldr	r2, [pc, #12]	; (8009380 <RadioSetTxGenericConfig+0x460>)
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	6053      	str	r3, [r2, #4]
    return 0;
 8009376:	2300      	movs	r3, #0
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 8009378:	4618      	mov	r0, r3
 800937a:	3738      	adds	r7, #56	; 0x38
 800937c:	46bd      	mov	sp, r7
 800937e:	bd80      	pop	{r7, pc}
 8009380:	20000288 	.word	0x20000288
 8009384:	200002c0 	.word	0x200002c0
 8009388:	20000296 	.word	0x20000296

0800938c <RadioLrFhssSetCfg>:
    return ( prbs31_val - 1 ) % ( max );
}
#endif /* RADIO_LR_FHSS_IS_ON == 1 */

static radio_status_t RadioLrFhssSetCfg( const radio_lr_fhss_cfg_params_t *cfg_params )
{
 800938c:	b480      	push	{r7}
 800938e:	b085      	sub	sp, #20
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
    radio_status_t status = RADIO_STATUS_UNSUPPORTED_FEATURE;
 8009394:	2301      	movs	r3, #1
 8009396:	73fb      	strb	r3, [r7, #15]
    {
        return status;
    }
    SubgRf.lr_fhss.is_lr_fhss_on = true;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    return  status;
 8009398:	7bfb      	ldrb	r3, [r7, #15]
}
 800939a:	4618      	mov	r0, r3
 800939c:	3714      	adds	r7, #20
 800939e:	46bd      	mov	sp, r7
 80093a0:	bc80      	pop	{r7}
 80093a2:	4770      	bx	lr

080093a4 <RadioLrFhssGetTimeOnAirInMs>:

static radio_status_t RadioLrFhssGetTimeOnAirInMs( const radio_lr_fhss_time_on_air_params_t *params,
                                                    uint32_t *time_on_air_in_ms )
{
 80093a4:	b480      	push	{r7}
 80093a6:	b083      	sub	sp, #12
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
 80093ac:	6039      	str	r1, [r7, #0]
    *time_on_air_in_ms = lr_fhss_get_time_on_air_in_ms( &params->radio_lr_fhss_params.lr_fhss_params,
                                                        params->pld_len_in_bytes );

    return RADIO_STATUS_OK;
#else
    return RADIO_STATUS_UNSUPPORTED_FEATURE;
 80093ae:	2301      	movs	r3, #1
#endif /* RADIO_LR_FHSS_IS_ON */
 80093b0:	4618      	mov	r0, r3
 80093b2:	370c      	adds	r7, #12
 80093b4:	46bd      	mov	sp, r7
 80093b6:	bc80      	pop	{r7}
 80093b8:	4770      	bx	lr
	...

080093bc <SUBGRF_Init>:
 */
static DioIrqHandler RadioOnDioIrqCb;

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b084      	sub	sp, #16
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d002      	beq.n	80093d0 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 80093ca:	4a1d      	ldr	r2, [pc, #116]	; (8009440 <SUBGRF_Init+0x84>)
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 80093d0:	f7f7 fad8 	bl	8000984 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 80093d4:	2002      	movs	r0, #2
 80093d6:	f001 f8ff 	bl	800a5d8 <Radio_SMPS_Set>

    ImageCalibrated = false;
 80093da:	4b1a      	ldr	r3, [pc, #104]	; (8009444 <SUBGRF_Init+0x88>)
 80093dc:	2200      	movs	r2, #0
 80093de:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 80093e0:	2000      	movs	r0, #0
 80093e2:	f000 f97d 	bl	80096e0 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 80093e6:	f001 fd77 	bl	800aed8 <RBI_IsTCXO>
 80093ea:	4603      	mov	r3, r0
 80093ec:	2b01      	cmp	r3, #1
 80093ee:	d10e      	bne.n	800940e <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 80093f0:	2140      	movs	r1, #64	; 0x40
 80093f2:	2001      	movs	r0, #1
 80093f4:	f000 fb82 	bl	8009afc <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 80093f8:	2100      	movs	r1, #0
 80093fa:	f640 1011 	movw	r0, #2321	; 0x911
 80093fe:	f000 fef3 	bl	800a1e8 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 8009402:	237f      	movs	r3, #127	; 0x7f
 8009404:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 8009406:	7b38      	ldrb	r0, [r7, #12]
 8009408:	f000 fa8b 	bl	8009922 <SUBGRF_Calibrate>
 800940c:	e009      	b.n	8009422 <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 800940e:	2120      	movs	r1, #32
 8009410:	f640 1011 	movw	r0, #2321	; 0x911
 8009414:	f000 fee8 	bl	800a1e8 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8009418:	2120      	movs	r1, #32
 800941a:	f640 1012 	movw	r0, #2322	; 0x912
 800941e:	f000 fee3 	bl	800a1e8 <SUBGRF_WriteRegister>
    }

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8009422:	210e      	movs	r1, #14
 8009424:	f640 101f 	movw	r0, #2335	; 0x91f
 8009428:	f000 fede 	bl	800a1e8 <SUBGRF_WriteRegister>

    /* Init RF Switch */
    RBI_Init();
 800942c:	f001 fd38 	bl	800aea0 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 8009430:	4b05      	ldr	r3, [pc, #20]	; (8009448 <SUBGRF_Init+0x8c>)
 8009432:	2201      	movs	r2, #1
 8009434:	701a      	strb	r2, [r3, #0]
}
 8009436:	bf00      	nop
 8009438:	3710      	adds	r7, #16
 800943a:	46bd      	mov	sp, r7
 800943c:	bd80      	pop	{r7, pc}
 800943e:	bf00      	nop
 8009440:	20000320 	.word	0x20000320
 8009444:	2000031c 	.word	0x2000031c
 8009448:	20000314 	.word	0x20000314

0800944c <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 800944c:	b480      	push	{r7}
 800944e:	af00      	add	r7, sp, #0
    return OperatingMode;
 8009450:	4b02      	ldr	r3, [pc, #8]	; (800945c <SUBGRF_GetOperatingMode+0x10>)
 8009452:	781b      	ldrb	r3, [r3, #0]
}
 8009454:	4618      	mov	r0, r3
 8009456:	46bd      	mov	sp, r7
 8009458:	bc80      	pop	{r7}
 800945a:	4770      	bx	lr
 800945c:	20000314 	.word	0x20000314

08009460 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 8009460:	b580      	push	{r7, lr}
 8009462:	b082      	sub	sp, #8
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
 8009468:	460b      	mov	r3, r1
 800946a:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 800946c:	78fb      	ldrb	r3, [r7, #3]
 800946e:	461a      	mov	r2, r3
 8009470:	6879      	ldr	r1, [r7, #4]
 8009472:	2000      	movs	r0, #0
 8009474:	f000 ff24 	bl	800a2c0 <SUBGRF_WriteBuffer>
}
 8009478:	bf00      	nop
 800947a:	3708      	adds	r7, #8
 800947c:	46bd      	mov	sp, r7
 800947e:	bd80      	pop	{r7, pc}

08009480 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 8009480:	b580      	push	{r7, lr}
 8009482:	b086      	sub	sp, #24
 8009484:	af00      	add	r7, sp, #0
 8009486:	60f8      	str	r0, [r7, #12]
 8009488:	60b9      	str	r1, [r7, #8]
 800948a:	4613      	mov	r3, r2
 800948c:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 800948e:	2300      	movs	r3, #0
 8009490:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 8009492:	f107 0317 	add.w	r3, r7, #23
 8009496:	4619      	mov	r1, r3
 8009498:	68b8      	ldr	r0, [r7, #8]
 800949a:	f000 fe27 	bl	800a0ec <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 800949e:	68bb      	ldr	r3, [r7, #8]
 80094a0:	781b      	ldrb	r3, [r3, #0]
 80094a2:	79fa      	ldrb	r2, [r7, #7]
 80094a4:	429a      	cmp	r2, r3
 80094a6:	d201      	bcs.n	80094ac <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 80094a8:	2301      	movs	r3, #1
 80094aa:	e007      	b.n	80094bc <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 80094ac:	7df8      	ldrb	r0, [r7, #23]
 80094ae:	68bb      	ldr	r3, [r7, #8]
 80094b0:	781b      	ldrb	r3, [r3, #0]
 80094b2:	461a      	mov	r2, r3
 80094b4:	68f9      	ldr	r1, [r7, #12]
 80094b6:	f000 ff25 	bl	800a304 <SUBGRF_ReadBuffer>

    return 0;
 80094ba:	2300      	movs	r3, #0
}
 80094bc:	4618      	mov	r0, r3
 80094be:	3718      	adds	r7, #24
 80094c0:	46bd      	mov	sp, r7
 80094c2:	bd80      	pop	{r7, pc}

080094c4 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b084      	sub	sp, #16
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	60f8      	str	r0, [r7, #12]
 80094cc:	460b      	mov	r3, r1
 80094ce:	607a      	str	r2, [r7, #4]
 80094d0:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 80094d2:	7afb      	ldrb	r3, [r7, #11]
 80094d4:	4619      	mov	r1, r3
 80094d6:	68f8      	ldr	r0, [r7, #12]
 80094d8:	f7ff ffc2 	bl	8009460 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 80094dc:	6878      	ldr	r0, [r7, #4]
 80094de:	f000 f91b 	bl	8009718 <SUBGRF_SetTx>
}
 80094e2:	bf00      	nop
 80094e4:	3710      	adds	r7, #16
 80094e6:	46bd      	mov	sp, r7
 80094e8:	bd80      	pop	{r7, pc}

080094ea <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 80094ea:	b580      	push	{r7, lr}
 80094ec:	b082      	sub	sp, #8
 80094ee:	af00      	add	r7, sp, #0
 80094f0:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 80094f2:	2208      	movs	r2, #8
 80094f4:	6879      	ldr	r1, [r7, #4]
 80094f6:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 80094fa:	f000 fe9d 	bl	800a238 <SUBGRF_WriteRegisters>
    return 0;
 80094fe:	2300      	movs	r3, #0
}
 8009500:	4618      	mov	r0, r3
 8009502:	3708      	adds	r7, #8
 8009504:	46bd      	mov	sp, r7
 8009506:	bd80      	pop	{r7, pc}

08009508 <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 8009508:	b580      	push	{r7, lr}
 800950a:	b084      	sub	sp, #16
 800950c:	af00      	add	r7, sp, #0
 800950e:	4603      	mov	r3, r0
 8009510:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 8009512:	88fb      	ldrh	r3, [r7, #6]
 8009514:	0a1b      	lsrs	r3, r3, #8
 8009516:	b29b      	uxth	r3, r3
 8009518:	b2db      	uxtb	r3, r3
 800951a:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 800951c:	88fb      	ldrh	r3, [r7, #6]
 800951e:	b2db      	uxtb	r3, r3
 8009520:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8009522:	f000 fb6f 	bl	8009c04 <SUBGRF_GetPacketType>
 8009526:	4603      	mov	r3, r0
 8009528:	2b00      	cmp	r3, #0
 800952a:	d108      	bne.n	800953e <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 800952c:	f107 030c 	add.w	r3, r7, #12
 8009530:	2202      	movs	r2, #2
 8009532:	4619      	mov	r1, r3
 8009534:	f240 60bc 	movw	r0, #1724	; 0x6bc
 8009538:	f000 fe7e 	bl	800a238 <SUBGRF_WriteRegisters>
            break;
 800953c:	e000      	b.n	8009540 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 800953e:	bf00      	nop
    }
}
 8009540:	bf00      	nop
 8009542:	3710      	adds	r7, #16
 8009544:	46bd      	mov	sp, r7
 8009546:	bd80      	pop	{r7, pc}

08009548 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 8009548:	b580      	push	{r7, lr}
 800954a:	b084      	sub	sp, #16
 800954c:	af00      	add	r7, sp, #0
 800954e:	4603      	mov	r3, r0
 8009550:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 8009552:	88fb      	ldrh	r3, [r7, #6]
 8009554:	0a1b      	lsrs	r3, r3, #8
 8009556:	b29b      	uxth	r3, r3
 8009558:	b2db      	uxtb	r3, r3
 800955a:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 800955c:	88fb      	ldrh	r3, [r7, #6]
 800955e:	b2db      	uxtb	r3, r3
 8009560:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8009562:	f000 fb4f 	bl	8009c04 <SUBGRF_GetPacketType>
 8009566:	4603      	mov	r3, r0
 8009568:	2b00      	cmp	r3, #0
 800956a:	d108      	bne.n	800957e <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 800956c:	f107 030c 	add.w	r3, r7, #12
 8009570:	2202      	movs	r2, #2
 8009572:	4619      	mov	r1, r3
 8009574:	f240 60be 	movw	r0, #1726	; 0x6be
 8009578:	f000 fe5e 	bl	800a238 <SUBGRF_WriteRegisters>
            break;
 800957c:	e000      	b.n	8009580 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 800957e:	bf00      	nop
    }
}
 8009580:	bf00      	nop
 8009582:	3710      	adds	r7, #16
 8009584:	46bd      	mov	sp, r7
 8009586:	bd80      	pop	{r7, pc}

08009588 <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 8009588:	b580      	push	{r7, lr}
 800958a:	b084      	sub	sp, #16
 800958c:	af00      	add	r7, sp, #0
 800958e:	4603      	mov	r3, r0
 8009590:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 8009592:	2300      	movs	r3, #0
 8009594:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 8009596:	f000 fb35 	bl	8009c04 <SUBGRF_GetPacketType>
 800959a:	4603      	mov	r3, r0
 800959c:	2b00      	cmp	r3, #0
 800959e:	d121      	bne.n	80095e4 <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 80095a0:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 80095a4:	f000 fe34 	bl	800a210 <SUBGRF_ReadRegister>
 80095a8:	4603      	mov	r3, r0
 80095aa:	f023 0301 	bic.w	r3, r3, #1
 80095ae:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 80095b0:	88fb      	ldrh	r3, [r7, #6]
 80095b2:	0a1b      	lsrs	r3, r3, #8
 80095b4:	b29b      	uxth	r3, r3
 80095b6:	b25b      	sxtb	r3, r3
 80095b8:	f003 0301 	and.w	r3, r3, #1
 80095bc:	b25a      	sxtb	r2, r3
 80095be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80095c2:	4313      	orrs	r3, r2
 80095c4:	b25b      	sxtb	r3, r3
 80095c6:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 80095c8:	7bfb      	ldrb	r3, [r7, #15]
 80095ca:	4619      	mov	r1, r3
 80095cc:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 80095d0:	f000 fe0a 	bl	800a1e8 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 80095d4:	88fb      	ldrh	r3, [r7, #6]
 80095d6:	b2db      	uxtb	r3, r3
 80095d8:	4619      	mov	r1, r3
 80095da:	f240 60b9 	movw	r0, #1721	; 0x6b9
 80095de:	f000 fe03 	bl	800a1e8 <SUBGRF_WriteRegister>
            break;
 80095e2:	e000      	b.n	80095e6 <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 80095e4:	bf00      	nop
    }
}
 80095e6:	bf00      	nop
 80095e8:	3710      	adds	r7, #16
 80095ea:	46bd      	mov	sp, r7
 80095ec:	bd80      	pop	{r7, pc}

080095ee <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 80095ee:	b580      	push	{r7, lr}
 80095f0:	b082      	sub	sp, #8
 80095f2:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 80095f4:	2300      	movs	r3, #0
 80095f6:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 80095f8:	2300      	movs	r3, #0
 80095fa:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 80095fc:	2300      	movs	r3, #0
 80095fe:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 8009600:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8009604:	f000 fe04 	bl	800a210 <SUBGRF_ReadRegister>
 8009608:	4603      	mov	r3, r0
 800960a:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 800960c:	79fb      	ldrb	r3, [r7, #7]
 800960e:	f023 0301 	bic.w	r3, r3, #1
 8009612:	b2db      	uxtb	r3, r3
 8009614:	4619      	mov	r1, r3
 8009616:	f640 00e2 	movw	r0, #2274	; 0x8e2
 800961a:	f000 fde5 	bl	800a1e8 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 800961e:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8009622:	f000 fdf5 	bl	800a210 <SUBGRF_ReadRegister>
 8009626:	4603      	mov	r3, r0
 8009628:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 800962a:	79bb      	ldrb	r3, [r7, #6]
 800962c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009630:	b2db      	uxtb	r3, r3
 8009632:	4619      	mov	r1, r3
 8009634:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8009638:	f000 fdd6 	bl	800a1e8 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 800963c:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8009640:	f000 f88a 	bl	8009758 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 8009644:	463b      	mov	r3, r7
 8009646:	2204      	movs	r2, #4
 8009648:	4619      	mov	r1, r3
 800964a:	f640 0019 	movw	r0, #2073	; 0x819
 800964e:	f000 fe15 	bl	800a27c <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 8009652:	2000      	movs	r0, #0
 8009654:	f000 f844 	bl	80096e0 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 8009658:	79fb      	ldrb	r3, [r7, #7]
 800965a:	4619      	mov	r1, r3
 800965c:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8009660:	f000 fdc2 	bl	800a1e8 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 8009664:	79bb      	ldrb	r3, [r7, #6]
 8009666:	4619      	mov	r1, r3
 8009668:	f640 00e5 	movw	r0, #2277	; 0x8e5
 800966c:	f000 fdbc 	bl	800a1e8 <SUBGRF_WriteRegister>

    return number;
 8009670:	683b      	ldr	r3, [r7, #0]
}
 8009672:	4618      	mov	r0, r3
 8009674:	3708      	adds	r7, #8
 8009676:	46bd      	mov	sp, r7
 8009678:	bd80      	pop	{r7, pc}
	...

0800967c <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b084      	sub	sp, #16
 8009680:	af00      	add	r7, sp, #0
 8009682:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 8009684:	2000      	movs	r0, #0
 8009686:	f001 fc12 	bl	800aeae <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 800968a:	2002      	movs	r0, #2
 800968c:	f000 ffa4 	bl	800a5d8 <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8009690:	793b      	ldrb	r3, [r7, #4]
 8009692:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8009696:	b2db      	uxtb	r3, r3
 8009698:	009b      	lsls	r3, r3, #2
 800969a:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 800969c:	793b      	ldrb	r3, [r7, #4]
 800969e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80096a2:	b2db      	uxtb	r3, r3
 80096a4:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 80096a6:	b25b      	sxtb	r3, r3
 80096a8:	4313      	orrs	r3, r2
 80096aa:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 80096ac:	793b      	ldrb	r3, [r7, #4]
 80096ae:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80096b2:	b2db      	uxtb	r3, r3
 80096b4:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 80096b6:	4313      	orrs	r3, r2
 80096b8:	b25b      	sxtb	r3, r3
 80096ba:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 80096bc:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 80096be:	f107 030f 	add.w	r3, r7, #15
 80096c2:	2201      	movs	r2, #1
 80096c4:	4619      	mov	r1, r3
 80096c6:	2084      	movs	r0, #132	; 0x84
 80096c8:	f000 fe3e 	bl	800a348 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 80096cc:	4b03      	ldr	r3, [pc, #12]	; (80096dc <SUBGRF_SetSleep+0x60>)
 80096ce:	2200      	movs	r2, #0
 80096d0:	701a      	strb	r2, [r3, #0]
}
 80096d2:	bf00      	nop
 80096d4:	3710      	adds	r7, #16
 80096d6:	46bd      	mov	sp, r7
 80096d8:	bd80      	pop	{r7, pc}
 80096da:	bf00      	nop
 80096dc:	20000314 	.word	0x20000314

080096e0 <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b082      	sub	sp, #8
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	4603      	mov	r3, r0
 80096e8:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 80096ea:	1dfb      	adds	r3, r7, #7
 80096ec:	2201      	movs	r2, #1
 80096ee:	4619      	mov	r1, r3
 80096f0:	2080      	movs	r0, #128	; 0x80
 80096f2:	f000 fe29 	bl	800a348 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 80096f6:	79fb      	ldrb	r3, [r7, #7]
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d103      	bne.n	8009704 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 80096fc:	4b05      	ldr	r3, [pc, #20]	; (8009714 <SUBGRF_SetStandby+0x34>)
 80096fe:	2201      	movs	r2, #1
 8009700:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 8009702:	e002      	b.n	800970a <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 8009704:	4b03      	ldr	r3, [pc, #12]	; (8009714 <SUBGRF_SetStandby+0x34>)
 8009706:	2202      	movs	r2, #2
 8009708:	701a      	strb	r2, [r3, #0]
}
 800970a:	bf00      	nop
 800970c:	3708      	adds	r7, #8
 800970e:	46bd      	mov	sp, r7
 8009710:	bd80      	pop	{r7, pc}
 8009712:	bf00      	nop
 8009714:	20000314 	.word	0x20000314

08009718 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b084      	sub	sp, #16
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 8009720:	4b0c      	ldr	r3, [pc, #48]	; (8009754 <SUBGRF_SetTx+0x3c>)
 8009722:	2204      	movs	r2, #4
 8009724:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	0c1b      	lsrs	r3, r3, #16
 800972a:	b2db      	uxtb	r3, r3
 800972c:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	0a1b      	lsrs	r3, r3, #8
 8009732:	b2db      	uxtb	r3, r3
 8009734:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	b2db      	uxtb	r3, r3
 800973a:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 800973c:	f107 030c 	add.w	r3, r7, #12
 8009740:	2203      	movs	r2, #3
 8009742:	4619      	mov	r1, r3
 8009744:	2083      	movs	r0, #131	; 0x83
 8009746:	f000 fdff 	bl	800a348 <SUBGRF_WriteCommand>
}
 800974a:	bf00      	nop
 800974c:	3710      	adds	r7, #16
 800974e:	46bd      	mov	sp, r7
 8009750:	bd80      	pop	{r7, pc}
 8009752:	bf00      	nop
 8009754:	20000314 	.word	0x20000314

08009758 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 8009758:	b580      	push	{r7, lr}
 800975a:	b084      	sub	sp, #16
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8009760:	4b0c      	ldr	r3, [pc, #48]	; (8009794 <SUBGRF_SetRx+0x3c>)
 8009762:	2205      	movs	r2, #5
 8009764:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	0c1b      	lsrs	r3, r3, #16
 800976a:	b2db      	uxtb	r3, r3
 800976c:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	0a1b      	lsrs	r3, r3, #8
 8009772:	b2db      	uxtb	r3, r3
 8009774:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	b2db      	uxtb	r3, r3
 800977a:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 800977c:	f107 030c 	add.w	r3, r7, #12
 8009780:	2203      	movs	r2, #3
 8009782:	4619      	mov	r1, r3
 8009784:	2082      	movs	r0, #130	; 0x82
 8009786:	f000 fddf 	bl	800a348 <SUBGRF_WriteCommand>
}
 800978a:	bf00      	nop
 800978c:	3710      	adds	r7, #16
 800978e:	46bd      	mov	sp, r7
 8009790:	bd80      	pop	{r7, pc}
 8009792:	bf00      	nop
 8009794:	20000314 	.word	0x20000314

08009798 <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b084      	sub	sp, #16
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 80097a0:	4b0e      	ldr	r3, [pc, #56]	; (80097dc <SUBGRF_SetRxBoosted+0x44>)
 80097a2:	2205      	movs	r2, #5
 80097a4:	701a      	strb	r2, [r3, #0]

    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 80097a6:	2197      	movs	r1, #151	; 0x97
 80097a8:	f640 00ac 	movw	r0, #2220	; 0x8ac
 80097ac:	f000 fd1c 	bl	800a1e8 <SUBGRF_WriteRegister>

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	0c1b      	lsrs	r3, r3, #16
 80097b4:	b2db      	uxtb	r3, r3
 80097b6:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	0a1b      	lsrs	r3, r3, #8
 80097bc:	b2db      	uxtb	r3, r3
 80097be:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	b2db      	uxtb	r3, r3
 80097c4:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 80097c6:	f107 030c 	add.w	r3, r7, #12
 80097ca:	2203      	movs	r2, #3
 80097cc:	4619      	mov	r1, r3
 80097ce:	2082      	movs	r0, #130	; 0x82
 80097d0:	f000 fdba 	bl	800a348 <SUBGRF_WriteCommand>
}
 80097d4:	bf00      	nop
 80097d6:	3710      	adds	r7, #16
 80097d8:	46bd      	mov	sp, r7
 80097da:	bd80      	pop	{r7, pc}
 80097dc:	20000314 	.word	0x20000314

080097e0 <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 80097e0:	b580      	push	{r7, lr}
 80097e2:	b084      	sub	sp, #16
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	6078      	str	r0, [r7, #4]
 80097e8:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	0c1b      	lsrs	r3, r3, #16
 80097ee:	b2db      	uxtb	r3, r3
 80097f0:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	0a1b      	lsrs	r3, r3, #8
 80097f6:	b2db      	uxtb	r3, r3
 80097f8:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	b2db      	uxtb	r3, r3
 80097fe:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 8009800:	683b      	ldr	r3, [r7, #0]
 8009802:	0c1b      	lsrs	r3, r3, #16
 8009804:	b2db      	uxtb	r3, r3
 8009806:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 8009808:	683b      	ldr	r3, [r7, #0]
 800980a:	0a1b      	lsrs	r3, r3, #8
 800980c:	b2db      	uxtb	r3, r3
 800980e:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 8009810:	683b      	ldr	r3, [r7, #0]
 8009812:	b2db      	uxtb	r3, r3
 8009814:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 8009816:	f107 0308 	add.w	r3, r7, #8
 800981a:	2206      	movs	r2, #6
 800981c:	4619      	mov	r1, r3
 800981e:	2094      	movs	r0, #148	; 0x94
 8009820:	f000 fd92 	bl	800a348 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 8009824:	4b03      	ldr	r3, [pc, #12]	; (8009834 <SUBGRF_SetRxDutyCycle+0x54>)
 8009826:	2206      	movs	r2, #6
 8009828:	701a      	strb	r2, [r3, #0]
}
 800982a:	bf00      	nop
 800982c:	3710      	adds	r7, #16
 800982e:	46bd      	mov	sp, r7
 8009830:	bd80      	pop	{r7, pc}
 8009832:	bf00      	nop
 8009834:	20000314 	.word	0x20000314

08009838 <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 8009838:	b580      	push	{r7, lr}
 800983a:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 800983c:	2200      	movs	r2, #0
 800983e:	2100      	movs	r1, #0
 8009840:	20c5      	movs	r0, #197	; 0xc5
 8009842:	f000 fd81 	bl	800a348 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 8009846:	4b02      	ldr	r3, [pc, #8]	; (8009850 <SUBGRF_SetCad+0x18>)
 8009848:	2207      	movs	r2, #7
 800984a:	701a      	strb	r2, [r3, #0]
}
 800984c:	bf00      	nop
 800984e:	bd80      	pop	{r7, pc}
 8009850:	20000314 	.word	0x20000314

08009854 <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 8009854:	b580      	push	{r7, lr}
 8009856:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 8009858:	2200      	movs	r2, #0
 800985a:	2100      	movs	r1, #0
 800985c:	20d1      	movs	r0, #209	; 0xd1
 800985e:	f000 fd73 	bl	800a348 <SUBGRF_WriteCommand>
}
 8009862:	bf00      	nop
 8009864:	bd80      	pop	{r7, pc}

08009866 <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 8009866:	b580      	push	{r7, lr}
 8009868:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 800986a:	2200      	movs	r2, #0
 800986c:	2100      	movs	r1, #0
 800986e:	20d2      	movs	r0, #210	; 0xd2
 8009870:	f000 fd6a 	bl	800a348 <SUBGRF_WriteCommand>
}
 8009874:	bf00      	nop
 8009876:	bd80      	pop	{r7, pc}

08009878 <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b082      	sub	sp, #8
 800987c:	af00      	add	r7, sp, #0
 800987e:	4603      	mov	r3, r0
 8009880:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 8009882:	1dfb      	adds	r3, r7, #7
 8009884:	2201      	movs	r2, #1
 8009886:	4619      	mov	r1, r3
 8009888:	209f      	movs	r0, #159	; 0x9f
 800988a:	f000 fd5d 	bl	800a348 <SUBGRF_WriteCommand>
}
 800988e:	bf00      	nop
 8009890:	3708      	adds	r7, #8
 8009892:	46bd      	mov	sp, r7
 8009894:	bd80      	pop	{r7, pc}

08009896 <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 8009896:	b580      	push	{r7, lr}
 8009898:	b084      	sub	sp, #16
 800989a:	af00      	add	r7, sp, #0
 800989c:	4603      	mov	r3, r0
 800989e:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 80098a0:	1dfb      	adds	r3, r7, #7
 80098a2:	2201      	movs	r2, #1
 80098a4:	4619      	mov	r1, r3
 80098a6:	20a0      	movs	r0, #160	; 0xa0
 80098a8:	f000 fd4e 	bl	800a348 <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 80098ac:	79fb      	ldrb	r3, [r7, #7]
 80098ae:	2b3f      	cmp	r3, #63	; 0x3f
 80098b0:	d91c      	bls.n	80098ec <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 80098b2:	79fb      	ldrb	r3, [r7, #7]
 80098b4:	085b      	lsrs	r3, r3, #1
 80098b6:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 80098b8:	2300      	movs	r3, #0
 80098ba:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 80098bc:	2300      	movs	r3, #0
 80098be:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 80098c0:	e005      	b.n	80098ce <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 80098c2:	7bfb      	ldrb	r3, [r7, #15]
 80098c4:	089b      	lsrs	r3, r3, #2
 80098c6:	73fb      	strb	r3, [r7, #15]
            exp++;
 80098c8:	7bbb      	ldrb	r3, [r7, #14]
 80098ca:	3301      	adds	r3, #1
 80098cc:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 80098ce:	7bfb      	ldrb	r3, [r7, #15]
 80098d0:	2b1f      	cmp	r3, #31
 80098d2:	d8f6      	bhi.n	80098c2 <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 80098d4:	7bfb      	ldrb	r3, [r7, #15]
 80098d6:	00db      	lsls	r3, r3, #3
 80098d8:	b2da      	uxtb	r2, r3
 80098da:	7bbb      	ldrb	r3, [r7, #14]
 80098dc:	4413      	add	r3, r2
 80098de:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 80098e0:	7b7b      	ldrb	r3, [r7, #13]
 80098e2:	4619      	mov	r1, r3
 80098e4:	f240 7006 	movw	r0, #1798	; 0x706
 80098e8:	f000 fc7e 	bl	800a1e8 <SUBGRF_WriteRegister>
    }
}
 80098ec:	bf00      	nop
 80098ee:	3710      	adds	r7, #16
 80098f0:	46bd      	mov	sp, r7
 80098f2:	bd80      	pop	{r7, pc}

080098f4 <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 80098f4:	b580      	push	{r7, lr}
 80098f6:	b082      	sub	sp, #8
 80098f8:	af00      	add	r7, sp, #0
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 80098fa:	f001 faf4 	bl	800aee6 <RBI_IsDCDC>
 80098fe:	4603      	mov	r3, r0
 8009900:	2b01      	cmp	r3, #1
 8009902:	d102      	bne.n	800990a <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 8009904:	2301      	movs	r3, #1
 8009906:	71fb      	strb	r3, [r7, #7]
 8009908:	e001      	b.n	800990e <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 800990a:	2300      	movs	r3, #0
 800990c:	71fb      	strb	r3, [r7, #7]
    }
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 800990e:	1dfb      	adds	r3, r7, #7
 8009910:	2201      	movs	r2, #1
 8009912:	4619      	mov	r1, r3
 8009914:	2096      	movs	r0, #150	; 0x96
 8009916:	f000 fd17 	bl	800a348 <SUBGRF_WriteCommand>
}
 800991a:	bf00      	nop
 800991c:	3708      	adds	r7, #8
 800991e:	46bd      	mov	sp, r7
 8009920:	bd80      	pop	{r7, pc}

08009922 <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 8009922:	b580      	push	{r7, lr}
 8009924:	b084      	sub	sp, #16
 8009926:	af00      	add	r7, sp, #0
 8009928:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800992a:	793b      	ldrb	r3, [r7, #4]
 800992c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8009930:	b2db      	uxtb	r3, r3
 8009932:	019b      	lsls	r3, r3, #6
 8009934:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8009936:	793b      	ldrb	r3, [r7, #4]
 8009938:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800993c:	b2db      	uxtb	r3, r3
 800993e:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8009940:	b25b      	sxtb	r3, r3
 8009942:	4313      	orrs	r3, r2
 8009944:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8009946:	793b      	ldrb	r3, [r7, #4]
 8009948:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800994c:	b2db      	uxtb	r3, r3
 800994e:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8009950:	b25b      	sxtb	r3, r3
 8009952:	4313      	orrs	r3, r2
 8009954:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8009956:	793b      	ldrb	r3, [r7, #4]
 8009958:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800995c:	b2db      	uxtb	r3, r3
 800995e:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8009960:	b25b      	sxtb	r3, r3
 8009962:	4313      	orrs	r3, r2
 8009964:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8009966:	793b      	ldrb	r3, [r7, #4]
 8009968:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800996c:	b2db      	uxtb	r3, r3
 800996e:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8009970:	b25b      	sxtb	r3, r3
 8009972:	4313      	orrs	r3, r2
 8009974:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8009976:	793b      	ldrb	r3, [r7, #4]
 8009978:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800997c:	b2db      	uxtb	r3, r3
 800997e:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8009980:	b25b      	sxtb	r3, r3
 8009982:	4313      	orrs	r3, r2
 8009984:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 8009986:	793b      	ldrb	r3, [r7, #4]
 8009988:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800998c:	b2db      	uxtb	r3, r3
 800998e:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8009990:	4313      	orrs	r3, r2
 8009992:	b25b      	sxtb	r3, r3
 8009994:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8009996:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 8009998:	f107 030f 	add.w	r3, r7, #15
 800999c:	2201      	movs	r2, #1
 800999e:	4619      	mov	r1, r3
 80099a0:	2089      	movs	r0, #137	; 0x89
 80099a2:	f000 fcd1 	bl	800a348 <SUBGRF_WriteCommand>
}
 80099a6:	bf00      	nop
 80099a8:	3710      	adds	r7, #16
 80099aa:	46bd      	mov	sp, r7
 80099ac:	bd80      	pop	{r7, pc}
	...

080099b0 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b084      	sub	sp, #16
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	4a1d      	ldr	r2, [pc, #116]	; (8009a30 <SUBGRF_CalibrateImage+0x80>)
 80099bc:	4293      	cmp	r3, r2
 80099be:	d904      	bls.n	80099ca <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 80099c0:	23e1      	movs	r3, #225	; 0xe1
 80099c2:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 80099c4:	23e9      	movs	r3, #233	; 0xe9
 80099c6:	737b      	strb	r3, [r7, #13]
 80099c8:	e027      	b.n	8009a1a <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 850000000 )
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	4a19      	ldr	r2, [pc, #100]	; (8009a34 <SUBGRF_CalibrateImage+0x84>)
 80099ce:	4293      	cmp	r3, r2
 80099d0:	d904      	bls.n	80099dc <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 80099d2:	23d7      	movs	r3, #215	; 0xd7
 80099d4:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 80099d6:	23db      	movs	r3, #219	; 0xdb
 80099d8:	737b      	strb	r3, [r7, #13]
 80099da:	e01e      	b.n	8009a1a <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 770000000 )
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	4a16      	ldr	r2, [pc, #88]	; (8009a38 <SUBGRF_CalibrateImage+0x88>)
 80099e0:	4293      	cmp	r3, r2
 80099e2:	d904      	bls.n	80099ee <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 80099e4:	23c1      	movs	r3, #193	; 0xc1
 80099e6:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 80099e8:	23c5      	movs	r3, #197	; 0xc5
 80099ea:	737b      	strb	r3, [r7, #13]
 80099ec:	e015      	b.n	8009a1a <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 460000000 )
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	4a12      	ldr	r2, [pc, #72]	; (8009a3c <SUBGRF_CalibrateImage+0x8c>)
 80099f2:	4293      	cmp	r3, r2
 80099f4:	d904      	bls.n	8009a00 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 80099f6:	2375      	movs	r3, #117	; 0x75
 80099f8:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 80099fa:	2381      	movs	r3, #129	; 0x81
 80099fc:	737b      	strb	r3, [r7, #13]
 80099fe:	e00c      	b.n	8009a1a <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 425000000 )
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	4a0f      	ldr	r2, [pc, #60]	; (8009a40 <SUBGRF_CalibrateImage+0x90>)
 8009a04:	4293      	cmp	r3, r2
 8009a06:	d904      	bls.n	8009a12 <SUBGRF_CalibrateImage+0x62>
    {
        calFreq[0] = 0x6B;
 8009a08:	236b      	movs	r3, #107	; 0x6b
 8009a0a:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 8009a0c:	236f      	movs	r3, #111	; 0x6f
 8009a0e:	737b      	strb	r3, [r7, #13]
 8009a10:	e003      	b.n	8009a1a <SUBGRF_CalibrateImage+0x6a>
    }
    else /* freq <= 425000000*/
    {
        /* [ 156MHz - 171MHz ] */
        calFreq[0] = 0x29;
 8009a12:	2329      	movs	r3, #41	; 0x29
 8009a14:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x2B ;
 8009a16:	232b      	movs	r3, #43	; 0x2b
 8009a18:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 8009a1a:	f107 030c 	add.w	r3, r7, #12
 8009a1e:	2202      	movs	r2, #2
 8009a20:	4619      	mov	r1, r3
 8009a22:	2098      	movs	r0, #152	; 0x98
 8009a24:	f000 fc90 	bl	800a348 <SUBGRF_WriteCommand>
}
 8009a28:	bf00      	nop
 8009a2a:	3710      	adds	r7, #16
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	bd80      	pop	{r7, pc}
 8009a30:	35a4e900 	.word	0x35a4e900
 8009a34:	32a9f880 	.word	0x32a9f880
 8009a38:	2de54480 	.word	0x2de54480
 8009a3c:	1b6b0b00 	.word	0x1b6b0b00
 8009a40:	1954fc40 	.word	0x1954fc40

08009a44 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 8009a44:	b590      	push	{r4, r7, lr}
 8009a46:	b085      	sub	sp, #20
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	4604      	mov	r4, r0
 8009a4c:	4608      	mov	r0, r1
 8009a4e:	4611      	mov	r1, r2
 8009a50:	461a      	mov	r2, r3
 8009a52:	4623      	mov	r3, r4
 8009a54:	71fb      	strb	r3, [r7, #7]
 8009a56:	4603      	mov	r3, r0
 8009a58:	71bb      	strb	r3, [r7, #6]
 8009a5a:	460b      	mov	r3, r1
 8009a5c:	717b      	strb	r3, [r7, #5]
 8009a5e:	4613      	mov	r3, r2
 8009a60:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 8009a62:	79fb      	ldrb	r3, [r7, #7]
 8009a64:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 8009a66:	79bb      	ldrb	r3, [r7, #6]
 8009a68:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 8009a6a:	797b      	ldrb	r3, [r7, #5]
 8009a6c:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 8009a6e:	793b      	ldrb	r3, [r7, #4]
 8009a70:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 8009a72:	f107 030c 	add.w	r3, r7, #12
 8009a76:	2204      	movs	r2, #4
 8009a78:	4619      	mov	r1, r3
 8009a7a:	2095      	movs	r0, #149	; 0x95
 8009a7c:	f000 fc64 	bl	800a348 <SUBGRF_WriteCommand>
}
 8009a80:	bf00      	nop
 8009a82:	3714      	adds	r7, #20
 8009a84:	46bd      	mov	sp, r7
 8009a86:	bd90      	pop	{r4, r7, pc}

08009a88 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 8009a88:	b590      	push	{r4, r7, lr}
 8009a8a:	b085      	sub	sp, #20
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	4604      	mov	r4, r0
 8009a90:	4608      	mov	r0, r1
 8009a92:	4611      	mov	r1, r2
 8009a94:	461a      	mov	r2, r3
 8009a96:	4623      	mov	r3, r4
 8009a98:	80fb      	strh	r3, [r7, #6]
 8009a9a:	4603      	mov	r3, r0
 8009a9c:	80bb      	strh	r3, [r7, #4]
 8009a9e:	460b      	mov	r3, r1
 8009aa0:	807b      	strh	r3, [r7, #2]
 8009aa2:	4613      	mov	r3, r2
 8009aa4:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 8009aa6:	88fb      	ldrh	r3, [r7, #6]
 8009aa8:	0a1b      	lsrs	r3, r3, #8
 8009aaa:	b29b      	uxth	r3, r3
 8009aac:	b2db      	uxtb	r3, r3
 8009aae:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 8009ab0:	88fb      	ldrh	r3, [r7, #6]
 8009ab2:	b2db      	uxtb	r3, r3
 8009ab4:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 8009ab6:	88bb      	ldrh	r3, [r7, #4]
 8009ab8:	0a1b      	lsrs	r3, r3, #8
 8009aba:	b29b      	uxth	r3, r3
 8009abc:	b2db      	uxtb	r3, r3
 8009abe:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 8009ac0:	88bb      	ldrh	r3, [r7, #4]
 8009ac2:	b2db      	uxtb	r3, r3
 8009ac4:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 8009ac6:	887b      	ldrh	r3, [r7, #2]
 8009ac8:	0a1b      	lsrs	r3, r3, #8
 8009aca:	b29b      	uxth	r3, r3
 8009acc:	b2db      	uxtb	r3, r3
 8009ace:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 8009ad0:	887b      	ldrh	r3, [r7, #2]
 8009ad2:	b2db      	uxtb	r3, r3
 8009ad4:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 8009ad6:	883b      	ldrh	r3, [r7, #0]
 8009ad8:	0a1b      	lsrs	r3, r3, #8
 8009ada:	b29b      	uxth	r3, r3
 8009adc:	b2db      	uxtb	r3, r3
 8009ade:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 8009ae0:	883b      	ldrh	r3, [r7, #0]
 8009ae2:	b2db      	uxtb	r3, r3
 8009ae4:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 8009ae6:	f107 0308 	add.w	r3, r7, #8
 8009aea:	2208      	movs	r2, #8
 8009aec:	4619      	mov	r1, r3
 8009aee:	2008      	movs	r0, #8
 8009af0:	f000 fc2a 	bl	800a348 <SUBGRF_WriteCommand>
}
 8009af4:	bf00      	nop
 8009af6:	3714      	adds	r7, #20
 8009af8:	46bd      	mov	sp, r7
 8009afa:	bd90      	pop	{r4, r7, pc}

08009afc <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 8009afc:	b580      	push	{r7, lr}
 8009afe:	b084      	sub	sp, #16
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	4603      	mov	r3, r0
 8009b04:	6039      	str	r1, [r7, #0]
 8009b06:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 8009b08:	79fb      	ldrb	r3, [r7, #7]
 8009b0a:	f003 0307 	and.w	r3, r3, #7
 8009b0e:	b2db      	uxtb	r3, r3
 8009b10:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8009b12:	683b      	ldr	r3, [r7, #0]
 8009b14:	0c1b      	lsrs	r3, r3, #16
 8009b16:	b2db      	uxtb	r3, r3
 8009b18:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8009b1a:	683b      	ldr	r3, [r7, #0]
 8009b1c:	0a1b      	lsrs	r3, r3, #8
 8009b1e:	b2db      	uxtb	r3, r3
 8009b20:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 8009b22:	683b      	ldr	r3, [r7, #0]
 8009b24:	b2db      	uxtb	r3, r3
 8009b26:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 8009b28:	f107 030c 	add.w	r3, r7, #12
 8009b2c:	2204      	movs	r2, #4
 8009b2e:	4619      	mov	r1, r3
 8009b30:	2097      	movs	r0, #151	; 0x97
 8009b32:	f000 fc09 	bl	800a348 <SUBGRF_WriteCommand>
}
 8009b36:	bf00      	nop
 8009b38:	3710      	adds	r7, #16
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	bd80      	pop	{r7, pc}
	...

08009b40 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 8009b40:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8009b44:	b084      	sub	sp, #16
 8009b46:	af00      	add	r7, sp, #0
 8009b48:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 8009b4a:	2300      	movs	r3, #0
 8009b4c:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 8009b4e:	4b1d      	ldr	r3, [pc, #116]	; (8009bc4 <SUBGRF_SetRfFrequency+0x84>)
 8009b50:	781b      	ldrb	r3, [r3, #0]
 8009b52:	f083 0301 	eor.w	r3, r3, #1
 8009b56:	b2db      	uxtb	r3, r3
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d005      	beq.n	8009b68 <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 8009b5c:	6878      	ldr	r0, [r7, #4]
 8009b5e:	f7ff ff27 	bl	80099b0 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 8009b62:	4b18      	ldr	r3, [pc, #96]	; (8009bc4 <SUBGRF_SetRfFrequency+0x84>)
 8009b64:	2201      	movs	r2, #1
 8009b66:	701a      	strb	r2, [r3, #0]
    }
    SX_FREQ_TO_CHANNEL(chan, frequency);
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	2200      	movs	r2, #0
 8009b6c:	461c      	mov	r4, r3
 8009b6e:	4615      	mov	r5, r2
 8009b70:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 8009b74:	ea4f 6844 	mov.w	r8, r4, lsl #25
 8009b78:	4a13      	ldr	r2, [pc, #76]	; (8009bc8 <SUBGRF_SetRfFrequency+0x88>)
 8009b7a:	f04f 0300 	mov.w	r3, #0
 8009b7e:	4640      	mov	r0, r8
 8009b80:	4649      	mov	r1, r9
 8009b82:	f7f6 fb01 	bl	8000188 <__aeabi_uldivmod>
 8009b86:	4602      	mov	r2, r0
 8009b88:	460b      	mov	r3, r1
 8009b8a:	4613      	mov	r3, r2
 8009b8c:	60fb      	str	r3, [r7, #12]
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	0e1b      	lsrs	r3, r3, #24
 8009b92:	b2db      	uxtb	r3, r3
 8009b94:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	0c1b      	lsrs	r3, r3, #16
 8009b9a:	b2db      	uxtb	r3, r3
 8009b9c:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	0a1b      	lsrs	r3, r3, #8
 8009ba2:	b2db      	uxtb	r3, r3
 8009ba4:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	b2db      	uxtb	r3, r3
 8009baa:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 8009bac:	f107 0308 	add.w	r3, r7, #8
 8009bb0:	2204      	movs	r2, #4
 8009bb2:	4619      	mov	r1, r3
 8009bb4:	2086      	movs	r0, #134	; 0x86
 8009bb6:	f000 fbc7 	bl	800a348 <SUBGRF_WriteCommand>
}
 8009bba:	bf00      	nop
 8009bbc:	3710      	adds	r7, #16
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8009bc4:	2000031c 	.word	0x2000031c
 8009bc8:	01e84800 	.word	0x01e84800

08009bcc <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 8009bcc:	b580      	push	{r7, lr}
 8009bce:	b082      	sub	sp, #8
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	4603      	mov	r3, r0
 8009bd4:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 8009bd6:	79fa      	ldrb	r2, [r7, #7]
 8009bd8:	4b09      	ldr	r3, [pc, #36]	; (8009c00 <SUBGRF_SetPacketType+0x34>)
 8009bda:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 8009bdc:	79fb      	ldrb	r3, [r7, #7]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d104      	bne.n	8009bec <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 8009be2:	2100      	movs	r1, #0
 8009be4:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8009be8:	f000 fafe 	bl	800a1e8 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 8009bec:	1dfb      	adds	r3, r7, #7
 8009bee:	2201      	movs	r2, #1
 8009bf0:	4619      	mov	r1, r3
 8009bf2:	208a      	movs	r0, #138	; 0x8a
 8009bf4:	f000 fba8 	bl	800a348 <SUBGRF_WriteCommand>
}
 8009bf8:	bf00      	nop
 8009bfa:	3708      	adds	r7, #8
 8009bfc:	46bd      	mov	sp, r7
 8009bfe:	bd80      	pop	{r7, pc}
 8009c00:	20000315 	.word	0x20000315

08009c04 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 8009c04:	b480      	push	{r7}
 8009c06:	af00      	add	r7, sp, #0
    return PacketType;
 8009c08:	4b02      	ldr	r3, [pc, #8]	; (8009c14 <SUBGRF_GetPacketType+0x10>)
 8009c0a:	781b      	ldrb	r3, [r3, #0]
}
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	46bd      	mov	sp, r7
 8009c10:	bc80      	pop	{r7}
 8009c12:	4770      	bx	lr
 8009c14:	20000315 	.word	0x20000315

08009c18 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	b084      	sub	sp, #16
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	4603      	mov	r3, r0
 8009c20:	71fb      	strb	r3, [r7, #7]
 8009c22:	460b      	mov	r3, r1
 8009c24:	71bb      	strb	r3, [r7, #6]
 8009c26:	4613      	mov	r3, r2
 8009c28:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 8009c2a:	79fb      	ldrb	r3, [r7, #7]
 8009c2c:	2b01      	cmp	r3, #1
 8009c2e:	d149      	bne.n	8009cc4 <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 8009c30:	2000      	movs	r0, #0
 8009c32:	f001 f95f 	bl	800aef4 <RBI_GetRFOMaxPowerConfig>
 8009c36:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 8009c38:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8009c3c:	68fa      	ldr	r2, [r7, #12]
 8009c3e:	429a      	cmp	r2, r3
 8009c40:	da01      	bge.n	8009c46 <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	2b0e      	cmp	r3, #14
 8009c4a:	d10e      	bne.n	8009c6a <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 8009c4c:	2301      	movs	r3, #1
 8009c4e:	2201      	movs	r2, #1
 8009c50:	2100      	movs	r1, #0
 8009c52:	2004      	movs	r0, #4
 8009c54:	f7ff fef6 	bl	8009a44 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8009c58:	79ba      	ldrb	r2, [r7, #6]
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	b2db      	uxtb	r3, r3
 8009c5e:	1ad3      	subs	r3, r2, r3
 8009c60:	b2db      	uxtb	r3, r3
 8009c62:	330e      	adds	r3, #14
 8009c64:	b2db      	uxtb	r3, r3
 8009c66:	71bb      	strb	r3, [r7, #6]
 8009c68:	e01f      	b.n	8009caa <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	2b0a      	cmp	r3, #10
 8009c6e:	d10e      	bne.n	8009c8e <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 8009c70:	2301      	movs	r3, #1
 8009c72:	2201      	movs	r2, #1
 8009c74:	2100      	movs	r1, #0
 8009c76:	2001      	movs	r0, #1
 8009c78:	f7ff fee4 	bl	8009a44 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 8009c7c:	79ba      	ldrb	r2, [r7, #6]
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	b2db      	uxtb	r3, r3
 8009c82:	1ad3      	subs	r3, r2, r3
 8009c84:	b2db      	uxtb	r3, r3
 8009c86:	330d      	adds	r3, #13
 8009c88:	b2db      	uxtb	r3, r3
 8009c8a:	71bb      	strb	r3, [r7, #6]
 8009c8c:	e00d      	b.n	8009caa <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 8009c8e:	2301      	movs	r3, #1
 8009c90:	2201      	movs	r2, #1
 8009c92:	2100      	movs	r1, #0
 8009c94:	2007      	movs	r0, #7
 8009c96:	f7ff fed5 	bl	8009a44 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8009c9a:	79ba      	ldrb	r2, [r7, #6]
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	b2db      	uxtb	r3, r3
 8009ca0:	1ad3      	subs	r3, r2, r3
 8009ca2:	b2db      	uxtb	r3, r3
 8009ca4:	330e      	adds	r3, #14
 8009ca6:	b2db      	uxtb	r3, r3
 8009ca8:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 8009caa:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8009cae:	f113 0f11 	cmn.w	r3, #17
 8009cb2:	da01      	bge.n	8009cb8 <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 8009cb4:	23ef      	movs	r3, #239	; 0xef
 8009cb6:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 8009cb8:	2118      	movs	r1, #24
 8009cba:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8009cbe:	f000 fa93 	bl	800a1e8 <SUBGRF_WriteRegister>
 8009cc2:	e067      	b.n	8009d94 <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 8009cc4:	f640 00d8 	movw	r0, #2264	; 0x8d8
 8009cc8:	f000 faa2 	bl	800a210 <SUBGRF_ReadRegister>
 8009ccc:	4603      	mov	r3, r0
 8009cce:	f043 031e 	orr.w	r3, r3, #30
 8009cd2:	b2db      	uxtb	r3, r3
 8009cd4:	4619      	mov	r1, r3
 8009cd6:	f640 00d8 	movw	r0, #2264	; 0x8d8
 8009cda:	f000 fa85 	bl	800a1e8 <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 8009cde:	2001      	movs	r0, #1
 8009ce0:	f001 f908 	bl	800aef4 <RBI_GetRFOMaxPowerConfig>
 8009ce4:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 8009ce6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8009cea:	68fa      	ldr	r2, [r7, #12]
 8009cec:	429a      	cmp	r2, r3
 8009cee:	da01      	bge.n	8009cf4 <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	2b14      	cmp	r3, #20
 8009cf8:	d10e      	bne.n	8009d18 <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 8009cfa:	2301      	movs	r3, #1
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	2105      	movs	r1, #5
 8009d00:	2003      	movs	r0, #3
 8009d02:	f7ff fe9f 	bl	8009a44 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8009d06:	79ba      	ldrb	r2, [r7, #6]
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	b2db      	uxtb	r3, r3
 8009d0c:	1ad3      	subs	r3, r2, r3
 8009d0e:	b2db      	uxtb	r3, r3
 8009d10:	3316      	adds	r3, #22
 8009d12:	b2db      	uxtb	r3, r3
 8009d14:	71bb      	strb	r3, [r7, #6]
 8009d16:	e031      	b.n	8009d7c <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	2b11      	cmp	r3, #17
 8009d1c:	d10e      	bne.n	8009d3c <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 8009d1e:	2301      	movs	r3, #1
 8009d20:	2200      	movs	r2, #0
 8009d22:	2103      	movs	r1, #3
 8009d24:	2002      	movs	r0, #2
 8009d26:	f7ff fe8d 	bl	8009a44 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8009d2a:	79ba      	ldrb	r2, [r7, #6]
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	b2db      	uxtb	r3, r3
 8009d30:	1ad3      	subs	r3, r2, r3
 8009d32:	b2db      	uxtb	r3, r3
 8009d34:	3316      	adds	r3, #22
 8009d36:	b2db      	uxtb	r3, r3
 8009d38:	71bb      	strb	r3, [r7, #6]
 8009d3a:	e01f      	b.n	8009d7c <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	2b0e      	cmp	r3, #14
 8009d40:	d10e      	bne.n	8009d60 <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 8009d42:	2301      	movs	r3, #1
 8009d44:	2200      	movs	r2, #0
 8009d46:	2102      	movs	r1, #2
 8009d48:	2002      	movs	r0, #2
 8009d4a:	f7ff fe7b 	bl	8009a44 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8009d4e:	79ba      	ldrb	r2, [r7, #6]
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	b2db      	uxtb	r3, r3
 8009d54:	1ad3      	subs	r3, r2, r3
 8009d56:	b2db      	uxtb	r3, r3
 8009d58:	330e      	adds	r3, #14
 8009d5a:	b2db      	uxtb	r3, r3
 8009d5c:	71bb      	strb	r3, [r7, #6]
 8009d5e:	e00d      	b.n	8009d7c <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 8009d60:	2301      	movs	r3, #1
 8009d62:	2200      	movs	r2, #0
 8009d64:	2107      	movs	r1, #7
 8009d66:	2004      	movs	r0, #4
 8009d68:	f7ff fe6c 	bl	8009a44 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8009d6c:	79ba      	ldrb	r2, [r7, #6]
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	b2db      	uxtb	r3, r3
 8009d72:	1ad3      	subs	r3, r2, r3
 8009d74:	b2db      	uxtb	r3, r3
 8009d76:	3316      	adds	r3, #22
 8009d78:	b2db      	uxtb	r3, r3
 8009d7a:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 8009d7c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8009d80:	f113 0f09 	cmn.w	r3, #9
 8009d84:	da01      	bge.n	8009d8a <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 8009d86:	23f7      	movs	r3, #247	; 0xf7
 8009d88:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 8009d8a:	2138      	movs	r1, #56	; 0x38
 8009d8c:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8009d90:	f000 fa2a 	bl	800a1e8 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 8009d94:	79bb      	ldrb	r3, [r7, #6]
 8009d96:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 8009d98:	797b      	ldrb	r3, [r7, #5]
 8009d9a:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 8009d9c:	f107 0308 	add.w	r3, r7, #8
 8009da0:	2202      	movs	r2, #2
 8009da2:	4619      	mov	r1, r3
 8009da4:	208e      	movs	r0, #142	; 0x8e
 8009da6:	f000 facf 	bl	800a348 <SUBGRF_WriteCommand>
}
 8009daa:	bf00      	nop
 8009dac:	3710      	adds	r7, #16
 8009dae:	46bd      	mov	sp, r7
 8009db0:	bd80      	pop	{r7, pc}
	...

08009db4 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 8009db4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8009db8:	b086      	sub	sp, #24
 8009dba:	af00      	add	r7, sp, #0
 8009dbc:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8009dc2:	4a61      	ldr	r2, [pc, #388]	; (8009f48 <SUBGRF_SetModulationParams+0x194>)
 8009dc4:	f107 0308 	add.w	r3, r7, #8
 8009dc8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009dcc:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	781a      	ldrb	r2, [r3, #0]
 8009dd4:	4b5d      	ldr	r3, [pc, #372]	; (8009f4c <SUBGRF_SetModulationParams+0x198>)
 8009dd6:	781b      	ldrb	r3, [r3, #0]
 8009dd8:	429a      	cmp	r2, r3
 8009dda:	d004      	beq.n	8009de6 <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	781b      	ldrb	r3, [r3, #0]
 8009de0:	4618      	mov	r0, r3
 8009de2:	f7ff fef3 	bl	8009bcc <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	781b      	ldrb	r3, [r3, #0]
 8009dea:	2b03      	cmp	r3, #3
 8009dec:	f200 80a5 	bhi.w	8009f3a <SUBGRF_SetModulationParams+0x186>
 8009df0:	a201      	add	r2, pc, #4	; (adr r2, 8009df8 <SUBGRF_SetModulationParams+0x44>)
 8009df2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009df6:	bf00      	nop
 8009df8:	08009e09 	.word	0x08009e09
 8009dfc:	08009ec9 	.word	0x08009ec9
 8009e00:	08009e8b 	.word	0x08009e8b
 8009e04:	08009ef7 	.word	0x08009ef7
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 8009e08:	2308      	movs	r3, #8
 8009e0a:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	685b      	ldr	r3, [r3, #4]
 8009e10:	4a4f      	ldr	r2, [pc, #316]	; (8009f50 <SUBGRF_SetModulationParams+0x19c>)
 8009e12:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e16:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8009e18:	697b      	ldr	r3, [r7, #20]
 8009e1a:	0c1b      	lsrs	r3, r3, #16
 8009e1c:	b2db      	uxtb	r3, r3
 8009e1e:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8009e20:	697b      	ldr	r3, [r7, #20]
 8009e22:	0a1b      	lsrs	r3, r3, #8
 8009e24:	b2db      	uxtb	r3, r3
 8009e26:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8009e28:	697b      	ldr	r3, [r7, #20]
 8009e2a:	b2db      	uxtb	r3, r3
 8009e2c:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	7b1b      	ldrb	r3, [r3, #12]
 8009e32:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	7b5b      	ldrb	r3, [r3, #13]
 8009e38:	733b      	strb	r3, [r7, #12]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	689b      	ldr	r3, [r3, #8]
 8009e3e:	2200      	movs	r2, #0
 8009e40:	461c      	mov	r4, r3
 8009e42:	4615      	mov	r5, r2
 8009e44:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 8009e48:	ea4f 6844 	mov.w	r8, r4, lsl #25
 8009e4c:	4a41      	ldr	r2, [pc, #260]	; (8009f54 <SUBGRF_SetModulationParams+0x1a0>)
 8009e4e:	f04f 0300 	mov.w	r3, #0
 8009e52:	4640      	mov	r0, r8
 8009e54:	4649      	mov	r1, r9
 8009e56:	f7f6 f997 	bl	8000188 <__aeabi_uldivmod>
 8009e5a:	4602      	mov	r2, r0
 8009e5c:	460b      	mov	r3, r1
 8009e5e:	4613      	mov	r3, r2
 8009e60:	617b      	str	r3, [r7, #20]
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 8009e62:	697b      	ldr	r3, [r7, #20]
 8009e64:	0c1b      	lsrs	r3, r3, #16
 8009e66:	b2db      	uxtb	r3, r3
 8009e68:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 8009e6a:	697b      	ldr	r3, [r7, #20]
 8009e6c:	0a1b      	lsrs	r3, r3, #8
 8009e6e:	b2db      	uxtb	r3, r3
 8009e70:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 8009e72:	697b      	ldr	r3, [r7, #20]
 8009e74:	b2db      	uxtb	r3, r3
 8009e76:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8009e78:	7cfb      	ldrb	r3, [r7, #19]
 8009e7a:	b29a      	uxth	r2, r3
 8009e7c:	f107 0308 	add.w	r3, r7, #8
 8009e80:	4619      	mov	r1, r3
 8009e82:	208b      	movs	r0, #139	; 0x8b
 8009e84:	f000 fa60 	bl	800a348 <SUBGRF_WriteCommand>
        break;
 8009e88:	e058      	b.n	8009f3c <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 8009e8a:	2304      	movs	r3, #4
 8009e8c:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	691b      	ldr	r3, [r3, #16]
 8009e92:	4a2f      	ldr	r2, [pc, #188]	; (8009f50 <SUBGRF_SetModulationParams+0x19c>)
 8009e94:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e98:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8009e9a:	697b      	ldr	r3, [r7, #20]
 8009e9c:	0c1b      	lsrs	r3, r3, #16
 8009e9e:	b2db      	uxtb	r3, r3
 8009ea0:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8009ea2:	697b      	ldr	r3, [r7, #20]
 8009ea4:	0a1b      	lsrs	r3, r3, #8
 8009ea6:	b2db      	uxtb	r3, r3
 8009ea8:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8009eaa:	697b      	ldr	r3, [r7, #20]
 8009eac:	b2db      	uxtb	r3, r3
 8009eae:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	7d1b      	ldrb	r3, [r3, #20]
 8009eb4:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8009eb6:	7cfb      	ldrb	r3, [r7, #19]
 8009eb8:	b29a      	uxth	r2, r3
 8009eba:	f107 0308 	add.w	r3, r7, #8
 8009ebe:	4619      	mov	r1, r3
 8009ec0:	208b      	movs	r0, #139	; 0x8b
 8009ec2:	f000 fa41 	bl	800a348 <SUBGRF_WriteCommand>
        break;
 8009ec6:	e039      	b.n	8009f3c <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 8009ec8:	2304      	movs	r3, #4
 8009eca:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	7e1b      	ldrb	r3, [r3, #24]
 8009ed0:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	7e5b      	ldrb	r3, [r3, #25]
 8009ed6:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	7e9b      	ldrb	r3, [r3, #26]
 8009edc:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	7edb      	ldrb	r3, [r3, #27]
 8009ee2:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8009ee4:	7cfb      	ldrb	r3, [r7, #19]
 8009ee6:	b29a      	uxth	r2, r3
 8009ee8:	f107 0308 	add.w	r3, r7, #8
 8009eec:	4619      	mov	r1, r3
 8009eee:	208b      	movs	r0, #139	; 0x8b
 8009ef0:	f000 fa2a 	bl	800a348 <SUBGRF_WriteCommand>

        break;
 8009ef4:	e022      	b.n	8009f3c <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 8009ef6:	2305      	movs	r3, #5
 8009ef8:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	685b      	ldr	r3, [r3, #4]
 8009efe:	4a14      	ldr	r2, [pc, #80]	; (8009f50 <SUBGRF_SetModulationParams+0x19c>)
 8009f00:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f04:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8009f06:	697b      	ldr	r3, [r7, #20]
 8009f08:	0c1b      	lsrs	r3, r3, #16
 8009f0a:	b2db      	uxtb	r3, r3
 8009f0c:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8009f0e:	697b      	ldr	r3, [r7, #20]
 8009f10:	0a1b      	lsrs	r3, r3, #8
 8009f12:	b2db      	uxtb	r3, r3
 8009f14:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8009f16:	697b      	ldr	r3, [r7, #20]
 8009f18:	b2db      	uxtb	r3, r3
 8009f1a:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	7b1b      	ldrb	r3, [r3, #12]
 8009f20:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	7b5b      	ldrb	r3, [r3, #13]
 8009f26:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8009f28:	7cfb      	ldrb	r3, [r7, #19]
 8009f2a:	b29a      	uxth	r2, r3
 8009f2c:	f107 0308 	add.w	r3, r7, #8
 8009f30:	4619      	mov	r1, r3
 8009f32:	208b      	movs	r0, #139	; 0x8b
 8009f34:	f000 fa08 	bl	800a348 <SUBGRF_WriteCommand>
        break;
 8009f38:	e000      	b.n	8009f3c <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 8009f3a:	bf00      	nop
    }
}
 8009f3c:	bf00      	nop
 8009f3e:	3718      	adds	r7, #24
 8009f40:	46bd      	mov	sp, r7
 8009f42:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8009f46:	bf00      	nop
 8009f48:	0800c53c 	.word	0x0800c53c
 8009f4c:	20000315 	.word	0x20000315
 8009f50:	3d090000 	.word	0x3d090000
 8009f54:	01e84800 	.word	0x01e84800

08009f58 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 8009f58:	b580      	push	{r7, lr}
 8009f5a:	b086      	sub	sp, #24
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 8009f60:	2300      	movs	r3, #0
 8009f62:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8009f64:	4a48      	ldr	r2, [pc, #288]	; (800a088 <SUBGRF_SetPacketParams+0x130>)
 8009f66:	f107 030c 	add.w	r3, r7, #12
 8009f6a:	ca07      	ldmia	r2, {r0, r1, r2}
 8009f6c:	c303      	stmia	r3!, {r0, r1}
 8009f6e:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	781a      	ldrb	r2, [r3, #0]
 8009f74:	4b45      	ldr	r3, [pc, #276]	; (800a08c <SUBGRF_SetPacketParams+0x134>)
 8009f76:	781b      	ldrb	r3, [r3, #0]
 8009f78:	429a      	cmp	r2, r3
 8009f7a:	d004      	beq.n	8009f86 <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	781b      	ldrb	r3, [r3, #0]
 8009f80:	4618      	mov	r0, r3
 8009f82:	f7ff fe23 	bl	8009bcc <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	781b      	ldrb	r3, [r3, #0]
 8009f8a:	2b03      	cmp	r3, #3
 8009f8c:	d878      	bhi.n	800a080 <SUBGRF_SetPacketParams+0x128>
 8009f8e:	a201      	add	r2, pc, #4	; (adr r2, 8009f94 <SUBGRF_SetPacketParams+0x3c>)
 8009f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f94:	08009fa5 	.word	0x08009fa5
 8009f98:	0800a035 	.word	0x0800a035
 8009f9c:	0800a029 	.word	0x0800a029
 8009fa0:	08009fa5 	.word	0x08009fa5
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	7a5b      	ldrb	r3, [r3, #9]
 8009fa8:	2bf1      	cmp	r3, #241	; 0xf1
 8009faa:	d10a      	bne.n	8009fc2 <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 8009fac:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8009fb0:	f7ff faaa 	bl	8009508 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 8009fb4:	f248 0005 	movw	r0, #32773	; 0x8005
 8009fb8:	f7ff fac6 	bl	8009548 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 8009fbc:	2302      	movs	r3, #2
 8009fbe:	75bb      	strb	r3, [r7, #22]
 8009fc0:	e011      	b.n	8009fe6 <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	7a5b      	ldrb	r3, [r3, #9]
 8009fc6:	2bf2      	cmp	r3, #242	; 0xf2
 8009fc8:	d10a      	bne.n	8009fe0 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 8009fca:	f641 500f 	movw	r0, #7439	; 0x1d0f
 8009fce:	f7ff fa9b 	bl	8009508 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 8009fd2:	f241 0021 	movw	r0, #4129	; 0x1021
 8009fd6:	f7ff fab7 	bl	8009548 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 8009fda:	2306      	movs	r3, #6
 8009fdc:	75bb      	strb	r3, [r7, #22]
 8009fde:	e002      	b.n	8009fe6 <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	7a5b      	ldrb	r3, [r3, #9]
 8009fe4:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 8009fe6:	2309      	movs	r3, #9
 8009fe8:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	885b      	ldrh	r3, [r3, #2]
 8009fee:	0a1b      	lsrs	r3, r3, #8
 8009ff0:	b29b      	uxth	r3, r3
 8009ff2:	b2db      	uxtb	r3, r3
 8009ff4:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	885b      	ldrh	r3, [r3, #2]
 8009ffa:	b2db      	uxtb	r3, r3
 8009ffc:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	791b      	ldrb	r3, [r3, #4]
 800a002:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	795b      	ldrb	r3, [r3, #5]
 800a008:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	799b      	ldrb	r3, [r3, #6]
 800a00e:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	79db      	ldrb	r3, [r3, #7]
 800a014:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	7a1b      	ldrb	r3, [r3, #8]
 800a01a:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 800a01c:	7dbb      	ldrb	r3, [r7, #22]
 800a01e:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	7a9b      	ldrb	r3, [r3, #10]
 800a024:	753b      	strb	r3, [r7, #20]
        break;
 800a026:	e022      	b.n	800a06e <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 800a028:	2301      	movs	r3, #1
 800a02a:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	7b1b      	ldrb	r3, [r3, #12]
 800a030:	733b      	strb	r3, [r7, #12]
        break;
 800a032:	e01c      	b.n	800a06e <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 800a034:	2306      	movs	r3, #6
 800a036:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	89db      	ldrh	r3, [r3, #14]
 800a03c:	0a1b      	lsrs	r3, r3, #8
 800a03e:	b29b      	uxth	r3, r3
 800a040:	b2db      	uxtb	r3, r3
 800a042:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	89db      	ldrh	r3, [r3, #14]
 800a048:	b2db      	uxtb	r3, r3
 800a04a:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	7c1a      	ldrb	r2, [r3, #16]
 800a050:	4b0f      	ldr	r3, [pc, #60]	; (800a090 <SUBGRF_SetPacketParams+0x138>)
 800a052:	4611      	mov	r1, r2
 800a054:	7019      	strb	r1, [r3, #0]
 800a056:	4613      	mov	r3, r2
 800a058:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	7c5b      	ldrb	r3, [r3, #17]
 800a05e:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	7c9b      	ldrb	r3, [r3, #18]
 800a064:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	7cdb      	ldrb	r3, [r3, #19]
 800a06a:	747b      	strb	r3, [r7, #17]
        break;
 800a06c:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 800a06e:	7dfb      	ldrb	r3, [r7, #23]
 800a070:	b29a      	uxth	r2, r3
 800a072:	f107 030c 	add.w	r3, r7, #12
 800a076:	4619      	mov	r1, r3
 800a078:	208c      	movs	r0, #140	; 0x8c
 800a07a:	f000 f965 	bl	800a348 <SUBGRF_WriteCommand>
 800a07e:	e000      	b.n	800a082 <SUBGRF_SetPacketParams+0x12a>
        return;
 800a080:	bf00      	nop
}
 800a082:	3718      	adds	r7, #24
 800a084:	46bd      	mov	sp, r7
 800a086:	bd80      	pop	{r7, pc}
 800a088:	0800c544 	.word	0x0800c544
 800a08c:	20000315 	.word	0x20000315
 800a090:	20000316 	.word	0x20000316

0800a094 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 800a094:	b580      	push	{r7, lr}
 800a096:	b084      	sub	sp, #16
 800a098:	af00      	add	r7, sp, #0
 800a09a:	4603      	mov	r3, r0
 800a09c:	460a      	mov	r2, r1
 800a09e:	71fb      	strb	r3, [r7, #7]
 800a0a0:	4613      	mov	r3, r2
 800a0a2:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 800a0a4:	79fb      	ldrb	r3, [r7, #7]
 800a0a6:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 800a0a8:	79bb      	ldrb	r3, [r7, #6]
 800a0aa:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 800a0ac:	f107 030c 	add.w	r3, r7, #12
 800a0b0:	2202      	movs	r2, #2
 800a0b2:	4619      	mov	r1, r3
 800a0b4:	208f      	movs	r0, #143	; 0x8f
 800a0b6:	f000 f947 	bl	800a348 <SUBGRF_WriteCommand>
}
 800a0ba:	bf00      	nop
 800a0bc:	3710      	adds	r7, #16
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	bd80      	pop	{r7, pc}

0800a0c2 <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 800a0c2:	b580      	push	{r7, lr}
 800a0c4:	b082      	sub	sp, #8
 800a0c6:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 800a0c8:	2300      	movs	r3, #0
 800a0ca:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 800a0cc:	1d3b      	adds	r3, r7, #4
 800a0ce:	2201      	movs	r2, #1
 800a0d0:	4619      	mov	r1, r3
 800a0d2:	2015      	movs	r0, #21
 800a0d4:	f000 f95a 	bl	800a38c <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 800a0d8:	793b      	ldrb	r3, [r7, #4]
 800a0da:	425b      	negs	r3, r3
 800a0dc:	105b      	asrs	r3, r3, #1
 800a0de:	71fb      	strb	r3, [r7, #7]
    return rssi;
 800a0e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	3708      	adds	r7, #8
 800a0e8:	46bd      	mov	sp, r7
 800a0ea:	bd80      	pop	{r7, pc}

0800a0ec <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	b084      	sub	sp, #16
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]
 800a0f4:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 800a0f6:	f107 030c 	add.w	r3, r7, #12
 800a0fa:	2202      	movs	r2, #2
 800a0fc:	4619      	mov	r1, r3
 800a0fe:	2013      	movs	r0, #19
 800a100:	f000 f944 	bl	800a38c <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 800a104:	f7ff fd7e 	bl	8009c04 <SUBGRF_GetPacketType>
 800a108:	4603      	mov	r3, r0
 800a10a:	2b01      	cmp	r3, #1
 800a10c:	d10d      	bne.n	800a12a <SUBGRF_GetRxBufferStatus+0x3e>
 800a10e:	4b0c      	ldr	r3, [pc, #48]	; (800a140 <SUBGRF_GetRxBufferStatus+0x54>)
 800a110:	781b      	ldrb	r3, [r3, #0]
 800a112:	b2db      	uxtb	r3, r3
 800a114:	2b01      	cmp	r3, #1
 800a116:	d108      	bne.n	800a12a <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 800a118:	f240 7002 	movw	r0, #1794	; 0x702
 800a11c:	f000 f878 	bl	800a210 <SUBGRF_ReadRegister>
 800a120:	4603      	mov	r3, r0
 800a122:	461a      	mov	r2, r3
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	701a      	strb	r2, [r3, #0]
 800a128:	e002      	b.n	800a130 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 800a12a:	7b3a      	ldrb	r2, [r7, #12]
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 800a130:	7b7a      	ldrb	r2, [r7, #13]
 800a132:	683b      	ldr	r3, [r7, #0]
 800a134:	701a      	strb	r2, [r3, #0]
}
 800a136:	bf00      	nop
 800a138:	3710      	adds	r7, #16
 800a13a:	46bd      	mov	sp, r7
 800a13c:	bd80      	pop	{r7, pc}
 800a13e:	bf00      	nop
 800a140:	20000316 	.word	0x20000316

0800a144 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 800a144:	b580      	push	{r7, lr}
 800a146:	b084      	sub	sp, #16
 800a148:	af00      	add	r7, sp, #0
 800a14a:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 800a14c:	f107 030c 	add.w	r3, r7, #12
 800a150:	2203      	movs	r2, #3
 800a152:	4619      	mov	r1, r3
 800a154:	2014      	movs	r0, #20
 800a156:	f000 f919 	bl	800a38c <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 800a15a:	f7ff fd53 	bl	8009c04 <SUBGRF_GetPacketType>
 800a15e:	4603      	mov	r3, r0
 800a160:	461a      	mov	r2, r3
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	781b      	ldrb	r3, [r3, #0]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d002      	beq.n	800a174 <SUBGRF_GetPacketStatus+0x30>
 800a16e:	2b01      	cmp	r3, #1
 800a170:	d013      	beq.n	800a19a <SUBGRF_GetPacketStatus+0x56>
 800a172:	e02a      	b.n	800a1ca <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 800a174:	7b3a      	ldrb	r2, [r7, #12]
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 800a17a:	7b7b      	ldrb	r3, [r7, #13]
 800a17c:	425b      	negs	r3, r3
 800a17e:	105b      	asrs	r3, r3, #1
 800a180:	b25a      	sxtb	r2, r3
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 800a186:	7bbb      	ldrb	r3, [r7, #14]
 800a188:	425b      	negs	r3, r3
 800a18a:	105b      	asrs	r3, r3, #1
 800a18c:	b25a      	sxtb	r2, r3
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	2200      	movs	r2, #0
 800a196:	609a      	str	r2, [r3, #8]
            break;
 800a198:	e020      	b.n	800a1dc <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 800a19a:	7b3b      	ldrb	r3, [r7, #12]
 800a19c:	425b      	negs	r3, r3
 800a19e:	105b      	asrs	r3, r3, #1
 800a1a0:	b25a      	sxtb	r2, r3
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 800a1a6:	7b7b      	ldrb	r3, [r7, #13]
 800a1a8:	b25b      	sxtb	r3, r3
 800a1aa:	3302      	adds	r3, #2
 800a1ac:	109b      	asrs	r3, r3, #2
 800a1ae:	b25a      	sxtb	r2, r3
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 800a1b4:	7bbb      	ldrb	r3, [r7, #14]
 800a1b6:	425b      	negs	r3, r3
 800a1b8:	105b      	asrs	r3, r3, #1
 800a1ba:	b25a      	sxtb	r2, r3
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 800a1c0:	4b08      	ldr	r3, [pc, #32]	; (800a1e4 <SUBGRF_GetPacketStatus+0xa0>)
 800a1c2:	681a      	ldr	r2, [r3, #0]
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	611a      	str	r2, [r3, #16]
            break;
 800a1c8:	e008      	b.n	800a1dc <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 800a1ca:	2214      	movs	r2, #20
 800a1cc:	2100      	movs	r1, #0
 800a1ce:	6878      	ldr	r0, [r7, #4]
 800a1d0:	f000 ff63 	bl	800b09a <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	220f      	movs	r2, #15
 800a1d8:	701a      	strb	r2, [r3, #0]
            break;
 800a1da:	bf00      	nop
    }
}
 800a1dc:	bf00      	nop
 800a1de:	3710      	adds	r7, #16
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	bd80      	pop	{r7, pc}
 800a1e4:	20000318 	.word	0x20000318

0800a1e8 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b082      	sub	sp, #8
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	4603      	mov	r3, r0
 800a1f0:	460a      	mov	r2, r1
 800a1f2:	80fb      	strh	r3, [r7, #6]
 800a1f4:	4613      	mov	r3, r2
 800a1f6:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 800a1f8:	1d7a      	adds	r2, r7, #5
 800a1fa:	88f9      	ldrh	r1, [r7, #6]
 800a1fc:	2301      	movs	r3, #1
 800a1fe:	4803      	ldr	r0, [pc, #12]	; (800a20c <SUBGRF_WriteRegister+0x24>)
 800a200:	f7fa fac2 	bl	8004788 <HAL_SUBGHZ_WriteRegisters>
}
 800a204:	bf00      	nop
 800a206:	3708      	adds	r7, #8
 800a208:	46bd      	mov	sp, r7
 800a20a:	bd80      	pop	{r7, pc}
 800a20c:	20000070 	.word	0x20000070

0800a210 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 800a210:	b580      	push	{r7, lr}
 800a212:	b084      	sub	sp, #16
 800a214:	af00      	add	r7, sp, #0
 800a216:	4603      	mov	r3, r0
 800a218:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 800a21a:	f107 020f 	add.w	r2, r7, #15
 800a21e:	88f9      	ldrh	r1, [r7, #6]
 800a220:	2301      	movs	r3, #1
 800a222:	4804      	ldr	r0, [pc, #16]	; (800a234 <SUBGRF_ReadRegister+0x24>)
 800a224:	f7fa fb0f 	bl	8004846 <HAL_SUBGHZ_ReadRegisters>
    return data;
 800a228:	7bfb      	ldrb	r3, [r7, #15]
}
 800a22a:	4618      	mov	r0, r3
 800a22c:	3710      	adds	r7, #16
 800a22e:	46bd      	mov	sp, r7
 800a230:	bd80      	pop	{r7, pc}
 800a232:	bf00      	nop
 800a234:	20000070 	.word	0x20000070

0800a238 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 800a238:	b580      	push	{r7, lr}
 800a23a:	b086      	sub	sp, #24
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	4603      	mov	r3, r0
 800a240:	6039      	str	r1, [r7, #0]
 800a242:	80fb      	strh	r3, [r7, #6]
 800a244:	4613      	mov	r3, r2
 800a246:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a248:	f3ef 8310 	mrs	r3, PRIMASK
 800a24c:	60fb      	str	r3, [r7, #12]
  return(result);
 800a24e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800a250:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a252:	b672      	cpsid	i
}
 800a254:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 800a256:	88bb      	ldrh	r3, [r7, #4]
 800a258:	88f9      	ldrh	r1, [r7, #6]
 800a25a:	683a      	ldr	r2, [r7, #0]
 800a25c:	4806      	ldr	r0, [pc, #24]	; (800a278 <SUBGRF_WriteRegisters+0x40>)
 800a25e:	f7fa fa93 	bl	8004788 <HAL_SUBGHZ_WriteRegisters>
 800a262:	697b      	ldr	r3, [r7, #20]
 800a264:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a266:	693b      	ldr	r3, [r7, #16]
 800a268:	f383 8810 	msr	PRIMASK, r3
}
 800a26c:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800a26e:	bf00      	nop
 800a270:	3718      	adds	r7, #24
 800a272:	46bd      	mov	sp, r7
 800a274:	bd80      	pop	{r7, pc}
 800a276:	bf00      	nop
 800a278:	20000070 	.word	0x20000070

0800a27c <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 800a27c:	b580      	push	{r7, lr}
 800a27e:	b086      	sub	sp, #24
 800a280:	af00      	add	r7, sp, #0
 800a282:	4603      	mov	r3, r0
 800a284:	6039      	str	r1, [r7, #0]
 800a286:	80fb      	strh	r3, [r7, #6]
 800a288:	4613      	mov	r3, r2
 800a28a:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a28c:	f3ef 8310 	mrs	r3, PRIMASK
 800a290:	60fb      	str	r3, [r7, #12]
  return(result);
 800a292:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800a294:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a296:	b672      	cpsid	i
}
 800a298:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 800a29a:	88bb      	ldrh	r3, [r7, #4]
 800a29c:	88f9      	ldrh	r1, [r7, #6]
 800a29e:	683a      	ldr	r2, [r7, #0]
 800a2a0:	4806      	ldr	r0, [pc, #24]	; (800a2bc <SUBGRF_ReadRegisters+0x40>)
 800a2a2:	f7fa fad0 	bl	8004846 <HAL_SUBGHZ_ReadRegisters>
 800a2a6:	697b      	ldr	r3, [r7, #20]
 800a2a8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a2aa:	693b      	ldr	r3, [r7, #16]
 800a2ac:	f383 8810 	msr	PRIMASK, r3
}
 800a2b0:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800a2b2:	bf00      	nop
 800a2b4:	3718      	adds	r7, #24
 800a2b6:	46bd      	mov	sp, r7
 800a2b8:	bd80      	pop	{r7, pc}
 800a2ba:	bf00      	nop
 800a2bc:	20000070 	.word	0x20000070

0800a2c0 <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 800a2c0:	b580      	push	{r7, lr}
 800a2c2:	b086      	sub	sp, #24
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	4603      	mov	r3, r0
 800a2c8:	6039      	str	r1, [r7, #0]
 800a2ca:	71fb      	strb	r3, [r7, #7]
 800a2cc:	4613      	mov	r3, r2
 800a2ce:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a2d0:	f3ef 8310 	mrs	r3, PRIMASK
 800a2d4:	60fb      	str	r3, [r7, #12]
  return(result);
 800a2d6:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800a2d8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a2da:	b672      	cpsid	i
}
 800a2dc:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 800a2de:	79bb      	ldrb	r3, [r7, #6]
 800a2e0:	b29b      	uxth	r3, r3
 800a2e2:	79f9      	ldrb	r1, [r7, #7]
 800a2e4:	683a      	ldr	r2, [r7, #0]
 800a2e6:	4806      	ldr	r0, [pc, #24]	; (800a300 <SUBGRF_WriteBuffer+0x40>)
 800a2e8:	f7fa fbc1 	bl	8004a6e <HAL_SUBGHZ_WriteBuffer>
 800a2ec:	697b      	ldr	r3, [r7, #20]
 800a2ee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a2f0:	693b      	ldr	r3, [r7, #16]
 800a2f2:	f383 8810 	msr	PRIMASK, r3
}
 800a2f6:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800a2f8:	bf00      	nop
 800a2fa:	3718      	adds	r7, #24
 800a2fc:	46bd      	mov	sp, r7
 800a2fe:	bd80      	pop	{r7, pc}
 800a300:	20000070 	.word	0x20000070

0800a304 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 800a304:	b580      	push	{r7, lr}
 800a306:	b086      	sub	sp, #24
 800a308:	af00      	add	r7, sp, #0
 800a30a:	4603      	mov	r3, r0
 800a30c:	6039      	str	r1, [r7, #0]
 800a30e:	71fb      	strb	r3, [r7, #7]
 800a310:	4613      	mov	r3, r2
 800a312:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a314:	f3ef 8310 	mrs	r3, PRIMASK
 800a318:	60fb      	str	r3, [r7, #12]
  return(result);
 800a31a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800a31c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a31e:	b672      	cpsid	i
}
 800a320:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 800a322:	79bb      	ldrb	r3, [r7, #6]
 800a324:	b29b      	uxth	r3, r3
 800a326:	79f9      	ldrb	r1, [r7, #7]
 800a328:	683a      	ldr	r2, [r7, #0]
 800a32a:	4806      	ldr	r0, [pc, #24]	; (800a344 <SUBGRF_ReadBuffer+0x40>)
 800a32c:	f7fa fbf2 	bl	8004b14 <HAL_SUBGHZ_ReadBuffer>
 800a330:	697b      	ldr	r3, [r7, #20]
 800a332:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a334:	693b      	ldr	r3, [r7, #16]
 800a336:	f383 8810 	msr	PRIMASK, r3
}
 800a33a:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800a33c:	bf00      	nop
 800a33e:	3718      	adds	r7, #24
 800a340:	46bd      	mov	sp, r7
 800a342:	bd80      	pop	{r7, pc}
 800a344:	20000070 	.word	0x20000070

0800a348 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 800a348:	b580      	push	{r7, lr}
 800a34a:	b086      	sub	sp, #24
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	4603      	mov	r3, r0
 800a350:	6039      	str	r1, [r7, #0]
 800a352:	71fb      	strb	r3, [r7, #7]
 800a354:	4613      	mov	r3, r2
 800a356:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a358:	f3ef 8310 	mrs	r3, PRIMASK
 800a35c:	60fb      	str	r3, [r7, #12]
  return(result);
 800a35e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800a360:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a362:	b672      	cpsid	i
}
 800a364:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 800a366:	88bb      	ldrh	r3, [r7, #4]
 800a368:	79f9      	ldrb	r1, [r7, #7]
 800a36a:	683a      	ldr	r2, [r7, #0]
 800a36c:	4806      	ldr	r0, [pc, #24]	; (800a388 <SUBGRF_WriteCommand+0x40>)
 800a36e:	f7fa facb 	bl	8004908 <HAL_SUBGHZ_ExecSetCmd>
 800a372:	697b      	ldr	r3, [r7, #20]
 800a374:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a376:	693b      	ldr	r3, [r7, #16]
 800a378:	f383 8810 	msr	PRIMASK, r3
}
 800a37c:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800a37e:	bf00      	nop
 800a380:	3718      	adds	r7, #24
 800a382:	46bd      	mov	sp, r7
 800a384:	bd80      	pop	{r7, pc}
 800a386:	bf00      	nop
 800a388:	20000070 	.word	0x20000070

0800a38c <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 800a38c:	b580      	push	{r7, lr}
 800a38e:	b086      	sub	sp, #24
 800a390:	af00      	add	r7, sp, #0
 800a392:	4603      	mov	r3, r0
 800a394:	6039      	str	r1, [r7, #0]
 800a396:	71fb      	strb	r3, [r7, #7]
 800a398:	4613      	mov	r3, r2
 800a39a:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a39c:	f3ef 8310 	mrs	r3, PRIMASK
 800a3a0:	60fb      	str	r3, [r7, #12]
  return(result);
 800a3a2:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800a3a4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a3a6:	b672      	cpsid	i
}
 800a3a8:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 800a3aa:	88bb      	ldrh	r3, [r7, #4]
 800a3ac:	79f9      	ldrb	r1, [r7, #7]
 800a3ae:	683a      	ldr	r2, [r7, #0]
 800a3b0:	4806      	ldr	r0, [pc, #24]	; (800a3cc <SUBGRF_ReadCommand+0x40>)
 800a3b2:	f7fa fb08 	bl	80049c6 <HAL_SUBGHZ_ExecGetCmd>
 800a3b6:	697b      	ldr	r3, [r7, #20]
 800a3b8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a3ba:	693b      	ldr	r3, [r7, #16]
 800a3bc:	f383 8810 	msr	PRIMASK, r3
}
 800a3c0:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800a3c2:	bf00      	nop
 800a3c4:	3718      	adds	r7, #24
 800a3c6:	46bd      	mov	sp, r7
 800a3c8:	bd80      	pop	{r7, pc}
 800a3ca:	bf00      	nop
 800a3cc:	20000070 	.word	0x20000070

0800a3d0 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 800a3d0:	b580      	push	{r7, lr}
 800a3d2:	b084      	sub	sp, #16
 800a3d4:	af00      	add	r7, sp, #0
 800a3d6:	4603      	mov	r3, r0
 800a3d8:	460a      	mov	r2, r1
 800a3da:	71fb      	strb	r3, [r7, #7]
 800a3dc:	4613      	mov	r3, r2
 800a3de:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 800a3e0:	2301      	movs	r3, #1
 800a3e2:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 800a3e4:	79bb      	ldrb	r3, [r7, #6]
 800a3e6:	2b01      	cmp	r3, #1
 800a3e8:	d10d      	bne.n	800a406 <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 800a3ea:	79fb      	ldrb	r3, [r7, #7]
 800a3ec:	2b01      	cmp	r3, #1
 800a3ee:	d104      	bne.n	800a3fa <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 800a3f0:	2302      	movs	r3, #2
 800a3f2:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 800a3f4:	2004      	movs	r0, #4
 800a3f6:	f000 f8ef 	bl	800a5d8 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 800a3fa:	79fb      	ldrb	r3, [r7, #7]
 800a3fc:	2b02      	cmp	r3, #2
 800a3fe:	d107      	bne.n	800a410 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 800a400:	2303      	movs	r3, #3
 800a402:	73fb      	strb	r3, [r7, #15]
 800a404:	e004      	b.n	800a410 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 800a406:	79bb      	ldrb	r3, [r7, #6]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d101      	bne.n	800a410 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 800a40c:	2301      	movs	r3, #1
 800a40e:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 800a410:	7bfb      	ldrb	r3, [r7, #15]
 800a412:	4618      	mov	r0, r3
 800a414:	f000 fd4b 	bl	800aeae <RBI_ConfigRFSwitch>
}
 800a418:	bf00      	nop
 800a41a:	3710      	adds	r7, #16
 800a41c:	46bd      	mov	sp, r7
 800a41e:	bd80      	pop	{r7, pc}

0800a420 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 800a420:	b580      	push	{r7, lr}
 800a422:	b084      	sub	sp, #16
 800a424:	af00      	add	r7, sp, #0
 800a426:	4603      	mov	r3, r0
 800a428:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 800a42a:	2301      	movs	r3, #1
 800a42c:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 800a42e:	f000 fd4c 	bl	800aeca <RBI_GetTxConfig>
 800a432:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 800a434:	68bb      	ldr	r3, [r7, #8]
 800a436:	2b02      	cmp	r3, #2
 800a438:	d016      	beq.n	800a468 <SUBGRF_SetRfTxPower+0x48>
 800a43a:	68bb      	ldr	r3, [r7, #8]
 800a43c:	2b02      	cmp	r3, #2
 800a43e:	dc16      	bgt.n	800a46e <SUBGRF_SetRfTxPower+0x4e>
 800a440:	68bb      	ldr	r3, [r7, #8]
 800a442:	2b00      	cmp	r3, #0
 800a444:	d003      	beq.n	800a44e <SUBGRF_SetRfTxPower+0x2e>
 800a446:	68bb      	ldr	r3, [r7, #8]
 800a448:	2b01      	cmp	r3, #1
 800a44a:	d00a      	beq.n	800a462 <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 800a44c:	e00f      	b.n	800a46e <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 800a44e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a452:	2b0f      	cmp	r3, #15
 800a454:	dd02      	ble.n	800a45c <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 800a456:	2302      	movs	r3, #2
 800a458:	73fb      	strb	r3, [r7, #15]
            break;
 800a45a:	e009      	b.n	800a470 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 800a45c:	2301      	movs	r3, #1
 800a45e:	73fb      	strb	r3, [r7, #15]
            break;
 800a460:	e006      	b.n	800a470 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 800a462:	2301      	movs	r3, #1
 800a464:	73fb      	strb	r3, [r7, #15]
            break;
 800a466:	e003      	b.n	800a470 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 800a468:	2302      	movs	r3, #2
 800a46a:	73fb      	strb	r3, [r7, #15]
            break;
 800a46c:	e000      	b.n	800a470 <SUBGRF_SetRfTxPower+0x50>
            break;
 800a46e:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 800a470:	f997 1007 	ldrsb.w	r1, [r7, #7]
 800a474:	7bfb      	ldrb	r3, [r7, #15]
 800a476:	2202      	movs	r2, #2
 800a478:	4618      	mov	r0, r3
 800a47a:	f7ff fbcd 	bl	8009c18 <SUBGRF_SetTxParams>

    return paSelect;
 800a47e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a480:	4618      	mov	r0, r3
 800a482:	3710      	adds	r7, #16
 800a484:	46bd      	mov	sp, r7
 800a486:	bd80      	pop	{r7, pc}

0800a488 <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 800a488:	b480      	push	{r7}
 800a48a:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 800a48c:	2301      	movs	r3, #1
}
 800a48e:	4618      	mov	r0, r3
 800a490:	46bd      	mov	sp, r7
 800a492:	bc80      	pop	{r7}
 800a494:	4770      	bx	lr
	...

0800a498 <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a498:	b580      	push	{r7, lr}
 800a49a:	b082      	sub	sp, #8
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 800a4a0:	4b03      	ldr	r3, [pc, #12]	; (800a4b0 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	2001      	movs	r0, #1
 800a4a6:	4798      	blx	r3
}
 800a4a8:	bf00      	nop
 800a4aa:	3708      	adds	r7, #8
 800a4ac:	46bd      	mov	sp, r7
 800a4ae:	bd80      	pop	{r7, pc}
 800a4b0:	20000320 	.word	0x20000320

0800a4b4 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a4b4:	b580      	push	{r7, lr}
 800a4b6:	b082      	sub	sp, #8
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 800a4bc:	4b03      	ldr	r3, [pc, #12]	; (800a4cc <HAL_SUBGHZ_RxCpltCallback+0x18>)
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	2002      	movs	r0, #2
 800a4c2:	4798      	blx	r3
}
 800a4c4:	bf00      	nop
 800a4c6:	3708      	adds	r7, #8
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	bd80      	pop	{r7, pc}
 800a4cc:	20000320 	.word	0x20000320

0800a4d0 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 800a4d0:	b580      	push	{r7, lr}
 800a4d2:	b082      	sub	sp, #8
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 800a4d8:	4b03      	ldr	r3, [pc, #12]	; (800a4e8 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	2040      	movs	r0, #64	; 0x40
 800a4de:	4798      	blx	r3
}
 800a4e0:	bf00      	nop
 800a4e2:	3708      	adds	r7, #8
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	bd80      	pop	{r7, pc}
 800a4e8:	20000320 	.word	0x20000320

0800a4ec <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 800a4ec:	b580      	push	{r7, lr}
 800a4ee:	b082      	sub	sp, #8
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	6078      	str	r0, [r7, #4]
 800a4f4:	460b      	mov	r3, r1
 800a4f6:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 800a4f8:	78fb      	ldrb	r3, [r7, #3]
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d002      	beq.n	800a504 <HAL_SUBGHZ_CADStatusCallback+0x18>
 800a4fe:	2b01      	cmp	r3, #1
 800a500:	d005      	beq.n	800a50e <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 800a502:	e00a      	b.n	800a51a <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 800a504:	4b07      	ldr	r3, [pc, #28]	; (800a524 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	2080      	movs	r0, #128	; 0x80
 800a50a:	4798      	blx	r3
            break;
 800a50c:	e005      	b.n	800a51a <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 800a50e:	4b05      	ldr	r3, [pc, #20]	; (800a524 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	f44f 7080 	mov.w	r0, #256	; 0x100
 800a516:	4798      	blx	r3
            break;
 800a518:	bf00      	nop
    }
}
 800a51a:	bf00      	nop
 800a51c:	3708      	adds	r7, #8
 800a51e:	46bd      	mov	sp, r7
 800a520:	bd80      	pop	{r7, pc}
 800a522:	bf00      	nop
 800a524:	20000320 	.word	0x20000320

0800a528 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a528:	b580      	push	{r7, lr}
 800a52a:	b082      	sub	sp, #8
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 800a530:	4b04      	ldr	r3, [pc, #16]	; (800a544 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	f44f 7000 	mov.w	r0, #512	; 0x200
 800a538:	4798      	blx	r3
}
 800a53a:	bf00      	nop
 800a53c:	3708      	adds	r7, #8
 800a53e:	46bd      	mov	sp, r7
 800a540:	bd80      	pop	{r7, pc}
 800a542:	bf00      	nop
 800a544:	20000320 	.word	0x20000320

0800a548 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a548:	b580      	push	{r7, lr}
 800a54a:	b082      	sub	sp, #8
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 800a550:	4b03      	ldr	r3, [pc, #12]	; (800a560 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	2020      	movs	r0, #32
 800a556:	4798      	blx	r3
}
 800a558:	bf00      	nop
 800a55a:	3708      	adds	r7, #8
 800a55c:	46bd      	mov	sp, r7
 800a55e:	bd80      	pop	{r7, pc}
 800a560:	20000320 	.word	0x20000320

0800a564 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a564:	b580      	push	{r7, lr}
 800a566:	b082      	sub	sp, #8
 800a568:	af00      	add	r7, sp, #0
 800a56a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 800a56c:	4b03      	ldr	r3, [pc, #12]	; (800a57c <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	2004      	movs	r0, #4
 800a572:	4798      	blx	r3
}
 800a574:	bf00      	nop
 800a576:	3708      	adds	r7, #8
 800a578:	46bd      	mov	sp, r7
 800a57a:	bd80      	pop	{r7, pc}
 800a57c:	20000320 	.word	0x20000320

0800a580 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a580:	b580      	push	{r7, lr}
 800a582:	b082      	sub	sp, #8
 800a584:	af00      	add	r7, sp, #0
 800a586:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 800a588:	4b03      	ldr	r3, [pc, #12]	; (800a598 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	2008      	movs	r0, #8
 800a58e:	4798      	blx	r3
}
 800a590:	bf00      	nop
 800a592:	3708      	adds	r7, #8
 800a594:	46bd      	mov	sp, r7
 800a596:	bd80      	pop	{r7, pc}
 800a598:	20000320 	.word	0x20000320

0800a59c <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a59c:	b580      	push	{r7, lr}
 800a59e:	b082      	sub	sp, #8
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 800a5a4:	4b03      	ldr	r3, [pc, #12]	; (800a5b4 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	2010      	movs	r0, #16
 800a5aa:	4798      	blx	r3
}
 800a5ac:	bf00      	nop
 800a5ae:	3708      	adds	r7, #8
 800a5b0:	46bd      	mov	sp, r7
 800a5b2:	bd80      	pop	{r7, pc}
 800a5b4:	20000320 	.word	0x20000320

0800a5b8 <HAL_SUBGHZ_LrFhssHopCallback>:

void HAL_SUBGHZ_LrFhssHopCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	b082      	sub	sp, #8
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 800a5c0:	4b04      	ldr	r3, [pc, #16]	; (800a5d4 <HAL_SUBGHZ_LrFhssHopCallback+0x1c>)
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800a5c8:	4798      	blx	r3
}
 800a5ca:	bf00      	nop
 800a5cc:	3708      	adds	r7, #8
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	bd80      	pop	{r7, pc}
 800a5d2:	bf00      	nop
 800a5d4:	20000320 	.word	0x20000320

0800a5d8 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 800a5d8:	b580      	push	{r7, lr}
 800a5da:	b084      	sub	sp, #16
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	4603      	mov	r3, r0
 800a5e0:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 800a5e2:	f000 fc80 	bl	800aee6 <RBI_IsDCDC>
 800a5e6:	4603      	mov	r3, r0
 800a5e8:	2b01      	cmp	r3, #1
 800a5ea:	d112      	bne.n	800a612 <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 800a5ec:	f640 1023 	movw	r0, #2339	; 0x923
 800a5f0:	f7ff fe0e 	bl	800a210 <SUBGRF_ReadRegister>
 800a5f4:	4603      	mov	r3, r0
 800a5f6:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 800a5f8:	7bfb      	ldrb	r3, [r7, #15]
 800a5fa:	f023 0306 	bic.w	r3, r3, #6
 800a5fe:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 800a600:	7bfa      	ldrb	r2, [r7, #15]
 800a602:	79fb      	ldrb	r3, [r7, #7]
 800a604:	4313      	orrs	r3, r2
 800a606:	b2db      	uxtb	r3, r3
 800a608:	4619      	mov	r1, r3
 800a60a:	f640 1023 	movw	r0, #2339	; 0x923
 800a60e:	f7ff fdeb 	bl	800a1e8 <SUBGRF_WriteRegister>
  }
}
 800a612:	bf00      	nop
 800a614:	3710      	adds	r7, #16
 800a616:	46bd      	mov	sp, r7
 800a618:	bd80      	pop	{r7, pc}
	...

0800a61c <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 800a61c:	b480      	push	{r7}
 800a61e:	b085      	sub	sp, #20
 800a620:	af00      	add	r7, sp, #0
 800a622:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	2b00      	cmp	r3, #0
 800a628:	d101      	bne.n	800a62e <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 800a62a:	231f      	movs	r3, #31
 800a62c:	e016      	b.n	800a65c <SUBGRF_GetFskBandwidthRegValue+0x40>
    }

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 800a62e:	2300      	movs	r3, #0
 800a630:	73fb      	strb	r3, [r7, #15]
 800a632:	e00f      	b.n	800a654 <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 800a634:	7bfb      	ldrb	r3, [r7, #15]
 800a636:	4a0c      	ldr	r2, [pc, #48]	; (800a668 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 800a638:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a63c:	687a      	ldr	r2, [r7, #4]
 800a63e:	429a      	cmp	r2, r3
 800a640:	d205      	bcs.n	800a64e <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 800a642:	7bfb      	ldrb	r3, [r7, #15]
 800a644:	4a08      	ldr	r2, [pc, #32]	; (800a668 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 800a646:	00db      	lsls	r3, r3, #3
 800a648:	4413      	add	r3, r2
 800a64a:	791b      	ldrb	r3, [r3, #4]
 800a64c:	e006      	b.n	800a65c <SUBGRF_GetFskBandwidthRegValue+0x40>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 800a64e:	7bfb      	ldrb	r3, [r7, #15]
 800a650:	3301      	adds	r3, #1
 800a652:	73fb      	strb	r3, [r7, #15]
 800a654:	7bfb      	ldrb	r3, [r7, #15]
 800a656:	2b15      	cmp	r3, #21
 800a658:	d9ec      	bls.n	800a634 <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    // ERROR: Value not found
    while( 1 );
 800a65a:	e7fe      	b.n	800a65a <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 800a65c:	4618      	mov	r0, r3
 800a65e:	3714      	adds	r7, #20
 800a660:	46bd      	mov	sp, r7
 800a662:	bc80      	pop	{r7}
 800a664:	4770      	bx	lr
 800a666:	bf00      	nop
 800a668:	0800c924 	.word	0x0800c924

0800a66c <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 800a66c:	b580      	push	{r7, lr}
 800a66e:	b08a      	sub	sp, #40	; 0x28
 800a670:	af00      	add	r7, sp, #0
 800a672:	6078      	str	r0, [r7, #4]
 800a674:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 800a676:	4b35      	ldr	r3, [pc, #212]	; (800a74c <SUBGRF_GetCFO+0xe0>)
 800a678:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 800a67a:	f640 0007 	movw	r0, #2055	; 0x807
 800a67e:	f7ff fdc7 	bl	800a210 <SUBGRF_ReadRegister>
 800a682:	4603      	mov	r3, r0
 800a684:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 800a686:	7ffb      	ldrb	r3, [r7, #31]
 800a688:	08db      	lsrs	r3, r3, #3
 800a68a:	b2db      	uxtb	r3, r3
 800a68c:	f003 0303 	and.w	r3, r3, #3
 800a690:	3328      	adds	r3, #40	; 0x28
 800a692:	443b      	add	r3, r7
 800a694:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800a698:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 800a69a:	7ffb      	ldrb	r3, [r7, #31]
 800a69c:	f003 0307 	and.w	r3, r3, #7
 800a6a0:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp + 1 )));
 800a6a2:	7fba      	ldrb	r2, [r7, #30]
 800a6a4:	7f7b      	ldrb	r3, [r7, #29]
 800a6a6:	3301      	adds	r3, #1
 800a6a8:	fa02 f303 	lsl.w	r3, r2, r3
 800a6ac:	461a      	mov	r2, r3
 800a6ae:	4b28      	ldr	r3, [pc, #160]	; (800a750 <SUBGRF_GetCFO+0xe4>)
 800a6b0:	fbb3 f3f2 	udiv	r3, r3, r2
 800a6b4:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 800a6b6:	69ba      	ldr	r2, [r7, #24]
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	fbb2 f3f3 	udiv	r3, r2, r3
 800a6be:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 800a6c0:	2301      	movs	r3, #1
 800a6c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 800a6c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a6ca:	697a      	ldr	r2, [r7, #20]
 800a6cc:	fb02 f303 	mul.w	r3, r2, r3
 800a6d0:	2b07      	cmp	r3, #7
 800a6d2:	d802      	bhi.n	800a6da <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 800a6d4:	2302      	movs	r3, #2
 800a6d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if (cf_osr * interp < 4)
 800a6da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a6de:	697a      	ldr	r2, [r7, #20]
 800a6e0:	fb02 f303 	mul.w	r3, r2, r3
 800a6e4:	2b03      	cmp	r3, #3
 800a6e6:	d802      	bhi.n	800a6ee <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 800a6e8:	2304      	movs	r3, #4
 800a6ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 800a6ee:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800a6f2:	69bb      	ldr	r3, [r7, #24]
 800a6f4:	fb02 f303 	mul.w	r3, r2, r3
 800a6f8:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 800a6fa:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 800a6fe:	f7ff fd87 	bl	800a210 <SUBGRF_ReadRegister>
 800a702:	4603      	mov	r3, r0
 800a704:	021b      	lsls	r3, r3, #8
 800a706:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800a70a:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 800a70c:	f240 60b1 	movw	r0, #1713	; 0x6b1
 800a710:	f7ff fd7e 	bl	800a210 <SUBGRF_ReadRegister>
 800a714:	4603      	mov	r3, r0
 800a716:	461a      	mov	r2, r3
 800a718:	6a3b      	ldr	r3, [r7, #32]
 800a71a:	4313      	orrs	r3, r2
 800a71c:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 800a71e:	6a3b      	ldr	r3, [r7, #32]
 800a720:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a724:	2b00      	cmp	r3, #0
 800a726:	d005      	beq.n	800a734 <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 800a728:	6a3b      	ldr	r3, [r7, #32]
 800a72a:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800a72e:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800a732:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 800a734:	693b      	ldr	r3, [r7, #16]
 800a736:	095b      	lsrs	r3, r3, #5
 800a738:	6a3a      	ldr	r2, [r7, #32]
 800a73a:	fb02 f303 	mul.w	r3, r2, r3
 800a73e:	11da      	asrs	r2, r3, #7
 800a740:	683b      	ldr	r3, [r7, #0]
 800a742:	601a      	str	r2, [r3, #0]
}
 800a744:	bf00      	nop
 800a746:	3728      	adds	r7, #40	; 0x28
 800a748:	46bd      	mov	sp, r7
 800a74a:	bd80      	pop	{r7, pc}
 800a74c:	0c0a0804 	.word	0x0c0a0804
 800a750:	01e84800 	.word	0x01e84800

0800a754 <RFW_TransmitLongPacket>:
#endif /* RFW_ENABLE == 1 */

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout,
                                void ( *TxLongPacketGetNextChunkCb )( uint8_t **buffer, uint8_t buffer_size ) )
{
 800a754:	b480      	push	{r7}
 800a756:	b087      	sub	sp, #28
 800a758:	af00      	add	r7, sp, #0
 800a75a:	4603      	mov	r3, r0
 800a75c:	60b9      	str	r1, [r7, #8]
 800a75e:	607a      	str	r2, [r7, #4]
 800a760:	81fb      	strh	r3, [r7, #14]
    int32_t status = 0;
 800a762:	2300      	movs	r3, #0
 800a764:	617b      	str	r3, [r7, #20]
        default:
            break;
        }
    }
#else
    status = -1;
 800a766:	f04f 33ff 	mov.w	r3, #4294967295
 800a76a:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 800a76c:	697b      	ldr	r3, [r7, #20]
}
 800a76e:	4618      	mov	r0, r3
 800a770:	371c      	adds	r7, #28
 800a772:	46bd      	mov	sp, r7
 800a774:	bc80      	pop	{r7}
 800a776:	4770      	bx	lr

0800a778 <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout,
                               void ( *RxLongPacketStoreChunkCb )( uint8_t *buffer, uint8_t chunk_size ) )
{
 800a778:	b480      	push	{r7}
 800a77a:	b087      	sub	sp, #28
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	4603      	mov	r3, r0
 800a780:	60b9      	str	r1, [r7, #8]
 800a782:	607a      	str	r2, [r7, #4]
 800a784:	73fb      	strb	r3, [r7, #15]
    int32_t status = 0;
 800a786:	2300      	movs	r3, #0
 800a788:	617b      	str	r3, [r7, #20]
        {
            SUBGRF_SetRx( 0xFFFFFF ); /* Rx Continuous */
        }
    }
#else
    status = -1;
 800a78a:	f04f 33ff 	mov.w	r3, #4294967295
 800a78e:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 800a790:	697b      	ldr	r3, [r7, #20]
}
 800a792:	4618      	mov	r0, r3
 800a794:	371c      	adds	r7, #28
 800a796:	46bd      	mov	sp, r7
 800a798:	bc80      	pop	{r7}
 800a79a:	4770      	bx	lr

0800a79c <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t *config, RadioEvents_t *RadioEvents, TimerEvent_t *TimeoutTimerEvent )
{
 800a79c:	b480      	push	{r7}
 800a79e:	b085      	sub	sp, #20
 800a7a0:	af00      	add	r7, sp, #0
 800a7a2:	60f8      	str	r0, [r7, #12]
 800a7a4:	60b9      	str	r1, [r7, #8]
 800a7a6:	607a      	str	r2, [r7, #4]
    RFWPacket.Init.Enable = 1;
    /* Initialize Timer for end of fixed packet, started at sync*/
    TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
    return 0;
#else
    return -1;
 800a7a8:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* RFW_ENABLE == 1 */
}
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	3714      	adds	r7, #20
 800a7b0:	46bd      	mov	sp, r7
 800a7b2:	bc80      	pop	{r7}
 800a7b4:	4770      	bx	lr

0800a7b6 <RFW_DeInit>:

void RFW_DeInit( void )
{
 800a7b6:	b480      	push	{r7}
 800a7b8:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Enable = 0; /*Disable the RFWPacket decoding*/
#endif /* RFW_ENABLE == 1 */
}
 800a7ba:	bf00      	nop
 800a7bc:	46bd      	mov	sp, r7
 800a7be:	bc80      	pop	{r7}
 800a7c0:	4770      	bx	lr

0800a7c2 <RFW_Is_Init>:

uint8_t RFW_Is_Init( void )
{
 800a7c2:	b480      	push	{r7}
 800a7c4:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.Init.Enable;
#else
    return 0;
 800a7c6:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	46bd      	mov	sp, r7
 800a7cc:	bc80      	pop	{r7}
 800a7ce:	4770      	bx	lr

0800a7d0 <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void )
{
 800a7d0:	b480      	push	{r7}
 800a7d2:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.LongPacketModeEnable;
#else
    return 0;
 800a7d4:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	46bd      	mov	sp, r7
 800a7da:	bc80      	pop	{r7}
 800a7dc:	4770      	bx	lr

0800a7de <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch )
{
 800a7de:	b480      	push	{r7}
 800a7e0:	b083      	sub	sp, #12
 800a7e2:	af00      	add	r7, sp, #0
 800a7e4:	4603      	mov	r3, r0
 800a7e6:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.AntSwitchPaSelect = AntSwitch;
#endif /* RFW_ENABLE == 1 */
}
 800a7e8:	bf00      	nop
 800a7ea:	370c      	adds	r7, #12
 800a7ec:	46bd      	mov	sp, r7
 800a7ee:	bc80      	pop	{r7}
 800a7f0:	4770      	bx	lr

0800a7f2 <RFW_TransmitInit>:

int32_t RFW_TransmitInit( uint8_t *inOutBuffer, uint8_t size, uint8_t *outSize )
{
 800a7f2:	b480      	push	{r7}
 800a7f4:	b087      	sub	sp, #28
 800a7f6:	af00      	add	r7, sp, #0
 800a7f8:	60f8      	str	r0, [r7, #12]
 800a7fa:	460b      	mov	r3, r1
 800a7fc:	607a      	str	r2, [r7, #4]
 800a7fe:	72fb      	strb	r3, [r7, #11]
    int32_t status = -1;
 800a800:	f04f 33ff 	mov.w	r3, #4294967295
 800a804:	617b      	str	r3, [r7, #20]
        RFWPacket.LongPacketModeEnable = 0;

        status = 0;
    }
#endif /* RFW_ENABLE == 1 */
    return status;
 800a806:	697b      	ldr	r3, [r7, #20]
}
 800a808:	4618      	mov	r0, r3
 800a80a:	371c      	adds	r7, #28
 800a80c:	46bd      	mov	sp, r7
 800a80e:	bc80      	pop	{r7}
 800a810:	4770      	bx	lr

0800a812 <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 800a812:	b480      	push	{r7}
 800a814:	af00      	add	r7, sp, #0
    RFWPacket.RxPayloadOffset = 0;

    RFWPacket.LongPacketModeEnable = 0;
    return 0;
#else
    return -1;
 800a816:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* RFW_ENABLE == 1 */
}
 800a81a:	4618      	mov	r0, r3
 800a81c:	46bd      	mov	sp, r7
 800a81e:	bc80      	pop	{r7}
 800a820:	4770      	bx	lr

0800a822 <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket( void )
{
 800a822:	b480      	push	{r7}
 800a824:	af00      	add	r7, sp, #0
    /*long packet WA*/
    uint8_t reg = SUBGRF_ReadRegister( SUBGHZ_GPKTCTL1AR );
    SUBGRF_WriteRegister( SUBGHZ_GPKTCTL1AR, reg & ~0x02 ); /* clear infinite_sequence bit */
    SUBGRF_WriteRegister( SUBGHZ_GRTXPLDLEN, 0xFF ); /* RxTxPldLen: reset to 0xFF */
#endif /* RFW_LONGPACKET_ENABLE == 1 */
}
 800a826:	bf00      	nop
 800a828:	46bd      	mov	sp, r7
 800a82a:	bc80      	pop	{r7}
 800a82c:	4770      	bx	lr

0800a82e <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 800a82e:	b480      	push	{r7}
 800a830:	af00      	add	r7, sp, #0
        /*timeout*/
        SUBGRF_SetStandby( STDBY_RC );
        RFWPacket.Init.RadioEvents->RxTimeout( );
    }
#endif /* RFW_ENABLE == 1 */
}
 800a832:	bf00      	nop
 800a834:	46bd      	mov	sp, r7
 800a836:	bc80      	pop	{r7}
 800a838:	4770      	bx	lr

0800a83a <RFW_SetRadioModem>:

void RFW_SetRadioModem( RadioModems_t Modem )
{
 800a83a:	b480      	push	{r7}
 800a83c:	b083      	sub	sp, #12
 800a83e:	af00      	add	r7, sp, #0
 800a840:	4603      	mov	r3, r0
 800a842:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Modem = Modem;
#endif /* RFW_ENABLE == 1 */
}
 800a844:	bf00      	nop
 800a846:	370c      	adds	r7, #12
 800a848:	46bd      	mov	sp, r7
 800a84a:	bc80      	pop	{r7}
 800a84c:	4770      	bx	lr

0800a84e <MX_SubGHz_Phy_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_SubGHz_Phy_Init(void)
{
 800a84e:	b580      	push	{r7, lr}
 800a850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1 */
  SystemApp_Init();
 800a852:	f7f6 f8cf 	bl	80009f4 <SystemApp_Init>
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1_1 */
  SubghzApp_Init();
 800a856:	f000 f80b 	bl	800a870 <SubghzApp_Init>
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_2 */

  /* USER CODE END MX_SubGHz_Phy_Init_2 */
}
 800a85a:	bf00      	nop
 800a85c:	bd80      	pop	{r7, pc}

0800a85e <MX_SubGHz_Phy_Process>:

void MX_SubGHz_Phy_Process(void)
{
 800a85e:	b580      	push	{r7, lr}
 800a860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_SubGHz_Phy_Process_1 */

  /* USER CODE END MX_SubGHz_Phy_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800a862:	f04f 30ff 	mov.w	r0, #4294967295
 800a866:	f000 ff0b 	bl	800b680 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_SubGHz_Phy_Process_2 */

  /* USER CODE END MX_SubGHz_Phy_Process_2 */
}
 800a86a:	bf00      	nop
 800a86c:	bd80      	pop	{r7, pc}
	...

0800a870 <SubghzApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SubghzApp_Init(void)
{
 800a870:	b590      	push	{r4, r7, lr}
 800a872:	b08b      	sub	sp, #44	; 0x2c
 800a874:	af0a      	add	r7, sp, #40	; 0x28
  /* USER CODE BEGIN SubghzApp_Init_1 */

  APP_LOG(TS_OFF, VLEVEL_M, "\n\rPING PONG\n\r");
 800a876:	4b5e      	ldr	r3, [pc, #376]	; (800a9f0 <SubghzApp_Init+0x180>)
 800a878:	2200      	movs	r2, #0
 800a87a:	2100      	movs	r1, #0
 800a87c:	2002      	movs	r0, #2
 800a87e:	f001 fb3b 	bl	800bef8 <UTIL_ADV_TRACE_COND_FSend>
  /* Get SubGHY_Phy APP version*/
  APP_LOG(TS_OFF, VLEVEL_M, "APPLICATION_VERSION: V%X.%X.%X\r\n",
 800a882:	2300      	movs	r3, #0
 800a884:	9302      	str	r3, [sp, #8]
 800a886:	2303      	movs	r3, #3
 800a888:	9301      	str	r3, [sp, #4]
 800a88a:	2301      	movs	r3, #1
 800a88c:	9300      	str	r3, [sp, #0]
 800a88e:	4b59      	ldr	r3, [pc, #356]	; (800a9f4 <SubghzApp_Init+0x184>)
 800a890:	2200      	movs	r2, #0
 800a892:	2100      	movs	r1, #0
 800a894:	2002      	movs	r0, #2
 800a896:	f001 fb2f 	bl	800bef8 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(APP_VERSION_MAIN),
          (uint8_t)(APP_VERSION_SUB1),
          (uint8_t)(APP_VERSION_SUB2));

  /* Get MW SubGhz_Phy info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:    V%X.%X.%X\r\n",
 800a89a:	2300      	movs	r3, #0
 800a89c:	9302      	str	r3, [sp, #8]
 800a89e:	2303      	movs	r3, #3
 800a8a0:	9301      	str	r3, [sp, #4]
 800a8a2:	2301      	movs	r3, #1
 800a8a4:	9300      	str	r3, [sp, #0]
 800a8a6:	4b54      	ldr	r3, [pc, #336]	; (800a9f8 <SubghzApp_Init+0x188>)
 800a8a8:	2200      	movs	r2, #0
 800a8aa:	2100      	movs	r1, #0
 800a8ac:	2002      	movs	r0, #2
 800a8ae:	f001 fb23 	bl	800bef8 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(SUBGHZ_PHY_VERSION_MAIN),
          (uint8_t)(SUBGHZ_PHY_VERSION_SUB1),
          (uint8_t)(SUBGHZ_PHY_VERSION_SUB2));

  /* Led Timers*/
  UTIL_TIMER_Create(&timerLed, LED_PERIOD_MS, UTIL_TIMER_ONESHOT, OnledEvent, NULL);
 800a8b2:	2300      	movs	r3, #0
 800a8b4:	9300      	str	r3, [sp, #0]
 800a8b6:	4b51      	ldr	r3, [pc, #324]	; (800a9fc <SubghzApp_Init+0x18c>)
 800a8b8:	2200      	movs	r2, #0
 800a8ba:	21c8      	movs	r1, #200	; 0xc8
 800a8bc:	4850      	ldr	r0, [pc, #320]	; (800aa00 <SubghzApp_Init+0x190>)
 800a8be:	f001 f87f 	bl	800b9c0 <UTIL_TIMER_Create>
  UTIL_TIMER_Start(&timerLed);
 800a8c2:	484f      	ldr	r0, [pc, #316]	; (800aa00 <SubghzApp_Init+0x190>)
 800a8c4:	f001 f8b2 	bl	800ba2c <UTIL_TIMER_Start>
  /* USER CODE END SubghzApp_Init_1 */

  /* Radio initialization */
  RadioEvents.TxDone = OnTxDone;
 800a8c8:	4b4e      	ldr	r3, [pc, #312]	; (800aa04 <SubghzApp_Init+0x194>)
 800a8ca:	4a4f      	ldr	r2, [pc, #316]	; (800aa08 <SubghzApp_Init+0x198>)
 800a8cc:	601a      	str	r2, [r3, #0]
  RadioEvents.RxDone = OnRxDone;
 800a8ce:	4b4d      	ldr	r3, [pc, #308]	; (800aa04 <SubghzApp_Init+0x194>)
 800a8d0:	4a4e      	ldr	r2, [pc, #312]	; (800aa0c <SubghzApp_Init+0x19c>)
 800a8d2:	609a      	str	r2, [r3, #8]
  RadioEvents.TxTimeout = OnTxTimeout;
 800a8d4:	4b4b      	ldr	r3, [pc, #300]	; (800aa04 <SubghzApp_Init+0x194>)
 800a8d6:	4a4e      	ldr	r2, [pc, #312]	; (800aa10 <SubghzApp_Init+0x1a0>)
 800a8d8:	605a      	str	r2, [r3, #4]
  RadioEvents.RxTimeout = OnRxTimeout;
 800a8da:	4b4a      	ldr	r3, [pc, #296]	; (800aa04 <SubghzApp_Init+0x194>)
 800a8dc:	4a4d      	ldr	r2, [pc, #308]	; (800aa14 <SubghzApp_Init+0x1a4>)
 800a8de:	60da      	str	r2, [r3, #12]
  RadioEvents.RxError = OnRxError;
 800a8e0:	4b48      	ldr	r3, [pc, #288]	; (800aa04 <SubghzApp_Init+0x194>)
 800a8e2:	4a4d      	ldr	r2, [pc, #308]	; (800aa18 <SubghzApp_Init+0x1a8>)
 800a8e4:	611a      	str	r2, [r3, #16]

  Radio.Init(&RadioEvents);
 800a8e6:	4b4d      	ldr	r3, [pc, #308]	; (800aa1c <SubghzApp_Init+0x1ac>)
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	4846      	ldr	r0, [pc, #280]	; (800aa04 <SubghzApp_Init+0x194>)
 800a8ec:	4798      	blx	r3

  /* USER CODE BEGIN SubghzApp_Init_2 */
  /*calculate random delay for synchronization*/
  random_delay = (Radio.Random()) >> 22; /*10bits random e.g. from 0 to 1023 ms*/
 800a8ee:	4b4b      	ldr	r3, [pc, #300]	; (800aa1c <SubghzApp_Init+0x1ac>)
 800a8f0:	695b      	ldr	r3, [r3, #20]
 800a8f2:	4798      	blx	r3
 800a8f4:	4603      	mov	r3, r0
 800a8f6:	0d9b      	lsrs	r3, r3, #22
 800a8f8:	461a      	mov	r2, r3
 800a8fa:	4b49      	ldr	r3, [pc, #292]	; (800aa20 <SubghzApp_Init+0x1b0>)
 800a8fc:	601a      	str	r2, [r3, #0]

  /* Radio Set frequency */
  Radio.SetChannel(RF_FREQUENCY);
 800a8fe:	4b47      	ldr	r3, [pc, #284]	; (800aa1c <SubghzApp_Init+0x1ac>)
 800a900:	68db      	ldr	r3, [r3, #12]
 800a902:	4848      	ldr	r0, [pc, #288]	; (800aa24 <SubghzApp_Init+0x1b4>)
 800a904:	4798      	blx	r3

  /* Radio configuration */
#if ((USE_MODEM_LORA == 1) && (USE_MODEM_FSK == 0))
  APP_LOG(TS_OFF, VLEVEL_M, "---------------\n\r");
 800a906:	4b48      	ldr	r3, [pc, #288]	; (800aa28 <SubghzApp_Init+0x1b8>)
 800a908:	2200      	movs	r2, #0
 800a90a:	2100      	movs	r1, #0
 800a90c:	2002      	movs	r0, #2
 800a90e:	f001 faf3 	bl	800bef8 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "LORA_MODULATION\n\r");
 800a912:	4b46      	ldr	r3, [pc, #280]	; (800aa2c <SubghzApp_Init+0x1bc>)
 800a914:	2200      	movs	r2, #0
 800a916:	2100      	movs	r1, #0
 800a918:	2002      	movs	r0, #2
 800a91a:	f001 faed 	bl	800bef8 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "LORA_BW=%d kHz\n\r", (1 << LORA_BANDWIDTH) * 125);
 800a91e:	237d      	movs	r3, #125	; 0x7d
 800a920:	9300      	str	r3, [sp, #0]
 800a922:	4b43      	ldr	r3, [pc, #268]	; (800aa30 <SubghzApp_Init+0x1c0>)
 800a924:	2200      	movs	r2, #0
 800a926:	2100      	movs	r1, #0
 800a928:	2002      	movs	r0, #2
 800a92a:	f001 fae5 	bl	800bef8 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "LORA_SF=%d\n\r", LORA_SPREADING_FACTOR);
 800a92e:	230c      	movs	r3, #12
 800a930:	9300      	str	r3, [sp, #0]
 800a932:	4b40      	ldr	r3, [pc, #256]	; (800aa34 <SubghzApp_Init+0x1c4>)
 800a934:	2200      	movs	r2, #0
 800a936:	2100      	movs	r1, #0
 800a938:	2002      	movs	r0, #2
 800a93a:	f001 fadd 	bl	800bef8 <UTIL_ADV_TRACE_COND_FSend>

  Radio.SetTxConfig(MODEM_LORA, TX_OUTPUT_POWER, 0, LORA_BANDWIDTH,
 800a93e:	4b37      	ldr	r3, [pc, #220]	; (800aa1c <SubghzApp_Init+0x1ac>)
 800a940:	69dc      	ldr	r4, [r3, #28]
 800a942:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800a946:	9308      	str	r3, [sp, #32]
 800a948:	2300      	movs	r3, #0
 800a94a:	9307      	str	r3, [sp, #28]
 800a94c:	2300      	movs	r3, #0
 800a94e:	9306      	str	r3, [sp, #24]
 800a950:	2300      	movs	r3, #0
 800a952:	9305      	str	r3, [sp, #20]
 800a954:	2301      	movs	r3, #1
 800a956:	9304      	str	r3, [sp, #16]
 800a958:	2300      	movs	r3, #0
 800a95a:	9303      	str	r3, [sp, #12]
 800a95c:	2308      	movs	r3, #8
 800a95e:	9302      	str	r3, [sp, #8]
 800a960:	2304      	movs	r3, #4
 800a962:	9301      	str	r3, [sp, #4]
 800a964:	230c      	movs	r3, #12
 800a966:	9300      	str	r3, [sp, #0]
 800a968:	2300      	movs	r3, #0
 800a96a:	2200      	movs	r2, #0
 800a96c:	2116      	movs	r1, #22
 800a96e:	2001      	movs	r0, #1
 800a970:	47a0      	blx	r4
                    LORA_SPREADING_FACTOR, LORA_CODINGRATE,
                    LORA_PREAMBLE_LENGTH, LORA_FIX_LENGTH_PAYLOAD_ON,
                    true, 0, 0, LORA_IQ_INVERSION_ON, TX_TIMEOUT_VALUE);

  Radio.SetRxConfig(MODEM_LORA, LORA_BANDWIDTH, LORA_SPREADING_FACTOR,
 800a972:	4b2a      	ldr	r3, [pc, #168]	; (800aa1c <SubghzApp_Init+0x1ac>)
 800a974:	699c      	ldr	r4, [r3, #24]
 800a976:	2301      	movs	r3, #1
 800a978:	9309      	str	r3, [sp, #36]	; 0x24
 800a97a:	2300      	movs	r3, #0
 800a97c:	9308      	str	r3, [sp, #32]
 800a97e:	2300      	movs	r3, #0
 800a980:	9307      	str	r3, [sp, #28]
 800a982:	2300      	movs	r3, #0
 800a984:	9306      	str	r3, [sp, #24]
 800a986:	2301      	movs	r3, #1
 800a988:	9305      	str	r3, [sp, #20]
 800a98a:	2300      	movs	r3, #0
 800a98c:	9304      	str	r3, [sp, #16]
 800a98e:	2300      	movs	r3, #0
 800a990:	9303      	str	r3, [sp, #12]
 800a992:	2305      	movs	r3, #5
 800a994:	9302      	str	r3, [sp, #8]
 800a996:	2308      	movs	r3, #8
 800a998:	9301      	str	r3, [sp, #4]
 800a99a:	2300      	movs	r3, #0
 800a99c:	9300      	str	r3, [sp, #0]
 800a99e:	2304      	movs	r3, #4
 800a9a0:	220c      	movs	r2, #12
 800a9a2:	2100      	movs	r1, #0
 800a9a4:	2001      	movs	r0, #1
 800a9a6:	47a0      	blx	r4
                    LORA_CODINGRATE, 0, LORA_PREAMBLE_LENGTH,
                    LORA_SYMBOL_TIMEOUT, LORA_FIX_LENGTH_PAYLOAD_ON,
                    0, true, 0, 0, LORA_IQ_INVERSION_ON, true);

  Radio.SetMaxPayloadLength(MODEM_LORA, MAX_APP_BUFFER_SIZE);
 800a9a8:	4b1c      	ldr	r3, [pc, #112]	; (800aa1c <SubghzApp_Init+0x1ac>)
 800a9aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9ac:	21ff      	movs	r1, #255	; 0xff
 800a9ae:	2001      	movs	r0, #1
 800a9b0:	4798      	blx	r3
#else
#error "Please define a modulation in the subghz_phy_app.h file."
#endif /* USE_MODEM_LORA | USE_MODEM_FSK */

  /*fills tx buffer*/
  memset(BufferTx, 0x0, MAX_APP_BUFFER_SIZE);
 800a9b2:	22ff      	movs	r2, #255	; 0xff
 800a9b4:	2100      	movs	r1, #0
 800a9b6:	4820      	ldr	r0, [pc, #128]	; (800aa38 <SubghzApp_Init+0x1c8>)
 800a9b8:	f001 fd16 	bl	800c3e8 <memset>

  APP_LOG(TS_ON, VLEVEL_L, "rand=%d\n\r", random_delay);
 800a9bc:	4b18      	ldr	r3, [pc, #96]	; (800aa20 <SubghzApp_Init+0x1b0>)
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	9300      	str	r3, [sp, #0]
 800a9c2:	4b1e      	ldr	r3, [pc, #120]	; (800aa3c <SubghzApp_Init+0x1cc>)
 800a9c4:	2201      	movs	r2, #1
 800a9c6:	2100      	movs	r1, #0
 800a9c8:	2001      	movs	r0, #1
 800a9ca:	f001 fa95 	bl	800bef8 <UTIL_ADV_TRACE_COND_FSend>
  /*starts reception*/
  Radio.Rx(RX_TIMEOUT_VALUE + random_delay);
 800a9ce:	4b13      	ldr	r3, [pc, #76]	; (800aa1c <SubghzApp_Init+0x1ac>)
 800a9d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9d2:	4a13      	ldr	r2, [pc, #76]	; (800aa20 <SubghzApp_Init+0x1b0>)
 800a9d4:	6812      	ldr	r2, [r2, #0]
 800a9d6:	f602 32b8 	addw	r2, r2, #3000	; 0xbb8
 800a9da:	4610      	mov	r0, r2
 800a9dc:	4798      	blx	r3

  /*register task to to be run in while(1) after Radio IT*/
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process), UTIL_SEQ_RFU, PingPong_Process);
 800a9de:	4a18      	ldr	r2, [pc, #96]	; (800aa40 <SubghzApp_Init+0x1d0>)
 800a9e0:	2100      	movs	r1, #0
 800a9e2:	2001      	movs	r0, #1
 800a9e4:	f000 ff48 	bl	800b878 <UTIL_SEQ_RegTask>
  /* USER CODE END SubghzApp_Init_2 */
}
 800a9e8:	bf00      	nop
 800a9ea:	3704      	adds	r7, #4
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	bd90      	pop	{r4, r7, pc}
 800a9f0:	0800c550 	.word	0x0800c550
 800a9f4:	0800c560 	.word	0x0800c560
 800a9f8:	0800c584 	.word	0x0800c584
 800a9fc:	0800ae6d 	.word	0x0800ae6d
 800aa00:	20000548 	.word	0x20000548
 800aa04:	20000324 	.word	0x20000324
 800aa08:	0800aa45 	.word	0x0800aa45
 800aa0c:	0800aa71 	.word	0x0800aa71
 800aa10:	0800ab85 	.word	0x0800ab85
 800aa14:	0800abb1 	.word	0x0800abb1
 800aa18:	0800abdd 	.word	0x0800abdd
 800aa1c:	0800c894 	.word	0x0800c894
 800aa20:	20000560 	.word	0x20000560
 800aa24:	1c9c3800 	.word	0x1c9c3800
 800aa28:	0800c5a8 	.word	0x0800c5a8
 800aa2c:	0800c5bc 	.word	0x0800c5bc
 800aa30:	0800c5d0 	.word	0x0800c5d0
 800aa34:	0800c5e4 	.word	0x0800c5e4
 800aa38:	20000444 	.word	0x20000444
 800aa3c:	0800c5f4 	.word	0x0800c5f4
 800aa40:	0800ac09 	.word	0x0800ac09

0800aa44 <OnTxDone>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void OnTxDone(void)
{
 800aa44:	b580      	push	{r7, lr}
 800aa46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxDone */
  APP_LOG(TS_ON, VLEVEL_L, "OnTxDone\n\r");
 800aa48:	4b07      	ldr	r3, [pc, #28]	; (800aa68 <OnTxDone+0x24>)
 800aa4a:	2201      	movs	r2, #1
 800aa4c:	2100      	movs	r1, #0
 800aa4e:	2001      	movs	r0, #1
 800aa50:	f001 fa52 	bl	800bef8 <UTIL_ADV_TRACE_COND_FSend>
  /* Update the State of the FSM*/
  State = TX;
 800aa54:	4b05      	ldr	r3, [pc, #20]	; (800aa6c <OnTxDone+0x28>)
 800aa56:	2203      	movs	r2, #3
 800aa58:	701a      	strb	r2, [r3, #0]
  /* Run PingPong process in background*/
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process), CFG_SEQ_Prio_0);
 800aa5a:	2100      	movs	r1, #0
 800aa5c:	2001      	movs	r0, #1
 800aa5e:	f000 ff2d 	bl	800b8bc <UTIL_SEQ_SetTask>
  /* USER CODE END OnTxDone */
}
 800aa62:	bf00      	nop
 800aa64:	bd80      	pop	{r7, pc}
 800aa66:	bf00      	nop
 800aa68:	0800c600 	.word	0x0800c600
 800aa6c:	20000340 	.word	0x20000340

0800aa70 <OnRxDone>:

static void OnRxDone(uint8_t *payload, uint16_t size, int16_t rssi, int8_t LoraSnr_FskCfo)
{
 800aa70:	b580      	push	{r7, lr}
 800aa72:	b088      	sub	sp, #32
 800aa74:	af02      	add	r7, sp, #8
 800aa76:	60f8      	str	r0, [r7, #12]
 800aa78:	4608      	mov	r0, r1
 800aa7a:	4611      	mov	r1, r2
 800aa7c:	461a      	mov	r2, r3
 800aa7e:	4603      	mov	r3, r0
 800aa80:	817b      	strh	r3, [r7, #10]
 800aa82:	460b      	mov	r3, r1
 800aa84:	813b      	strh	r3, [r7, #8]
 800aa86:	4613      	mov	r3, r2
 800aa88:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnRxDone */
  APP_LOG(TS_ON, VLEVEL_L, "OnRxDone\n\r");
 800aa8a:	4b34      	ldr	r3, [pc, #208]	; (800ab5c <OnRxDone+0xec>)
 800aa8c:	2201      	movs	r2, #1
 800aa8e:	2100      	movs	r1, #0
 800aa90:	2001      	movs	r0, #1
 800aa92:	f001 fa31 	bl	800bef8 <UTIL_ADV_TRACE_COND_FSend>
#if ((USE_MODEM_LORA == 1) && (USE_MODEM_FSK == 0))
  APP_LOG(TS_ON, VLEVEL_L, "RssiValue=%d dBm, SnrValue=%ddB\n\r", rssi, LoraSnr_FskCfo);
 800aa96:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800aa9a:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800aa9e:	9201      	str	r2, [sp, #4]
 800aaa0:	9300      	str	r3, [sp, #0]
 800aaa2:	4b2f      	ldr	r3, [pc, #188]	; (800ab60 <OnRxDone+0xf0>)
 800aaa4:	2201      	movs	r2, #1
 800aaa6:	2100      	movs	r1, #0
 800aaa8:	2001      	movs	r0, #1
 800aaaa:	f001 fa25 	bl	800bef8 <UTIL_ADV_TRACE_COND_FSend>
  /* Record payload Signal to noise ratio in Lora*/
  SnrValue = LoraSnr_FskCfo;
 800aaae:	4a2d      	ldr	r2, [pc, #180]	; (800ab64 <OnRxDone+0xf4>)
 800aab0:	79fb      	ldrb	r3, [r7, #7]
 800aab2:	7013      	strb	r3, [r2, #0]
#if ((USE_MODEM_LORA == 0) && (USE_MODEM_FSK == 1))
  APP_LOG(TS_ON, VLEVEL_L, "RssiValue=%d dBm, Cfo=%dkHz\n\r", rssi, LoraSnr_FskCfo);
  SnrValue = 0; /*not applicable in GFSK*/
#endif /* USE_MODEM_LORA | USE_MODEM_FSK */
  /* Update the State of the FSM*/
  State = RX;
 800aab4:	4b2c      	ldr	r3, [pc, #176]	; (800ab68 <OnRxDone+0xf8>)
 800aab6:	2200      	movs	r2, #0
 800aab8:	701a      	strb	r2, [r3, #0]
  /* Clear BufferRx*/
  memset(BufferRx, 0, MAX_APP_BUFFER_SIZE);
 800aaba:	22ff      	movs	r2, #255	; 0xff
 800aabc:	2100      	movs	r1, #0
 800aabe:	482b      	ldr	r0, [pc, #172]	; (800ab6c <OnRxDone+0xfc>)
 800aac0:	f001 fc92 	bl	800c3e8 <memset>
  /* Record payload size*/
  RxBufferSize = size;
 800aac4:	4a2a      	ldr	r2, [pc, #168]	; (800ab70 <OnRxDone+0x100>)
 800aac6:	897b      	ldrh	r3, [r7, #10]
 800aac8:	8013      	strh	r3, [r2, #0]
  if (RxBufferSize <= MAX_APP_BUFFER_SIZE)
 800aaca:	4b29      	ldr	r3, [pc, #164]	; (800ab70 <OnRxDone+0x100>)
 800aacc:	881b      	ldrh	r3, [r3, #0]
 800aace:	2bff      	cmp	r3, #255	; 0xff
 800aad0:	d806      	bhi.n	800aae0 <OnRxDone+0x70>
  {
    memcpy(BufferRx, payload, RxBufferSize);
 800aad2:	4b27      	ldr	r3, [pc, #156]	; (800ab70 <OnRxDone+0x100>)
 800aad4:	881b      	ldrh	r3, [r3, #0]
 800aad6:	461a      	mov	r2, r3
 800aad8:	68f9      	ldr	r1, [r7, #12]
 800aada:	4824      	ldr	r0, [pc, #144]	; (800ab6c <OnRxDone+0xfc>)
 800aadc:	f001 fcc2 	bl	800c464 <memcpy>
  }
  /* Record Received Signal Strength*/
  RssiValue = rssi;
 800aae0:	893b      	ldrh	r3, [r7, #8]
 800aae2:	b25a      	sxtb	r2, r3
 800aae4:	4b23      	ldr	r3, [pc, #140]	; (800ab74 <OnRxDone+0x104>)
 800aae6:	701a      	strb	r2, [r3, #0]
  /* Record payload content*/
  APP_LOG(TS_ON, VLEVEL_H, "payload. size=%d \n\r", size);
 800aae8:	897b      	ldrh	r3, [r7, #10]
 800aaea:	9300      	str	r3, [sp, #0]
 800aaec:	4b22      	ldr	r3, [pc, #136]	; (800ab78 <OnRxDone+0x108>)
 800aaee:	2201      	movs	r2, #1
 800aaf0:	2100      	movs	r1, #0
 800aaf2:	2003      	movs	r0, #3
 800aaf4:	f001 fa00 	bl	800bef8 <UTIL_ADV_TRACE_COND_FSend>
  for (int32_t i = 0; i < PAYLOAD_LEN; i++)
 800aaf8:	2300      	movs	r3, #0
 800aafa:	617b      	str	r3, [r7, #20]
 800aafc:	e01d      	b.n	800ab3a <OnRxDone+0xca>
  {
    APP_LOG(TS_OFF, VLEVEL_H, "%02X", BufferRx[i]);
 800aafe:	4a1b      	ldr	r2, [pc, #108]	; (800ab6c <OnRxDone+0xfc>)
 800ab00:	697b      	ldr	r3, [r7, #20]
 800ab02:	4413      	add	r3, r2
 800ab04:	781b      	ldrb	r3, [r3, #0]
 800ab06:	9300      	str	r3, [sp, #0]
 800ab08:	4b1c      	ldr	r3, [pc, #112]	; (800ab7c <OnRxDone+0x10c>)
 800ab0a:	2200      	movs	r2, #0
 800ab0c:	2100      	movs	r1, #0
 800ab0e:	2003      	movs	r0, #3
 800ab10:	f001 f9f2 	bl	800bef8 <UTIL_ADV_TRACE_COND_FSend>
    if (i % 16 == 15)
 800ab14:	697b      	ldr	r3, [r7, #20]
 800ab16:	425a      	negs	r2, r3
 800ab18:	f003 030f 	and.w	r3, r3, #15
 800ab1c:	f002 020f 	and.w	r2, r2, #15
 800ab20:	bf58      	it	pl
 800ab22:	4253      	negpl	r3, r2
 800ab24:	2b0f      	cmp	r3, #15
 800ab26:	d105      	bne.n	800ab34 <OnRxDone+0xc4>
    {
      APP_LOG(TS_OFF, VLEVEL_H, "\n\r");
 800ab28:	4b15      	ldr	r3, [pc, #84]	; (800ab80 <OnRxDone+0x110>)
 800ab2a:	2200      	movs	r2, #0
 800ab2c:	2100      	movs	r1, #0
 800ab2e:	2003      	movs	r0, #3
 800ab30:	f001 f9e2 	bl	800bef8 <UTIL_ADV_TRACE_COND_FSend>
  for (int32_t i = 0; i < PAYLOAD_LEN; i++)
 800ab34:	697b      	ldr	r3, [r7, #20]
 800ab36:	3301      	adds	r3, #1
 800ab38:	617b      	str	r3, [r7, #20]
 800ab3a:	697b      	ldr	r3, [r7, #20]
 800ab3c:	2b3f      	cmp	r3, #63	; 0x3f
 800ab3e:	ddde      	ble.n	800aafe <OnRxDone+0x8e>
    }
  }
  APP_LOG(TS_OFF, VLEVEL_H, "\n\r");
 800ab40:	4b0f      	ldr	r3, [pc, #60]	; (800ab80 <OnRxDone+0x110>)
 800ab42:	2200      	movs	r2, #0
 800ab44:	2100      	movs	r1, #0
 800ab46:	2003      	movs	r0, #3
 800ab48:	f001 f9d6 	bl	800bef8 <UTIL_ADV_TRACE_COND_FSend>
  /* Run PingPong process in background*/
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process), CFG_SEQ_Prio_0);
 800ab4c:	2100      	movs	r1, #0
 800ab4e:	2001      	movs	r0, #1
 800ab50:	f000 feb4 	bl	800b8bc <UTIL_SEQ_SetTask>
  /* USER CODE END OnRxDone */
}
 800ab54:	bf00      	nop
 800ab56:	3718      	adds	r7, #24
 800ab58:	46bd      	mov	sp, r7
 800ab5a:	bd80      	pop	{r7, pc}
 800ab5c:	0800c60c 	.word	0x0800c60c
 800ab60:	0800c618 	.word	0x0800c618
 800ab64:	20000547 	.word	0x20000547
 800ab68:	20000340 	.word	0x20000340
 800ab6c:	20000344 	.word	0x20000344
 800ab70:	20000544 	.word	0x20000544
 800ab74:	20000546 	.word	0x20000546
 800ab78:	0800c63c 	.word	0x0800c63c
 800ab7c:	0800c650 	.word	0x0800c650
 800ab80:	0800c658 	.word	0x0800c658

0800ab84 <OnTxTimeout>:

static void OnTxTimeout(void)
{
 800ab84:	b580      	push	{r7, lr}
 800ab86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxTimeout */
  APP_LOG(TS_ON, VLEVEL_L, "OnTxTimeout\n\r");
 800ab88:	4b07      	ldr	r3, [pc, #28]	; (800aba8 <OnTxTimeout+0x24>)
 800ab8a:	2201      	movs	r2, #1
 800ab8c:	2100      	movs	r1, #0
 800ab8e:	2001      	movs	r0, #1
 800ab90:	f001 f9b2 	bl	800bef8 <UTIL_ADV_TRACE_COND_FSend>
  /* Update the State of the FSM*/
  State = TX_TIMEOUT;
 800ab94:	4b05      	ldr	r3, [pc, #20]	; (800abac <OnTxTimeout+0x28>)
 800ab96:	2204      	movs	r2, #4
 800ab98:	701a      	strb	r2, [r3, #0]
  /* Run PingPong process in background*/
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process), CFG_SEQ_Prio_0);
 800ab9a:	2100      	movs	r1, #0
 800ab9c:	2001      	movs	r0, #1
 800ab9e:	f000 fe8d 	bl	800b8bc <UTIL_SEQ_SetTask>
  /* USER CODE END OnTxTimeout */
}
 800aba2:	bf00      	nop
 800aba4:	bd80      	pop	{r7, pc}
 800aba6:	bf00      	nop
 800aba8:	0800c65c 	.word	0x0800c65c
 800abac:	20000340 	.word	0x20000340

0800abb0 <OnRxTimeout>:

static void OnRxTimeout(void)
{
 800abb0:	b580      	push	{r7, lr}
 800abb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxTimeout */
  APP_LOG(TS_ON, VLEVEL_L, "OnRxTimeout\n\r");
 800abb4:	4b07      	ldr	r3, [pc, #28]	; (800abd4 <OnRxTimeout+0x24>)
 800abb6:	2201      	movs	r2, #1
 800abb8:	2100      	movs	r1, #0
 800abba:	2001      	movs	r0, #1
 800abbc:	f001 f99c 	bl	800bef8 <UTIL_ADV_TRACE_COND_FSend>
  /* Update the State of the FSM*/
  State = RX_TIMEOUT;
 800abc0:	4b05      	ldr	r3, [pc, #20]	; (800abd8 <OnRxTimeout+0x28>)
 800abc2:	2201      	movs	r2, #1
 800abc4:	701a      	strb	r2, [r3, #0]
  /* Run PingPong process in background*/
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process), CFG_SEQ_Prio_0);
 800abc6:	2100      	movs	r1, #0
 800abc8:	2001      	movs	r0, #1
 800abca:	f000 fe77 	bl	800b8bc <UTIL_SEQ_SetTask>
  /* USER CODE END OnRxTimeout */
}
 800abce:	bf00      	nop
 800abd0:	bd80      	pop	{r7, pc}
 800abd2:	bf00      	nop
 800abd4:	0800c66c 	.word	0x0800c66c
 800abd8:	20000340 	.word	0x20000340

0800abdc <OnRxError>:

static void OnRxError(void)
{
 800abdc:	b580      	push	{r7, lr}
 800abde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxError */
  APP_LOG(TS_ON, VLEVEL_L, "OnRxError\n\r");
 800abe0:	4b07      	ldr	r3, [pc, #28]	; (800ac00 <OnRxError+0x24>)
 800abe2:	2201      	movs	r2, #1
 800abe4:	2100      	movs	r1, #0
 800abe6:	2001      	movs	r0, #1
 800abe8:	f001 f986 	bl	800bef8 <UTIL_ADV_TRACE_COND_FSend>
  /* Update the State of the FSM*/
  State = RX_ERROR;
 800abec:	4b05      	ldr	r3, [pc, #20]	; (800ac04 <OnRxError+0x28>)
 800abee:	2202      	movs	r2, #2
 800abf0:	701a      	strb	r2, [r3, #0]
  /* Run PingPong process in background*/
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process), CFG_SEQ_Prio_0);
 800abf2:	2100      	movs	r1, #0
 800abf4:	2001      	movs	r0, #1
 800abf6:	f000 fe61 	bl	800b8bc <UTIL_SEQ_SetTask>
  /* USER CODE END OnRxError */
}
 800abfa:	bf00      	nop
 800abfc:	bd80      	pop	{r7, pc}
 800abfe:	bf00      	nop
 800ac00:	0800c67c 	.word	0x0800c67c
 800ac04:	20000340 	.word	0x20000340

0800ac08 <PingPong_Process>:

/* USER CODE BEGIN PrFD */
static void PingPong_Process(void)
{
 800ac08:	b580      	push	{r7, lr}
 800ac0a:	af00      	add	r7, sp, #0
  Radio.Sleep();
 800ac0c:	4b85      	ldr	r3, [pc, #532]	; (800ae24 <PingPong_Process+0x21c>)
 800ac0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac10:	4798      	blx	r3

  switch (State)
 800ac12:	4b85      	ldr	r3, [pc, #532]	; (800ae28 <PingPong_Process+0x220>)
 800ac14:	781b      	ldrb	r3, [r3, #0]
 800ac16:	2b04      	cmp	r3, #4
 800ac18:	f200 80ff 	bhi.w	800ae1a <PingPong_Process+0x212>
 800ac1c:	a201      	add	r2, pc, #4	; (adr r2, 800ac24 <PingPong_Process+0x1c>)
 800ac1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac22:	bf00      	nop
 800ac24:	0800ac39 	.word	0x0800ac39
 800ac28:	0800adab 	.word	0x0800adab
 800ac2c:	0800adab 	.word	0x0800adab
 800ac30:	0800ad93 	.word	0x0800ad93
 800ac34:	0800ae03 	.word	0x0800ae03
  {
    case RX:

      if (isMaster == true)
 800ac38:	4b7c      	ldr	r3, [pc, #496]	; (800ae2c <PingPong_Process+0x224>)
 800ac3a:	781b      	ldrb	r3, [r3, #0]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d05f      	beq.n	800ad00 <PingPong_Process+0xf8>
      {
        if (RxBufferSize > 0)
 800ac40:	4b7b      	ldr	r3, [pc, #492]	; (800ae30 <PingPong_Process+0x228>)
 800ac42:	881b      	ldrh	r3, [r3, #0]
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	f000 80ea 	beq.w	800ae1e <PingPong_Process+0x216>
        {
          if (strncmp((const char *)BufferRx, PONG, sizeof(PONG) - 1) == 0)
 800ac4a:	2204      	movs	r2, #4
 800ac4c:	4979      	ldr	r1, [pc, #484]	; (800ae34 <PingPong_Process+0x22c>)
 800ac4e:	487a      	ldr	r0, [pc, #488]	; (800ae38 <PingPong_Process+0x230>)
 800ac50:	f001 fbd2 	bl	800c3f8 <strncmp>
 800ac54:	4603      	mov	r3, r0
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d12c      	bne.n	800acb4 <PingPong_Process+0xac>
          {
            UTIL_TIMER_Stop(&timerLed);
 800ac5a:	4878      	ldr	r0, [pc, #480]	; (800ae3c <PingPong_Process+0x234>)
 800ac5c:	f000 ff54 	bl	800bb08 <UTIL_TIMER_Stop>
            /* switch off green led */
            HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
 800ac60:	2200      	movs	r2, #0
 800ac62:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ac66:	4876      	ldr	r0, [pc, #472]	; (800ae40 <PingPong_Process+0x238>)
 800ac68:	f7f7 fd04 	bl	8002674 <HAL_GPIO_WritePin>
            /* master toggles red led */
            HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin); /* LED_RED */
 800ac6c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800ac70:	4873      	ldr	r0, [pc, #460]	; (800ae40 <PingPong_Process+0x238>)
 800ac72:	f7f7 fd16 	bl	80026a2 <HAL_GPIO_TogglePin>
            /* Add delay between RX and TX */
            HAL_Delay(Radio.GetWakeupTime() + RX_TIME_MARGIN);
 800ac76:	4b6b      	ldr	r3, [pc, #428]	; (800ae24 <PingPong_Process+0x21c>)
 800ac78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac7a:	4798      	blx	r3
 800ac7c:	4603      	mov	r3, r0
 800ac7e:	33c8      	adds	r3, #200	; 0xc8
 800ac80:	4618      	mov	r0, r3
 800ac82:	f7f5 ff41 	bl	8000b08 <HAL_Delay>
            /* master sends PING*/
            APP_LOG(TS_ON, VLEVEL_L, "..."
 800ac86:	4b6f      	ldr	r3, [pc, #444]	; (800ae44 <PingPong_Process+0x23c>)
 800ac88:	2201      	movs	r2, #1
 800ac8a:	2100      	movs	r1, #0
 800ac8c:	2001      	movs	r0, #1
 800ac8e:	f001 f933 	bl	800bef8 <UTIL_ADV_TRACE_COND_FSend>
                    "PING"
                    "\n\r");
            APP_LOG(TS_ON, VLEVEL_L, "Master Tx start\n\r");
 800ac92:	4b6d      	ldr	r3, [pc, #436]	; (800ae48 <PingPong_Process+0x240>)
 800ac94:	2201      	movs	r2, #1
 800ac96:	2100      	movs	r1, #0
 800ac98:	2001      	movs	r0, #1
 800ac9a:	f001 f92d 	bl	800bef8 <UTIL_ADV_TRACE_COND_FSend>
            memcpy(BufferTx, PING, sizeof(PING) - 1);
 800ac9e:	2204      	movs	r2, #4
 800aca0:	496a      	ldr	r1, [pc, #424]	; (800ae4c <PingPong_Process+0x244>)
 800aca2:	486b      	ldr	r0, [pc, #428]	; (800ae50 <PingPong_Process+0x248>)
 800aca4:	f001 fbde 	bl	800c464 <memcpy>
            Radio.Send(BufferTx, PAYLOAD_LEN);
 800aca8:	4b5e      	ldr	r3, [pc, #376]	; (800ae24 <PingPong_Process+0x21c>)
 800acaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acac:	2140      	movs	r1, #64	; 0x40
 800acae:	4868      	ldr	r0, [pc, #416]	; (800ae50 <PingPong_Process+0x248>)
 800acb0:	4798      	blx	r3
            APP_LOG(TS_ON, VLEVEL_L, "Master Rx start\n\r");
            Radio.Rx(RX_TIMEOUT_VALUE);
          }
        }
      }
      break;
 800acb2:	e0b4      	b.n	800ae1e <PingPong_Process+0x216>
          else if (strncmp((const char *)BufferRx, PING, sizeof(PING) - 1) == 0)
 800acb4:	2204      	movs	r2, #4
 800acb6:	4965      	ldr	r1, [pc, #404]	; (800ae4c <PingPong_Process+0x244>)
 800acb8:	485f      	ldr	r0, [pc, #380]	; (800ae38 <PingPong_Process+0x230>)
 800acba:	f001 fb9d 	bl	800c3f8 <strncmp>
 800acbe:	4603      	mov	r3, r0
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d10e      	bne.n	800ace2 <PingPong_Process+0xda>
            isMaster = false;
 800acc4:	4b59      	ldr	r3, [pc, #356]	; (800ae2c <PingPong_Process+0x224>)
 800acc6:	2200      	movs	r2, #0
 800acc8:	701a      	strb	r2, [r3, #0]
            APP_LOG(TS_ON, VLEVEL_L, "Slave Rx start\n\r");
 800acca:	4b62      	ldr	r3, [pc, #392]	; (800ae54 <PingPong_Process+0x24c>)
 800accc:	2201      	movs	r2, #1
 800acce:	2100      	movs	r1, #0
 800acd0:	2001      	movs	r0, #1
 800acd2:	f001 f911 	bl	800bef8 <UTIL_ADV_TRACE_COND_FSend>
            Radio.Rx(RX_TIMEOUT_VALUE);
 800acd6:	4b53      	ldr	r3, [pc, #332]	; (800ae24 <PingPong_Process+0x21c>)
 800acd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800acda:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800acde:	4798      	blx	r3
      break;
 800ace0:	e09d      	b.n	800ae1e <PingPong_Process+0x216>
            isMaster = true;
 800ace2:	4b52      	ldr	r3, [pc, #328]	; (800ae2c <PingPong_Process+0x224>)
 800ace4:	2201      	movs	r2, #1
 800ace6:	701a      	strb	r2, [r3, #0]
            APP_LOG(TS_ON, VLEVEL_L, "Master Rx start\n\r");
 800ace8:	4b5b      	ldr	r3, [pc, #364]	; (800ae58 <PingPong_Process+0x250>)
 800acea:	2201      	movs	r2, #1
 800acec:	2100      	movs	r1, #0
 800acee:	2001      	movs	r0, #1
 800acf0:	f001 f902 	bl	800bef8 <UTIL_ADV_TRACE_COND_FSend>
            Radio.Rx(RX_TIMEOUT_VALUE);
 800acf4:	4b4b      	ldr	r3, [pc, #300]	; (800ae24 <PingPong_Process+0x21c>)
 800acf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800acf8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800acfc:	4798      	blx	r3
      break;
 800acfe:	e08e      	b.n	800ae1e <PingPong_Process+0x216>
        if (RxBufferSize > 0)
 800ad00:	4b4b      	ldr	r3, [pc, #300]	; (800ae30 <PingPong_Process+0x228>)
 800ad02:	881b      	ldrh	r3, [r3, #0]
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	f000 808a 	beq.w	800ae1e <PingPong_Process+0x216>
          if (strncmp((const char *)BufferRx, PING, sizeof(PING) - 1) == 0)
 800ad0a:	2204      	movs	r2, #4
 800ad0c:	494f      	ldr	r1, [pc, #316]	; (800ae4c <PingPong_Process+0x244>)
 800ad0e:	484a      	ldr	r0, [pc, #296]	; (800ae38 <PingPong_Process+0x230>)
 800ad10:	f001 fb72 	bl	800c3f8 <strncmp>
 800ad14:	4603      	mov	r3, r0
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d12c      	bne.n	800ad74 <PingPong_Process+0x16c>
            UTIL_TIMER_Stop(&timerLed);
 800ad1a:	4848      	ldr	r0, [pc, #288]	; (800ae3c <PingPong_Process+0x234>)
 800ad1c:	f000 fef4 	bl	800bb08 <UTIL_TIMER_Stop>
            HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
 800ad20:	2200      	movs	r2, #0
 800ad22:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800ad26:	4846      	ldr	r0, [pc, #280]	; (800ae40 <PingPong_Process+0x238>)
 800ad28:	f7f7 fca4 	bl	8002674 <HAL_GPIO_WritePin>
            HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin); /* LED_GREEN */
 800ad2c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ad30:	4843      	ldr	r0, [pc, #268]	; (800ae40 <PingPong_Process+0x238>)
 800ad32:	f7f7 fcb6 	bl	80026a2 <HAL_GPIO_TogglePin>
            HAL_Delay(Radio.GetWakeupTime() + RX_TIME_MARGIN);
 800ad36:	4b3b      	ldr	r3, [pc, #236]	; (800ae24 <PingPong_Process+0x21c>)
 800ad38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ad3a:	4798      	blx	r3
 800ad3c:	4603      	mov	r3, r0
 800ad3e:	33c8      	adds	r3, #200	; 0xc8
 800ad40:	4618      	mov	r0, r3
 800ad42:	f7f5 fee1 	bl	8000b08 <HAL_Delay>
            APP_LOG(TS_ON, VLEVEL_L, "..."
 800ad46:	4b45      	ldr	r3, [pc, #276]	; (800ae5c <PingPong_Process+0x254>)
 800ad48:	2201      	movs	r2, #1
 800ad4a:	2100      	movs	r1, #0
 800ad4c:	2001      	movs	r0, #1
 800ad4e:	f001 f8d3 	bl	800bef8 <UTIL_ADV_TRACE_COND_FSend>
            APP_LOG(TS_ON, VLEVEL_L, "Slave  Tx start\n\r");
 800ad52:	4b43      	ldr	r3, [pc, #268]	; (800ae60 <PingPong_Process+0x258>)
 800ad54:	2201      	movs	r2, #1
 800ad56:	2100      	movs	r1, #0
 800ad58:	2001      	movs	r0, #1
 800ad5a:	f001 f8cd 	bl	800bef8 <UTIL_ADV_TRACE_COND_FSend>
            memcpy(BufferTx, PONG, sizeof(PONG) - 1);
 800ad5e:	2204      	movs	r2, #4
 800ad60:	4934      	ldr	r1, [pc, #208]	; (800ae34 <PingPong_Process+0x22c>)
 800ad62:	483b      	ldr	r0, [pc, #236]	; (800ae50 <PingPong_Process+0x248>)
 800ad64:	f001 fb7e 	bl	800c464 <memcpy>
            Radio.Send(BufferTx, PAYLOAD_LEN);
 800ad68:	4b2e      	ldr	r3, [pc, #184]	; (800ae24 <PingPong_Process+0x21c>)
 800ad6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad6c:	2140      	movs	r1, #64	; 0x40
 800ad6e:	4838      	ldr	r0, [pc, #224]	; (800ae50 <PingPong_Process+0x248>)
 800ad70:	4798      	blx	r3
      break;
 800ad72:	e054      	b.n	800ae1e <PingPong_Process+0x216>
            isMaster = true;
 800ad74:	4b2d      	ldr	r3, [pc, #180]	; (800ae2c <PingPong_Process+0x224>)
 800ad76:	2201      	movs	r2, #1
 800ad78:	701a      	strb	r2, [r3, #0]
            APP_LOG(TS_ON, VLEVEL_L, "Master Rx start\n\r");
 800ad7a:	4b37      	ldr	r3, [pc, #220]	; (800ae58 <PingPong_Process+0x250>)
 800ad7c:	2201      	movs	r2, #1
 800ad7e:	2100      	movs	r1, #0
 800ad80:	2001      	movs	r0, #1
 800ad82:	f001 f8b9 	bl	800bef8 <UTIL_ADV_TRACE_COND_FSend>
            Radio.Rx(RX_TIMEOUT_VALUE);
 800ad86:	4b27      	ldr	r3, [pc, #156]	; (800ae24 <PingPong_Process+0x21c>)
 800ad88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad8a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800ad8e:	4798      	blx	r3
      break;
 800ad90:	e045      	b.n	800ae1e <PingPong_Process+0x216>
    case TX:
      APP_LOG(TS_ON, VLEVEL_L, "Rx start\n\r");
 800ad92:	4b34      	ldr	r3, [pc, #208]	; (800ae64 <PingPong_Process+0x25c>)
 800ad94:	2201      	movs	r2, #1
 800ad96:	2100      	movs	r1, #0
 800ad98:	2001      	movs	r0, #1
 800ad9a:	f001 f8ad 	bl	800bef8 <UTIL_ADV_TRACE_COND_FSend>
      Radio.Rx(RX_TIMEOUT_VALUE);
 800ad9e:	4b21      	ldr	r3, [pc, #132]	; (800ae24 <PingPong_Process+0x21c>)
 800ada0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ada2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800ada6:	4798      	blx	r3
      break;
 800ada8:	e03a      	b.n	800ae20 <PingPong_Process+0x218>
    case RX_TIMEOUT:
    case RX_ERROR:
      if (isMaster == true)
 800adaa:	4b20      	ldr	r3, [pc, #128]	; (800ae2c <PingPong_Process+0x224>)
 800adac:	781b      	ldrb	r3, [r3, #0]
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d01b      	beq.n	800adea <PingPong_Process+0x1e2>
      {
        /* Send the next PING frame */
        /* Add delay between RX and TX*/
        /* add random_delay to force sync between boards after some trials*/
        HAL_Delay(Radio.GetWakeupTime() + RX_TIME_MARGIN + random_delay);
 800adb2:	4b1c      	ldr	r3, [pc, #112]	; (800ae24 <PingPong_Process+0x21c>)
 800adb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800adb6:	4798      	blx	r3
 800adb8:	4603      	mov	r3, r0
 800adba:	4a2b      	ldr	r2, [pc, #172]	; (800ae68 <PingPong_Process+0x260>)
 800adbc:	6812      	ldr	r2, [r2, #0]
 800adbe:	4413      	add	r3, r2
 800adc0:	33c8      	adds	r3, #200	; 0xc8
 800adc2:	4618      	mov	r0, r3
 800adc4:	f7f5 fea0 	bl	8000b08 <HAL_Delay>
        APP_LOG(TS_ON, VLEVEL_L, "Master Tx start\n\r");
 800adc8:	4b1f      	ldr	r3, [pc, #124]	; (800ae48 <PingPong_Process+0x240>)
 800adca:	2201      	movs	r2, #1
 800adcc:	2100      	movs	r1, #0
 800adce:	2001      	movs	r0, #1
 800add0:	f001 f892 	bl	800bef8 <UTIL_ADV_TRACE_COND_FSend>
        /* master sends PING*/
        memcpy(BufferTx, PING, sizeof(PING) - 1);
 800add4:	2204      	movs	r2, #4
 800add6:	491d      	ldr	r1, [pc, #116]	; (800ae4c <PingPong_Process+0x244>)
 800add8:	481d      	ldr	r0, [pc, #116]	; (800ae50 <PingPong_Process+0x248>)
 800adda:	f001 fb43 	bl	800c464 <memcpy>
        Radio.Send(BufferTx, PAYLOAD_LEN);
 800adde:	4b11      	ldr	r3, [pc, #68]	; (800ae24 <PingPong_Process+0x21c>)
 800ade0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ade2:	2140      	movs	r1, #64	; 0x40
 800ade4:	481a      	ldr	r0, [pc, #104]	; (800ae50 <PingPong_Process+0x248>)
 800ade6:	4798      	blx	r3
      else
      {
        APP_LOG(TS_ON, VLEVEL_L, "Slave Rx start\n\r");
        Radio.Rx(RX_TIMEOUT_VALUE);
      }
      break;
 800ade8:	e01a      	b.n	800ae20 <PingPong_Process+0x218>
        APP_LOG(TS_ON, VLEVEL_L, "Slave Rx start\n\r");
 800adea:	4b1a      	ldr	r3, [pc, #104]	; (800ae54 <PingPong_Process+0x24c>)
 800adec:	2201      	movs	r2, #1
 800adee:	2100      	movs	r1, #0
 800adf0:	2001      	movs	r0, #1
 800adf2:	f001 f881 	bl	800bef8 <UTIL_ADV_TRACE_COND_FSend>
        Radio.Rx(RX_TIMEOUT_VALUE);
 800adf6:	4b0b      	ldr	r3, [pc, #44]	; (800ae24 <PingPong_Process+0x21c>)
 800adf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800adfa:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800adfe:	4798      	blx	r3
      break;
 800ae00:	e00e      	b.n	800ae20 <PingPong_Process+0x218>
    case TX_TIMEOUT:
      APP_LOG(TS_ON, VLEVEL_L, "Slave Rx start\n\r");
 800ae02:	4b14      	ldr	r3, [pc, #80]	; (800ae54 <PingPong_Process+0x24c>)
 800ae04:	2201      	movs	r2, #1
 800ae06:	2100      	movs	r1, #0
 800ae08:	2001      	movs	r0, #1
 800ae0a:	f001 f875 	bl	800bef8 <UTIL_ADV_TRACE_COND_FSend>
      Radio.Rx(RX_TIMEOUT_VALUE);
 800ae0e:	4b05      	ldr	r3, [pc, #20]	; (800ae24 <PingPong_Process+0x21c>)
 800ae10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae12:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800ae16:	4798      	blx	r3
      break;
 800ae18:	e002      	b.n	800ae20 <PingPong_Process+0x218>
    default:
      break;
 800ae1a:	bf00      	nop
 800ae1c:	e000      	b.n	800ae20 <PingPong_Process+0x218>
      break;
 800ae1e:	bf00      	nop
  }
}
 800ae20:	bf00      	nop
 800ae22:	bd80      	pop	{r7, pc}
 800ae24:	0800c894 	.word	0x0800c894
 800ae28:	20000340 	.word	0x20000340
 800ae2c:	20000009 	.word	0x20000009
 800ae30:	20000544 	.word	0x20000544
 800ae34:	0800c688 	.word	0x0800c688
 800ae38:	20000344 	.word	0x20000344
 800ae3c:	20000548 	.word	0x20000548
 800ae40:	48000400 	.word	0x48000400
 800ae44:	0800c690 	.word	0x0800c690
 800ae48:	0800c69c 	.word	0x0800c69c
 800ae4c:	0800c6b0 	.word	0x0800c6b0
 800ae50:	20000444 	.word	0x20000444
 800ae54:	0800c6b8 	.word	0x0800c6b8
 800ae58:	0800c6cc 	.word	0x0800c6cc
 800ae5c:	0800c6e0 	.word	0x0800c6e0
 800ae60:	0800c6ec 	.word	0x0800c6ec
 800ae64:	0800c700 	.word	0x0800c700
 800ae68:	20000560 	.word	0x20000560

0800ae6c <OnledEvent>:

static void OnledEvent(void *context)
{
 800ae6c:	b580      	push	{r7, lr}
 800ae6e:	b082      	sub	sp, #8
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	6078      	str	r0, [r7, #4]
  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin); /* LED_GREEN */
 800ae74:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ae78:	4807      	ldr	r0, [pc, #28]	; (800ae98 <OnledEvent+0x2c>)
 800ae7a:	f7f7 fc12 	bl	80026a2 <HAL_GPIO_TogglePin>
  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin); /* LED_RED */
 800ae7e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800ae82:	4805      	ldr	r0, [pc, #20]	; (800ae98 <OnledEvent+0x2c>)
 800ae84:	f7f7 fc0d 	bl	80026a2 <HAL_GPIO_TogglePin>
  UTIL_TIMER_Start(&timerLed);
 800ae88:	4804      	ldr	r0, [pc, #16]	; (800ae9c <OnledEvent+0x30>)
 800ae8a:	f000 fdcf 	bl	800ba2c <UTIL_TIMER_Start>
}
 800ae8e:	bf00      	nop
 800ae90:	3708      	adds	r7, #8
 800ae92:	46bd      	mov	sp, r7
 800ae94:	bd80      	pop	{r7, pc}
 800ae96:	bf00      	nop
 800ae98:	48000400 	.word	0x48000400
 800ae9c:	20000548 	.word	0x20000548

0800aea0 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800aea0:	b580      	push	{r7, lr}
 800aea2:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 800aea4:	f7f6 fb56 	bl	8001554 <BSP_RADIO_Init>
 800aea8:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800aeaa:	4618      	mov	r0, r3
 800aeac:	bd80      	pop	{r7, pc}

0800aeae <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800aeae:	b580      	push	{r7, lr}
 800aeb0:	b082      	sub	sp, #8
 800aeb2:	af00      	add	r7, sp, #0
 800aeb4:	4603      	mov	r3, r0
 800aeb6:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 800aeb8:	79fb      	ldrb	r3, [r7, #7]
 800aeba:	4618      	mov	r0, r3
 800aebc:	f7f6 fb88 	bl	80015d0 <BSP_RADIO_ConfigRFSwitch>
 800aec0:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800aec2:	4618      	mov	r0, r3
 800aec4:	3708      	adds	r7, #8
 800aec6:	46bd      	mov	sp, r7
 800aec8:	bd80      	pop	{r7, pc}

0800aeca <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800aeca:	b580      	push	{r7, lr}
 800aecc:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 800aece:	f7f6 fbdb 	bl	8001688 <BSP_RADIO_GetTxConfig>
 800aed2:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800aed4:	4618      	mov	r0, r3
 800aed6:	bd80      	pop	{r7, pc}

0800aed8 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 800aed8:	b580      	push	{r7, lr}
 800aeda:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 800aedc:	f7f6 fbdb 	bl	8001696 <BSP_RADIO_IsTCXO>
 800aee0:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800aee2:	4618      	mov	r0, r3
 800aee4:	bd80      	pop	{r7, pc}

0800aee6 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800aee6:	b580      	push	{r7, lr}
 800aee8:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 800aeea:	f7f6 fbdb 	bl	80016a4 <BSP_RADIO_IsDCDC>
 800aeee:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800aef0:	4618      	mov	r0, r3
 800aef2:	bd80      	pop	{r7, pc}

0800aef4 <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 800aef4:	b580      	push	{r7, lr}
 800aef6:	b082      	sub	sp, #8
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	4603      	mov	r3, r0
 800aefc:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 800aefe:	79fb      	ldrb	r3, [r7, #7]
 800af00:	4618      	mov	r0, r3
 800af02:	f7f6 fbd6 	bl	80016b2 <BSP_RADIO_GetRFOMaxPowerConfig>
 800af06:	4603      	mov	r3, r0
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 800af08:	4618      	mov	r0, r3
 800af0a:	3708      	adds	r7, #8
 800af0c:	46bd      	mov	sp, r7
 800af0e:	bd80      	pop	{r7, pc}

0800af10 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800af10:	b480      	push	{r7}
 800af12:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800af14:	4b04      	ldr	r3, [pc, #16]	; (800af28 <UTIL_LPM_Init+0x18>)
 800af16:	2200      	movs	r2, #0
 800af18:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800af1a:	4b04      	ldr	r3, [pc, #16]	; (800af2c <UTIL_LPM_Init+0x1c>)
 800af1c:	2200      	movs	r2, #0
 800af1e:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800af20:	bf00      	nop
 800af22:	46bd      	mov	sp, r7
 800af24:	bc80      	pop	{r7}
 800af26:	4770      	bx	lr
 800af28:	20000564 	.word	0x20000564
 800af2c:	20000568 	.word	0x20000568

0800af30 <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800af30:	b480      	push	{r7}
 800af32:	b087      	sub	sp, #28
 800af34:	af00      	add	r7, sp, #0
 800af36:	6078      	str	r0, [r7, #4]
 800af38:	460b      	mov	r3, r1
 800af3a:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800af3c:	f3ef 8310 	mrs	r3, PRIMASK
 800af40:	613b      	str	r3, [r7, #16]
  return(result);
 800af42:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800af44:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800af46:	b672      	cpsid	i
}
 800af48:	bf00      	nop
  
  switch( state )
 800af4a:	78fb      	ldrb	r3, [r7, #3]
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d008      	beq.n	800af62 <UTIL_LPM_SetStopMode+0x32>
 800af50:	2b01      	cmp	r3, #1
 800af52:	d10e      	bne.n	800af72 <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 800af54:	4b0d      	ldr	r3, [pc, #52]	; (800af8c <UTIL_LPM_SetStopMode+0x5c>)
 800af56:	681a      	ldr	r2, [r3, #0]
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	4313      	orrs	r3, r2
 800af5c:	4a0b      	ldr	r2, [pc, #44]	; (800af8c <UTIL_LPM_SetStopMode+0x5c>)
 800af5e:	6013      	str	r3, [r2, #0]
      break;
 800af60:	e008      	b.n	800af74 <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	43da      	mvns	r2, r3
 800af66:	4b09      	ldr	r3, [pc, #36]	; (800af8c <UTIL_LPM_SetStopMode+0x5c>)
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	4013      	ands	r3, r2
 800af6c:	4a07      	ldr	r2, [pc, #28]	; (800af8c <UTIL_LPM_SetStopMode+0x5c>)
 800af6e:	6013      	str	r3, [r2, #0]
      break;
 800af70:	e000      	b.n	800af74 <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 800af72:	bf00      	nop
 800af74:	697b      	ldr	r3, [r7, #20]
 800af76:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	f383 8810 	msr	PRIMASK, r3
}
 800af7e:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800af80:	bf00      	nop
 800af82:	371c      	adds	r7, #28
 800af84:	46bd      	mov	sp, r7
 800af86:	bc80      	pop	{r7}
 800af88:	4770      	bx	lr
 800af8a:	bf00      	nop
 800af8c:	20000564 	.word	0x20000564

0800af90 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800af90:	b480      	push	{r7}
 800af92:	b087      	sub	sp, #28
 800af94:	af00      	add	r7, sp, #0
 800af96:	6078      	str	r0, [r7, #4]
 800af98:	460b      	mov	r3, r1
 800af9a:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800af9c:	f3ef 8310 	mrs	r3, PRIMASK
 800afa0:	613b      	str	r3, [r7, #16]
  return(result);
 800afa2:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800afa4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800afa6:	b672      	cpsid	i
}
 800afa8:	bf00      	nop
  
  switch(state)
 800afaa:	78fb      	ldrb	r3, [r7, #3]
 800afac:	2b00      	cmp	r3, #0
 800afae:	d008      	beq.n	800afc2 <UTIL_LPM_SetOffMode+0x32>
 800afb0:	2b01      	cmp	r3, #1
 800afb2:	d10e      	bne.n	800afd2 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800afb4:	4b0d      	ldr	r3, [pc, #52]	; (800afec <UTIL_LPM_SetOffMode+0x5c>)
 800afb6:	681a      	ldr	r2, [r3, #0]
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	4313      	orrs	r3, r2
 800afbc:	4a0b      	ldr	r2, [pc, #44]	; (800afec <UTIL_LPM_SetOffMode+0x5c>)
 800afbe:	6013      	str	r3, [r2, #0]
      break;
 800afc0:	e008      	b.n	800afd4 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	43da      	mvns	r2, r3
 800afc6:	4b09      	ldr	r3, [pc, #36]	; (800afec <UTIL_LPM_SetOffMode+0x5c>)
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	4013      	ands	r3, r2
 800afcc:	4a07      	ldr	r2, [pc, #28]	; (800afec <UTIL_LPM_SetOffMode+0x5c>)
 800afce:	6013      	str	r3, [r2, #0]
      break;
 800afd0:	e000      	b.n	800afd4 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800afd2:	bf00      	nop
 800afd4:	697b      	ldr	r3, [r7, #20]
 800afd6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	f383 8810 	msr	PRIMASK, r3
}
 800afde:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800afe0:	bf00      	nop
 800afe2:	371c      	adds	r7, #28
 800afe4:	46bd      	mov	sp, r7
 800afe6:	bc80      	pop	{r7}
 800afe8:	4770      	bx	lr
 800afea:	bf00      	nop
 800afec:	20000568 	.word	0x20000568

0800aff0 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 800aff0:	b580      	push	{r7, lr}
 800aff2:	b084      	sub	sp, #16
 800aff4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aff6:	f3ef 8310 	mrs	r3, PRIMASK
 800affa:	60bb      	str	r3, [r7, #8]
  return(result);
 800affc:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 800affe:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800b000:	b672      	cpsid	i
}
 800b002:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 800b004:	4b12      	ldr	r3, [pc, #72]	; (800b050 <UTIL_LPM_EnterLowPower+0x60>)
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d006      	beq.n	800b01a <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 800b00c:	4b11      	ldr	r3, [pc, #68]	; (800b054 <UTIL_LPM_EnterLowPower+0x64>)
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 800b012:	4b10      	ldr	r3, [pc, #64]	; (800b054 <UTIL_LPM_EnterLowPower+0x64>)
 800b014:	685b      	ldr	r3, [r3, #4]
 800b016:	4798      	blx	r3
 800b018:	e010      	b.n	800b03c <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 800b01a:	4b0f      	ldr	r3, [pc, #60]	; (800b058 <UTIL_LPM_EnterLowPower+0x68>)
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d006      	beq.n	800b030 <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 800b022:	4b0c      	ldr	r3, [pc, #48]	; (800b054 <UTIL_LPM_EnterLowPower+0x64>)
 800b024:	689b      	ldr	r3, [r3, #8]
 800b026:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 800b028:	4b0a      	ldr	r3, [pc, #40]	; (800b054 <UTIL_LPM_EnterLowPower+0x64>)
 800b02a:	68db      	ldr	r3, [r3, #12]
 800b02c:	4798      	blx	r3
 800b02e:	e005      	b.n	800b03c <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 800b030:	4b08      	ldr	r3, [pc, #32]	; (800b054 <UTIL_LPM_EnterLowPower+0x64>)
 800b032:	691b      	ldr	r3, [r3, #16]
 800b034:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 800b036:	4b07      	ldr	r3, [pc, #28]	; (800b054 <UTIL_LPM_EnterLowPower+0x64>)
 800b038:	695b      	ldr	r3, [r3, #20]
 800b03a:	4798      	blx	r3
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	f383 8810 	msr	PRIMASK, r3
}
 800b046:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 800b048:	bf00      	nop
 800b04a:	3710      	adds	r7, #16
 800b04c:	46bd      	mov	sp, r7
 800b04e:	bd80      	pop	{r7, pc}
 800b050:	20000564 	.word	0x20000564
 800b054:	0800c764 	.word	0x0800c764
 800b058:	20000568 	.word	0x20000568

0800b05c <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 800b05c:	b480      	push	{r7}
 800b05e:	b087      	sub	sp, #28
 800b060:	af00      	add	r7, sp, #0
 800b062:	60f8      	str	r0, [r7, #12]
 800b064:	60b9      	str	r1, [r7, #8]
 800b066:	4613      	mov	r3, r2
 800b068:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 800b06e:	68bb      	ldr	r3, [r7, #8]
 800b070:	613b      	str	r3, [r7, #16]

  while( size-- )
 800b072:	e007      	b.n	800b084 <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 800b074:	693a      	ldr	r2, [r7, #16]
 800b076:	1c53      	adds	r3, r2, #1
 800b078:	613b      	str	r3, [r7, #16]
 800b07a:	697b      	ldr	r3, [r7, #20]
 800b07c:	1c59      	adds	r1, r3, #1
 800b07e:	6179      	str	r1, [r7, #20]
 800b080:	7812      	ldrb	r2, [r2, #0]
 800b082:	701a      	strb	r2, [r3, #0]
  while( size-- )
 800b084:	88fb      	ldrh	r3, [r7, #6]
 800b086:	1e5a      	subs	r2, r3, #1
 800b088:	80fa      	strh	r2, [r7, #6]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d1f2      	bne.n	800b074 <UTIL_MEM_cpy_8+0x18>
    }
}
 800b08e:	bf00      	nop
 800b090:	bf00      	nop
 800b092:	371c      	adds	r7, #28
 800b094:	46bd      	mov	sp, r7
 800b096:	bc80      	pop	{r7}
 800b098:	4770      	bx	lr

0800b09a <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 800b09a:	b480      	push	{r7}
 800b09c:	b085      	sub	sp, #20
 800b09e:	af00      	add	r7, sp, #0
 800b0a0:	6078      	str	r0, [r7, #4]
 800b0a2:	460b      	mov	r3, r1
 800b0a4:	70fb      	strb	r3, [r7, #3]
 800b0a6:	4613      	mov	r3, r2
 800b0a8:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	60fb      	str	r3, [r7, #12]
  while( size-- )
 800b0ae:	e004      	b.n	800b0ba <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	1c5a      	adds	r2, r3, #1
 800b0b4:	60fa      	str	r2, [r7, #12]
 800b0b6:	78fa      	ldrb	r2, [r7, #3]
 800b0b8:	701a      	strb	r2, [r3, #0]
  while( size-- )
 800b0ba:	883b      	ldrh	r3, [r7, #0]
 800b0bc:	1e5a      	subs	r2, r3, #1
 800b0be:	803a      	strh	r2, [r7, #0]
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d1f5      	bne.n	800b0b0 <UTIL_MEM_set_8+0x16>
  }
}
 800b0c4:	bf00      	nop
 800b0c6:	bf00      	nop
 800b0c8:	3714      	adds	r7, #20
 800b0ca:	46bd      	mov	sp, r7
 800b0cc:	bc80      	pop	{r7}
 800b0ce:	4770      	bx	lr

0800b0d0 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 800b0d0:	b082      	sub	sp, #8
 800b0d2:	b480      	push	{r7}
 800b0d4:	b087      	sub	sp, #28
 800b0d6:	af00      	add	r7, sp, #0
 800b0d8:	60f8      	str	r0, [r7, #12]
 800b0da:	1d38      	adds	r0, r7, #4
 800b0dc:	e880 0006 	stmia.w	r0, {r1, r2}
 800b0e0:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 800b0e2:	2300      	movs	r3, #0
 800b0e4:	613b      	str	r3, [r7, #16]
 800b0e6:	2300      	movs	r3, #0
 800b0e8:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds + b.Seconds;
 800b0ea:	687a      	ldr	r2, [r7, #4]
 800b0ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0ee:	4413      	add	r3, r2
 800b0f0:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 800b0f2:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800b0f6:	b29a      	uxth	r2, r3
 800b0f8:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800b0fc:	b29b      	uxth	r3, r3
 800b0fe:	4413      	add	r3, r2
 800b100:	b29b      	uxth	r3, r3
 800b102:	b21b      	sxth	r3, r3
 800b104:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds >= 1000 )
 800b106:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800b10a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b10e:	db0a      	blt.n	800b126 <SysTimeAdd+0x56>
  {
    c.Seconds++;
 800b110:	693b      	ldr	r3, [r7, #16]
 800b112:	3301      	adds	r3, #1
 800b114:	613b      	str	r3, [r7, #16]
    c.SubSeconds -= 1000;
 800b116:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800b11a:	b29b      	uxth	r3, r3
 800b11c:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800b120:	b29b      	uxth	r3, r3
 800b122:	b21b      	sxth	r3, r3
 800b124:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	461a      	mov	r2, r3
 800b12a:	f107 0310 	add.w	r3, r7, #16
 800b12e:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b132:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800b136:	68f8      	ldr	r0, [r7, #12]
 800b138:	371c      	adds	r7, #28
 800b13a:	46bd      	mov	sp, r7
 800b13c:	bc80      	pop	{r7}
 800b13e:	b002      	add	sp, #8
 800b140:	4770      	bx	lr
	...

0800b144 <SysTimeGet>:
  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
}

SysTime_t SysTimeGet( void )
{
 800b144:	b580      	push	{r7, lr}
 800b146:	b08a      	sub	sp, #40	; 0x28
 800b148:	af02      	add	r7, sp, #8
 800b14a:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800b14c:	2300      	movs	r3, #0
 800b14e:	61bb      	str	r3, [r7, #24]
 800b150:	2300      	movs	r3, #0
 800b152:	83bb      	strh	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 800b154:	2300      	movs	r3, #0
 800b156:	613b      	str	r3, [r7, #16]
 800b158:	2300      	movs	r3, #0
 800b15a:	82bb      	strh	r3, [r7, #20]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800b15c:	4b14      	ldr	r3, [pc, #80]	; (800b1b0 <SysTimeGet+0x6c>)
 800b15e:	691b      	ldr	r3, [r3, #16]
 800b160:	f107 0218 	add.w	r2, r7, #24
 800b164:	3204      	adds	r2, #4
 800b166:	4610      	mov	r0, r2
 800b168:	4798      	blx	r3
 800b16a:	4603      	mov	r3, r0
 800b16c:	61bb      	str	r3, [r7, #24]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 800b16e:	4b10      	ldr	r3, [pc, #64]	; (800b1b0 <SysTimeGet+0x6c>)
 800b170:	68db      	ldr	r3, [r3, #12]
 800b172:	4798      	blx	r3
 800b174:	4603      	mov	r3, r0
 800b176:	b21b      	sxth	r3, r3
 800b178:	81bb      	strh	r3, [r7, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 800b17a:	4b0d      	ldr	r3, [pc, #52]	; (800b1b0 <SysTimeGet+0x6c>)
 800b17c:	685b      	ldr	r3, [r3, #4]
 800b17e:	4798      	blx	r3
 800b180:	4603      	mov	r3, r0
 800b182:	60bb      	str	r3, [r7, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 800b184:	f107 0010 	add.w	r0, r7, #16
 800b188:	69fb      	ldr	r3, [r7, #28]
 800b18a:	9300      	str	r3, [sp, #0]
 800b18c:	69bb      	ldr	r3, [r7, #24]
 800b18e:	f107 0208 	add.w	r2, r7, #8
 800b192:	ca06      	ldmia	r2, {r1, r2}
 800b194:	f7ff ff9c 	bl	800b0d0 <SysTimeAdd>

  return sysTime;
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	461a      	mov	r2, r3
 800b19c:	f107 0310 	add.w	r3, r7, #16
 800b1a0:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b1a4:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800b1a8:	6878      	ldr	r0, [r7, #4]
 800b1aa:	3720      	adds	r7, #32
 800b1ac:	46bd      	mov	sp, r7
 800b1ae:	bd80      	pop	{r7, pc}
 800b1b0:	0800c848 	.word	0x0800c848

0800b1b4 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 800b1b4:	b480      	push	{r7}
 800b1b6:	b085      	sub	sp, #20
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]
  int i = 0;
 800b1bc:	2300      	movs	r3, #0
 800b1be:	60fb      	str	r3, [r7, #12]
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 800b1c0:	e00e      	b.n	800b1e0 <ee_skip_atoi+0x2c>
 800b1c2:	68fa      	ldr	r2, [r7, #12]
 800b1c4:	4613      	mov	r3, r2
 800b1c6:	009b      	lsls	r3, r3, #2
 800b1c8:	4413      	add	r3, r2
 800b1ca:	005b      	lsls	r3, r3, #1
 800b1cc:	4618      	mov	r0, r3
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	1c59      	adds	r1, r3, #1
 800b1d4:	687a      	ldr	r2, [r7, #4]
 800b1d6:	6011      	str	r1, [r2, #0]
 800b1d8:	781b      	ldrb	r3, [r3, #0]
 800b1da:	4403      	add	r3, r0
 800b1dc:	3b30      	subs	r3, #48	; 0x30
 800b1de:	60fb      	str	r3, [r7, #12]
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	781b      	ldrb	r3, [r3, #0]
 800b1e6:	2b2f      	cmp	r3, #47	; 0x2f
 800b1e8:	d904      	bls.n	800b1f4 <ee_skip_atoi+0x40>
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	781b      	ldrb	r3, [r3, #0]
 800b1f0:	2b39      	cmp	r3, #57	; 0x39
 800b1f2:	d9e6      	bls.n	800b1c2 <ee_skip_atoi+0xe>
  return i;
 800b1f4:	68fb      	ldr	r3, [r7, #12]
}
 800b1f6:	4618      	mov	r0, r3
 800b1f8:	3714      	adds	r7, #20
 800b1fa:	46bd      	mov	sp, r7
 800b1fc:	bc80      	pop	{r7}
 800b1fe:	4770      	bx	lr

0800b200 <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 800b200:	b480      	push	{r7}
 800b202:	b099      	sub	sp, #100	; 0x64
 800b204:	af00      	add	r7, sp, #0
 800b206:	60f8      	str	r0, [r7, #12]
 800b208:	60b9      	str	r1, [r7, #8]
 800b20a:	607a      	str	r2, [r7, #4]
 800b20c:	603b      	str	r3, [r7, #0]
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
 800b20e:	4b71      	ldr	r3, [pc, #452]	; (800b3d4 <ee_number+0x1d4>)
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	65bb      	str	r3, [r7, #88]	; 0x58
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 800b214:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b216:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d002      	beq.n	800b224 <ee_number+0x24>
 800b21e:	4b6e      	ldr	r3, [pc, #440]	; (800b3d8 <ee_number+0x1d8>)
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	65bb      	str	r3, [r7, #88]	; 0x58
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 800b224:	683b      	ldr	r3, [r7, #0]
 800b226:	2b01      	cmp	r3, #1
 800b228:	dd02      	ble.n	800b230 <ee_number+0x30>
 800b22a:	683b      	ldr	r3, [r7, #0]
 800b22c:	2b24      	cmp	r3, #36	; 0x24
 800b22e:	dd01      	ble.n	800b234 <ee_number+0x34>
 800b230:	2300      	movs	r3, #0
 800b232:	e0ca      	b.n	800b3ca <ee_number+0x1ca>

  c = (type & ZEROPAD) ? '0' : ' ';
 800b234:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b236:	f003 0301 	and.w	r3, r3, #1
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d001      	beq.n	800b242 <ee_number+0x42>
 800b23e:	2330      	movs	r3, #48	; 0x30
 800b240:	e000      	b.n	800b244 <ee_number+0x44>
 800b242:	2320      	movs	r3, #32
 800b244:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  sign = 0;
 800b248:	2300      	movs	r3, #0
 800b24a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  if (type & SIGN)
 800b24e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b250:	f003 0302 	and.w	r3, r3, #2
 800b254:	2b00      	cmp	r3, #0
 800b256:	d00b      	beq.n	800b270 <ee_number+0x70>
  {
    if (num < 0)
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	da08      	bge.n	800b270 <ee_number+0x70>
    {
      sign = '-';
 800b25e:	232d      	movs	r3, #45	; 0x2d
 800b260:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      num = -num;
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	425b      	negs	r3, r3
 800b268:	607b      	str	r3, [r7, #4]
      size--;
 800b26a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b26c:	3b01      	subs	r3, #1
 800b26e:	66bb      	str	r3, [r7, #104]	; 0x68
    else if (base == 8)
      size--;
  }
#endif

  i = 0;
 800b270:	2300      	movs	r3, #0
 800b272:	657b      	str	r3, [r7, #84]	; 0x54

  if (num == 0)
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	2b00      	cmp	r3, #0
 800b278:	d11e      	bne.n	800b2b8 <ee_number+0xb8>
    tmp[i++] = '0';
 800b27a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b27c:	1c5a      	adds	r2, r3, #1
 800b27e:	657a      	str	r2, [r7, #84]	; 0x54
 800b280:	3360      	adds	r3, #96	; 0x60
 800b282:	443b      	add	r3, r7
 800b284:	2230      	movs	r2, #48	; 0x30
 800b286:	f803 2c50 	strb.w	r2, [r3, #-80]
 800b28a:	e018      	b.n	800b2be <ee_number+0xbe>
  else
  {
    while (num != 0)
    {
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	683a      	ldr	r2, [r7, #0]
 800b290:	fbb3 f1f2 	udiv	r1, r3, r2
 800b294:	fb01 f202 	mul.w	r2, r1, r2
 800b298:	1a9b      	subs	r3, r3, r2
 800b29a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b29c:	441a      	add	r2, r3
 800b29e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b2a0:	1c59      	adds	r1, r3, #1
 800b2a2:	6579      	str	r1, [r7, #84]	; 0x54
 800b2a4:	7812      	ldrb	r2, [r2, #0]
 800b2a6:	3360      	adds	r3, #96	; 0x60
 800b2a8:	443b      	add	r3, r7
 800b2aa:	f803 2c50 	strb.w	r2, [r3, #-80]
      num = ((unsigned long) num) / (unsigned) base;
 800b2ae:	687a      	ldr	r2, [r7, #4]
 800b2b0:	683b      	ldr	r3, [r7, #0]
 800b2b2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b2b6:	607b      	str	r3, [r7, #4]
    while (num != 0)
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d1e6      	bne.n	800b28c <ee_number+0x8c>
    }
  }

  if (i > precision) precision = i;
 800b2be:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b2c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b2c2:	429a      	cmp	r2, r3
 800b2c4:	dd01      	ble.n	800b2ca <ee_number+0xca>
 800b2c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b2c8:	66fb      	str	r3, [r7, #108]	; 0x6c
  size -= precision;
 800b2ca:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b2cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b2ce:	1ad3      	subs	r3, r2, r3
 800b2d0:	66bb      	str	r3, [r7, #104]	; 0x68
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 800b2d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b2d4:	f003 0301 	and.w	r3, r3, #1
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d112      	bne.n	800b302 <ee_number+0x102>
 800b2dc:	e00c      	b.n	800b2f8 <ee_number+0xf8>
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	1c5a      	adds	r2, r3, #1
 800b2e2:	60fa      	str	r2, [r7, #12]
 800b2e4:	2220      	movs	r2, #32
 800b2e6:	701a      	strb	r2, [r3, #0]
 800b2e8:	68bb      	ldr	r3, [r7, #8]
 800b2ea:	3b01      	subs	r3, #1
 800b2ec:	60bb      	str	r3, [r7, #8]
 800b2ee:	68bb      	ldr	r3, [r7, #8]
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d101      	bne.n	800b2f8 <ee_number+0xf8>
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	e068      	b.n	800b3ca <ee_number+0x1ca>
 800b2f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b2fa:	1e5a      	subs	r2, r3, #1
 800b2fc:	66ba      	str	r2, [r7, #104]	; 0x68
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	dced      	bgt.n	800b2de <ee_number+0xde>
  if (sign) ASSIGN_STR(sign);
 800b302:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b306:	2b00      	cmp	r3, #0
 800b308:	d01b      	beq.n	800b342 <ee_number+0x142>
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	1c5a      	adds	r2, r3, #1
 800b30e:	60fa      	str	r2, [r7, #12]
 800b310:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800b314:	701a      	strb	r2, [r3, #0]
 800b316:	68bb      	ldr	r3, [r7, #8]
 800b318:	3b01      	subs	r3, #1
 800b31a:	60bb      	str	r3, [r7, #8]
 800b31c:	68bb      	ldr	r3, [r7, #8]
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d10f      	bne.n	800b342 <ee_number+0x142>
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	e051      	b.n	800b3ca <ee_number+0x1ca>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	1c5a      	adds	r2, r3, #1
 800b32a:	60fa      	str	r2, [r7, #12]
 800b32c:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 800b330:	701a      	strb	r2, [r3, #0]
 800b332:	68bb      	ldr	r3, [r7, #8]
 800b334:	3b01      	subs	r3, #1
 800b336:	60bb      	str	r3, [r7, #8]
 800b338:	68bb      	ldr	r3, [r7, #8]
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d101      	bne.n	800b342 <ee_number+0x142>
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	e043      	b.n	800b3ca <ee_number+0x1ca>
 800b342:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b344:	1e5a      	subs	r2, r3, #1
 800b346:	66ba      	str	r2, [r7, #104]	; 0x68
 800b348:	2b00      	cmp	r3, #0
 800b34a:	dcec      	bgt.n	800b326 <ee_number+0x126>
#else
  if (!(type & LEFT)) while (size-- > 0) ASSIGN_STR(c);
#endif
  while (i < precision--) ASSIGN_STR('0');
 800b34c:	e00c      	b.n	800b368 <ee_number+0x168>
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	1c5a      	adds	r2, r3, #1
 800b352:	60fa      	str	r2, [r7, #12]
 800b354:	2230      	movs	r2, #48	; 0x30
 800b356:	701a      	strb	r2, [r3, #0]
 800b358:	68bb      	ldr	r3, [r7, #8]
 800b35a:	3b01      	subs	r3, #1
 800b35c:	60bb      	str	r3, [r7, #8]
 800b35e:	68bb      	ldr	r3, [r7, #8]
 800b360:	2b00      	cmp	r3, #0
 800b362:	d101      	bne.n	800b368 <ee_number+0x168>
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	e030      	b.n	800b3ca <ee_number+0x1ca>
 800b368:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b36a:	1e5a      	subs	r2, r3, #1
 800b36c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b36e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b370:	429a      	cmp	r2, r3
 800b372:	dbec      	blt.n	800b34e <ee_number+0x14e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 800b374:	e010      	b.n	800b398 <ee_number+0x198>
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	1c5a      	adds	r2, r3, #1
 800b37a:	60fa      	str	r2, [r7, #12]
 800b37c:	f107 0110 	add.w	r1, r7, #16
 800b380:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b382:	440a      	add	r2, r1
 800b384:	7812      	ldrb	r2, [r2, #0]
 800b386:	701a      	strb	r2, [r3, #0]
 800b388:	68bb      	ldr	r3, [r7, #8]
 800b38a:	3b01      	subs	r3, #1
 800b38c:	60bb      	str	r3, [r7, #8]
 800b38e:	68bb      	ldr	r3, [r7, #8]
 800b390:	2b00      	cmp	r3, #0
 800b392:	d101      	bne.n	800b398 <ee_number+0x198>
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	e018      	b.n	800b3ca <ee_number+0x1ca>
 800b398:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b39a:	1e5a      	subs	r2, r3, #1
 800b39c:	657a      	str	r2, [r7, #84]	; 0x54
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	dce9      	bgt.n	800b376 <ee_number+0x176>
  while (size-- > 0) ASSIGN_STR(' ');
 800b3a2:	e00c      	b.n	800b3be <ee_number+0x1be>
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	1c5a      	adds	r2, r3, #1
 800b3a8:	60fa      	str	r2, [r7, #12]
 800b3aa:	2220      	movs	r2, #32
 800b3ac:	701a      	strb	r2, [r3, #0]
 800b3ae:	68bb      	ldr	r3, [r7, #8]
 800b3b0:	3b01      	subs	r3, #1
 800b3b2:	60bb      	str	r3, [r7, #8]
 800b3b4:	68bb      	ldr	r3, [r7, #8]
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d101      	bne.n	800b3be <ee_number+0x1be>
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	e005      	b.n	800b3ca <ee_number+0x1ca>
 800b3be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b3c0:	1e5a      	subs	r2, r3, #1
 800b3c2:	66ba      	str	r2, [r7, #104]	; 0x68
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	dced      	bgt.n	800b3a4 <ee_number+0x1a4>

  return str;
 800b3c8:	68fb      	ldr	r3, [r7, #12]
}
 800b3ca:	4618      	mov	r0, r3
 800b3cc:	3764      	adds	r7, #100	; 0x64
 800b3ce:	46bd      	mov	sp, r7
 800b3d0:	bc80      	pop	{r7}
 800b3d2:	4770      	bx	lr
 800b3d4:	2000000c 	.word	0x2000000c
 800b3d8:	20000010 	.word	0x20000010

0800b3dc <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 800b3dc:	b580      	push	{r7, lr}
 800b3de:	b092      	sub	sp, #72	; 0x48
 800b3e0:	af04      	add	r7, sp, #16
 800b3e2:	60f8      	str	r0, [r7, #12]
 800b3e4:	60b9      	str	r1, [r7, #8]
 800b3e6:	607a      	str	r2, [r7, #4]
 800b3e8:	603b      	str	r3, [r7, #0]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 800b3ea:	68bb      	ldr	r3, [r7, #8]
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	dc01      	bgt.n	800b3f4 <tiny_vsnprintf_like+0x18>
  {
    return 0;
 800b3f0:	2300      	movs	r3, #0
 800b3f2:	e13e      	b.n	800b672 <tiny_vsnprintf_like+0x296>
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b3f8:	e128      	b.n	800b64c <tiny_vsnprintf_like+0x270>
  {
    CHECK_STR_SIZE(buf, str, size);
 800b3fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	1ad2      	subs	r2, r2, r3
 800b400:	68bb      	ldr	r3, [r7, #8]
 800b402:	3b01      	subs	r3, #1
 800b404:	429a      	cmp	r2, r3
 800b406:	f280 812e 	bge.w	800b666 <tiny_vsnprintf_like+0x28a>

    if (*fmt != '%')
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	781b      	ldrb	r3, [r3, #0]
 800b40e:	2b25      	cmp	r3, #37	; 0x25
 800b410:	d006      	beq.n	800b420 <tiny_vsnprintf_like+0x44>
    {
      *str++ = *fmt;
 800b412:	687a      	ldr	r2, [r7, #4]
 800b414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b416:	1c59      	adds	r1, r3, #1
 800b418:	62f9      	str	r1, [r7, #44]	; 0x2c
 800b41a:	7812      	ldrb	r2, [r2, #0]
 800b41c:	701a      	strb	r2, [r3, #0]
      continue;
 800b41e:	e112      	b.n	800b646 <tiny_vsnprintf_like+0x26a>
    }

    // Process flags
    flags = 0;
 800b420:	2300      	movs	r3, #0
 800b422:	623b      	str	r3, [r7, #32]
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	3301      	adds	r3, #1
 800b428:	607b      	str	r3, [r7, #4]
    if (*fmt == '0')
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	781b      	ldrb	r3, [r3, #0]
 800b42e:	2b30      	cmp	r3, #48	; 0x30
 800b430:	d103      	bne.n	800b43a <tiny_vsnprintf_like+0x5e>
    {
      flags |= ZEROPAD;
 800b432:	6a3b      	ldr	r3, [r7, #32]
 800b434:	f043 0301 	orr.w	r3, r3, #1
 800b438:	623b      	str	r3, [r7, #32]
      case '0': flags |= ZEROPAD; goto repeat;
    }
#endif

    // Get field width
    field_width = -1;
 800b43a:	f04f 33ff 	mov.w	r3, #4294967295
 800b43e:	61fb      	str	r3, [r7, #28]
    if (is_digit(*fmt))
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	781b      	ldrb	r3, [r3, #0]
 800b444:	2b2f      	cmp	r3, #47	; 0x2f
 800b446:	d908      	bls.n	800b45a <tiny_vsnprintf_like+0x7e>
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	781b      	ldrb	r3, [r3, #0]
 800b44c:	2b39      	cmp	r3, #57	; 0x39
 800b44e:	d804      	bhi.n	800b45a <tiny_vsnprintf_like+0x7e>
      field_width = ee_skip_atoi(&fmt);
 800b450:	1d3b      	adds	r3, r7, #4
 800b452:	4618      	mov	r0, r3
 800b454:	f7ff feae 	bl	800b1b4 <ee_skip_atoi>
 800b458:	61f8      	str	r0, [r7, #28]
      }
    }
#endif

    // Get the precision
    precision = -1;
 800b45a:	f04f 33ff 	mov.w	r3, #4294967295
 800b45e:	61bb      	str	r3, [r7, #24]
      if (precision < 0) precision = 0;
    }
#endif

    // Get the conversion qualifier
    qualifier = -1;
 800b460:	f04f 33ff 	mov.w	r3, #4294967295
 800b464:	617b      	str	r3, [r7, #20]
      fmt++;
    }
#endif

    // Default base
    base = 10;
 800b466:	230a      	movs	r3, #10
 800b468:	633b      	str	r3, [r7, #48]	; 0x30

    switch (*fmt)
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	781b      	ldrb	r3, [r3, #0]
 800b46e:	3b58      	subs	r3, #88	; 0x58
 800b470:	2b20      	cmp	r3, #32
 800b472:	f200 8094 	bhi.w	800b59e <tiny_vsnprintf_like+0x1c2>
 800b476:	a201      	add	r2, pc, #4	; (adr r2, 800b47c <tiny_vsnprintf_like+0xa0>)
 800b478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b47c:	0800b587 	.word	0x0800b587
 800b480:	0800b59f 	.word	0x0800b59f
 800b484:	0800b59f 	.word	0x0800b59f
 800b488:	0800b59f 	.word	0x0800b59f
 800b48c:	0800b59f 	.word	0x0800b59f
 800b490:	0800b59f 	.word	0x0800b59f
 800b494:	0800b59f 	.word	0x0800b59f
 800b498:	0800b59f 	.word	0x0800b59f
 800b49c:	0800b59f 	.word	0x0800b59f
 800b4a0:	0800b59f 	.word	0x0800b59f
 800b4a4:	0800b59f 	.word	0x0800b59f
 800b4a8:	0800b50b 	.word	0x0800b50b
 800b4ac:	0800b595 	.word	0x0800b595
 800b4b0:	0800b59f 	.word	0x0800b59f
 800b4b4:	0800b59f 	.word	0x0800b59f
 800b4b8:	0800b59f 	.word	0x0800b59f
 800b4bc:	0800b59f 	.word	0x0800b59f
 800b4c0:	0800b595 	.word	0x0800b595
 800b4c4:	0800b59f 	.word	0x0800b59f
 800b4c8:	0800b59f 	.word	0x0800b59f
 800b4cc:	0800b59f 	.word	0x0800b59f
 800b4d0:	0800b59f 	.word	0x0800b59f
 800b4d4:	0800b59f 	.word	0x0800b59f
 800b4d8:	0800b59f 	.word	0x0800b59f
 800b4dc:	0800b59f 	.word	0x0800b59f
 800b4e0:	0800b59f 	.word	0x0800b59f
 800b4e4:	0800b59f 	.word	0x0800b59f
 800b4e8:	0800b52b 	.word	0x0800b52b
 800b4ec:	0800b59f 	.word	0x0800b59f
 800b4f0:	0800b5eb 	.word	0x0800b5eb
 800b4f4:	0800b59f 	.word	0x0800b59f
 800b4f8:	0800b59f 	.word	0x0800b59f
 800b4fc:	0800b58f 	.word	0x0800b58f
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 800b500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b502:	1c5a      	adds	r2, r3, #1
 800b504:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b506:	2220      	movs	r2, #32
 800b508:	701a      	strb	r2, [r3, #0]
 800b50a:	69fb      	ldr	r3, [r7, #28]
 800b50c:	3b01      	subs	r3, #1
 800b50e:	61fb      	str	r3, [r7, #28]
 800b510:	69fb      	ldr	r3, [r7, #28]
 800b512:	2b00      	cmp	r3, #0
 800b514:	dcf4      	bgt.n	800b500 <tiny_vsnprintf_like+0x124>
        *str++ = (unsigned char) va_arg(args, int);
 800b516:	683b      	ldr	r3, [r7, #0]
 800b518:	1d1a      	adds	r2, r3, #4
 800b51a:	603a      	str	r2, [r7, #0]
 800b51c:	6819      	ldr	r1, [r3, #0]
 800b51e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b520:	1c5a      	adds	r2, r3, #1
 800b522:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b524:	b2ca      	uxtb	r2, r1
 800b526:	701a      	strb	r2, [r3, #0]
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 800b528:	e08d      	b.n	800b646 <tiny_vsnprintf_like+0x26a>

      case 's':
        s = va_arg(args, char *);
 800b52a:	683b      	ldr	r3, [r7, #0]
 800b52c:	1d1a      	adds	r2, r3, #4
 800b52e:	603a      	str	r2, [r7, #0]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	627b      	str	r3, [r7, #36]	; 0x24
        if (!s) s = "<NULL>";
 800b534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b536:	2b00      	cmp	r3, #0
 800b538:	d101      	bne.n	800b53e <tiny_vsnprintf_like+0x162>
 800b53a:	4b50      	ldr	r3, [pc, #320]	; (800b67c <tiny_vsnprintf_like+0x2a0>)
 800b53c:	627b      	str	r3, [r7, #36]	; 0x24
#ifdef TINY_PRINTF
        len = strlen(s);
 800b53e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b540:	f7f4 fe1a 	bl	8000178 <strlen>
 800b544:	4603      	mov	r3, r0
 800b546:	613b      	str	r3, [r7, #16]
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 800b548:	e004      	b.n	800b554 <tiny_vsnprintf_like+0x178>
 800b54a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b54c:	1c5a      	adds	r2, r3, #1
 800b54e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b550:	2220      	movs	r2, #32
 800b552:	701a      	strb	r2, [r3, #0]
 800b554:	69fb      	ldr	r3, [r7, #28]
 800b556:	1e5a      	subs	r2, r3, #1
 800b558:	61fa      	str	r2, [r7, #28]
 800b55a:	693a      	ldr	r2, [r7, #16]
 800b55c:	429a      	cmp	r2, r3
 800b55e:	dbf4      	blt.n	800b54a <tiny_vsnprintf_like+0x16e>
        for (i = 0; i < len; ++i) *str++ = *s++;
 800b560:	2300      	movs	r3, #0
 800b562:	62bb      	str	r3, [r7, #40]	; 0x28
 800b564:	e00a      	b.n	800b57c <tiny_vsnprintf_like+0x1a0>
 800b566:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b568:	1c53      	adds	r3, r2, #1
 800b56a:	627b      	str	r3, [r7, #36]	; 0x24
 800b56c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b56e:	1c59      	adds	r1, r3, #1
 800b570:	62f9      	str	r1, [r7, #44]	; 0x2c
 800b572:	7812      	ldrb	r2, [r2, #0]
 800b574:	701a      	strb	r2, [r3, #0]
 800b576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b578:	3301      	adds	r3, #1
 800b57a:	62bb      	str	r3, [r7, #40]	; 0x28
 800b57c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b57e:	693b      	ldr	r3, [r7, #16]
 800b580:	429a      	cmp	r2, r3
 800b582:	dbf0      	blt.n	800b566 <tiny_vsnprintf_like+0x18a>
#ifdef TINY_PRINTF
#else
        while (len < field_width--) *str++ = ' ';
#endif
        continue;
 800b584:	e05f      	b.n	800b646 <tiny_vsnprintf_like+0x26a>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 800b586:	6a3b      	ldr	r3, [r7, #32]
 800b588:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b58c:	623b      	str	r3, [r7, #32]

      case 'x':
        base = 16;
 800b58e:	2310      	movs	r3, #16
 800b590:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 800b592:	e02b      	b.n	800b5ec <tiny_vsnprintf_like+0x210>

      case 'd':
      case 'i':
        flags |= SIGN;
 800b594:	6a3b      	ldr	r3, [r7, #32]
 800b596:	f043 0302 	orr.w	r3, r3, #2
 800b59a:	623b      	str	r3, [r7, #32]

      case 'u':
        break;
 800b59c:	e025      	b.n	800b5ea <tiny_vsnprintf_like+0x20e>
        continue;

#endif

      default:
        if (*fmt != '%') *str++ = '%';
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	781b      	ldrb	r3, [r3, #0]
 800b5a2:	2b25      	cmp	r3, #37	; 0x25
 800b5a4:	d004      	beq.n	800b5b0 <tiny_vsnprintf_like+0x1d4>
 800b5a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5a8:	1c5a      	adds	r2, r3, #1
 800b5aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b5ac:	2225      	movs	r2, #37	; 0x25
 800b5ae:	701a      	strb	r2, [r3, #0]
        CHECK_STR_SIZE(buf, str, size);
 800b5b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	1ad2      	subs	r2, r2, r3
 800b5b6:	68bb      	ldr	r3, [r7, #8]
 800b5b8:	3b01      	subs	r3, #1
 800b5ba:	429a      	cmp	r2, r3
 800b5bc:	da16      	bge.n	800b5ec <tiny_vsnprintf_like+0x210>
        if (*fmt)
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	781b      	ldrb	r3, [r3, #0]
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d006      	beq.n	800b5d4 <tiny_vsnprintf_like+0x1f8>
          *str++ = *fmt;
 800b5c6:	687a      	ldr	r2, [r7, #4]
 800b5c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5ca:	1c59      	adds	r1, r3, #1
 800b5cc:	62f9      	str	r1, [r7, #44]	; 0x2c
 800b5ce:	7812      	ldrb	r2, [r2, #0]
 800b5d0:	701a      	strb	r2, [r3, #0]
 800b5d2:	e002      	b.n	800b5da <tiny_vsnprintf_like+0x1fe>
        else
          --fmt;
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	3b01      	subs	r3, #1
 800b5d8:	607b      	str	r3, [r7, #4]
        CHECK_STR_SIZE(buf, str, size);
 800b5da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	1ad2      	subs	r2, r2, r3
 800b5e0:	68bb      	ldr	r3, [r7, #8]
 800b5e2:	3b01      	subs	r3, #1
 800b5e4:	429a      	cmp	r2, r3
 800b5e6:	db2d      	blt.n	800b644 <tiny_vsnprintf_like+0x268>
 800b5e8:	e000      	b.n	800b5ec <tiny_vsnprintf_like+0x210>
        break;
 800b5ea:	bf00      	nop
        continue;
    }

    if (qualifier == 'l')
 800b5ec:	697b      	ldr	r3, [r7, #20]
 800b5ee:	2b6c      	cmp	r3, #108	; 0x6c
 800b5f0:	d105      	bne.n	800b5fe <tiny_vsnprintf_like+0x222>
      num = va_arg(args, unsigned long);
 800b5f2:	683b      	ldr	r3, [r7, #0]
 800b5f4:	1d1a      	adds	r2, r3, #4
 800b5f6:	603a      	str	r2, [r7, #0]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	637b      	str	r3, [r7, #52]	; 0x34
 800b5fc:	e00f      	b.n	800b61e <tiny_vsnprintf_like+0x242>
    else if (flags & SIGN)
 800b5fe:	6a3b      	ldr	r3, [r7, #32]
 800b600:	f003 0302 	and.w	r3, r3, #2
 800b604:	2b00      	cmp	r3, #0
 800b606:	d005      	beq.n	800b614 <tiny_vsnprintf_like+0x238>
      num = va_arg(args, int);
 800b608:	683b      	ldr	r3, [r7, #0]
 800b60a:	1d1a      	adds	r2, r3, #4
 800b60c:	603a      	str	r2, [r7, #0]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	637b      	str	r3, [r7, #52]	; 0x34
 800b612:	e004      	b.n	800b61e <tiny_vsnprintf_like+0x242>
    else
      num = va_arg(args, unsigned int);
 800b614:	683b      	ldr	r3, [r7, #0]
 800b616:	1d1a      	adds	r2, r3, #4
 800b618:	603a      	str	r2, [r7, #0]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	637b      	str	r3, [r7, #52]	; 0x34

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 800b61e:	68bb      	ldr	r3, [r7, #8]
 800b620:	1e5a      	subs	r2, r3, #1
 800b622:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	1acb      	subs	r3, r1, r3
 800b628:	1ad1      	subs	r1, r2, r3
 800b62a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b62c:	6a3b      	ldr	r3, [r7, #32]
 800b62e:	9302      	str	r3, [sp, #8]
 800b630:	69bb      	ldr	r3, [r7, #24]
 800b632:	9301      	str	r3, [sp, #4]
 800b634:	69fb      	ldr	r3, [r7, #28]
 800b636:	9300      	str	r3, [sp, #0]
 800b638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b63a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b63c:	f7ff fde0 	bl	800b200 <ee_number>
 800b640:	62f8      	str	r0, [r7, #44]	; 0x2c
 800b642:	e000      	b.n	800b646 <tiny_vsnprintf_like+0x26a>
        continue;
 800b644:	bf00      	nop
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	3301      	adds	r3, #1
 800b64a:	607b      	str	r3, [r7, #4]
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	781b      	ldrb	r3, [r3, #0]
 800b650:	2b00      	cmp	r3, #0
 800b652:	f47f aed2 	bne.w	800b3fa <tiny_vsnprintf_like+0x1e>
 800b656:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	1ad2      	subs	r2, r2, r3
 800b65c:	68bb      	ldr	r3, [r7, #8]
 800b65e:	3b01      	subs	r3, #1
 800b660:	429a      	cmp	r2, r3
 800b662:	f6bf aeca 	bge.w	800b3fa <tiny_vsnprintf_like+0x1e>
  }

  *str = '\0';
 800b666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b668:	2200      	movs	r2, #0
 800b66a:	701a      	strb	r2, [r3, #0]
  return str - buf;
 800b66c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	1ad3      	subs	r3, r2, r3
}
 800b672:	4618      	mov	r0, r3
 800b674:	3738      	adds	r7, #56	; 0x38
 800b676:	46bd      	mov	sp, r7
 800b678:	bd80      	pop	{r7, pc}
 800b67a:	bf00      	nop
 800b67c:	0800c75c 	.word	0x0800c75c

0800b680 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800b680:	b580      	push	{r7, lr}
 800b682:	b090      	sub	sp, #64	; 0x40
 800b684:	af00      	add	r7, sp, #0
 800b686:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800b688:	4b73      	ldr	r3, [pc, #460]	; (800b858 <UTIL_SEQ_Run+0x1d8>)
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 800b68e:	4b72      	ldr	r3, [pc, #456]	; (800b858 <UTIL_SEQ_Run+0x1d8>)
 800b690:	681a      	ldr	r2, [r3, #0]
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	4013      	ands	r3, r2
 800b696:	4a70      	ldr	r2, [pc, #448]	; (800b858 <UTIL_SEQ_Run+0x1d8>)
 800b698:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 800b69a:	4b70      	ldr	r3, [pc, #448]	; (800b85c <UTIL_SEQ_Run+0x1dc>)
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800b6a0:	4b6f      	ldr	r3, [pc, #444]	; (800b860 <UTIL_SEQ_Run+0x1e0>)
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800b6a6:	4b6f      	ldr	r3, [pc, #444]	; (800b864 <UTIL_SEQ_Run+0x1e4>)
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 800b6ac:	4b6e      	ldr	r3, [pc, #440]	; (800b868 <UTIL_SEQ_Run+0x1e8>)
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800b6b2:	e08d      	b.n	800b7d0 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 800b6b4:	2300      	movs	r3, #0
 800b6b6:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800b6b8:	e002      	b.n	800b6c0 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 800b6ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b6bc:	3301      	adds	r3, #1
 800b6be:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800b6c0:	4a6a      	ldr	r2, [pc, #424]	; (800b86c <UTIL_SEQ_Run+0x1ec>)
 800b6c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b6c4:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800b6c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6ca:	401a      	ands	r2, r3
 800b6cc:	4b62      	ldr	r3, [pc, #392]	; (800b858 <UTIL_SEQ_Run+0x1d8>)
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	4013      	ands	r3, r2
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d0f1      	beq.n	800b6ba <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 800b6d6:	4a65      	ldr	r2, [pc, #404]	; (800b86c <UTIL_SEQ_Run+0x1ec>)
 800b6d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b6da:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800b6de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6e0:	401a      	ands	r2, r3
 800b6e2:	4b5d      	ldr	r3, [pc, #372]	; (800b858 <UTIL_SEQ_Run+0x1d8>)
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	4013      	ands	r3, r2
 800b6e8:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800b6ea:	4a60      	ldr	r2, [pc, #384]	; (800b86c <UTIL_SEQ_Run+0x1ec>)
 800b6ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b6ee:	00db      	lsls	r3, r3, #3
 800b6f0:	4413      	add	r3, r2
 800b6f2:	685a      	ldr	r2, [r3, #4]
 800b6f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6f6:	4013      	ands	r3, r2
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d106      	bne.n	800b70a <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800b6fc:	4a5b      	ldr	r2, [pc, #364]	; (800b86c <UTIL_SEQ_Run+0x1ec>)
 800b6fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b700:	00db      	lsls	r3, r3, #3
 800b702:	4413      	add	r3, r2
 800b704:	f04f 32ff 	mov.w	r2, #4294967295
 800b708:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800b70a:	4a58      	ldr	r2, [pc, #352]	; (800b86c <UTIL_SEQ_Run+0x1ec>)
 800b70c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b70e:	00db      	lsls	r3, r3, #3
 800b710:	4413      	add	r3, r2
 800b712:	685a      	ldr	r2, [r3, #4]
 800b714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b716:	4013      	ands	r3, r2
 800b718:	4618      	mov	r0, r3
 800b71a:	f000 f907 	bl	800b92c <SEQ_BitPosition>
 800b71e:	4603      	mov	r3, r0
 800b720:	461a      	mov	r2, r3
 800b722:	4b53      	ldr	r3, [pc, #332]	; (800b870 <UTIL_SEQ_Run+0x1f0>)
 800b724:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800b726:	4a51      	ldr	r2, [pc, #324]	; (800b86c <UTIL_SEQ_Run+0x1ec>)
 800b728:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b72a:	00db      	lsls	r3, r3, #3
 800b72c:	4413      	add	r3, r2
 800b72e:	685a      	ldr	r2, [r3, #4]
 800b730:	4b4f      	ldr	r3, [pc, #316]	; (800b870 <UTIL_SEQ_Run+0x1f0>)
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	2101      	movs	r1, #1
 800b736:	fa01 f303 	lsl.w	r3, r1, r3
 800b73a:	43db      	mvns	r3, r3
 800b73c:	401a      	ands	r2, r3
 800b73e:	494b      	ldr	r1, [pc, #300]	; (800b86c <UTIL_SEQ_Run+0x1ec>)
 800b740:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b742:	00db      	lsls	r3, r3, #3
 800b744:	440b      	add	r3, r1
 800b746:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b748:	f3ef 8310 	mrs	r3, PRIMASK
 800b74c:	61bb      	str	r3, [r7, #24]
  return(result);
 800b74e:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800b750:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800b752:	b672      	cpsid	i
}
 800b754:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800b756:	4b46      	ldr	r3, [pc, #280]	; (800b870 <UTIL_SEQ_Run+0x1f0>)
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	2201      	movs	r2, #1
 800b75c:	fa02 f303 	lsl.w	r3, r2, r3
 800b760:	43da      	mvns	r2, r3
 800b762:	4b3e      	ldr	r3, [pc, #248]	; (800b85c <UTIL_SEQ_Run+0x1dc>)
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	4013      	ands	r3, r2
 800b768:	4a3c      	ldr	r2, [pc, #240]	; (800b85c <UTIL_SEQ_Run+0x1dc>)
 800b76a:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800b76c:	2301      	movs	r3, #1
 800b76e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b770:	e013      	b.n	800b79a <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800b772:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b774:	3b01      	subs	r3, #1
 800b776:	4a3d      	ldr	r2, [pc, #244]	; (800b86c <UTIL_SEQ_Run+0x1ec>)
 800b778:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800b77c:	4b3c      	ldr	r3, [pc, #240]	; (800b870 <UTIL_SEQ_Run+0x1f0>)
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	2201      	movs	r2, #1
 800b782:	fa02 f303 	lsl.w	r3, r2, r3
 800b786:	43da      	mvns	r2, r3
 800b788:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b78a:	3b01      	subs	r3, #1
 800b78c:	400a      	ands	r2, r1
 800b78e:	4937      	ldr	r1, [pc, #220]	; (800b86c <UTIL_SEQ_Run+0x1ec>)
 800b790:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800b794:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b796:	3b01      	subs	r3, #1
 800b798:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b79a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d1e8      	bne.n	800b772 <UTIL_SEQ_Run+0xf2>
 800b7a0:	6a3b      	ldr	r3, [r7, #32]
 800b7a2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b7a4:	697b      	ldr	r3, [r7, #20]
 800b7a6:	f383 8810 	msr	PRIMASK, r3
}
 800b7aa:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800b7ac:	4b30      	ldr	r3, [pc, #192]	; (800b870 <UTIL_SEQ_Run+0x1f0>)
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	4a30      	ldr	r2, [pc, #192]	; (800b874 <UTIL_SEQ_Run+0x1f4>)
 800b7b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b7b6:	4798      	blx	r3

    local_taskset = TaskSet;
 800b7b8:	4b28      	ldr	r3, [pc, #160]	; (800b85c <UTIL_SEQ_Run+0x1dc>)
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 800b7be:	4b28      	ldr	r3, [pc, #160]	; (800b860 <UTIL_SEQ_Run+0x1e0>)
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 800b7c4:	4b27      	ldr	r3, [pc, #156]	; (800b864 <UTIL_SEQ_Run+0x1e4>)
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 800b7ca:	4b27      	ldr	r3, [pc, #156]	; (800b868 <UTIL_SEQ_Run+0x1e8>)
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800b7d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b7d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7d4:	401a      	ands	r2, r3
 800b7d6:	4b20      	ldr	r3, [pc, #128]	; (800b858 <UTIL_SEQ_Run+0x1d8>)
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	4013      	ands	r3, r2
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d005      	beq.n	800b7ec <UTIL_SEQ_Run+0x16c>
 800b7e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b7e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7e4:	4013      	ands	r3, r2
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	f43f af64 	beq.w	800b6b4 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800b7ec:	4b20      	ldr	r3, [pc, #128]	; (800b870 <UTIL_SEQ_Run+0x1f0>)
 800b7ee:	f04f 32ff 	mov.w	r2, #4294967295
 800b7f2:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800b7f4:	f000 f88e 	bl	800b914 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b7f8:	f3ef 8310 	mrs	r3, PRIMASK
 800b7fc:	613b      	str	r3, [r7, #16]
  return(result);
 800b7fe:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800b800:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800b802:	b672      	cpsid	i
}
 800b804:	bf00      	nop
  local_taskset = TaskSet;
 800b806:	4b15      	ldr	r3, [pc, #84]	; (800b85c <UTIL_SEQ_Run+0x1dc>)
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800b80c:	4b14      	ldr	r3, [pc, #80]	; (800b860 <UTIL_SEQ_Run+0x1e0>)
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800b812:	4b14      	ldr	r3, [pc, #80]	; (800b864 <UTIL_SEQ_Run+0x1e4>)
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 800b818:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b81a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b81c:	401a      	ands	r2, r3
 800b81e:	4b0e      	ldr	r3, [pc, #56]	; (800b858 <UTIL_SEQ_Run+0x1d8>)
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	4013      	ands	r3, r2
 800b824:	2b00      	cmp	r3, #0
 800b826:	d107      	bne.n	800b838 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 800b828:	4b0f      	ldr	r3, [pc, #60]	; (800b868 <UTIL_SEQ_Run+0x1e8>)
 800b82a:	681a      	ldr	r2, [r3, #0]
 800b82c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b82e:	4013      	ands	r3, r2
 800b830:	2b00      	cmp	r3, #0
 800b832:	d101      	bne.n	800b838 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 800b834:	f7f5 f8fe 	bl	8000a34 <UTIL_SEQ_Idle>
 800b838:	69fb      	ldr	r3, [r7, #28]
 800b83a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	f383 8810 	msr	PRIMASK, r3
}
 800b842:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 800b844:	f000 f86c 	bl	800b920 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800b848:	4a03      	ldr	r2, [pc, #12]	; (800b858 <UTIL_SEQ_Run+0x1d8>)
 800b84a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b84c:	6013      	str	r3, [r2, #0]

  return;
 800b84e:	bf00      	nop
}
 800b850:	3740      	adds	r7, #64	; 0x40
 800b852:	46bd      	mov	sp, r7
 800b854:	bd80      	pop	{r7, pc}
 800b856:	bf00      	nop
 800b858:	20000018 	.word	0x20000018
 800b85c:	2000056c 	.word	0x2000056c
 800b860:	20000570 	.word	0x20000570
 800b864:	20000014 	.word	0x20000014
 800b868:	20000574 	.word	0x20000574
 800b86c:	20000580 	.word	0x20000580
 800b870:	20000578 	.word	0x20000578
 800b874:	2000057c 	.word	0x2000057c

0800b878 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800b878:	b580      	push	{r7, lr}
 800b87a:	b088      	sub	sp, #32
 800b87c:	af00      	add	r7, sp, #0
 800b87e:	60f8      	str	r0, [r7, #12]
 800b880:	60b9      	str	r1, [r7, #8]
 800b882:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b884:	f3ef 8310 	mrs	r3, PRIMASK
 800b888:	617b      	str	r3, [r7, #20]
  return(result);
 800b88a:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800b88c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800b88e:	b672      	cpsid	i
}
 800b890:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800b892:	68f8      	ldr	r0, [r7, #12]
 800b894:	f000 f84a 	bl	800b92c <SEQ_BitPosition>
 800b898:	4603      	mov	r3, r0
 800b89a:	4619      	mov	r1, r3
 800b89c:	4a06      	ldr	r2, [pc, #24]	; (800b8b8 <UTIL_SEQ_RegTask+0x40>)
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800b8a4:	69fb      	ldr	r3, [r7, #28]
 800b8a6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b8a8:	69bb      	ldr	r3, [r7, #24]
 800b8aa:	f383 8810 	msr	PRIMASK, r3
}
 800b8ae:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800b8b0:	bf00      	nop
}
 800b8b2:	3720      	adds	r7, #32
 800b8b4:	46bd      	mov	sp, r7
 800b8b6:	bd80      	pop	{r7, pc}
 800b8b8:	2000057c 	.word	0x2000057c

0800b8bc <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800b8bc:	b480      	push	{r7}
 800b8be:	b087      	sub	sp, #28
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	6078      	str	r0, [r7, #4]
 800b8c4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b8c6:	f3ef 8310 	mrs	r3, PRIMASK
 800b8ca:	60fb      	str	r3, [r7, #12]
  return(result);
 800b8cc:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800b8ce:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b8d0:	b672      	cpsid	i
}
 800b8d2:	bf00      	nop

  TaskSet |= TaskId_bm;
 800b8d4:	4b0d      	ldr	r3, [pc, #52]	; (800b90c <UTIL_SEQ_SetTask+0x50>)
 800b8d6:	681a      	ldr	r2, [r3, #0]
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	4313      	orrs	r3, r2
 800b8dc:	4a0b      	ldr	r2, [pc, #44]	; (800b90c <UTIL_SEQ_SetTask+0x50>)
 800b8de:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800b8e0:	4a0b      	ldr	r2, [pc, #44]	; (800b910 <UTIL_SEQ_SetTask+0x54>)
 800b8e2:	683b      	ldr	r3, [r7, #0]
 800b8e4:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	431a      	orrs	r2, r3
 800b8ec:	4908      	ldr	r1, [pc, #32]	; (800b910 <UTIL_SEQ_SetTask+0x54>)
 800b8ee:	683b      	ldr	r3, [r7, #0]
 800b8f0:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800b8f4:	697b      	ldr	r3, [r7, #20]
 800b8f6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b8f8:	693b      	ldr	r3, [r7, #16]
 800b8fa:	f383 8810 	msr	PRIMASK, r3
}
 800b8fe:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800b900:	bf00      	nop
}
 800b902:	371c      	adds	r7, #28
 800b904:	46bd      	mov	sp, r7
 800b906:	bc80      	pop	{r7}
 800b908:	4770      	bx	lr
 800b90a:	bf00      	nop
 800b90c:	2000056c 	.word	0x2000056c
 800b910:	20000580 	.word	0x20000580

0800b914 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800b914:	b480      	push	{r7}
 800b916:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800b918:	bf00      	nop
}
 800b91a:	46bd      	mov	sp, r7
 800b91c:	bc80      	pop	{r7}
 800b91e:	4770      	bx	lr

0800b920 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800b920:	b480      	push	{r7}
 800b922:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800b924:	bf00      	nop
}
 800b926:	46bd      	mov	sp, r7
 800b928:	bc80      	pop	{r7}
 800b92a:	4770      	bx	lr

0800b92c <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800b92c:	b480      	push	{r7}
 800b92e:	b085      	sub	sp, #20
 800b930:	af00      	add	r7, sp, #0
 800b932:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 800b934:	2300      	movs	r3, #0
 800b936:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 800b93c:	68bb      	ldr	r3, [r7, #8]
 800b93e:	0c1b      	lsrs	r3, r3, #16
 800b940:	041b      	lsls	r3, r3, #16
 800b942:	2b00      	cmp	r3, #0
 800b944:	d104      	bne.n	800b950 <SEQ_BitPosition+0x24>
 800b946:	2310      	movs	r3, #16
 800b948:	73fb      	strb	r3, [r7, #15]
 800b94a:	68bb      	ldr	r3, [r7, #8]
 800b94c:	041b      	lsls	r3, r3, #16
 800b94e:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 800b950:	68bb      	ldr	r3, [r7, #8]
 800b952:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800b956:	2b00      	cmp	r3, #0
 800b958:	d105      	bne.n	800b966 <SEQ_BitPosition+0x3a>
 800b95a:	7bfb      	ldrb	r3, [r7, #15]
 800b95c:	3308      	adds	r3, #8
 800b95e:	73fb      	strb	r3, [r7, #15]
 800b960:	68bb      	ldr	r3, [r7, #8]
 800b962:	021b      	lsls	r3, r3, #8
 800b964:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 800b966:	68bb      	ldr	r3, [r7, #8]
 800b968:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d105      	bne.n	800b97c <SEQ_BitPosition+0x50>
 800b970:	7bfb      	ldrb	r3, [r7, #15]
 800b972:	3304      	adds	r3, #4
 800b974:	73fb      	strb	r3, [r7, #15]
 800b976:	68bb      	ldr	r3, [r7, #8]
 800b978:	011b      	lsls	r3, r3, #4
 800b97a:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 800b97c:	68bb      	ldr	r3, [r7, #8]
 800b97e:	0f1b      	lsrs	r3, r3, #28
 800b980:	4a06      	ldr	r2, [pc, #24]	; (800b99c <SEQ_BitPosition+0x70>)
 800b982:	5cd2      	ldrb	r2, [r2, r3]
 800b984:	7bfb      	ldrb	r3, [r7, #15]
 800b986:	4413      	add	r3, r2
 800b988:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800b98a:	7bfb      	ldrb	r3, [r7, #15]
 800b98c:	f1c3 031f 	rsb	r3, r3, #31
 800b990:	b2db      	uxtb	r3, r3
}
 800b992:	4618      	mov	r0, r3
 800b994:	3714      	adds	r7, #20
 800b996:	46bd      	mov	sp, r7
 800b998:	bc80      	pop	{r7}
 800b99a:	4770      	bx	lr
 800b99c:	0800c9d4 	.word	0x0800c9d4

0800b9a0 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 800b9a0:	b580      	push	{r7, lr}
 800b9a2:	af00      	add	r7, sp, #0
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 800b9a4:	4b04      	ldr	r3, [pc, #16]	; (800b9b8 <UTIL_TIMER_Init+0x18>)
 800b9a6:	2200      	movs	r2, #0
 800b9a8:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 800b9aa:	4b04      	ldr	r3, [pc, #16]	; (800b9bc <UTIL_TIMER_Init+0x1c>)
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	4798      	blx	r3
 800b9b0:	4603      	mov	r3, r0
}
 800b9b2:	4618      	mov	r0, r3
 800b9b4:	bd80      	pop	{r7, pc}
 800b9b6:	bf00      	nop
 800b9b8:	20000588 	.word	0x20000588
 800b9bc:	0800c81c 	.word	0x0800c81c

0800b9c0 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 800b9c0:	b580      	push	{r7, lr}
 800b9c2:	b084      	sub	sp, #16
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	60f8      	str	r0, [r7, #12]
 800b9c8:	60b9      	str	r1, [r7, #8]
 800b9ca:	603b      	str	r3, [r7, #0]
 800b9cc:	4613      	mov	r3, r2
 800b9ce:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d023      	beq.n	800ba1e <UTIL_TIMER_Create+0x5e>
 800b9d6:	683b      	ldr	r3, [r7, #0]
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d020      	beq.n	800ba1e <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	2200      	movs	r2, #0
 800b9e0:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 800b9e2:	4b11      	ldr	r3, [pc, #68]	; (800ba28 <UTIL_TIMER_Create+0x68>)
 800b9e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9e6:	68b8      	ldr	r0, [r7, #8]
 800b9e8:	4798      	blx	r3
 800b9ea:	4602      	mov	r2, r0
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	2200      	movs	r2, #0
 800b9f4:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	2200      	movs	r2, #0
 800b9fa:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	2200      	movs	r2, #0
 800ba00:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	683a      	ldr	r2, [r7, #0]
 800ba06:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	69ba      	ldr	r2, [r7, #24]
 800ba0c:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	79fa      	ldrb	r2, [r7, #7]
 800ba12:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	2200      	movs	r2, #0
 800ba18:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 800ba1a:	2300      	movs	r3, #0
 800ba1c:	e000      	b.n	800ba20 <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 800ba1e:	2301      	movs	r3, #1
  }
}
 800ba20:	4618      	mov	r0, r3
 800ba22:	3710      	adds	r7, #16
 800ba24:	46bd      	mov	sp, r7
 800ba26:	bd80      	pop	{r7, pc}
 800ba28:	0800c81c 	.word	0x0800c81c

0800ba2c <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 800ba2c:	b580      	push	{r7, lr}
 800ba2e:	b08a      	sub	sp, #40	; 0x28
 800ba30:	af00      	add	r7, sp, #0
 800ba32:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800ba34:	2300      	movs	r3, #0
 800ba36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d056      	beq.n	800baee <UTIL_TIMER_Start+0xc2>
 800ba40:	6878      	ldr	r0, [r7, #4]
 800ba42:	f000 f9a9 	bl	800bd98 <TimerExists>
 800ba46:	4603      	mov	r3, r0
 800ba48:	f083 0301 	eor.w	r3, r3, #1
 800ba4c:	b2db      	uxtb	r3, r3
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d04d      	beq.n	800baee <UTIL_TIMER_Start+0xc2>
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	7a5b      	ldrb	r3, [r3, #9]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d149      	bne.n	800baee <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ba5a:	f3ef 8310 	mrs	r3, PRIMASK
 800ba5e:	613b      	str	r3, [r7, #16]
  return(result);
 800ba60:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 800ba62:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800ba64:	b672      	cpsid	i
}
 800ba66:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	685b      	ldr	r3, [r3, #4]
 800ba6c:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 800ba6e:	4b24      	ldr	r3, [pc, #144]	; (800bb00 <UTIL_TIMER_Start+0xd4>)
 800ba70:	6a1b      	ldr	r3, [r3, #32]
 800ba72:	4798      	blx	r3
 800ba74:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 800ba76:	6a3a      	ldr	r2, [r7, #32]
 800ba78:	69bb      	ldr	r3, [r7, #24]
 800ba7a:	429a      	cmp	r2, r3
 800ba7c:	d201      	bcs.n	800ba82 <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 800ba7e:	69bb      	ldr	r3, [r7, #24]
 800ba80:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	6a3a      	ldr	r2, [r7, #32]
 800ba86:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	2200      	movs	r2, #0
 800ba8c:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	2201      	movs	r2, #1
 800ba92:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	2200      	movs	r2, #0
 800ba98:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 800ba9a:	4b1a      	ldr	r3, [pc, #104]	; (800bb04 <UTIL_TIMER_Start+0xd8>)
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d106      	bne.n	800bab0 <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 800baa2:	4b17      	ldr	r3, [pc, #92]	; (800bb00 <UTIL_TIMER_Start+0xd4>)
 800baa4:	691b      	ldr	r3, [r3, #16]
 800baa6:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 800baa8:	6878      	ldr	r0, [r7, #4]
 800baaa:	f000 f9eb 	bl	800be84 <TimerInsertNewHeadTimer>
 800baae:	e017      	b.n	800bae0 <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 800bab0:	4b13      	ldr	r3, [pc, #76]	; (800bb00 <UTIL_TIMER_Start+0xd4>)
 800bab2:	699b      	ldr	r3, [r3, #24]
 800bab4:	4798      	blx	r3
 800bab6:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	681a      	ldr	r2, [r3, #0]
 800babc:	697b      	ldr	r3, [r7, #20]
 800babe:	441a      	add	r2, r3
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	681a      	ldr	r2, [r3, #0]
 800bac8:	4b0e      	ldr	r3, [pc, #56]	; (800bb04 <UTIL_TIMER_Start+0xd8>)
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	429a      	cmp	r2, r3
 800bad0:	d203      	bcs.n	800bada <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 800bad2:	6878      	ldr	r0, [r7, #4]
 800bad4:	f000 f9d6 	bl	800be84 <TimerInsertNewHeadTimer>
 800bad8:	e002      	b.n	800bae0 <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 800bada:	6878      	ldr	r0, [r7, #4]
 800badc:	f000 f9a2 	bl	800be24 <TimerInsertTimer>
 800bae0:	69fb      	ldr	r3, [r7, #28]
 800bae2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	f383 8810 	msr	PRIMASK, r3
}
 800baea:	bf00      	nop
  {
 800baec:	e002      	b.n	800baf4 <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 800baee:	2301      	movs	r3, #1
 800baf0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 800baf4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800baf8:	4618      	mov	r0, r3
 800bafa:	3728      	adds	r7, #40	; 0x28
 800bafc:	46bd      	mov	sp, r7
 800bafe:	bd80      	pop	{r7, pc}
 800bb00:	0800c81c 	.word	0x0800c81c
 800bb04:	20000588 	.word	0x20000588

0800bb08 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 800bb08:	b580      	push	{r7, lr}
 800bb0a:	b088      	sub	sp, #32
 800bb0c:	af00      	add	r7, sp, #0
 800bb0e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800bb10:	2300      	movs	r3, #0
 800bb12:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d05b      	beq.n	800bbd2 <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bb1a:	f3ef 8310 	mrs	r3, PRIMASK
 800bb1e:	60fb      	str	r3, [r7, #12]
  return(result);
 800bb20:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 800bb22:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800bb24:	b672      	cpsid	i
}
 800bb26:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 800bb28:	4b2d      	ldr	r3, [pc, #180]	; (800bbe0 <UTIL_TIMER_Stop+0xd8>)
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 800bb2e:	4b2c      	ldr	r3, [pc, #176]	; (800bbe0 <UTIL_TIMER_Stop+0xd8>)
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	2201      	movs	r2, #1
 800bb38:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 800bb3a:	4b29      	ldr	r3, [pc, #164]	; (800bbe0 <UTIL_TIMER_Stop+0xd8>)
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d041      	beq.n	800bbc6 <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	2200      	movs	r2, #0
 800bb46:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 800bb48:	4b25      	ldr	r3, [pc, #148]	; (800bbe0 <UTIL_TIMER_Stop+0xd8>)
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	687a      	ldr	r2, [r7, #4]
 800bb4e:	429a      	cmp	r2, r3
 800bb50:	d134      	bne.n	800bbbc <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 800bb52:	4b23      	ldr	r3, [pc, #140]	; (800bbe0 <UTIL_TIMER_Stop+0xd8>)
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	2200      	movs	r2, #0
 800bb58:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 800bb5a:	4b21      	ldr	r3, [pc, #132]	; (800bbe0 <UTIL_TIMER_Stop+0xd8>)
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	695b      	ldr	r3, [r3, #20]
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d00a      	beq.n	800bb7a <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 800bb64:	4b1e      	ldr	r3, [pc, #120]	; (800bbe0 <UTIL_TIMER_Stop+0xd8>)
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	695b      	ldr	r3, [r3, #20]
 800bb6a:	4a1d      	ldr	r2, [pc, #116]	; (800bbe0 <UTIL_TIMER_Stop+0xd8>)
 800bb6c:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 800bb6e:	4b1c      	ldr	r3, [pc, #112]	; (800bbe0 <UTIL_TIMER_Stop+0xd8>)
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	4618      	mov	r0, r3
 800bb74:	f000 f92c 	bl	800bdd0 <TimerSetTimeout>
 800bb78:	e023      	b.n	800bbc2 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 800bb7a:	4b1a      	ldr	r3, [pc, #104]	; (800bbe4 <UTIL_TIMER_Stop+0xdc>)
 800bb7c:	68db      	ldr	r3, [r3, #12]
 800bb7e:	4798      	blx	r3
            TimerListHead = NULL;
 800bb80:	4b17      	ldr	r3, [pc, #92]	; (800bbe0 <UTIL_TIMER_Stop+0xd8>)
 800bb82:	2200      	movs	r2, #0
 800bb84:	601a      	str	r2, [r3, #0]
 800bb86:	e01c      	b.n	800bbc2 <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 800bb88:	697a      	ldr	r2, [r7, #20]
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	429a      	cmp	r2, r3
 800bb8e:	d110      	bne.n	800bbb2 <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 800bb90:	697b      	ldr	r3, [r7, #20]
 800bb92:	695b      	ldr	r3, [r3, #20]
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d006      	beq.n	800bba6 <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 800bb98:	697b      	ldr	r3, [r7, #20]
 800bb9a:	695b      	ldr	r3, [r3, #20]
 800bb9c:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 800bb9e:	69bb      	ldr	r3, [r7, #24]
 800bba0:	697a      	ldr	r2, [r7, #20]
 800bba2:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 800bba4:	e00d      	b.n	800bbc2 <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 800bba6:	2300      	movs	r3, #0
 800bba8:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 800bbaa:	69bb      	ldr	r3, [r7, #24]
 800bbac:	697a      	ldr	r2, [r7, #20]
 800bbae:	615a      	str	r2, [r3, #20]
            break;
 800bbb0:	e007      	b.n	800bbc2 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 800bbb2:	697b      	ldr	r3, [r7, #20]
 800bbb4:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 800bbb6:	697b      	ldr	r3, [r7, #20]
 800bbb8:	695b      	ldr	r3, [r3, #20]
 800bbba:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 800bbbc:	697b      	ldr	r3, [r7, #20]
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d1e2      	bne.n	800bb88 <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 800bbc2:	2300      	movs	r3, #0
 800bbc4:	77fb      	strb	r3, [r7, #31]
 800bbc6:	693b      	ldr	r3, [r7, #16]
 800bbc8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bbca:	68bb      	ldr	r3, [r7, #8]
 800bbcc:	f383 8810 	msr	PRIMASK, r3
}
 800bbd0:	e001      	b.n	800bbd6 <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 800bbd2:	2301      	movs	r3, #1
 800bbd4:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 800bbd6:	7ffb      	ldrb	r3, [r7, #31]
}
 800bbd8:	4618      	mov	r0, r3
 800bbda:	3720      	adds	r7, #32
 800bbdc:	46bd      	mov	sp, r7
 800bbde:	bd80      	pop	{r7, pc}
 800bbe0:	20000588 	.word	0x20000588
 800bbe4:	0800c81c 	.word	0x0800c81c

0800bbe8 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 800bbe8:	b580      	push	{r7, lr}
 800bbea:	b084      	sub	sp, #16
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	6078      	str	r0, [r7, #4]
 800bbf0:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800bbf2:	2300      	movs	r3, #0
 800bbf4:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d102      	bne.n	800bc02 <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 800bbfc:	2301      	movs	r3, #1
 800bbfe:	73fb      	strb	r3, [r7, #15]
 800bc00:	e014      	b.n	800bc2c <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 800bc02:	4b0d      	ldr	r3, [pc, #52]	; (800bc38 <UTIL_TIMER_SetPeriod+0x50>)
 800bc04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc06:	6838      	ldr	r0, [r7, #0]
 800bc08:	4798      	blx	r3
 800bc0a:	4602      	mov	r2, r0
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 800bc10:	6878      	ldr	r0, [r7, #4]
 800bc12:	f000 f8c1 	bl	800bd98 <TimerExists>
 800bc16:	4603      	mov	r3, r0
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d007      	beq.n	800bc2c <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 800bc1c:	6878      	ldr	r0, [r7, #4]
 800bc1e:	f7ff ff73 	bl	800bb08 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 800bc22:	6878      	ldr	r0, [r7, #4]
 800bc24:	f7ff ff02 	bl	800ba2c <UTIL_TIMER_Start>
 800bc28:	4603      	mov	r3, r0
 800bc2a:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 800bc2c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc2e:	4618      	mov	r0, r3
 800bc30:	3710      	adds	r7, #16
 800bc32:	46bd      	mov	sp, r7
 800bc34:	bd80      	pop	{r7, pc}
 800bc36:	bf00      	nop
 800bc38:	0800c81c 	.word	0x0800c81c

0800bc3c <UTIL_TIMER_IRQ_Handler>:
	}
	return NextTimer;
}

void UTIL_TIMER_IRQ_Handler( void )
{
 800bc3c:	b590      	push	{r4, r7, lr}
 800bc3e:	b089      	sub	sp, #36	; 0x24
 800bc40:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bc42:	f3ef 8310 	mrs	r3, PRIMASK
 800bc46:	60bb      	str	r3, [r7, #8]
  return(result);
 800bc48:	68bb      	ldr	r3, [r7, #8]
  UTIL_TIMER_Object_t* cur;
  uint32_t old, now, DeltaContext;

  UTIL_TIMER_ENTER_CRITICAL_SECTION();
 800bc4a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 800bc4c:	b672      	cpsid	i
}
 800bc4e:	bf00      	nop

  old  =  UTIL_TimerDriver.GetTimerContext( );
 800bc50:	4b38      	ldr	r3, [pc, #224]	; (800bd34 <UTIL_TIMER_IRQ_Handler+0xf8>)
 800bc52:	695b      	ldr	r3, [r3, #20]
 800bc54:	4798      	blx	r3
 800bc56:	6178      	str	r0, [r7, #20]
  now  =  UTIL_TimerDriver.SetTimerContext( );
 800bc58:	4b36      	ldr	r3, [pc, #216]	; (800bd34 <UTIL_TIMER_IRQ_Handler+0xf8>)
 800bc5a:	691b      	ldr	r3, [r3, #16]
 800bc5c:	4798      	blx	r3
 800bc5e:	6138      	str	r0, [r7, #16]

  DeltaContext = now  - old; /*intentional wrap around */
 800bc60:	693a      	ldr	r2, [r7, #16]
 800bc62:	697b      	ldr	r3, [r7, #20]
 800bc64:	1ad3      	subs	r3, r2, r3
 800bc66:	60fb      	str	r3, [r7, #12]
  
  /* update timeStamp based upon new Time Reference*/
  /* because delta context should never exceed 2^32*/
  if ( TimerListHead != NULL )
 800bc68:	4b33      	ldr	r3, [pc, #204]	; (800bd38 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d037      	beq.n	800bce0 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
    cur = TimerListHead;
 800bc70:	4b31      	ldr	r3, [pc, #196]	; (800bd38 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	61fb      	str	r3, [r7, #28]
	do {
      if (cur->Timestamp > DeltaContext)
 800bc76:	69fb      	ldr	r3, [r7, #28]
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	68fa      	ldr	r2, [r7, #12]
 800bc7c:	429a      	cmp	r2, r3
 800bc7e:	d206      	bcs.n	800bc8e <UTIL_TIMER_IRQ_Handler+0x52>
      {
        cur->Timestamp -= DeltaContext;
 800bc80:	69fb      	ldr	r3, [r7, #28]
 800bc82:	681a      	ldr	r2, [r3, #0]
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	1ad2      	subs	r2, r2, r3
 800bc88:	69fb      	ldr	r3, [r7, #28]
 800bc8a:	601a      	str	r2, [r3, #0]
 800bc8c:	e002      	b.n	800bc94 <UTIL_TIMER_IRQ_Handler+0x58>
      }
      else
      {
        cur->Timestamp = 0;
 800bc8e:	69fb      	ldr	r3, [r7, #28]
 800bc90:	2200      	movs	r2, #0
 800bc92:	601a      	str	r2, [r3, #0]
      }
      cur = cur->Next;
 800bc94:	69fb      	ldr	r3, [r7, #28]
 800bc96:	695b      	ldr	r3, [r3, #20]
 800bc98:	61fb      	str	r3, [r7, #28]
    } while(cur != NULL);
 800bc9a:	69fb      	ldr	r3, [r7, #28]
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d1ea      	bne.n	800bc76 <UTIL_TIMER_IRQ_Handler+0x3a>
  }

  /* Execute expired timer and update the list */
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 800bca0:	e01e      	b.n	800bce0 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
      cur = TimerListHead;
 800bca2:	4b25      	ldr	r3, [pc, #148]	; (800bd38 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	61fb      	str	r3, [r7, #28]
      TimerListHead = TimerListHead->Next;
 800bca8:	4b23      	ldr	r3, [pc, #140]	; (800bd38 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	695b      	ldr	r3, [r3, #20]
 800bcae:	4a22      	ldr	r2, [pc, #136]	; (800bd38 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800bcb0:	6013      	str	r3, [r2, #0]
      cur->IsPending = 0;
 800bcb2:	69fb      	ldr	r3, [r7, #28]
 800bcb4:	2200      	movs	r2, #0
 800bcb6:	721a      	strb	r2, [r3, #8]
      cur->IsRunning = 0;
 800bcb8:	69fb      	ldr	r3, [r7, #28]
 800bcba:	2200      	movs	r2, #0
 800bcbc:	725a      	strb	r2, [r3, #9]
      cur->Callback(cur->argument);
 800bcbe:	69fb      	ldr	r3, [r7, #28]
 800bcc0:	68db      	ldr	r3, [r3, #12]
 800bcc2:	69fa      	ldr	r2, [r7, #28]
 800bcc4:	6912      	ldr	r2, [r2, #16]
 800bcc6:	4610      	mov	r0, r2
 800bcc8:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 800bcca:	69fb      	ldr	r3, [r7, #28]
 800bccc:	7adb      	ldrb	r3, [r3, #11]
 800bcce:	2b01      	cmp	r3, #1
 800bcd0:	d106      	bne.n	800bce0 <UTIL_TIMER_IRQ_Handler+0xa4>
 800bcd2:	69fb      	ldr	r3, [r7, #28]
 800bcd4:	7a9b      	ldrb	r3, [r3, #10]
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d102      	bne.n	800bce0 <UTIL_TIMER_IRQ_Handler+0xa4>
      {
        (void)UTIL_TIMER_Start(cur);
 800bcda:	69f8      	ldr	r0, [r7, #28]
 800bcdc:	f7ff fea6 	bl	800ba2c <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 800bce0:	4b15      	ldr	r3, [pc, #84]	; (800bd38 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d00d      	beq.n	800bd04 <UTIL_TIMER_IRQ_Handler+0xc8>
 800bce8:	4b13      	ldr	r3, [pc, #76]	; (800bd38 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d0d7      	beq.n	800bca2 <UTIL_TIMER_IRQ_Handler+0x66>
 800bcf2:	4b11      	ldr	r3, [pc, #68]	; (800bd38 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	681c      	ldr	r4, [r3, #0]
 800bcf8:	4b0e      	ldr	r3, [pc, #56]	; (800bd34 <UTIL_TIMER_IRQ_Handler+0xf8>)
 800bcfa:	699b      	ldr	r3, [r3, #24]
 800bcfc:	4798      	blx	r3
 800bcfe:	4603      	mov	r3, r0
 800bd00:	429c      	cmp	r4, r3
 800bd02:	d3ce      	bcc.n	800bca2 <UTIL_TIMER_IRQ_Handler+0x66>
      }
  }

  /* start the next TimerListHead if it exists and it is not pending*/
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 800bd04:	4b0c      	ldr	r3, [pc, #48]	; (800bd38 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d009      	beq.n	800bd20 <UTIL_TIMER_IRQ_Handler+0xe4>
 800bd0c:	4b0a      	ldr	r3, [pc, #40]	; (800bd38 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	7a1b      	ldrb	r3, [r3, #8]
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d104      	bne.n	800bd20 <UTIL_TIMER_IRQ_Handler+0xe4>
  {
    TimerSetTimeout( TimerListHead );
 800bd16:	4b08      	ldr	r3, [pc, #32]	; (800bd38 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	4618      	mov	r0, r3
 800bd1c:	f000 f858 	bl	800bdd0 <TimerSetTimeout>
 800bd20:	69bb      	ldr	r3, [r7, #24]
 800bd22:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	f383 8810 	msr	PRIMASK, r3
}
 800bd2a:	bf00      	nop
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}
 800bd2c:	bf00      	nop
 800bd2e:	3724      	adds	r7, #36	; 0x24
 800bd30:	46bd      	mov	sp, r7
 800bd32:	bd90      	pop	{r4, r7, pc}
 800bd34:	0800c81c 	.word	0x0800c81c
 800bd38:	20000588 	.word	0x20000588

0800bd3c <UTIL_TIMER_GetCurrentTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 800bd3c:	b580      	push	{r7, lr}
 800bd3e:	b082      	sub	sp, #8
 800bd40:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 800bd42:	4b06      	ldr	r3, [pc, #24]	; (800bd5c <UTIL_TIMER_GetCurrentTime+0x20>)
 800bd44:	69db      	ldr	r3, [r3, #28]
 800bd46:	4798      	blx	r3
 800bd48:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 800bd4a:	4b04      	ldr	r3, [pc, #16]	; (800bd5c <UTIL_TIMER_GetCurrentTime+0x20>)
 800bd4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd4e:	6878      	ldr	r0, [r7, #4]
 800bd50:	4798      	blx	r3
 800bd52:	4603      	mov	r3, r0
}
 800bd54:	4618      	mov	r0, r3
 800bd56:	3708      	adds	r7, #8
 800bd58:	46bd      	mov	sp, r7
 800bd5a:	bd80      	pop	{r7, pc}
 800bd5c:	0800c81c 	.word	0x0800c81c

0800bd60 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 800bd60:	b580      	push	{r7, lr}
 800bd62:	b084      	sub	sp, #16
 800bd64:	af00      	add	r7, sp, #0
 800bd66:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 800bd68:	4b0a      	ldr	r3, [pc, #40]	; (800bd94 <UTIL_TIMER_GetElapsedTime+0x34>)
 800bd6a:	69db      	ldr	r3, [r3, #28]
 800bd6c:	4798      	blx	r3
 800bd6e:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 800bd70:	4b08      	ldr	r3, [pc, #32]	; (800bd94 <UTIL_TIMER_GetElapsedTime+0x34>)
 800bd72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd74:	6878      	ldr	r0, [r7, #4]
 800bd76:	4798      	blx	r3
 800bd78:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 800bd7a:	4b06      	ldr	r3, [pc, #24]	; (800bd94 <UTIL_TIMER_GetElapsedTime+0x34>)
 800bd7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd7e:	68f9      	ldr	r1, [r7, #12]
 800bd80:	68ba      	ldr	r2, [r7, #8]
 800bd82:	1a8a      	subs	r2, r1, r2
 800bd84:	4610      	mov	r0, r2
 800bd86:	4798      	blx	r3
 800bd88:	4603      	mov	r3, r0
}
 800bd8a:	4618      	mov	r0, r3
 800bd8c:	3710      	adds	r7, #16
 800bd8e:	46bd      	mov	sp, r7
 800bd90:	bd80      	pop	{r7, pc}
 800bd92:	bf00      	nop
 800bd94:	0800c81c 	.word	0x0800c81c

0800bd98 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 800bd98:	b480      	push	{r7}
 800bd9a:	b085      	sub	sp, #20
 800bd9c:	af00      	add	r7, sp, #0
 800bd9e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800bda0:	4b0a      	ldr	r3, [pc, #40]	; (800bdcc <TimerExists+0x34>)
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 800bda6:	e008      	b.n	800bdba <TimerExists+0x22>
  {
    if( cur == TimerObject )
 800bda8:	68fa      	ldr	r2, [r7, #12]
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	429a      	cmp	r2, r3
 800bdae:	d101      	bne.n	800bdb4 <TimerExists+0x1c>
    {
      return true;
 800bdb0:	2301      	movs	r3, #1
 800bdb2:	e006      	b.n	800bdc2 <TimerExists+0x2a>
    }
    cur = cur->Next;
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	695b      	ldr	r3, [r3, #20]
 800bdb8:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d1f3      	bne.n	800bda8 <TimerExists+0x10>
  }
  return false;
 800bdc0:	2300      	movs	r3, #0
}
 800bdc2:	4618      	mov	r0, r3
 800bdc4:	3714      	adds	r7, #20
 800bdc6:	46bd      	mov	sp, r7
 800bdc8:	bc80      	pop	{r7}
 800bdca:	4770      	bx	lr
 800bdcc:	20000588 	.word	0x20000588

0800bdd0 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 800bdd0:	b590      	push	{r4, r7, lr}
 800bdd2:	b085      	sub	sp, #20
 800bdd4:	af00      	add	r7, sp, #0
 800bdd6:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 800bdd8:	4b11      	ldr	r3, [pc, #68]	; (800be20 <TimerSetTimeout+0x50>)
 800bdda:	6a1b      	ldr	r3, [r3, #32]
 800bddc:	4798      	blx	r3
 800bdde:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	2201      	movs	r2, #1
 800bde4:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	681c      	ldr	r4, [r3, #0]
 800bdea:	4b0d      	ldr	r3, [pc, #52]	; (800be20 <TimerSetTimeout+0x50>)
 800bdec:	699b      	ldr	r3, [r3, #24]
 800bdee:	4798      	blx	r3
 800bdf0:	4602      	mov	r2, r0
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	4413      	add	r3, r2
 800bdf6:	429c      	cmp	r4, r3
 800bdf8:	d207      	bcs.n	800be0a <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 800bdfa:	4b09      	ldr	r3, [pc, #36]	; (800be20 <TimerSetTimeout+0x50>)
 800bdfc:	699b      	ldr	r3, [r3, #24]
 800bdfe:	4798      	blx	r3
 800be00:	4602      	mov	r2, r0
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	441a      	add	r2, r3
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 800be0a:	4b05      	ldr	r3, [pc, #20]	; (800be20 <TimerSetTimeout+0x50>)
 800be0c:	689b      	ldr	r3, [r3, #8]
 800be0e:	687a      	ldr	r2, [r7, #4]
 800be10:	6812      	ldr	r2, [r2, #0]
 800be12:	4610      	mov	r0, r2
 800be14:	4798      	blx	r3
}
 800be16:	bf00      	nop
 800be18:	3714      	adds	r7, #20
 800be1a:	46bd      	mov	sp, r7
 800be1c:	bd90      	pop	{r4, r7, pc}
 800be1e:	bf00      	nop
 800be20:	0800c81c 	.word	0x0800c81c

0800be24 <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 800be24:	b480      	push	{r7}
 800be26:	b085      	sub	sp, #20
 800be28:	af00      	add	r7, sp, #0
 800be2a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800be2c:	4b14      	ldr	r3, [pc, #80]	; (800be80 <TimerInsertTimer+0x5c>)
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 800be32:	4b13      	ldr	r3, [pc, #76]	; (800be80 <TimerInsertTimer+0x5c>)
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	695b      	ldr	r3, [r3, #20]
 800be38:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 800be3a:	e012      	b.n	800be62 <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	681a      	ldr	r2, [r3, #0]
 800be40:	68bb      	ldr	r3, [r7, #8]
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	429a      	cmp	r2, r3
 800be46:	d905      	bls.n	800be54 <TimerInsertTimer+0x30>
    {
        cur = next;
 800be48:	68bb      	ldr	r3, [r7, #8]
 800be4a:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 800be4c:	68bb      	ldr	r3, [r7, #8]
 800be4e:	695b      	ldr	r3, [r3, #20]
 800be50:	60bb      	str	r3, [r7, #8]
 800be52:	e006      	b.n	800be62 <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	687a      	ldr	r2, [r7, #4]
 800be58:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	68ba      	ldr	r2, [r7, #8]
 800be5e:	615a      	str	r2, [r3, #20]
        return;
 800be60:	e009      	b.n	800be76 <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	695b      	ldr	r3, [r3, #20]
 800be66:	2b00      	cmp	r3, #0
 800be68:	d1e8      	bne.n	800be3c <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	687a      	ldr	r2, [r7, #4]
 800be6e:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	2200      	movs	r2, #0
 800be74:	615a      	str	r2, [r3, #20]
}
 800be76:	3714      	adds	r7, #20
 800be78:	46bd      	mov	sp, r7
 800be7a:	bc80      	pop	{r7}
 800be7c:	4770      	bx	lr
 800be7e:	bf00      	nop
 800be80:	20000588 	.word	0x20000588

0800be84 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 800be84:	b580      	push	{r7, lr}
 800be86:	b084      	sub	sp, #16
 800be88:	af00      	add	r7, sp, #0
 800be8a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800be8c:	4b0b      	ldr	r3, [pc, #44]	; (800bebc <TimerInsertNewHeadTimer+0x38>)
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	2b00      	cmp	r3, #0
 800be96:	d002      	beq.n	800be9e <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	2200      	movs	r2, #0
 800be9c:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	68fa      	ldr	r2, [r7, #12]
 800bea2:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 800bea4:	4a05      	ldr	r2, [pc, #20]	; (800bebc <TimerInsertNewHeadTimer+0x38>)
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 800beaa:	4b04      	ldr	r3, [pc, #16]	; (800bebc <TimerInsertNewHeadTimer+0x38>)
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	4618      	mov	r0, r3
 800beb0:	f7ff ff8e 	bl	800bdd0 <TimerSetTimeout>
}
 800beb4:	bf00      	nop
 800beb6:	3710      	adds	r7, #16
 800beb8:	46bd      	mov	sp, r7
 800beba:	bd80      	pop	{r7, pc}
 800bebc:	20000588 	.word	0x20000588

0800bec0 <UTIL_ADV_TRACE_Init>:

/** @addtogroup ADV_TRACE_exported_function
 *  @{
 */
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_Init(void)
{
 800bec0:	b580      	push	{r7, lr}
 800bec2:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 800bec4:	2218      	movs	r2, #24
 800bec6:	2100      	movs	r1, #0
 800bec8:	4807      	ldr	r0, [pc, #28]	; (800bee8 <UTIL_ADV_TRACE_Init+0x28>)
 800beca:	f7ff f8e6 	bl	800b09a <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 800bece:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bed2:	2100      	movs	r1, #0
 800bed4:	4805      	ldr	r0, [pc, #20]	; (800beec <UTIL_ADV_TRACE_Init+0x2c>)
 800bed6:	f7ff f8e0 	bl	800b09a <UTIL_MEM_set_8>
#endif
  /* Allocate Lock resource */
  UTIL_ADV_TRACE_INIT_CRITICAL_SECTION();

  /* Initialize the Low Level interface */
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 800beda:	4b05      	ldr	r3, [pc, #20]	; (800bef0 <UTIL_ADV_TRACE_Init+0x30>)
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	4805      	ldr	r0, [pc, #20]	; (800bef4 <UTIL_ADV_TRACE_Init+0x34>)
 800bee0:	4798      	blx	r3
 800bee2:	4603      	mov	r3, r0
}
 800bee4:	4618      	mov	r0, r3
 800bee6:	bd80      	pop	{r7, pc}
 800bee8:	2000058c 	.word	0x2000058c
 800beec:	200005a4 	.word	0x200005a4
 800bef0:	0800c85c 	.word	0x0800c85c
 800bef4:	0800c13d 	.word	0x0800c13d

0800bef8 <UTIL_ADV_TRACE_COND_FSend>:
  return UTIL_TraceDriver.StartRx(UserCallback);
}

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_COND_FSend(uint32_t VerboseLevel, uint32_t Region, uint32_t TimeStampState, const char *strFormat, ...)
{
 800bef8:	b408      	push	{r3}
 800befa:	b580      	push	{r7, lr}
 800befc:	b08d      	sub	sp, #52	; 0x34
 800befe:	af00      	add	r7, sp, #0
 800bf00:	60f8      	str	r0, [r7, #12]
 800bf02:	60b9      	str	r1, [r7, #8]
 800bf04:	607a      	str	r2, [r7, #4]
  va_list vaArgs;
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  uint8_t buf[UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
  uint16_t timestamp_size = 0u;
 800bf06:	2300      	movs	r3, #0
 800bf08:	82fb      	strh	r3, [r7, #22]
  uint16_t writepos;
  uint16_t idx;
#else
  uint8_t buf[UTIL_ADV_TRACE_TMP_BUF_SIZE+UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
#endif
  uint16_t buff_size = 0u;
 800bf0a:	2300      	movs	r3, #0
 800bf0c:	85bb      	strh	r3, [r7, #44]	; 0x2c

  /* check verbose level */
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 800bf0e:	4b37      	ldr	r3, [pc, #220]	; (800bfec <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 800bf10:	7a1b      	ldrb	r3, [r3, #8]
 800bf12:	461a      	mov	r2, r3
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	4293      	cmp	r3, r2
 800bf18:	d902      	bls.n	800bf20 <UTIL_ADV_TRACE_COND_FSend+0x28>
  {
    return UTIL_ADV_TRACE_GIVEUP;
 800bf1a:	f06f 0304 	mvn.w	r3, #4
 800bf1e:	e05e      	b.n	800bfde <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 800bf20:	4b32      	ldr	r3, [pc, #200]	; (800bfec <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 800bf22:	68da      	ldr	r2, [r3, #12]
 800bf24:	68bb      	ldr	r3, [r7, #8]
 800bf26:	4013      	ands	r3, r2
 800bf28:	68ba      	ldr	r2, [r7, #8]
 800bf2a:	429a      	cmp	r2, r3
 800bf2c:	d002      	beq.n	800bf34 <UTIL_ADV_TRACE_COND_FSend+0x3c>
  {
    return UTIL_ADV_TRACE_REGIONMASKED;
 800bf2e:	f06f 0305 	mvn.w	r3, #5
 800bf32:	e054      	b.n	800bfde <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 800bf34:	4b2d      	ldr	r3, [pc, #180]	; (800bfec <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 800bf36:	685b      	ldr	r3, [r3, #4]
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d00a      	beq.n	800bf52 <UTIL_ADV_TRACE_COND_FSend+0x5a>
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d007      	beq.n	800bf52 <UTIL_ADV_TRACE_COND_FSend+0x5a>
  {
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 800bf42:	4b2a      	ldr	r3, [pc, #168]	; (800bfec <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 800bf44:	685b      	ldr	r3, [r3, #4]
 800bf46:	f107 0116 	add.w	r1, r7, #22
 800bf4a:	f107 0218 	add.w	r2, r7, #24
 800bf4e:	4610      	mov	r0, r2
 800bf50:	4798      	blx	r3
  }

  va_start( vaArgs, strFormat);
 800bf52:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800bf56:	62bb      	str	r3, [r7, #40]	; 0x28
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 800bf58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf5a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bf5c:	f44f 7180 	mov.w	r1, #256	; 0x100
 800bf60:	4823      	ldr	r0, [pc, #140]	; (800bff0 <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 800bf62:	f7ff fa3b 	bl	800b3dc <tiny_vsnprintf_like>
 800bf66:	4603      	mov	r3, r0
 800bf68:	85bb      	strh	r3, [r7, #44]	; 0x2c

  TRACE_Lock();
 800bf6a:	f000 f9f1 	bl	800c350 <TRACE_Lock>

  /* if allocation is ok, write data into the buffer */
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 800bf6e:	8afa      	ldrh	r2, [r7, #22]
 800bf70:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800bf72:	4413      	add	r3, r2
 800bf74:	b29b      	uxth	r3, r3
 800bf76:	f107 0214 	add.w	r2, r7, #20
 800bf7a:	4611      	mov	r1, r2
 800bf7c:	4618      	mov	r0, r3
 800bf7e:	f000 f969 	bl	800c254 <TRACE_AllocateBufer>
 800bf82:	4603      	mov	r3, r0
 800bf84:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf88:	d025      	beq.n	800bfd6 <UTIL_ADV_TRACE_COND_FSend+0xde>
    }
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

    /* copy the timestamp */
    for (idx = 0u; idx < timestamp_size; idx++)
 800bf8a:	2300      	movs	r3, #0
 800bf8c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800bf8e:	e00e      	b.n	800bfae <UTIL_ADV_TRACE_COND_FSend+0xb6>
    {
      ADV_TRACE_Buffer[writepos] = buf[idx];
 800bf90:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bf92:	8aba      	ldrh	r2, [r7, #20]
 800bf94:	3330      	adds	r3, #48	; 0x30
 800bf96:	443b      	add	r3, r7
 800bf98:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 800bf9c:	4b15      	ldr	r3, [pc, #84]	; (800bff4 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 800bf9e:	5499      	strb	r1, [r3, r2]
      writepos = writepos + 1u;
 800bfa0:	8abb      	ldrh	r3, [r7, #20]
 800bfa2:	3301      	adds	r3, #1
 800bfa4:	b29b      	uxth	r3, r3
 800bfa6:	82bb      	strh	r3, [r7, #20]
    for (idx = 0u; idx < timestamp_size; idx++)
 800bfa8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bfaa:	3301      	adds	r3, #1
 800bfac:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800bfae:	8afb      	ldrh	r3, [r7, #22]
 800bfb0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800bfb2:	429a      	cmp	r2, r3
 800bfb4:	d3ec      	bcc.n	800bf90 <UTIL_ADV_TRACE_COND_FSend+0x98>
    }

    /* copy the data */
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 800bfb6:	8abb      	ldrh	r3, [r7, #20]
 800bfb8:	461a      	mov	r2, r3
 800bfba:	4b0e      	ldr	r3, [pc, #56]	; (800bff4 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 800bfbc:	18d0      	adds	r0, r2, r3
 800bfbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfc0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bfc2:	f44f 7180 	mov.w	r1, #256	; 0x100
 800bfc6:	f7ff fa09 	bl	800b3dc <tiny_vsnprintf_like>
    va_end(vaArgs);

    TRACE_UnLock();
 800bfca:	f000 f9df 	bl	800c38c <TRACE_UnLock>

    return TRACE_Send();
 800bfce:	f000 f831 	bl	800c034 <TRACE_Send>
 800bfd2:	4603      	mov	r3, r0
 800bfd4:	e003      	b.n	800bfde <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  va_end(vaArgs);
  TRACE_UnLock();
 800bfd6:	f000 f9d9 	bl	800c38c <TRACE_UnLock>
    ADV_TRACE_Ctx.OverRunStatus = TRACE_OVERRUN_INDICATION;
  }
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

  return UTIL_ADV_TRACE_MEM_FULL;
 800bfda:	f06f 0302 	mvn.w	r3, #2
  buff_size += (uint16_t) UTIL_ADV_TRACE_VSNPRINTF((char* )(buf + buff_size), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
  va_end(vaArgs);

  return UTIL_ADV_TRACE_Send(buf, buff_size);
#endif
}
 800bfde:	4618      	mov	r0, r3
 800bfe0:	3734      	adds	r7, #52	; 0x34
 800bfe2:	46bd      	mov	sp, r7
 800bfe4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bfe8:	b001      	add	sp, #4
 800bfea:	4770      	bx	lr
 800bfec:	2000058c 	.word	0x2000058c
 800bff0:	200007a4 	.word	0x200007a4
 800bff4:	200005a4 	.word	0x200005a4

0800bff8 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
}
#endif

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
void UTIL_ADV_TRACE_RegisterTimeStampFunction(cb_timestamp *cb)
{
 800bff8:	b480      	push	{r7}
 800bffa:	b083      	sub	sp, #12
 800bffc:	af00      	add	r7, sp, #0
 800bffe:	6078      	str	r0, [r7, #4]
  ADV_TRACE_Ctx.timestamp_func = *cb;
 800c000:	4a03      	ldr	r2, [pc, #12]	; (800c010 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x18>)
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	6053      	str	r3, [r2, #4]
}
 800c006:	bf00      	nop
 800c008:	370c      	adds	r7, #12
 800c00a:	46bd      	mov	sp, r7
 800c00c:	bc80      	pop	{r7}
 800c00e:	4770      	bx	lr
 800c010:	2000058c 	.word	0x2000058c

0800c014 <UTIL_ADV_TRACE_SetVerboseLevel>:

void UTIL_ADV_TRACE_SetVerboseLevel(uint8_t Level)
{
 800c014:	b480      	push	{r7}
 800c016:	b083      	sub	sp, #12
 800c018:	af00      	add	r7, sp, #0
 800c01a:	4603      	mov	r3, r0
 800c01c:	71fb      	strb	r3, [r7, #7]
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 800c01e:	4a04      	ldr	r2, [pc, #16]	; (800c030 <UTIL_ADV_TRACE_SetVerboseLevel+0x1c>)
 800c020:	79fb      	ldrb	r3, [r7, #7]
 800c022:	7213      	strb	r3, [r2, #8]
}
 800c024:	bf00      	nop
 800c026:	370c      	adds	r7, #12
 800c028:	46bd      	mov	sp, r7
 800c02a:	bc80      	pop	{r7}
 800c02c:	4770      	bx	lr
 800c02e:	bf00      	nop
 800c030:	2000058c 	.word	0x2000058c

0800c034 <TRACE_Send>:
/**
 * @brief send the data of the trace to low layer
 * @retval Status based on @ref UTIL_ADV_TRACE_Status_t
 */
static UTIL_ADV_TRACE_Status_t TRACE_Send(void)
{
 800c034:	b580      	push	{r7, lr}
 800c036:	b088      	sub	sp, #32
 800c038:	af00      	add	r7, sp, #0
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 800c03a:	2300      	movs	r3, #0
 800c03c:	77fb      	strb	r3, [r7, #31]
  uint8_t *ptr = NULL;
 800c03e:	2300      	movs	r3, #0
 800c040:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c042:	f3ef 8310 	mrs	r3, PRIMASK
 800c046:	613b      	str	r3, [r7, #16]
  return(result);
 800c048:	693b      	ldr	r3, [r7, #16]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 800c04a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c04c:	b672      	cpsid	i
}
 800c04e:	bf00      	nop

  if(TRACE_IsLocked() == 0u)
 800c050:	f000 f9ba 	bl	800c3c8 <TRACE_IsLocked>
 800c054:	4603      	mov	r3, r0
 800c056:	2b00      	cmp	r3, #0
 800c058:	d15d      	bne.n	800c116 <TRACE_Send+0xe2>
  {
    TRACE_Lock();
 800c05a:	f000 f979 	bl	800c350 <TRACE_Lock>

    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 800c05e:	4b34      	ldr	r3, [pc, #208]	; (800c130 <TRACE_Send+0xfc>)
 800c060:	8a1a      	ldrh	r2, [r3, #16]
 800c062:	4b33      	ldr	r3, [pc, #204]	; (800c130 <TRACE_Send+0xfc>)
 800c064:	8a5b      	ldrh	r3, [r3, #18]
 800c066:	429a      	cmp	r2, r3
 800c068:	d04d      	beq.n	800c106 <TRACE_Send+0xd2>
    {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 800c06a:	4b31      	ldr	r3, [pc, #196]	; (800c130 <TRACE_Send+0xfc>)
 800c06c:	789b      	ldrb	r3, [r3, #2]
 800c06e:	2b01      	cmp	r3, #1
 800c070:	d117      	bne.n	800c0a2 <TRACE_Send+0x6e>
      {
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 800c072:	4b2f      	ldr	r3, [pc, #188]	; (800c130 <TRACE_Send+0xfc>)
 800c074:	881a      	ldrh	r2, [r3, #0]
 800c076:	4b2e      	ldr	r3, [pc, #184]	; (800c130 <TRACE_Send+0xfc>)
 800c078:	8a1b      	ldrh	r3, [r3, #16]
 800c07a:	1ad3      	subs	r3, r2, r3
 800c07c:	b29a      	uxth	r2, r3
 800c07e:	4b2c      	ldr	r3, [pc, #176]	; (800c130 <TRACE_Send+0xfc>)
 800c080:	829a      	strh	r2, [r3, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 800c082:	4b2b      	ldr	r3, [pc, #172]	; (800c130 <TRACE_Send+0xfc>)
 800c084:	2202      	movs	r2, #2
 800c086:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 800c088:	4b29      	ldr	r3, [pc, #164]	; (800c130 <TRACE_Send+0xfc>)
 800c08a:	2200      	movs	r2, #0
 800c08c:	801a      	strh	r2, [r3, #0]

        UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 800c08e:	4b28      	ldr	r3, [pc, #160]	; (800c130 <TRACE_Send+0xfc>)
 800c090:	8a9b      	ldrh	r3, [r3, #20]
 800c092:	2b00      	cmp	r3, #0
 800c094:	d105      	bne.n	800c0a2 <TRACE_Send+0x6e>
        {
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 800c096:	4b26      	ldr	r3, [pc, #152]	; (800c130 <TRACE_Send+0xfc>)
 800c098:	2200      	movs	r2, #0
 800c09a:	709a      	strb	r2, [r3, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 800c09c:	4b24      	ldr	r3, [pc, #144]	; (800c130 <TRACE_Send+0xfc>)
 800c09e:	2200      	movs	r2, #0
 800c0a0:	821a      	strh	r2, [r3, #16]
        }
      }

      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 800c0a2:	4b23      	ldr	r3, [pc, #140]	; (800c130 <TRACE_Send+0xfc>)
 800c0a4:	789b      	ldrb	r3, [r3, #2]
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d115      	bne.n	800c0d6 <TRACE_Send+0xa2>
      {
#endif
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 800c0aa:	4b21      	ldr	r3, [pc, #132]	; (800c130 <TRACE_Send+0xfc>)
 800c0ac:	8a5a      	ldrh	r2, [r3, #18]
 800c0ae:	4b20      	ldr	r3, [pc, #128]	; (800c130 <TRACE_Send+0xfc>)
 800c0b0:	8a1b      	ldrh	r3, [r3, #16]
 800c0b2:	429a      	cmp	r2, r3
 800c0b4:	d908      	bls.n	800c0c8 <TRACE_Send+0x94>
        {
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 800c0b6:	4b1e      	ldr	r3, [pc, #120]	; (800c130 <TRACE_Send+0xfc>)
 800c0b8:	8a5a      	ldrh	r2, [r3, #18]
 800c0ba:	4b1d      	ldr	r3, [pc, #116]	; (800c130 <TRACE_Send+0xfc>)
 800c0bc:	8a1b      	ldrh	r3, [r3, #16]
 800c0be:	1ad3      	subs	r3, r2, r3
 800c0c0:	b29a      	uxth	r2, r3
 800c0c2:	4b1b      	ldr	r3, [pc, #108]	; (800c130 <TRACE_Send+0xfc>)
 800c0c4:	829a      	strh	r2, [r3, #20]
 800c0c6:	e006      	b.n	800c0d6 <TRACE_Send+0xa2>
        }
        else /* TraceRdPtr > TraceWrPtr */
        {
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 800c0c8:	4b19      	ldr	r3, [pc, #100]	; (800c130 <TRACE_Send+0xfc>)
 800c0ca:	8a1b      	ldrh	r3, [r3, #16]
 800c0cc:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800c0d0:	b29a      	uxth	r2, r3
 800c0d2:	4b17      	ldr	r3, [pc, #92]	; (800c130 <TRACE_Send+0xfc>)
 800c0d4:	829a      	strh	r2, [r3, #20]

        }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      }
#endif
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 800c0d6:	4b16      	ldr	r3, [pc, #88]	; (800c130 <TRACE_Send+0xfc>)
 800c0d8:	8a1b      	ldrh	r3, [r3, #16]
 800c0da:	461a      	mov	r2, r3
 800c0dc:	4b15      	ldr	r3, [pc, #84]	; (800c134 <TRACE_Send+0x100>)
 800c0de:	4413      	add	r3, r2
 800c0e0:	61bb      	str	r3, [r7, #24]
 800c0e2:	697b      	ldr	r3, [r7, #20]
 800c0e4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	f383 8810 	msr	PRIMASK, r3
}
 800c0ec:	bf00      	nop

      UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
      UTIL_ADV_TRACE_PreSendHook();
 800c0ee:	f7f4 fcc7 	bl	8000a80 <UTIL_ADV_TRACE_PreSendHook>

      UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 800c0f2:	4b11      	ldr	r3, [pc, #68]	; (800c138 <TRACE_Send+0x104>)
 800c0f4:	68db      	ldr	r3, [r3, #12]
 800c0f6:	4a0e      	ldr	r2, [pc, #56]	; (800c130 <TRACE_Send+0xfc>)
 800c0f8:	8a92      	ldrh	r2, [r2, #20]
 800c0fa:	4611      	mov	r1, r2
 800c0fc:	69b8      	ldr	r0, [r7, #24]
 800c0fe:	4798      	blx	r3
 800c100:	4603      	mov	r3, r0
 800c102:	77fb      	strb	r3, [r7, #31]
 800c104:	e00d      	b.n	800c122 <TRACE_Send+0xee>
    }
    else
    {
      TRACE_UnLock();
 800c106:	f000 f941 	bl	800c38c <TRACE_UnLock>
 800c10a:	697b      	ldr	r3, [r7, #20]
 800c10c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c10e:	68bb      	ldr	r3, [r7, #8]
 800c110:	f383 8810 	msr	PRIMASK, r3
}
 800c114:	e005      	b.n	800c122 <TRACE_Send+0xee>
 800c116:	697b      	ldr	r3, [r7, #20]
 800c118:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	f383 8810 	msr	PRIMASK, r3
}
 800c120:	bf00      	nop
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  }

  return ret;
 800c122:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800c126:	4618      	mov	r0, r3
 800c128:	3720      	adds	r7, #32
 800c12a:	46bd      	mov	sp, r7
 800c12c:	bd80      	pop	{r7, pc}
 800c12e:	bf00      	nop
 800c130:	2000058c 	.word	0x2000058c
 800c134:	200005a4 	.word	0x200005a4
 800c138:	0800c85c 	.word	0x0800c85c

0800c13c <TRACE_TxCpltCallback>:
 * @brief Tx callback called by the low layer level to inform a transfer complete
 * @param Ptr pointer not used only for HAL compatibility
 * @retval none
 */
static void TRACE_TxCpltCallback(void *Ptr)
{
 800c13c:	b580      	push	{r7, lr}
 800c13e:	b088      	sub	sp, #32
 800c140:	af00      	add	r7, sp, #0
 800c142:	6078      	str	r0, [r7, #4]
  uint8_t *ptr = NULL;
 800c144:	2300      	movs	r3, #0
 800c146:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c148:	f3ef 8310 	mrs	r3, PRIMASK
 800c14c:	617b      	str	r3, [r7, #20]
  return(result);
 800c14e:	697b      	ldr	r3, [r7, #20]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 800c150:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 800c152:	b672      	cpsid	i
}
 800c154:	bf00      	nop
    ADV_TRACE_Ctx.TraceSentSize = 0u;
  }
#endif

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 800c156:	4b3c      	ldr	r3, [pc, #240]	; (800c248 <TRACE_TxCpltCallback+0x10c>)
 800c158:	789b      	ldrb	r3, [r3, #2]
 800c15a:	2b02      	cmp	r3, #2
 800c15c:	d106      	bne.n	800c16c <TRACE_TxCpltCallback+0x30>
  {
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 800c15e:	4b3a      	ldr	r3, [pc, #232]	; (800c248 <TRACE_TxCpltCallback+0x10c>)
 800c160:	2200      	movs	r2, #0
 800c162:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 800c164:	4b38      	ldr	r3, [pc, #224]	; (800c248 <TRACE_TxCpltCallback+0x10c>)
 800c166:	2200      	movs	r2, #0
 800c168:	821a      	strh	r2, [r3, #16]
 800c16a:	e00a      	b.n	800c182 <TRACE_TxCpltCallback+0x46>
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
  }
  else
  {
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 800c16c:	4b36      	ldr	r3, [pc, #216]	; (800c248 <TRACE_TxCpltCallback+0x10c>)
 800c16e:	8a1a      	ldrh	r2, [r3, #16]
 800c170:	4b35      	ldr	r3, [pc, #212]	; (800c248 <TRACE_TxCpltCallback+0x10c>)
 800c172:	8a9b      	ldrh	r3, [r3, #20]
 800c174:	4413      	add	r3, r2
 800c176:	b29b      	uxth	r3, r3
 800c178:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c17c:	b29a      	uxth	r2, r3
 800c17e:	4b32      	ldr	r3, [pc, #200]	; (800c248 <TRACE_TxCpltCallback+0x10c>)
 800c180:	821a      	strh	r2, [r3, #16]
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
    return;
  }
#endif

  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 800c182:	4b31      	ldr	r3, [pc, #196]	; (800c248 <TRACE_TxCpltCallback+0x10c>)
 800c184:	8a1a      	ldrh	r2, [r3, #16]
 800c186:	4b30      	ldr	r3, [pc, #192]	; (800c248 <TRACE_TxCpltCallback+0x10c>)
 800c188:	8a5b      	ldrh	r3, [r3, #18]
 800c18a:	429a      	cmp	r2, r3
 800c18c:	d04d      	beq.n	800c22a <TRACE_TxCpltCallback+0xee>
 800c18e:	4b2e      	ldr	r3, [pc, #184]	; (800c248 <TRACE_TxCpltCallback+0x10c>)
 800c190:	8adb      	ldrh	r3, [r3, #22]
 800c192:	2b01      	cmp	r3, #1
 800c194:	d149      	bne.n	800c22a <TRACE_TxCpltCallback+0xee>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 800c196:	4b2c      	ldr	r3, [pc, #176]	; (800c248 <TRACE_TxCpltCallback+0x10c>)
 800c198:	789b      	ldrb	r3, [r3, #2]
 800c19a:	2b01      	cmp	r3, #1
 800c19c:	d117      	bne.n	800c1ce <TRACE_TxCpltCallback+0x92>
    {
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 800c19e:	4b2a      	ldr	r3, [pc, #168]	; (800c248 <TRACE_TxCpltCallback+0x10c>)
 800c1a0:	881a      	ldrh	r2, [r3, #0]
 800c1a2:	4b29      	ldr	r3, [pc, #164]	; (800c248 <TRACE_TxCpltCallback+0x10c>)
 800c1a4:	8a1b      	ldrh	r3, [r3, #16]
 800c1a6:	1ad3      	subs	r3, r2, r3
 800c1a8:	b29a      	uxth	r2, r3
 800c1aa:	4b27      	ldr	r3, [pc, #156]	; (800c248 <TRACE_TxCpltCallback+0x10c>)
 800c1ac:	829a      	strh	r2, [r3, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 800c1ae:	4b26      	ldr	r3, [pc, #152]	; (800c248 <TRACE_TxCpltCallback+0x10c>)
 800c1b0:	2202      	movs	r2, #2
 800c1b2:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 800c1b4:	4b24      	ldr	r3, [pc, #144]	; (800c248 <TRACE_TxCpltCallback+0x10c>)
 800c1b6:	2200      	movs	r2, #0
 800c1b8:	801a      	strh	r2, [r3, #0]

      UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 800c1ba:	4b23      	ldr	r3, [pc, #140]	; (800c248 <TRACE_TxCpltCallback+0x10c>)
 800c1bc:	8a9b      	ldrh	r3, [r3, #20]
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d105      	bne.n	800c1ce <TRACE_TxCpltCallback+0x92>
      {
        /* this case occurs when an ongoing write aligned the Rd position with chunk position */
        /* in that case the unchunk is forgot */
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 800c1c2:	4b21      	ldr	r3, [pc, #132]	; (800c248 <TRACE_TxCpltCallback+0x10c>)
 800c1c4:	2200      	movs	r2, #0
 800c1c6:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 800c1c8:	4b1f      	ldr	r3, [pc, #124]	; (800c248 <TRACE_TxCpltCallback+0x10c>)
 800c1ca:	2200      	movs	r2, #0
 800c1cc:	821a      	strh	r2, [r3, #16]
      }
    }

    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 800c1ce:	4b1e      	ldr	r3, [pc, #120]	; (800c248 <TRACE_TxCpltCallback+0x10c>)
 800c1d0:	789b      	ldrb	r3, [r3, #2]
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d115      	bne.n	800c202 <TRACE_TxCpltCallback+0xc6>
    {
#endif
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 800c1d6:	4b1c      	ldr	r3, [pc, #112]	; (800c248 <TRACE_TxCpltCallback+0x10c>)
 800c1d8:	8a5a      	ldrh	r2, [r3, #18]
 800c1da:	4b1b      	ldr	r3, [pc, #108]	; (800c248 <TRACE_TxCpltCallback+0x10c>)
 800c1dc:	8a1b      	ldrh	r3, [r3, #16]
 800c1de:	429a      	cmp	r2, r3
 800c1e0:	d908      	bls.n	800c1f4 <TRACE_TxCpltCallback+0xb8>
      {
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 800c1e2:	4b19      	ldr	r3, [pc, #100]	; (800c248 <TRACE_TxCpltCallback+0x10c>)
 800c1e4:	8a5a      	ldrh	r2, [r3, #18]
 800c1e6:	4b18      	ldr	r3, [pc, #96]	; (800c248 <TRACE_TxCpltCallback+0x10c>)
 800c1e8:	8a1b      	ldrh	r3, [r3, #16]
 800c1ea:	1ad3      	subs	r3, r2, r3
 800c1ec:	b29a      	uxth	r2, r3
 800c1ee:	4b16      	ldr	r3, [pc, #88]	; (800c248 <TRACE_TxCpltCallback+0x10c>)
 800c1f0:	829a      	strh	r2, [r3, #20]
 800c1f2:	e006      	b.n	800c202 <TRACE_TxCpltCallback+0xc6>
      }
      else /* TraceRdPtr > TraceWrPtr */
      {
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 800c1f4:	4b14      	ldr	r3, [pc, #80]	; (800c248 <TRACE_TxCpltCallback+0x10c>)
 800c1f6:	8a1b      	ldrh	r3, [r3, #16]
 800c1f8:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800c1fc:	b29a      	uxth	r2, r3
 800c1fe:	4b12      	ldr	r3, [pc, #72]	; (800c248 <TRACE_TxCpltCallback+0x10c>)
 800c200:	829a      	strh	r2, [r3, #20]
      }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    }
#endif
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 800c202:	4b11      	ldr	r3, [pc, #68]	; (800c248 <TRACE_TxCpltCallback+0x10c>)
 800c204:	8a1b      	ldrh	r3, [r3, #16]
 800c206:	461a      	mov	r2, r3
 800c208:	4b10      	ldr	r3, [pc, #64]	; (800c24c <TRACE_TxCpltCallback+0x110>)
 800c20a:	4413      	add	r3, r2
 800c20c:	61fb      	str	r3, [r7, #28]
 800c20e:	69bb      	ldr	r3, [r7, #24]
 800c210:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c212:	693b      	ldr	r3, [r7, #16]
 800c214:	f383 8810 	msr	PRIMASK, r3
}
 800c218:	bf00      	nop
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 800c21a:	4b0d      	ldr	r3, [pc, #52]	; (800c250 <TRACE_TxCpltCallback+0x114>)
 800c21c:	68db      	ldr	r3, [r3, #12]
 800c21e:	4a0a      	ldr	r2, [pc, #40]	; (800c248 <TRACE_TxCpltCallback+0x10c>)
 800c220:	8a92      	ldrh	r2, [r2, #20]
 800c222:	4611      	mov	r1, r2
 800c224:	69f8      	ldr	r0, [r7, #28]
 800c226:	4798      	blx	r3
 800c228:	e00a      	b.n	800c240 <TRACE_TxCpltCallback+0x104>
 800c22a:	69bb      	ldr	r3, [r7, #24]
 800c22c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	f383 8810 	msr	PRIMASK, r3
}
 800c234:	bf00      	nop
  }
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_PostSendHook();
 800c236:	f7f4 fc2b 	bl	8000a90 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 800c23a:	f000 f8a7 	bl	800c38c <TRACE_UnLock>
  }
}
 800c23e:	bf00      	nop
 800c240:	bf00      	nop
 800c242:	3720      	adds	r7, #32
 800c244:	46bd      	mov	sp, r7
 800c246:	bd80      	pop	{r7, pc}
 800c248:	2000058c 	.word	0x2000058c
 800c24c:	200005a4 	.word	0x200005a4
 800c250:	0800c85c 	.word	0x0800c85c

0800c254 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 800c254:	b480      	push	{r7}
 800c256:	b087      	sub	sp, #28
 800c258:	af00      	add	r7, sp, #0
 800c25a:	4603      	mov	r3, r0
 800c25c:	6039      	str	r1, [r7, #0]
 800c25e:	80fb      	strh	r3, [r7, #6]
  uint16_t freesize;
  int16_t ret = -1;
 800c260:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c264:	82bb      	strh	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c266:	f3ef 8310 	mrs	r3, PRIMASK
 800c26a:	60fb      	str	r3, [r7, #12]
  return(result);
 800c26c:	68fb      	ldr	r3, [r7, #12]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 800c26e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800c270:	b672      	cpsid	i
}
 800c272:	bf00      	nop

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 800c274:	4b35      	ldr	r3, [pc, #212]	; (800c34c <TRACE_AllocateBufer+0xf8>)
 800c276:	8a5a      	ldrh	r2, [r3, #18]
 800c278:	4b34      	ldr	r3, [pc, #208]	; (800c34c <TRACE_AllocateBufer+0xf8>)
 800c27a:	8a1b      	ldrh	r3, [r3, #16]
 800c27c:	429a      	cmp	r2, r3
 800c27e:	d11b      	bne.n	800c2b8 <TRACE_AllocateBufer+0x64>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 800c280:	4b32      	ldr	r3, [pc, #200]	; (800c34c <TRACE_AllocateBufer+0xf8>)
 800c282:	8a5b      	ldrh	r3, [r3, #18]
 800c284:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800c288:	82fb      	strh	r3, [r7, #22]
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 800c28a:	88fa      	ldrh	r2, [r7, #6]
 800c28c:	8afb      	ldrh	r3, [r7, #22]
 800c28e:	429a      	cmp	r2, r3
 800c290:	d33a      	bcc.n	800c308 <TRACE_AllocateBufer+0xb4>
 800c292:	4b2e      	ldr	r3, [pc, #184]	; (800c34c <TRACE_AllocateBufer+0xf8>)
 800c294:	8a1b      	ldrh	r3, [r3, #16]
 800c296:	88fa      	ldrh	r2, [r7, #6]
 800c298:	429a      	cmp	r2, r3
 800c29a:	d235      	bcs.n	800c308 <TRACE_AllocateBufer+0xb4>
    {
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 800c29c:	4b2b      	ldr	r3, [pc, #172]	; (800c34c <TRACE_AllocateBufer+0xf8>)
 800c29e:	2201      	movs	r2, #1
 800c2a0:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 800c2a2:	4b2a      	ldr	r3, [pc, #168]	; (800c34c <TRACE_AllocateBufer+0xf8>)
 800c2a4:	8a5a      	ldrh	r2, [r3, #18]
 800c2a6:	4b29      	ldr	r3, [pc, #164]	; (800c34c <TRACE_AllocateBufer+0xf8>)
 800c2a8:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 800c2aa:	4b28      	ldr	r3, [pc, #160]	; (800c34c <TRACE_AllocateBufer+0xf8>)
 800c2ac:	8a1b      	ldrh	r3, [r3, #16]
 800c2ae:	82fb      	strh	r3, [r7, #22]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 800c2b0:	4b26      	ldr	r3, [pc, #152]	; (800c34c <TRACE_AllocateBufer+0xf8>)
 800c2b2:	2200      	movs	r2, #0
 800c2b4:	825a      	strh	r2, [r3, #18]
 800c2b6:	e027      	b.n	800c308 <TRACE_AllocateBufer+0xb4>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 800c2b8:	4b24      	ldr	r3, [pc, #144]	; (800c34c <TRACE_AllocateBufer+0xf8>)
 800c2ba:	8a5a      	ldrh	r2, [r3, #18]
 800c2bc:	4b23      	ldr	r3, [pc, #140]	; (800c34c <TRACE_AllocateBufer+0xf8>)
 800c2be:	8a1b      	ldrh	r3, [r3, #16]
 800c2c0:	429a      	cmp	r2, r3
 800c2c2:	d91b      	bls.n	800c2fc <TRACE_AllocateBufer+0xa8>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 800c2c4:	4b21      	ldr	r3, [pc, #132]	; (800c34c <TRACE_AllocateBufer+0xf8>)
 800c2c6:	8a5b      	ldrh	r3, [r3, #18]
 800c2c8:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800c2cc:	82fb      	strh	r3, [r7, #22]
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 800c2ce:	88fa      	ldrh	r2, [r7, #6]
 800c2d0:	8afb      	ldrh	r3, [r7, #22]
 800c2d2:	429a      	cmp	r2, r3
 800c2d4:	d318      	bcc.n	800c308 <TRACE_AllocateBufer+0xb4>
 800c2d6:	4b1d      	ldr	r3, [pc, #116]	; (800c34c <TRACE_AllocateBufer+0xf8>)
 800c2d8:	8a1b      	ldrh	r3, [r3, #16]
 800c2da:	88fa      	ldrh	r2, [r7, #6]
 800c2dc:	429a      	cmp	r2, r3
 800c2de:	d213      	bcs.n	800c308 <TRACE_AllocateBufer+0xb4>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 800c2e0:	4b1a      	ldr	r3, [pc, #104]	; (800c34c <TRACE_AllocateBufer+0xf8>)
 800c2e2:	2201      	movs	r2, #1
 800c2e4:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 800c2e6:	4b19      	ldr	r3, [pc, #100]	; (800c34c <TRACE_AllocateBufer+0xf8>)
 800c2e8:	8a5a      	ldrh	r2, [r3, #18]
 800c2ea:	4b18      	ldr	r3, [pc, #96]	; (800c34c <TRACE_AllocateBufer+0xf8>)
 800c2ec:	801a      	strh	r2, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 800c2ee:	4b17      	ldr	r3, [pc, #92]	; (800c34c <TRACE_AllocateBufer+0xf8>)
 800c2f0:	8a1b      	ldrh	r3, [r3, #16]
 800c2f2:	82fb      	strh	r3, [r7, #22]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 800c2f4:	4b15      	ldr	r3, [pc, #84]	; (800c34c <TRACE_AllocateBufer+0xf8>)
 800c2f6:	2200      	movs	r2, #0
 800c2f8:	825a      	strh	r2, [r3, #18]
 800c2fa:	e005      	b.n	800c308 <TRACE_AllocateBufer+0xb4>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 800c2fc:	4b13      	ldr	r3, [pc, #76]	; (800c34c <TRACE_AllocateBufer+0xf8>)
 800c2fe:	8a1a      	ldrh	r2, [r3, #16]
 800c300:	4b12      	ldr	r3, [pc, #72]	; (800c34c <TRACE_AllocateBufer+0xf8>)
 800c302:	8a5b      	ldrh	r3, [r3, #18]
 800c304:	1ad3      	subs	r3, r2, r3
 800c306:	82fb      	strh	r3, [r7, #22]
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 800c308:	8afa      	ldrh	r2, [r7, #22]
 800c30a:	88fb      	ldrh	r3, [r7, #6]
 800c30c:	429a      	cmp	r2, r3
 800c30e:	d90f      	bls.n	800c330 <TRACE_AllocateBufer+0xdc>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 800c310:	4b0e      	ldr	r3, [pc, #56]	; (800c34c <TRACE_AllocateBufer+0xf8>)
 800c312:	8a5a      	ldrh	r2, [r3, #18]
 800c314:	683b      	ldr	r3, [r7, #0]
 800c316:	801a      	strh	r2, [r3, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 800c318:	4b0c      	ldr	r3, [pc, #48]	; (800c34c <TRACE_AllocateBufer+0xf8>)
 800c31a:	8a5a      	ldrh	r2, [r3, #18]
 800c31c:	88fb      	ldrh	r3, [r7, #6]
 800c31e:	4413      	add	r3, r2
 800c320:	b29b      	uxth	r3, r3
 800c322:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c326:	b29a      	uxth	r2, r3
 800c328:	4b08      	ldr	r3, [pc, #32]	; (800c34c <TRACE_AllocateBufer+0xf8>)
 800c32a:	825a      	strh	r2, [r3, #18]
    ret = 0;
 800c32c:	2300      	movs	r3, #0
 800c32e:	82bb      	strh	r3, [r7, #20]
 800c330:	693b      	ldr	r3, [r7, #16]
 800c332:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c334:	68bb      	ldr	r3, [r7, #8]
 800c336:	f383 8810 	msr	PRIMASK, r3
}
 800c33a:	bf00      	nop
    }
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
 800c33c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 800c340:	4618      	mov	r0, r3
 800c342:	371c      	adds	r7, #28
 800c344:	46bd      	mov	sp, r7
 800c346:	bc80      	pop	{r7}
 800c348:	4770      	bx	lr
 800c34a:	bf00      	nop
 800c34c:	2000058c 	.word	0x2000058c

0800c350 <TRACE_Lock>:
/**
 * @brief  Lock the trace buffer.
 * @retval None.
 */
static void TRACE_Lock(void)
{
 800c350:	b480      	push	{r7}
 800c352:	b085      	sub	sp, #20
 800c354:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c356:	f3ef 8310 	mrs	r3, PRIMASK
 800c35a:	607b      	str	r3, [r7, #4]
  return(result);
 800c35c:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 800c35e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800c360:	b672      	cpsid	i
}
 800c362:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock++;
 800c364:	4b08      	ldr	r3, [pc, #32]	; (800c388 <TRACE_Lock+0x38>)
 800c366:	8adb      	ldrh	r3, [r3, #22]
 800c368:	3301      	adds	r3, #1
 800c36a:	b29a      	uxth	r2, r3
 800c36c:	4b06      	ldr	r3, [pc, #24]	; (800c388 <TRACE_Lock+0x38>)
 800c36e:	82da      	strh	r2, [r3, #22]
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c374:	68bb      	ldr	r3, [r7, #8]
 800c376:	f383 8810 	msr	PRIMASK, r3
}
 800c37a:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 800c37c:	bf00      	nop
 800c37e:	3714      	adds	r7, #20
 800c380:	46bd      	mov	sp, r7
 800c382:	bc80      	pop	{r7}
 800c384:	4770      	bx	lr
 800c386:	bf00      	nop
 800c388:	2000058c 	.word	0x2000058c

0800c38c <TRACE_UnLock>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static void TRACE_UnLock(void)
{
 800c38c:	b480      	push	{r7}
 800c38e:	b085      	sub	sp, #20
 800c390:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c392:	f3ef 8310 	mrs	r3, PRIMASK
 800c396:	607b      	str	r3, [r7, #4]
  return(result);
 800c398:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 800c39a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800c39c:	b672      	cpsid	i
}
 800c39e:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock--;
 800c3a0:	4b08      	ldr	r3, [pc, #32]	; (800c3c4 <TRACE_UnLock+0x38>)
 800c3a2:	8adb      	ldrh	r3, [r3, #22]
 800c3a4:	3b01      	subs	r3, #1
 800c3a6:	b29a      	uxth	r2, r3
 800c3a8:	4b06      	ldr	r3, [pc, #24]	; (800c3c4 <TRACE_UnLock+0x38>)
 800c3aa:	82da      	strh	r2, [r3, #22]
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c3b0:	68bb      	ldr	r3, [r7, #8]
 800c3b2:	f383 8810 	msr	PRIMASK, r3
}
 800c3b6:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 800c3b8:	bf00      	nop
 800c3ba:	3714      	adds	r7, #20
 800c3bc:	46bd      	mov	sp, r7
 800c3be:	bc80      	pop	{r7}
 800c3c0:	4770      	bx	lr
 800c3c2:	bf00      	nop
 800c3c4:	2000058c 	.word	0x2000058c

0800c3c8 <TRACE_IsLocked>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
 800c3c8:	b480      	push	{r7}
 800c3ca:	af00      	add	r7, sp, #0
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 800c3cc:	4b05      	ldr	r3, [pc, #20]	; (800c3e4 <TRACE_IsLocked+0x1c>)
 800c3ce:	8adb      	ldrh	r3, [r3, #22]
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	bf14      	ite	ne
 800c3d4:	2301      	movne	r3, #1
 800c3d6:	2300      	moveq	r3, #0
 800c3d8:	b2db      	uxtb	r3, r3
}
 800c3da:	4618      	mov	r0, r3
 800c3dc:	46bd      	mov	sp, r7
 800c3de:	bc80      	pop	{r7}
 800c3e0:	4770      	bx	lr
 800c3e2:	bf00      	nop
 800c3e4:	2000058c 	.word	0x2000058c

0800c3e8 <memset>:
 800c3e8:	4402      	add	r2, r0
 800c3ea:	4603      	mov	r3, r0
 800c3ec:	4293      	cmp	r3, r2
 800c3ee:	d100      	bne.n	800c3f2 <memset+0xa>
 800c3f0:	4770      	bx	lr
 800c3f2:	f803 1b01 	strb.w	r1, [r3], #1
 800c3f6:	e7f9      	b.n	800c3ec <memset+0x4>

0800c3f8 <strncmp>:
 800c3f8:	b510      	push	{r4, lr}
 800c3fa:	b16a      	cbz	r2, 800c418 <strncmp+0x20>
 800c3fc:	3901      	subs	r1, #1
 800c3fe:	1884      	adds	r4, r0, r2
 800c400:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c404:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c408:	429a      	cmp	r2, r3
 800c40a:	d103      	bne.n	800c414 <strncmp+0x1c>
 800c40c:	42a0      	cmp	r0, r4
 800c40e:	d001      	beq.n	800c414 <strncmp+0x1c>
 800c410:	2a00      	cmp	r2, #0
 800c412:	d1f5      	bne.n	800c400 <strncmp+0x8>
 800c414:	1ad0      	subs	r0, r2, r3
 800c416:	bd10      	pop	{r4, pc}
 800c418:	4610      	mov	r0, r2
 800c41a:	e7fc      	b.n	800c416 <strncmp+0x1e>

0800c41c <__libc_init_array>:
 800c41c:	b570      	push	{r4, r5, r6, lr}
 800c41e:	4d0d      	ldr	r5, [pc, #52]	; (800c454 <__libc_init_array+0x38>)
 800c420:	4c0d      	ldr	r4, [pc, #52]	; (800c458 <__libc_init_array+0x3c>)
 800c422:	1b64      	subs	r4, r4, r5
 800c424:	10a4      	asrs	r4, r4, #2
 800c426:	2600      	movs	r6, #0
 800c428:	42a6      	cmp	r6, r4
 800c42a:	d109      	bne.n	800c440 <__libc_init_array+0x24>
 800c42c:	4d0b      	ldr	r5, [pc, #44]	; (800c45c <__libc_init_array+0x40>)
 800c42e:	4c0c      	ldr	r4, [pc, #48]	; (800c460 <__libc_init_array+0x44>)
 800c430:	f000 f826 	bl	800c480 <_init>
 800c434:	1b64      	subs	r4, r4, r5
 800c436:	10a4      	asrs	r4, r4, #2
 800c438:	2600      	movs	r6, #0
 800c43a:	42a6      	cmp	r6, r4
 800c43c:	d105      	bne.n	800c44a <__libc_init_array+0x2e>
 800c43e:	bd70      	pop	{r4, r5, r6, pc}
 800c440:	f855 3b04 	ldr.w	r3, [r5], #4
 800c444:	4798      	blx	r3
 800c446:	3601      	adds	r6, #1
 800c448:	e7ee      	b.n	800c428 <__libc_init_array+0xc>
 800c44a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c44e:	4798      	blx	r3
 800c450:	3601      	adds	r6, #1
 800c452:	e7f2      	b.n	800c43a <__libc_init_array+0x1e>
 800c454:	0800c9ec 	.word	0x0800c9ec
 800c458:	0800c9ec 	.word	0x0800c9ec
 800c45c:	0800c9ec 	.word	0x0800c9ec
 800c460:	0800c9f0 	.word	0x0800c9f0

0800c464 <memcpy>:
 800c464:	440a      	add	r2, r1
 800c466:	4291      	cmp	r1, r2
 800c468:	f100 33ff 	add.w	r3, r0, #4294967295
 800c46c:	d100      	bne.n	800c470 <memcpy+0xc>
 800c46e:	4770      	bx	lr
 800c470:	b510      	push	{r4, lr}
 800c472:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c476:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c47a:	4291      	cmp	r1, r2
 800c47c:	d1f9      	bne.n	800c472 <memcpy+0xe>
 800c47e:	bd10      	pop	{r4, pc}

0800c480 <_init>:
 800c480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c482:	bf00      	nop
 800c484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c486:	bc08      	pop	{r3}
 800c488:	469e      	mov	lr, r3
 800c48a:	4770      	bx	lr

0800c48c <_fini>:
 800c48c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c48e:	bf00      	nop
 800c490:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c492:	bc08      	pop	{r3}
 800c494:	469e      	mov	lr, r3
 800c496:	4770      	bx	lr
